{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfe0 Home","text":"What the f*ck Python! \ud83d\ude31 <p>Exploring and understanding Python through surprising snippets.</p>"},{"location":"#sections","title":"Sections","text":"<p>English</p><p>Original language</p> <p>Translations</p><p>Other languages</p> <p>Website</p><p>Interactive Website</p> <p>Notebook</p><p>Interactive Notebook</p> <p>CLI</p><p>Installation</p>"},{"location":"CN/","title":"Chinese","text":"What the f*ck Python! \ud83d\udc0d <p>\u4e00\u4e9b\u6709\u8da3\u4e14\u9c9c\u4e3a\u4eba\u77e5\u7684 Python \u7279\u6027.</p> <p>\u7ffb\u8bd1\u7248\u672c: English | Vietnamese Ti\u1ebfng Vi\u1ec7t | Spanish Espa\u00f1ol | Korean \ud55c\uad6d\uc5b4 | Russian \u0420\u0443\u0441\u0441\u043a\u0438\u0439 | German Deutsch | Add translation</p> <p>\u5176\u4ed6\u6a21\u5f0f: Interactive </p> <p> </p> <p>Python, \u662f\u4e00\u4e2a\u8bbe\u8ba1\u4f18\u7f8e\u7684\u89e3\u91ca\u578b\u9ad8\u7ea7\u8bed\u8a00, \u5b83\u63d0\u4f9b\u4e86\u5f88\u591a\u80fd\u8ba9\u7a0b\u5e8f\u5458\u611f\u5230\u8212\u9002\u7684\u529f\u80fd\u7279\u6027. \u4f46\u6709\u7684\u65f6\u5019, Python \u7684\u4e00\u4e9b\u8f93\u51fa\u7ed3\u679c\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\u4f3c\u4e4e\u5e76\u4e0d\u662f\u90a3\u4e48\u4e00\u76ee\u4e86\u7136.</p> <p>\u8fd9\u4e2a\u6709\u8da3\u7684\u9879\u76ee\u610f\u5728\u6536\u96c6 Python \u4e2d\u90a3\u4e9b\u96be\u4ee5\u7406\u89e3\u548c\u53cd\u4eba\u7c7b\u76f4\u89c9\u7684\u4f8b\u5b50\u4ee5\u53ca\u9c9c\u4e3a\u4eba\u77e5\u7684\u529f\u80fd\u7279\u6027, \u5e76\u5c1d\u8bd5\u8ba8\u8bba\u8fd9\u4e9b\u73b0\u8c61\u80cc\u540e\u771f\u6b63\u7684\u539f\u7406!</p> <p>\u867d\u7136\u4e0b\u9762\u7684\u6709\u4e9b\u4f8b\u5b50\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u8ba9\u4f60\u89c9\u5f97 WTFs, \u4f46\u5b83\u4eec\u4f9d\u7136\u6709\u53ef\u80fd\u4f1a\u544a\u8bc9\u4f60\u4e00\u4e9b\u4f60\u6240\u4e0d\u77e5\u9053\u7684 Python \u6709\u8da3\u7279\u6027.  \u6211\u89c9\u5f97\u8fd9\u662f\u4e00\u79cd\u5b66\u4e60\u7f16\u7a0b\u8bed\u8a00\u5185\u90e8\u539f\u7406\u7684\u597d\u529e\u6cd5, \u800c\u4e14\u6211\u76f8\u4fe1\u4f60\u4e5f\u4f1a\u4ece\u4e2d\u83b7\u5f97\u4e50\u8da3!</p> <p>\u5982\u679c\u60a8\u662f\u4e00\u4f4d\u7ecf\u9a8c\u6bd4\u8f83\u4e30\u5bcc\u7684 Python \u7a0b\u5e8f\u5458, \u4f60\u53ef\u4ee5\u5c1d\u8bd5\u6311\u6218\u770b\u662f\u5426\u80fd\u4e00\u6b21\u5c31\u627e\u5230\u4f8b\u5b50\u7684\u6b63\u786e\u7b54\u6848. \u4f60\u53ef\u80fd\u5bf9\u5176\u4e2d\u7684\u4e00\u4e9b\u4f8b\u5b50\u5df2\u7ecf\u6bd4\u8f83\u719f\u6089\u4e86, \u90a3\u8fd9\u4e5f\u8bb8\u80fd\u5524\u8d77\u4f60\u5f53\u5e74\u8e29\u8fd9\u4e9b\u5751\u65f6\u7684\u751c\u871c\u56de\u5fc6 :sweat_smile:</p> <p>PS: \u5982\u679c\u4f60\u4e0d\u662f\u7b2c\u4e00\u6b21\u8bfb\u4e86, \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u83b7\u53d6\u53d8\u52a8\u5185\u5bb9.</p> <p>\u90a3\u4e48, \u8ba9\u6211\u4eec\u5f00\u59cb\u5427...</p>"},{"location":"CN/#table-of-contents","title":"Table of Contents/\u76ee\u5f55","text":"<ul> <li>Table of Contents/\u76ee\u5f55</li> <li>Structure of the Examples/\u793a\u4f8b\u7ed3\u6784</li> <li>Usage/\u7528\u6cd5</li> <li>\ud83d\udc40 Examples/\u793a\u4f8b<ul> <li>Section: Strain your brain!/\u5927\u8111\u8fd0\u52a8!<ul> <li>&gt; First things first!/\u8981\u4e8b\u4f18\u5148 *</li> <li>&gt; Strings can be tricky sometimes/\u5fae\u5999\u7684\u5b57\u7b26\u4e32 *</li> <li>&gt; Be careful with chained operations/\u5c0f\u5fc3\u94fe\u5f0f\u64cd\u4f5c</li> <li>&gt; How not to use <code>is</code> operator/\u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528 <code>is</code> \u64cd\u4f5c\u7b26</li> <li>&gt; Hash brownies/\u662f\u65f6\u5019\u6765\u70b9\u86cb\u7cd5\u4e86!</li> <li>&gt; Deep down, we're all the same./\u672c\u8d28\u4e0a,\u6211\u4eec\u90fd\u4e00\u6837. *</li> <li>&gt; Disorder within order/\u6709\u5e8f\u4e2d\u6f5c\u85cf\u7740\u65e0\u5e8f *</li> <li>&gt; Keep trying.../\u4e0d\u505c\u7684try *</li> <li>&gt; For what?/\u4e3a\u4ec0\u4e48?</li> <li>&gt; Evaluation time discrepancy/\u6267\u884c\u65f6\u673a\u5dee\u5f02</li> <li>&gt; <code>is not ...</code> is not <code>is (not ...)</code> / <code>is not ...</code> \u4e0d\u662f <code>is (not ...)</code></li> <li>&gt; A tic-tac-toe where X wins in the first attempt!/\u4e00\u8e74\u5373\u81f3!</li> <li>&gt; Schr\u00f6dinger's variable/\u859b\u5b9a\u8c14\u7684\u53d8\u91cf *</li> <li>&gt; The chicken-egg problem/\u5148\u6709\u9e21\u8fd8\u662f\u5148\u6709\u86cb *</li> <li>&gt; Subclass relationships/\u5b50\u7c7b\u5173\u7cfb *</li> <li>&gt; Methods equality and identity/\u65b9\u6cd5\u7684\u76f8\u7b49\u6027\u548c\u552f\u4e00\u6027 *</li> <li>&gt; All-true-ation/\u8fd4\u56deTrue\u7684all\u51fd\u6570 *</li> <li>&gt; The surprising comma/\u610f\u5916\u7684\u9017\u53f7</li> <li>&gt; Strings and the backslashes/\u5b57\u7b26\u4e32\u4e0e\u53cd\u659c\u6760</li> <li>&gt; not knot!/\u522b\u7ea0\u7ed3!</li> <li>&gt; Half triple-quoted strings/\u4e09\u4e2a\u5f15\u53f7</li> <li>&gt; What's wrong with booleans?/\u5e03\u5c14\u4f60\u548b\u4e86?</li> <li>&gt; Class attributes and instance attributes/\u7c7b\u5c5e\u6027\u548c\u5b9e\u4f8b\u5c5e\u6027</li> <li>&gt; yielding None/\u751f\u6210 None</li> <li>&gt; Yielding from... return!/\u751f\u6210\u5668\u91cc\u7684return *</li> <li>&gt; Nan-reflexivity/Nan\u7684\u81ea\u53cd\u6027</li> <li>&gt; Mutating the immutable!/\u5f3a\u4eba\u6240\u96be</li> <li>&gt; The disappearing variable from outer scope/\u6d88\u5931\u7684\u5916\u90e8\u53d8\u91cf</li> <li>&gt; The mysterious key type conversion/\u795e\u79d8\u7684\u952e\u578b\u8f6c\u6362 *</li> <li>&gt; Let's see if you can guess this?/\u770b\u770b\u4f60\u80fd\u5426\u731c\u5230\u8fd9\u4e00\u70b9?</li> <li>&gt; Exceeds the limit for integer string conversion/\u6574\u578b\u8f6c\u5b57\u7b26\u4e32\u8d8a\u754c</li> </ul> </li> <li>Section: Slippery Slopes/\u6ed1\u5761\u8c2c\u8bef<ul> <li>&gt; Modifying a dictionary while iterating over it/\u8fed\u4ee3\u5b57\u5178\u65f6\u7684\u4fee\u6539</li> <li>&gt; Stubborn <code>del</code> operator/\u575a\u5f3a\u7684 <code>del</code> *</li> <li>&gt; The out of scope variable/\u5916\u90e8\u4f5c\u7528\u57df\u53d8\u91cf</li> <li>&gt; Deleting a list item while iterating/\u8fed\u4ee3\u5217\u8868\u65f6\u5220\u9664\u5143\u7d20</li> <li>&gt; Lossy zip of iterators/\u4e22\u4e09\u843d\u56db\u7684zip *</li> <li>&gt; Loop variables leaking out!/\u5faa\u73af\u53d8\u91cf\u6cc4\u6f0f!</li> <li>&gt; Beware of default mutable arguments!/\u5f53\u5fc3\u9ed8\u8ba4\u7684\u53ef\u53d8\u53c2\u6570!</li> <li>&gt; Catching the Exceptions/\u6355\u83b7\u5f02\u5e38</li> <li>&gt; Same operands, different story!/\u540c\u4eba\u4e0d\u540c\u547d!</li> <li>&gt; Name resolution ignoring class scope/\u5ffd\u7565\u7c7b\u4f5c\u7528\u57df\u7684\u540d\u79f0\u89e3\u6790</li> <li>&gt; Rounding like a banker/\u50cf\u94f6\u884c\u5bb6\u4e00\u6837\u820d\u5165 *</li> <li>&gt; Needles in a Haystack/\u5927\u6d77\u635e\u9488</li> <li>&gt; Splitsies/\u5206\u5272\u51fd\u6570</li> <li>&gt; Wild imports/\u901a\u914d\u7b26\u5bfc\u5165\u65b9\u5f0f *</li> <li>&gt; All sorted?/\u90fd\u6392\u5e8f\u4e86\u5417\uff1f *</li> <li>&gt; Midnight time doesn't exist?/\u4e0d\u5b58\u5728\u7684\u5348\u591c?</li> </ul> </li> <li>Section: The Hidden treasures!/\u9690\u85cf\u7684\u5b9d\u85cf!<ul> <li>&gt; Okay Python, Can you make me fly?/Python, \u53ef\u5426\u5e26\u6211\u98de? *</li> <li>&gt; <code>goto</code>, but why?/<code>goto</code>, \u4f46\u4e3a\u4ec0\u4e48? *</li> <li>&gt; Brace yourself!/\u505a\u597d\u601d\u60f3\u51c6\u5907 *</li> <li>&gt; Let's meet Friendly Language Uncle For Life/\u8ba9\u751f\u6d3b\u66f4\u53cb\u597d *</li> <li>&gt; Even Python understands that love is complicated/\u8fdePython\u4e5f\u77e5\u9053\u7231\u662f\u96be\u8a00\u7684 *</li> <li>&gt; Yes, it exists!/\u662f\u7684, \u5b83\u5b58\u5728!</li> <li>&gt; Ellipsis/\u7701\u7565 *</li> <li>&gt; Inpinity/\u65e0\u9650 *</li> <li>&gt; Let's mangle/\u4fee\u9970\u65f6\u95f4! *</li> </ul> </li> <li>Section: Appearances are deceptive!/\u5916\u8868\u662f\u9760\u4e0d\u4f4f\u7684!<ul> <li>&gt; Skipping lines?/\u8df3\u8fc7\u4e00\u884c?</li> <li>&gt; Teleportation/\u7a7a\u95f4\u79fb\u52a8 *</li> <li>&gt; Well, something is fishy.../\u55ef, \u6709\u4e9b\u53ef\u7591...</li> </ul> </li> <li>Section: Miscellaneous/\u6742\u9879<ul> <li>&gt; <code>+=</code> is faster/\u66f4\u5feb\u7684 <code>+=</code> </li> <li>&gt; Let's make a giant string!/\u6765\u505a\u4e2a\u5de8\u5927\u7684\u5b57\u7b26\u4e32\u5427!</li> <li>&gt; Slowing down <code>dict</code> lookups/\u8ba9\u5b57\u5178\u7684\u67e5\u627e\u6162\u4e0b\u6765 *</li> <li>&gt; Bloating instance <code>dict</code>s/\u53d8\u81c3\u80bf\u7684<code>dict</code>\u5b9e\u4f8b\u4eec *</li> <li>&gt; Minor Ones/\u5c0f\u77e5\u8bc6\u70b9</li> </ul> </li> </ul> </li> <li>Contributing/\u8d21\u732e</li> <li>Acknowledgements/\u81f4\u8c22</li> <li>\ud83c\udf93 License/\u8bb8\u53ef<ul> <li>Help/\u5e2e\u52a9</li> <li>Surprise your geeky pythonist friends?/\u60f3\u7ed9\u4f60\u7684\u6781\u5ba2\u670b\u53cb\u4e00\u4e2a\u60ca\u559c?</li> <li>Need a pdf version?/\u9700\u8981\u6765\u4e00\u4efdpdf\u7248\u7684?</li> <li>Follow Commit/\u8ffd\u8e2aCommit</li> <li>996.icu</li> </ul> </li> </ul>"},{"location":"CN/#structure-of-the-examples","title":"Structure of the Examples/\u793a\u4f8b\u7ed3\u6784","text":"<p>\u6240\u6709\u793a\u4f8b\u7684\u7ed3\u6784\u90fd\u5982\u4e0b\u6240\u793a:</p> <p>\u6ce8\u610f: \u6240\u6709\u7684\u793a\u4f8b\u90fd\u5728 Python 3.5.2 \u7248\u672c\u7684\u4ea4\u4e92\u89e3\u91ca\u5668\u4e0a\u6d4b\u8bd5\u8fc7, \u5982\u679c\u4e0d\u7279\u522b\u8bf4\u660e\u5e94\u8be5\u9002\u7528\u4e8e\u6240\u6709 Python \u7248\u672c.</p>"},{"location":"CN/#_1","title":"&gt; \u4e00\u4e2a\u7cbe\u9009\u7684\u6807\u9898 *","text":"<p>\u6807\u9898\u672b\u5c3e\u7684\u661f\u53f7\u8868\u793a\u8be5\u793a\u4f8b\u5728\u7b2c\u4e00\u7248\u4e2d\u4e0d\u5b58\u5728\uff0c\u662f\u6700\u8fd1\u6dfb\u52a0\u7684.</p> <pre><code># \u51c6\u5907\u4ee3\u7801.\n# \u91ca\u653e\u9b54\u6cd5...\n</code></pre> <p>Output (Python version): <pre><code>&gt;&gt;&gt; \u89e6\u53d1\u8bed\u53e5\n\u51fa\u4e4e\u610f\u6599\u7684\u8f93\u51fa\u7ed3\u679c\n</code></pre> (\u53ef\u9009): \u5bf9\u610f\u5916\u8f93\u51fa\u7ed3\u679c\u7684\u7b80\u77ed\u63cf\u8ff0.</p>"},{"location":"CN/#_2","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u7b80\u8981\u8bf4\u660e\u53d1\u751f\u4e86\u4ec0\u4e48\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f.   <pre><code>\u5982\u6709\u5fc5\u8981, \u4e3e\u4f8b\u8bf4\u660e\n</code></pre> Output: <pre><code>&gt;&gt;&gt; \u89e6\u53d1\u8bed\u53e5 # \u4e00\u4e9b\u8ba9\u9b54\u6cd5\u53d8\u5f97\u5bb9\u6613\u7406\u89e3\u7684\u4f8b\u5b50\n# \u4e00\u4e9b\u6b63\u5e38\u7684\u8f93\u5165\n</code></pre></li> </ul>"},{"location":"CN/#usage","title":"Usage/\u7528\u6cd5","text":"<p>\u6211\u4e2a\u4eba\u5efa\u8bae, \u6700\u597d\u4f9d\u6b21\u9605\u8bfb\u4e0b\u9762\u7684\u793a\u4f8b, \u5e76\u5bf9\u6bcf\u4e2a\u793a\u4f8b: - \u4ed4\u7ec6\u9605\u8bfb\u8bbe\u7f6e\u4f8b\u5b50\u6700\u5f00\u59cb\u7684\u4ee3\u7801.  \u5982\u679c\u60a8\u662f\u4e00\u4f4d\u7ecf\u9a8c\u4e30\u5bcc\u7684 Python \u7a0b\u5e8f\u5458, \u90a3\u4e48\u5927\u591a\u6570\u65f6\u5019\u60a8\u90fd\u80fd\u6210\u529f\u9884\u671f\u5230\u540e\u9762\u7684\u7ed3\u679c. - \u9605\u8bfb\u8f93\u51fa\u7ed3\u679c,   + \u786e\u8ba4\u7ed3\u679c\u662f\u5426\u5982\u4f60\u6240\u6599.   + \u786e\u8ba4\u4f60\u662f\u5426\u77e5\u9053\u8fd9\u80cc\u540e\u7684\u539f\u7406.     - \u5982\u679c\u4e0d\u77e5\u9053, \u6df1\u547c\u5438\u7136\u540e\u9605\u8bfb\u8bf4\u660e (\u5982\u679c\u4f60\u8fd8\u662f\u770b\u4e0d\u660e\u767d, \u522b\u6c89\u9ed8! \u53ef\u4ee5\u5728\u8fd9\u63d0\u4e2a issue).     - \u5982\u679c\u77e5\u9053, \u7ed9\u81ea\u5df1\u70b9\u5956\u52b1, \u7136\u540e\u53bb\u770b\u4e0b\u4e00\u4e2a\u4f8b\u5b50.</p> <p>PS: \u4f60\u4e5f\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u9605\u8bfb WTFpython. \u6211\u4eec\u6709 pypi \u5305 \u548c npm \u5305(\u652f\u6301\u4ee3\u7801\u9ad8\u4eae).(\u8bd1: \u8fd9\u4e24\u4e2a\u90fd\u662f\u82f1\u6587\u7248\u7684)</p> <p>\u5b89\u88c5 npm \u5305 <code>wtfpython</code> <pre><code>$ npm install -g wtfpython\n</code></pre></p> <p>\u6216\u8005, \u5b89\u88c5 pypi \u5305 <code>wtfpython</code> <pre><code>$ pip install wtfpython -U\n</code></pre></p> <p>\u73b0\u5728, \u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c <code>wtfpython</code>, \u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u6d4f\u89c8\u4e86.</p>"},{"location":"CN/#examples","title":"\ud83d\udc40 Examples/\u793a\u4f8b","text":""},{"location":"CN/#section-strain-your-brain","title":"Section: Strain your brain!/\u5927\u8111\u8fd0\u52a8!","text":""},{"location":"CN/#first-things-first","title":"&gt; First things first!/\u8981\u4e8b\u4f18\u5148 *","text":"<p>\u4f17\u6240\u5468\u77e5\uff0cPython 3.8 \u63a8\u51fa\"\u6d77\u8c61\"\u8fd0\u7b97\u7b26 (<code>:=</code>) \u65b9\u4fbf\u6613\u7528\uff0c\u8ba9\u6211\u4eec\u4e00\u8d77\u770b\u770b\u3002</p> <p>1.</p> <pre><code># Python \u7248\u672c 3.8+\n\n&gt;&gt;&gt; a = \"wtf_walrus\"\n&gt;&gt;&gt; a\n'wtf_walrus'\n\n&gt;&gt;&gt; a := \"wtf_walrus\"\nFile \"&lt;stdin&gt;\", line 1\n    a := \"wtf_walrus\"\n      ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; (a := \"wtf_walrus\") # \u8be5\u8bed\u53e5\u6709\u6548\n'wtf_walrus'\n&gt;&gt;&gt; a\n'wtf_walrus'\n</code></pre> <p>2 .</p> <pre><code># Python \u7248\u672c 3.8+\n\n&gt;&gt;&gt; a = 6, 9\n&gt;&gt;&gt; a\n(6, 9)\n\n&gt;&gt;&gt; (a := 6, 9)\n(6, 9)\n&gt;&gt;&gt; a\n6\n\n&gt;&gt;&gt; a, b = 6, 9 # \u5178\u578b\u62c6\u5305\u64cd\u4f5c\n&gt;&gt;&gt; a, b\n(6, 9)\n&gt;&gt;&gt; (a, b = 16, 19) # \u51fa\u9519\u5566\n  File \"&lt;stdin&gt;\", line 1\n    (a, b = 16, 19)\n          ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; (a, b := 16, 19) # \u8fd9\u91cc\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u5947\u602a\u7684\u4e09\u5143\u7ec4\n(6, 16, 19)\n\n&gt;&gt;&gt; a # a\u503c\u4ecd\u7136\u6ca1\u53d8?\n6\n\n&gt;&gt;&gt; b\n16\n</code></pre>"},{"location":"CN/#_3","title":"\ud83d\udca1 \u8bf4\u660e","text":"<p>\u201c\u6d77\u8c61\u201d\u8fd0\u7b97\u7b26\u7b80\u4ecb</p> <p>\u6d77\u8c61\u8fd0\u7b97\u7b26 (<code>:=</code>) \u5728Python 3.8\u4e2d\u88ab\u5f15\u5165\uff0c\u7528\u6765\u5728\u8868\u8fbe\u5f0f\u4e2d\u4e3a\u53d8\u91cf\u8d4b\u503c\u3002</p> <pre><code>def some_func():\n        # \u5047\u8bbe\u8fd9\u513f\u6709\u4e00\u4e9b\u8017\u65f6\u7684\u8ba1\u7b97\n        # time.sleep(1000)\n        return 5\n\n# \u5f15\u5165\u201c\u6d77\u8c61\u201d\u8fd0\u7b97\u7b26\u524d\u7684\u4f8b\u5b50\nif some_func():\n        print(some_func()) # \u7cdf\u7cd5\u7684\u6848\u4f8b\u2014\u2014\u51fd\u6570\u8fd0\u7b97\u4e86\u4e24\u6b21\n\n# \u6216\u8005\uff0c\u52a0\u4ee5\u6539\u8fdb\uff1a\na = some_func()\nif a:\n    print(a)\n\n# \u6709\u4e86\u201c\u6d77\u8c61\u201d\u8fd0\u7b97\u7b26\uff0c\u4f60\u53ef\u4ee5\u5199\u7684\u66f4\u7b80\u6d01\uff1a\nif a := some_func():\n        print(a)\n</code></pre> <p>\u8f93\u51fa (&gt; Python 3.8):</p> <p><pre><code>5\n5\n5\n</code></pre> \u8fd9\u6837\u65e2\u51cf\u5c11\u4e86\u4e00\u884c\u4ee3\u7801\uff0c\u53c8\u907f\u514d\u4e86\u4e24\u6b21\u8c03\u7528 <code>some_func</code> \u51fd\u6570\u3002</p> <ul> <li> <p>\u5728\u9876\u5c42\u7684\u65e0\u62ec\u53f7\u8d4b\u503c\u64cd\u4f5c\uff08\u4f7f\u7528\u201c\u6d77\u8c61\u201d\u8fd0\u7b97\u7b26\uff09\u88ab\u9650\u5236\uff0c\u56e0\u6b64\u4f8b1\u4e2d\u7684 <code>a := \"wtf_walrus\"</code> \u51fa\u73b0\u4e86 <code>SyntaxError</code> \u3002\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u3002\u5b83\u5c31\u80fd\u6b63\u5e38\u5de5\u4f5c\u4e86\u3002</p> </li> <li> <p>\u4e00\u822c\u7684\uff0c\u5305\u542b <code>=</code> \u64cd\u4f5c\u7684\u8868\u8fbe\u5f0f\u662f\u4e0d\u80fd\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u7684\uff0c\u56e0\u6b64 <code>(a, b = 6, 9)</code> \u4e2d\u51fa\u73b0\u4e86\u8bed\u6cd5\u9519\u8bef\u3002</p> </li> <li> <p>\u201c\u6d77\u8c61\u201d\u8fd0\u7b97\u7b26\u7684\u8bed\u6cd5\u5f62\u5f0f\u4e3a\uff1a<code>NAME:= expr</code>\uff0c<code>NAME</code> \u662f\u4e00\u4e2a\u6709\u6548\u7684\u6807\u8bc6\u7b26\uff0c\u800c <code>expr</code> \u662f\u4e00\u4e2a\u6709\u6548\u7684\u8868\u8fbe\u5f0f\u3002 \u56e0\u6b64\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4e0d\u652f\u6301\u53ef\u8fed\u4ee3\u7684\u6253\u5305\u548c\u62c6\u5305\u3002</p> </li> <li> <p><code>(a := 6, 9)</code> \u7b49\u4ef7\u4e8e <code>((a := 6), 9)</code> \uff0c\u6700\u7ec8\u5f97\u5230 <code>(a, 9)</code> (\u5176\u4e2d <code>a</code> \u7684\u503c\u4e3a6)</p> <pre><code>&gt;&gt;&gt; (a := 6, 9) == ((a := 6), 9)\nTrue\n&gt;&gt;&gt; x = (a := 696, 9)\n&gt;&gt;&gt; x\n(696, 9)\n&gt;&gt;&gt; x[0] is a # \u4e24\u4e2a\u53d8\u91cf\u6307\u5411\u540c\u4e00\u5185\u5b58\u7a7a\u95f4\nTrue\n</code></pre> </li> <li> <p>\u7c7b\u4f3c\u7684\uff0c <code>(a, b := 16, 19)</code> \u7b49\u4ef7\u4e8e <code>(a, (b := 16), 19)</code> \uff0c\u53ea\u662f\u4e00\u4e2a\u4e09\u5143\u7ec4\u3002 </p> </li> </ul>"},{"location":"CN/#strings-can-be-tricky-sometimes","title":"&gt; Strings can be tricky sometimes/\u5fae\u5999\u7684\u5b57\u7b26\u4e32 *","text":"<p>1. <pre><code>&gt;&gt;&gt; a = \"some_string\"\n&gt;&gt;&gt; id(a)\n140420665652016\n&gt;&gt;&gt; id(\"some\" + \"_\" + \"string\") # \u6ce8\u610f\u4e24\u4e2a\u7684id\u503c\u662f\u76f8\u540c\u7684.\n140420665652016\n</code></pre></p> <p>2. <pre><code>&gt;&gt;&gt; a = \"wtf\"\n&gt;&gt;&gt; b = \"wtf\"\n&gt;&gt;&gt; a is b\nTrue\n\n&gt;&gt;&gt; a = \"wtf!\"\n&gt;&gt;&gt; b = \"wtf!\"\n&gt;&gt;&gt; a is b\nFalse\n\n&gt;&gt;&gt; a, b = \"wtf!\", \"wtf!\"\n&gt;&gt;&gt; a is b \nTrue # 3.7 \u7248\u672c\u8fd4\u56de\u7ed3\u679c\u4e3a False.\n</code></pre></p> <p>3. <pre><code>&gt;&gt;&gt; 'a' * 20 is 'aaaaaaaaaaaaaaaaaaaa'\nTrue\n&gt;&gt;&gt; 'a' * 21 is 'aaaaaaaaaaaaaaaaaaaaa'\nFalse # 3.7 \u7248\u672c\u8fd4\u56de\u7ed3\u679c\u4e3a True\n</code></pre></p> <p>\u5f88\u597d\u7406\u89e3, \u5bf9\u5427?</p>"},{"location":"CN/#_4","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u8fd9\u4e9b\u884c\u4e3a\u662f\u7531\u4e8e Cpython \u5728\u7f16\u8bd1\u4f18\u5316\u65f6, \u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u5c1d\u8bd5\u4f7f\u7528\u5df2\u7ecf\u5b58\u5728\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61\u800c\u4e0d\u662f\u6bcf\u6b21\u90fd\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61. (\u8fd9\u79cd\u884c\u4e3a\u88ab\u79f0\u4f5c\u5b57\u7b26\u4e32\u7684\u9a7b\u7559[string interning])</li> <li>\u53d1\u751f\u9a7b\u7559\u4e4b\u540e, \u8bb8\u591a\u53d8\u91cf\u53ef\u80fd\u6307\u5411\u5185\u5b58\u4e2d\u7684\u76f8\u540c\u5b57\u7b26\u4e32\u5bf9\u8c61. (\u4ece\u800c\u8282\u7701\u5185\u5b58)</li> <li>\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d, \u5b57\u7b26\u4e32\u662f\u9690\u5f0f\u9a7b\u7559\u7684. \u4f55\u65f6\u53d1\u751f\u9690\u5f0f\u9a7b\u7559\u5219\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0. \u8fd9\u91cc\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u7528\u6765\u731c\u6d4b\u5b57\u7b26\u4e32\u662f\u5426\u4f1a\u88ab\u9a7b\u7559:</li> <li>\u6240\u6709\u957f\u5ea6\u4e3a 0 \u548c\u957f\u5ea6\u4e3a 1 \u7684\u5b57\u7b26\u4e32\u90fd\u88ab\u9a7b\u7559.</li> <li>\u5b57\u7b26\u4e32\u5728\u7f16\u8bd1\u65f6\u88ab\u5b9e\u73b0 (<code>'wtf'</code> \u5c06\u88ab\u9a7b\u7559, \u4f46\u662f <code>''.join(['w', 't', 'f'])</code> \u5c06\u4e0d\u4f1a\u88ab\u9a7b\u7559)</li> <li> <p>\u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\u65f6\u5c06\u4f1a\u9a7b\u7559. \u6240\u4ee5 <code>'wtf!'</code> \u7531\u4e8e\u5305\u542b <code>!</code> \u800c\u672a\u88ab\u9a7b\u7559. \u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230 CPython \u5bf9\u6b64\u89c4\u5219\u7684\u5b9e\u73b0.</p> <p></p> </li> <li> <p>\u5f53\u5728\u540c\u4e00\u884c\u5c06 <code>a</code> \u548c <code>b</code> \u7684\u503c\u8bbe\u7f6e\u4e3a <code>\"wtf!\"</code> \u7684\u65f6\u5019, Python \u89e3\u91ca\u5668\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61, \u7136\u540e\u540c\u65f6\u5f15\u7528\u7b2c\u4e8c\u4e2a\u53d8\u91cf(\u8bd1: \u4ec5\u9002\u7528\u4e8e3.7\u4ee5\u4e0b, \u8be6\u7ec6\u60c5\u51b5\u8bf7\u770b\u8fd9\u91cc). \u5982\u679c\u4f60\u5728\u4e0d\u540c\u7684\u884c\u4e0a\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c, \u5b83\u5c31\u4e0d\u4f1a\u201c\u77e5\u9053\u201d\u5df2\u7ecf\u6709\u4e00\u4e2a <code>wtf\uff01</code> \u5bf9\u8c61 (\u56e0\u4e3a <code>\"wtf!\"</code> \u4e0d\u662f\u6309\u7167\u4e0a\u9762\u63d0\u5230\u7684\u65b9\u5f0f\u88ab\u9690\u5f0f\u9a7b\u7559\u7684). \u5b83\u662f\u4e00\u79cd\u7f16\u8bd1\u5668\u4f18\u5316, \u7279\u522b\u9002\u7528\u4e8e\u4ea4\u4e92\u5f0f\u73af\u5883.</p> </li> <li>\u5e38\u91cf\u6298\u53e0(constant folding) \u662f Python \u4e2d\u7684\u4e00\u79cd \u7aa5\u5b54\u4f18\u5316(peephole optimization) \u6280\u672f. \u8fd9\u610f\u5473\u7740\u5728\u7f16\u8bd1\u65f6\u8868\u8fbe\u5f0f <code>'a'*20</code> \u4f1a\u88ab\u66ff\u6362\u4e3a <code>'aaaaaaaaaaaaaaaaaaaa'</code> \u4ee5\u51cf\u5c11\u8fd0\u884c\u65f6\u7684\u65f6\u949f\u5468\u671f. \u53ea\u6709\u957f\u5ea6\u5c0f\u4e8e 20 \u7684\u5b57\u7b26\u4e32\u624d\u4f1a\u53d1\u751f\u5e38\u91cf\u6298\u53e0. (\u4e3a\u5565? \u60f3\u8c61\u4e00\u4e0b\u7531\u4e8e\u8868\u8fbe\u5f0f <code>'a'*10**10</code> \u800c\u751f\u6210\u7684 <code>.pyc</code> \u6587\u4ef6\u7684\u5927\u5c0f). \u76f8\u5173\u7684\u6e90\u7801\u5b9e\u73b0\u5728\u8fd9\u91cc.</li> <li>\u5982\u679c\u4f60\u662f\u4f7f\u7528 3.7 \u7248\u672c\u4e2d\u8fd0\u884c\u4e0a\u8ff0\u793a\u4f8b\u4ee3\u7801, \u4f1a\u53d1\u73b0\u90e8\u5206\u4ee3\u7801\u7684\u8fd0\u884c\u7ed3\u679c\u4e0e\u6ce8\u91ca\u8bf4\u660e\u76f8\u540c. \u8fd9\u662f\u56e0\u4e3a\u5728 3.7 \u7248\u672c\u4e2d, \u5e38\u91cf\u6298\u53e0\u5df2\u7ecf\u4ece\u7aa5\u5b54\u4f18\u5316\u5668\u8fc1\u79fb\u81f3\u65b0\u7684 AST \u4f18\u5316\u5668, \u540e\u8005\u53ef\u4ee5\u4ee5\u66f4\u9ad8\u7684\u4e00\u81f4\u6027\u6765\u6267\u884c\u4f18\u5316. (\u7531 Eugene Toder \u548c INADA Naoki \u5728 bpo-29469 \u548c bpo-11549 \u4e2d\u8d21\u732e.) </li> <li>(\u8bd1: \u4f46\u662f\u5728\u6700\u65b0\u7684 3.8 \u7248\u672c\u4e2d, \u7ed3\u679c\u53c8\u53d8\u56de\u53bb\u4e86. \u867d\u7136 3.8 \u7248\u672c\u548c 3.7 \u7248\u672c\u4e00\u6837, \u90fd\u662f\u4f7f\u7528 AST \u4f18\u5316\u5668. \u76ee\u524d\u4e0d\u786e\u5b9a\u5b98\u65b9\u5bf9 3.8 \u7248\u672c\u7684 AST \u505a\u4e86\u4ec0\u4e48\u8c03\u6574.)</li> </ul>"},{"location":"CN/#be-careful-with-chained-operations","title":"&gt; Be careful with chained operations/\u5c0f\u5fc3\u94fe\u5f0f\u64cd\u4f5c","text":"<pre><code>&gt;&gt;&gt; (False == False) in [False] # \u53ef\u4ee5\u7406\u89e3\nFalse\n&gt;&gt;&gt; False == (False in [False]) # \u53ef\u4ee5\u7406\u89e3\nFalse\n&gt;&gt;&gt; False == False in [False] # \u4e3a\u6bdb?\nTrue\n\n&gt;&gt;&gt; True is False == False\nFalse\n&gt;&gt;&gt; False is False is False\nTrue\n\n&gt;&gt;&gt; 1 &gt; 0 &lt; 1\nTrue\n&gt;&gt;&gt; (1 &gt; 0) &lt; 1\nFalse\n&gt;&gt;&gt; 1 &gt; (0 &lt; 1)\nFalse\n</code></pre>"},{"location":"CN/#_5","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<p>\u6839\u636e https://docs.python.org/3/reference/expressions.html#comparisons</p> <p>\u5f62\u5f0f\u4e0a, \u5982\u679c a, b, c, ..., y, z \u662f\u8868\u8fbe\u5f0f, \u800c op1, op2, ..., opN \u662f\u6bd4\u8f83\u8fd0\u7b97\u7b26, \u90a3\u4e48\u9664\u4e86\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u6700\u591a\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916 a op1 b op2 c ... y opN z \u5c31\u7b49\u4e8e a op1 b and b op2 c and ... y opN z.</p> <p>\u867d\u7136\u4e0a\u9762\u7684\u4f8b\u5b50\u4f3c\u4e4e\u5f88\u611a\u8822, \u4f46\u662f\u50cf <code>a == b == c</code> \u6216 <code>0 &lt;= x &lt;= 100</code> \u5c31\u5f88\u68d2\u4e86.</p> <ul> <li><code>False is False is False</code> \u76f8\u5f53\u4e8e <code>(False is False) and (False is False)</code></li> <li><code>True is False == False</code> \u76f8\u5f53\u4e8e <code>(True is False) and (False == False)</code>, \u7531\u4e8e\u8bed\u53e5\u7684\u7b2c\u4e00\u90e8\u5206 (<code>True is False</code>) \u7b49\u4e8e <code>False</code>, \u56e0\u6b64\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u4e3a <code>False</code>.</li> <li><code>1 &gt; 0 &lt; 1</code> \u76f8\u5f53\u4e8e <code>(1 &gt; 0) and (0 &lt; 1)</code>, \u6240\u4ee5\u6700\u7ec8\u7ed3\u679c\u4e3a <code>True</code>.</li> <li>\u8868\u8fbe\u5f0f <code>(1 &gt; 0) &lt; 1</code> \u76f8\u5f53\u4e8e <code>True &lt; 1</code> \u4e14   <pre><code>&gt;&gt;&gt; int(True)\n1\n&gt;&gt;&gt; True + 1 # \u4e0e\u8fd9\u4e2a\u4f8b\u5b50\u65e0\u5173\uff0c\u53ea\u662f\u5a31\u4e50\u4e00\u4e0b\n2\n</code></pre>   \u6240\u4ee5, <code>1 &lt; 1</code> \u7b49\u4e8e <code>False</code></li> </ul>"},{"location":"CN/#how-not-to-use-is-operator-is","title":"&gt; How not to use <code>is</code> operator/\u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528 <code>is</code> \u64cd\u4f5c\u7b26","text":"<p>\u4e0b\u9762\u662f\u4e00\u4e2a\u5728\u4e92\u8054\u7f51\u4e0a\u975e\u5e38\u6709\u540d\u7684\u4f8b\u5b50.</p> <p>1.</p> <pre><code>&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; a is b\nTrue\n\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; a is b\nFalse\n</code></pre> <p>2.</p> <pre><code>&gt;&gt;&gt; a = []\n&gt;&gt;&gt; b = []\n&gt;&gt;&gt; a is b\nFalse\n\n&gt;&gt;&gt; a = tuple()\n&gt;&gt;&gt; b = tuple()\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <p>3. Output</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <p>Output (Python 3.7.x specifically)</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; a is b\nFalse\n</code></pre>"},{"location":"CN/#_6","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<p><code>is</code> \u548c <code>==</code> \u7684\u533a\u522b</p> <ul> <li><code>is</code> \u8fd0\u7b97\u7b26\u68c0\u67e5\u4e24\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u662f\u5426\u5f15\u7528\u81ea\u540c\u4e00\u5bf9\u8c61 (\u5373, \u5b83\u68c0\u67e5\u4e24\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u662f\u5426\u76f8\u540c).</li> <li><code>==</code> \u8fd0\u7b97\u7b26\u6bd4\u8f83\u4e24\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u7684\u503c\u662f\u5426\u76f8\u7b49.</li> <li>\u56e0\u6b64 <code>is</code> \u4ee3\u8868\u5f15\u7528\u76f8\u540c, <code>==</code> \u4ee3\u8868\u503c\u76f8\u7b49. \u4e0b\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u5f88\u597d\u7684\u8bf4\u660e\u8fd9\u70b9,   <pre><code>&gt;&gt;&gt; [] == []\nTrue\n&gt;&gt;&gt; [] is [] # \u8fd9\u4e24\u4e2a\u7a7a\u5217\u8868\u4f4d\u4e8e\u4e0d\u540c\u7684\u5185\u5b58\u5730\u5740.\nFalse\n</code></pre></li> </ul> <p><code>256</code> \u662f\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u5bf9\u8c61, \u800c <code>257</code> \u4e0d\u662f</p> <p>\u5f53\u4f60\u542f\u52a8Python \u7684\u65f6\u5019, \u6570\u503c\u4e3a <code>-5</code> \u5230 <code>256</code> \u7684\u5bf9\u8c61\u5c31\u5df2\u7ecf\u88ab\u5206\u914d\u597d\u4e86. \u8fd9\u4e9b\u6570\u5b57\u56e0\u4e3a\u7ecf\u5e38\u88ab\u4f7f\u7528, \u6240\u4ee5\u4f1a\u88ab\u63d0\u524d\u51c6\u5907\u597d.</p> <p>Python \u901a\u8fc7\u8fd9\u79cd\u521b\u5efa\u5c0f\u6574\u6570\u6c60\u7684\u65b9\u5f0f\u6765\u907f\u514d\u5c0f\u6574\u6570\u9891\u7e41\u7684\u7533\u8bf7\u548c\u9500\u6bc1\u5185\u5b58\u7a7a\u95f4.</p> <p>\u5f15\u7528\u81ea https://docs.python.org/3/c-api/long.html</p> <p>\u5f53\u524d\u7684\u5b9e\u73b0\u4e3a-5\u5230256\u4e4b\u95f4\u7684\u6240\u6709\u6574\u6570\u4fdd\u7559\u4e00\u4e2a\u6574\u6570\u5bf9\u8c61\u6570\u7ec4, \u5f53\u4f60\u521b\u5efa\u4e86\u4e00\u4e2a\u8be5\u8303\u56f4\u5185\u7684\u6574\u6570\u65f6, \u4f60\u53ea\u9700\u8981\u8fd4\u56de\u73b0\u6709\u5bf9\u8c61\u7684\u5f15\u7528. \u6240\u4ee5\u6539\u53d81\u7684\u503c\u662f\u6709\u53ef\u80fd\u7684. \u6211\u6000\u7591\u8fd9\u79cd\u884c\u4e3a\u5728Python\u4e2d\u662f\u672a\u5b9a\u4e49\u884c\u4e3a. :-)</p> <pre><code>&gt;&gt;&gt; id(256)\n10922528\n&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; id(a)\n10922528\n&gt;&gt;&gt; id(b)\n10922528\n&gt;&gt;&gt; id(257)\n140084850247312\n&gt;&gt;&gt; x = 257\n&gt;&gt;&gt; y = 257\n&gt;&gt;&gt; id(x)\n140084850247440\n&gt;&gt;&gt; id(y)\n140084850247344\n</code></pre> <p>\u8fd9\u91cc\u89e3\u91ca\u5668\u5e76\u6ca1\u6709\u667a\u80fd\u5230\u80fd\u5728\u6267\u884c <code>y = 257</code> \u65f6\u610f\u8bc6\u5230\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u6574\u6570 <code>257</code>, \u6240\u4ee5\u5b83\u5728\u5185\u5b58\u4e2d\u53c8\u65b0\u5efa\u4e86\u53e6\u4e00\u4e2a\u5bf9\u8c61.</p> <p>\u7c7b\u4f3c\u7684\u4f18\u5316\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u4f8b\u5982\u7a7a\u5143\u7ec4\u3002\u7531\u4e8e\u5217\u8868\u662f\u53ef\u53d8\u7684\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 <code>[] is []</code> \u5c06\u8fd4\u56de <code>False</code> \u800c <code>() is ()</code> \u5c06\u8fd4\u56de <code>True</code>\u3002 \u8fd9\u89e3\u91ca\u4e86\u6211\u4eec\u7684\u7b2c\u4e8c\u4e2a\u4ee3\u7801\u6bb5\u3002\u800c\u7b2c\u4e09\u4e2a\u5462\uff1a</p> <p>\u5f53 <code>a</code> \u548c <code>b</code> \u5728\u540c\u4e00\u884c\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u503c\u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61.</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; id(a)\n140640774013296\n&gt;&gt;&gt; id(b)\n140640774013296\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; id(a)\n140640774013392\n&gt;&gt;&gt; id(b)\n140640774013488\n</code></pre> <ul> <li>\u5f53 a \u548c b \u5728\u540c\u4e00\u884c\u4e2d\u88ab\u8bbe\u7f6e\u4e3a <code>257</code> \u65f6, Python \u89e3\u91ca\u5668\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61, \u7136\u540e\u540c\u65f6\u5f15\u7528\u7b2c\u4e8c\u4e2a\u53d8\u91cf. \u5982\u679c\u4f60\u5728\u4e0d\u540c\u7684\u884c\u4e0a\u8fdb\u884c, \u5b83\u5c31\u4e0d\u4f1a \"\u77e5\u9053\" \u5df2\u7ecf\u5b58\u5728\u4e00\u4e2a <code>257</code> \u5bf9\u8c61\u4e86.</li> <li>\u8fd9\u662f\u4e00\u79cd\u7279\u522b\u4e3a\u4ea4\u4e92\u5f0f\u73af\u5883\u505a\u7684\u7f16\u8bd1\u5668\u4f18\u5316. \u5f53\u4f60\u5728\u5b9e\u65f6\u89e3\u91ca\u5668\u4e2d\u8f93\u5165\u4e24\u884c\u7684\u65f6\u5019, \u4ed6\u4eec\u4f1a\u5355\u72ec\u7f16\u8bd1, \u56e0\u6b64\u4e5f\u4f1a\u5355\u72ec\u8fdb\u884c\u4f18\u5316. \u5982\u679c\u4f60\u5728 <code>.py</code> \u6587\u4ef6\u4e2d\u5c1d\u8bd5\u8fd9\u4e2a\u4f8b\u5b50, \u5219\u4e0d\u4f1a\u770b\u5230\u76f8\u540c\u7684\u884c\u4e3a, \u56e0\u4e3a\u6587\u4ef6\u662f\u4e00\u6b21\u6027\u7f16\u8bd1\u7684\u3002\u8fd9\u79cd\u4f18\u5316\u4e0d\u4ec5\u9650\u4e8e\u6574\u6570\uff0c\u5b83\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u4e0d\u53ef\u53d8\u6570\u636e\u7c7b\u578b\uff0c\u4f8b\u5982\u5b57\u7b26\u4e32\uff08\u67e5\u770b\u793a\u4f8b\u201c\u5fae\u5999\u7684\u5b57\u7b26\u4e32\u201d\uff09\u548c\u6d6e\u70b9\u6570\uff0c</li> </ul> <pre><code>&gt;&gt;&gt; a, b = 257.0, 257.0\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <ul> <li>\u4e3a\u4ec0\u4e48\u8fd9\u4e0d\u9002\u7528\u4e8e Python 3.7\uff1f \u5927\u6982\u662f\u56e0\u4e3a\u6b64\u7c7b\u7f16\u8bd1\u5668\u4f18\u5316\u662f\u7279\u5b9a\u4e8e\u5b9e\u73b0\u7684\uff08\u5373\u53ef\u80fd\u968f\u7248\u672c\u3001\u64cd\u4f5c\u7cfb\u7edf\u7b49\u800c\u53d8\u5316\uff09\u3002\u6211\u4ecd\u5728\u8bd5\u56fe\u5f04\u6e05\u695a\u5bfc\u81f4\u95ee\u9898\u7684\u5177\u4f53\u5b9e\u73b0\u66f4\u6539\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u6b64 \u95ee\u9898 \u4ee5\u83b7\u53d6\u66f4\u65b0\u3002</li> </ul>"},{"location":"CN/#hash-brownies","title":"&gt; Hash brownies/\u662f\u65f6\u5019\u6765\u70b9\u86cb\u7cd5\u4e86!","text":"<ul> <li>hash brownie\u6307\u4e00\u79cd\u542b\u6709\u5927\u9ebb\u6210\u5206\u7684\u86cb\u7cd5, \u6240\u4ee5\u8fd9\u91cc\u662f\u53e5\u53cc\u5173</li> <li>\u8fd9\u91cc\u4fdd\u7559\u539f\u4f5c\u8005\u5bf9\u4e8e\u6807\u9898\u7684\u7ffb\u8bd1</li> </ul> <p>1. <pre><code>some_dict = {}\nsome_dict[5.5] = \"JavaScript\"\nsome_dict[5.0] = \"Ruby\"\nsome_dict[5] = \"Python\"\n</code></pre></p> <p>Output:</p> <pre><code>&gt;&gt;&gt; some_dict[5.5]\n\"JavaScript\"\n&gt;&gt;&gt; some_dict[5.0] # \"Python\" \u6d88\u9664\u4e86 \"Ruby\" \u7684\u5b58\u5728?\n\"Python\"\n&gt;&gt;&gt; some_dict[5] \n\"Python\"\n\n&gt;&gt;&gt; complex_five = 5 + 0j\n&gt;&gt;&gt; type(complex_five)\ncomplex\n&gt;&gt;&gt; some_dict[complex_five]\n\"Python\"\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u5230\u5904\u90fd\u662fPython?</p>"},{"location":"CN/#_7","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li> <p>\u8fd9\u4e2a StackOverflow\u7684 \u56de\u7b54 \u6f02\u4eae\u5730\u89e3\u91ca\u4e86\u8fd9\u80cc\u540e\u7684\u57fa\u672c\u539f\u7406.</p> </li> <li> <p>Python \u5b57\u5178\u4e2d\u952e\u7684\u552f\u4e00\u6027\u662f\u6839\u636e \u7b49\u4ef7\u6027\uff0c\u800c\u4e0d\u662f\u540c\u4e00\u6027\u3002 \u56e0\u6b64\uff0c\u5373\u4f7f <code>5</code>\u3001<code>5.0</code> \u548c <code>5 + 0j</code> \u662f\u4e0d\u540c\u7c7b\u578b\u7684\u4e0d\u540c\u5bf9\u8c61\uff0c\u7531\u4e8e\u5b83\u4eec\u662f\u76f8\u7b49\u7684\uff0c\u5b83\u4eec\u4e0d\u80fd\u90fd\u5728\u540c\u4e00\u4e2a <code>dict</code>\uff08\u6216 <code>set</code>\uff09\u4e2d\u3002 \u53ea\u8981\u60a8\u63d2\u5165\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\uff0c\u5c1d\u8bd5\u67e5\u627e\u4efb\u4f55\u4e0d\u540c\u4f46\u7b49\u4ef7\u7684\u952e\u90fd\u5c06\u4f7f\u7528\u539f\u59cb\u6620\u5c04\u503c\u6210\u529f\uff08\u800c\u4e0d\u662f\u56e0\u201cKeyError\u201d\u800c\u5931\u8d25\uff09\uff1a</p> </li> </ul> <pre><code>&gt;&gt;&gt; 5 == 5.0 == 5 + 0j\nTrue\n&gt;&gt;&gt; 5 is not 5.0 is not 5 + 0j\nTrue\n&gt;&gt;&gt; some_dict = {}\n&gt;&gt;&gt; some_dict[5.0] = \"Ruby\"\n&gt;&gt;&gt; 5.0 in some_dict\nTrue\n&gt;&gt;&gt; (5 in some_dict) and (5 + 0j in some_dict)\nTrue\n</code></pre> <ul> <li>\u8fd9\u5728\u8d4b\u503c\u7684\u65f6\u5019\u4e5f\u4f1a\u751f\u6548\u3002\u56e0\u6b64\uff0c\u5f53\u60a8\u6267\u884c <code>some_dict[5] = \"Python\"</code> \u65f6\uff0cPython \u4f1a\u627e\u5230\u5177\u6709\u7b49\u4ef7\u952e\u503c <code>5.0 -&gt; \"Ruby\"</code> \u7684\u73b0\u6709\u9879\uff0c\u8986\u76d6\u5176\u503c\uff0c\u5e76\u4fdd\u7559\u539f\u59cb\u952e\u503c\u3002</li> </ul> <p><pre><code>&gt;&gt;&gt; some_dict\n{5.0: 'Ruby'}\n&gt;&gt;&gt; some_dict[5] = \"Python\"\n&gt;&gt;&gt; some_dict\n{5.0: 'Python'}\n</code></pre> * \u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5c06\u952e\u503c\u66f4\u65b0\u4e3a<code>5</code>\uff08\u800c\u4e0d\u662f<code>5.0</code>\uff09\uff1f \u6211\u4eec\u5b9e\u9645\u4e0a\u4e0d\u80fd\u539f\u5730\u66f4\u65b0\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5148\u5220\u9664\u952e\uff08<code>del some_dict[5.0]</code>\uff09\uff0c\u7136\u540e\u91cd\u65b0\u8d4b\u503c\uff08<code>some_dict[5]</code>\uff09\u5f97\u5230\u6574\u6570<code>5</code> \u4f5c\u4e3a\u952e\u800c\u4e0d\u662f\u6d6e\u70b9\u6570 <code>5.0</code>\uff0c\u5c3d\u7ba1\u8fd9\u5c5e\u4e8e\u6781\u5c11\u6570\u60c5\u51b5\u3002</p> <ul> <li>Python \u662f\u5982\u4f55\u5728\u5305\u542b <code>5.0</code> \u7684\u5b57\u5178\u4e2d\u627e\u5230 <code>5</code> \u7684\uff1f Python \u53ea\u9700\u8981\u82b1\u8d39\u5e38\u6570\u65f6\u95f4\uff0c\u800c\u65e0\u9700\u4f7f\u7528\u54c8\u5e0c\u51fd\u6570\u904d\u5386\u6bcf\u4e00\u9879\u3002\u5f53 Python \u5728 dict \u4e2d\u67e5\u627e\u952e <code>foo</code> \u65f6\uff0c\u5b83\u9996\u5148\u8ba1\u7b97 <code>hash(foo)</code>\uff08\u4ee5\u5e38\u6570\u65f6\u95f4\u8fd0\u884c\uff09\u3002\u56e0\u4e3a\u5728 Python \u4e2d\uff0c\u8981\u6c42\u76f8\u7b49\u7684\u5bf9\u8c61\u5177\u6709\u76f8\u540c\u7684\u54c8\u5e0c\u503c\uff08\u6b64\u5904\u4e3a\u6587\u6863\uff09\uff0c<code>5</code> \u3001<code>5.0</code> \u548c <code>5 + 0j</code> \u5177\u6709\u76f8\u540c\u7684\u54c8\u5e0c\u503c\u3002</li> </ul> <pre><code>&gt;&gt;&gt; 5 == 5.0 == 5 + 0j\nTrue\n&gt;&gt;&gt; hash(5) == hash(5.0) == hash(5 + 0j)\nTrue\n</code></pre> <p>\u6ce8\u610f\uff1a \u53cd\u4e4b\u4e0d\u4e00\u5b9a\u6b63\u786e\uff1a\u5177\u6709\u76f8\u7b49\u54c8\u5e0c\u503c\u7684\u5bf9\u8c61\u672c\u8eab\u53ef\u80fd\u4e0d\u76f8\u7b49\u3002\uff08\u8fd9\u662f[\u54c8\u5e0c\u51b2\u7a81](https://en.wikipedia.org/wiki/Collision_(computer_science)\uff09\u9020\u6210\u7684\uff0c\u8fd9\u4e5f\u4f1a\u964d\u4f4e\u54c8\u5e0c\u8fd0\u7b97\u7684\u6027\u80fd\u3002\uff09</p>"},{"location":"CN/#deep-down-were-all-the-same","title":"&gt; Deep down, we're all the same./\u672c\u8d28\u4e0a,\u6211\u4eec\u90fd\u4e00\u6837. *","text":"<pre><code>class WTF:\n  pass\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; WTF() == WTF() # \u4e24\u4e2a\u4e0d\u540c\u7684\u5bf9\u8c61\u5e94\u8be5\u4e0d\u76f8\u7b49\nFalse\n&gt;&gt;&gt; WTF() is WTF() # \u4e5f\u4e0d\u76f8\u540c\nFalse\n&gt;&gt;&gt; hash(WTF()) == hash(WTF()) # \u54c8\u5e0c\u503c\u4e5f\u5e94\u8be5\u4e0d\u540c\nTrue\n&gt;&gt;&gt; id(WTF()) == id(WTF())\nTrue\n</code></pre></p>"},{"location":"CN/#_8","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u5f53\u8c03\u7528 <code>id</code> \u51fd\u6570\u65f6, Python \u521b\u5efa\u4e86\u4e00\u4e2a <code>WTF</code> \u7c7b\u7684\u5bf9\u8c61\u5e76\u4f20\u7ed9 <code>id</code> \u51fd\u6570. \u7136\u540e <code>id</code> \u51fd\u6570\u83b7\u53d6\u5176id\u503c (\u4e5f\u5c31\u662f\u5185\u5b58\u5730\u5740), \u7136\u540e\u4e22\u5f03\u8be5\u5bf9\u8c61. \u8be5\u5bf9\u8c61\u5c31\u88ab\u9500\u6bc1\u4e86.</li> <li>\u5f53\u6211\u4eec\u8fde\u7eed\u4e24\u6b21\u8fdb\u884c\u8fd9\u4e2a\u64cd\u4f5c\u65f6, Python\u4f1a\u5c06\u76f8\u540c\u7684\u5185\u5b58\u5730\u5740\u5206\u914d\u7ed9\u7b2c\u4e8c\u4e2a\u5bf9\u8c61. \u56e0\u4e3a (\u5728CPython\u4e2d) <code>id</code> \u51fd\u6570\u4f7f\u7528\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\u4f5c\u4e3a\u5bf9\u8c61\u7684id\u503c, \u6240\u4ee5\u4e24\u4e2a\u5bf9\u8c61\u7684id\u503c\u662f\u76f8\u540c\u7684.</li> <li>\u7efc\u4e0a, \u5bf9\u8c61\u7684id\u503c\u4ec5\u4ec5\u5728\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u5185\u552f\u4e00. \u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u4e4b\u540e, \u6216\u88ab\u521b\u5efa\u4e4b\u524d, \u5176\u4ed6\u5bf9\u8c61\u53ef\u4ee5\u5177\u6709\u76f8\u540c\u7684id\u503c.</li> <li>\u90a3\u4e3a\u4ec0\u4e48 <code>is</code> \u64cd\u4f5c\u7684\u7ed3\u679c\u4e3a <code>False</code> \u5462? \u8ba9\u6211\u4eec\u770b\u770b\u8fd9\u6bb5\u4ee3\u7801.   <pre><code>class WTF(object):\n  def __init__(self): print(\"I\")\n  def __del__(self): print(\"D\")\n</code></pre></li> </ul> <p>Output: <pre><code>&gt;&gt;&gt; WTF() is WTF()\nI\nI\nD\nD\nFalse\n&gt;&gt;&gt; id(WTF()) == id(WTF())\nI\nD\nI\nD\nTrue\n</code></pre>   \u6b63\u5982\u4f60\u6240\u770b\u5230\u7684, \u5bf9\u8c61\u9500\u6bc1\u7684\u987a\u5e8f\u662f\u9020\u6210\u6240\u6709\u4e0d\u540c\u4e4b\u5904\u7684\u539f\u56e0.</p>"},{"location":"CN/#disorder-within-order","title":"&gt; Disorder within order/\u6709\u5e8f\u4e2d\u6f5c\u85cf\u7740\u65e0\u5e8f *","text":"<pre><code>from collections import OrderedDict\n\ndictionary = dict()\ndictionary[1] = 'a'; dictionary[2] = 'b';\n\nordered_dict = OrderedDict()\nordered_dict[1] = 'a'; ordered_dict[2] = 'b';\n\nanother_ordered_dict = OrderedDict()\nanother_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';\n\nclass DictWithHash(dict):\n    \"\"\"\n    \u5b9e\u73b0\u4e86 __hash__ \u9b54\u6cd5\u65b9\u6cd5\u7684dict\u7c7b\n    \"\"\"\n    __hash__ = lambda self: 0\n\nclass OrderedDictWithHash(OrderedDict):\n    \"\"\"\n    \u5b9e\u73b0\u4e86 __hash__ \u9b54\u6cd5\u65b9\u6cd5\u7684OrderedDict\u7c7b\n    \"\"\"\n    __hash__ = lambda self: 0\n</code></pre> <p>Output <pre><code>&gt;&gt;&gt; dictionary == ordered_dict # \u5982\u679c a == b\nTrue\n&gt;&gt;&gt; dictionary == another_ordered_dict # \u4e14 b == c\nTrue\n&gt;&gt;&gt; ordered_dict == another_ordered_dict # \u90a3\u4e48\u4e3a\u4ec0\u4e48 c == a \u4e0d\u6210\u7acb??\nFalse\n\n# \u4f17\u6240\u5468\u77e5\uff0cset\u6570\u636e\u7ed3\u6784\u50a8\u5b58\u4e0d\u91cd\u590d\u5143\u7d20\uff0c\n# \u8ba9\u6211\u4eec\u751f\u6210\u4ee5\u4e0a\u5b57\u5178\u7684 set \u6570\u636e\u7c7b\u578b\uff0c\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\u2026\u2026\n\n&gt;&gt;&gt; len({dictionary, ordered_dict, another_ordered_dict})\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'dict'\n\n# dict\u7c7b\u6ca1\u6709\u5b9e\u73b0 __hash__ \uff0c\u51fa\u9519\u53ef\u4ee5\u7406\u89e3\uff0c\u63a5\u4e0b\u6765\u4f7f\u7528\u6211\u4eec\u6d3e\u751f\u7684\u7c7b\u3002\n\n&gt;&gt;&gt; dictionary = DictWithHash()\n&gt;&gt;&gt; dictionary[1] = 'a'; dictionary[2] = 'b';\n&gt;&gt;&gt; ordered_dict = OrderedDictWithHash()\n&gt;&gt;&gt; ordered_dict[1] = 'a'; ordered_dict[2] = 'b';\n&gt;&gt;&gt; another_ordered_dict = OrderedDictWithHash()\n&gt;&gt;&gt; another_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';\n&gt;&gt;&gt; len({dictionary, ordered_dict, another_ordered_dict})\n1\n&gt;&gt;&gt; len({ordered_dict, another_ordered_dict, dictionary}) # \u4ea4\u6362\u987a\u5e8f\n2\n</code></pre></p> <p>\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48?</p>"},{"location":"CN/#_9","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li> <p>\u7b49\u53f7\u7684\u4f20\u9012\u6027\u6ca1\u6709\u5728 <code>dictionary</code>, <code>ordered_dict</code> \u548c <code>another_ordered_dict</code> \u4e4b\u95f4\u751f\u6548\u662f <code>OrderedDict</code> \u7c7b\u4e2d <code>__eq__</code> \u65b9\u6cd5\u7684\u5b9e\u73b0\u65b9\u5f0f\u9020\u6210\u7684\u3002\u6839\u636e\u6587\u6863\u4ee5\u4e0b\u90e8\u5206:</p> <p>\u5bf9\u4e8e <code>OrderedDict</code> \u7c7b\u4e4b\u95f4\uff0c\u76f8\u7b49\u6027\u7684\u5224\u5b9a\u662f\u4f4d\u7f6e\u654f\u611f\u7684\uff0c\u5b9e\u73b0\u7c7b\u4f3c\u4e8e <code>list(od1.items())==list(od2.items())</code>\u3002\u5bf9\u4e8e <code>OrderedDict</code> \u7c7b\u4e0e\u5176\u4ed6 <code>Mapping</code> \u5bf9\u8c61\uff08\u4f8b\u5982<code>dict</code> \u7c7b\uff09\uff0c\u76f8\u7b49\u6027\u7684\u5224\u5b9a\u662f\u975e\u4f4d\u7f6e\u654f\u611f\u7684\u3002 - \u8fd9\u662f\u4e3a\u4e86\u4efb\u4f55\u4f7f\u7528\u5e38\u89c4 <code>dict</code> \u7c7b\u7684\u5730\u65b9\u80fd\u591f\u76f4\u63a5\u4f7f\u7528 <code>OrderedDict</code> \u5bf9\u8c61\u4ee3\u66ff\u3002 - \u597d\u5566\uff0c\u90a3\u4e3a\u4ec0\u4e48\u6539\u53d8\u987a\u5e8f\u4f1a\u5f71\u54cd <code>set</code> \u5bf9\u8c61\u751f\u6210\u7684\u957f\u5ea6\u5462? \u7b54\u6848\u5c31\u662f\u4e0a\u9762\u8bf4\u7684\u7f3a\u4e4f\u7b49\u53f7\u7684\u4f20\u9012\u6027\u3002\u56e0\u4e3a <code>set</code> \u7c7b\u662f\u552f\u4e00\u5143\u7d20\u7684\u65e0\u5e8f\u96c6\u5408\uff0c\u5143\u7d20\u63d2\u5165\u7684\u987a\u5e8f\u4e0d\u5e94\u8be5\u6709\u5f71\u54cd\u3002\u4f46\u5728\u6b64\u4f8b\u4e2d\uff0c\u786e\u6709\u4e0d\u540c\u3002\u8ba9\u6211\u4eec\u8fdb\u4e00\u6b65\u6df1\u5165\u3002</p> <p><pre><code>&gt;&gt;&gt; some_set = set()\n&gt;&gt;&gt; some_set.add(dictionary) # \u6d89\u53ca\u7684\u53d8\u91cf\u662f\u524d\u5e8f\u7247\u6bb5\u5b9a\u4e49\u7684 mapping \u5bf9\u8c61\n&gt;&gt;&gt; ordered_dict in some_set\nTrue\n&gt;&gt;&gt; some_set.add(ordered_dict)\n&gt;&gt;&gt; len(some_set)\n1\n&gt;&gt;&gt; another_ordered_dict in some_set\nTrue\n&gt;&gt;&gt; some_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(some_set)\n1\n\n&gt;&gt;&gt; another_set = set()\n&gt;&gt;&gt; another_set.add(ordered_dict)\n&gt;&gt;&gt; another_ordered_dict in another_set\nFalse\n&gt;&gt;&gt; another_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(another_set)\n2\n&gt;&gt;&gt; dictionary in another_set\nTrue\n&gt;&gt;&gt; another_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(another_set)\n2\n</code></pre> \u56e0\u6b64\uff0c\u4e0d\u4e00\u81f4\u6027\u662f\u7531\u4e8e <code>another_ordered_dict in another_set</code> \u7ed3\u679c\u4e3a <code>False</code>\u3002 \u56e0\u4e3a <code>ordered_dict</code> \u5df2\u7ecf\u5728 <code>another_set</code> \u4e2d\uff0c\u4f46\u5982\u524d\u6240\u8ff0\uff0c <code>ordered_dict == another_ordered_dict</code> \u7684\u7ed3\u679c\u4e3a <code>False</code>\uff0c\u4f1a\u5728\u540e\u7eed\u518d\u52a0\u5165 <code>another_ordered_dict</code> \u5230 <code>another_set</code> \u4e2d\u3002</p> </li> </ul>"},{"location":"CN/#keep-tryingtry","title":"&gt; Keep trying.../\u4e0d\u505c\u7684try *","text":"<pre><code>def some_func():\n    try:\n        return 'from_try'\n    finally:\n        return 'from_finally'\n\ndef another_func(): \n    for _ in range(3):\n        try:\n            continue\n        finally:\n            print(\"Finally!\")\n\ndef one_more_func(): # A gotcha!\n    try:\n        for i in range(3):\n            try:\n                1 / i\n            except ZeroDivisionError:\n                # Let's throw it here and handle it outside for loop\n                raise ZeroDivisionError(\"A trivial divide by zero error\")\n            finally:\n                print(\"Iteration\", i)\n                break\n    except ZeroDivisionError as e:\n        print(\"Zero division error occurred\", e)\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; some_func()\n'from_finally'\n\n&gt;&gt;&gt; another_func()\nFinally!\nFinally!\nFinally!\n\n&gt;&gt;&gt; 1 / 0\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero\n\n&gt;&gt;&gt; one_more_func()\nIteration 0\n</code></pre>"},{"location":"CN/#_10","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u5f53\u5728 \"try...finally\" \u8bed\u53e5\u7684 <code>try</code> \u4e2d\u6267\u884c <code>return</code>, <code>break</code> \u6216 <code>continue</code> \u540e, <code>finally</code> \u5b50\u53e5\u4f9d\u7136\u4f1a\u6267\u884c.</li> <li>\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7531\u6700\u540e\u6267\u884c\u7684 <code>return</code> \u8bed\u53e5\u51b3\u5b9a. \u7531\u4e8e <code>finally</code> \u5b50\u53e5\u4e00\u5b9a\u4f1a\u6267\u884c, \u6240\u4ee5 <code>finally</code> \u5b50\u53e5\u4e2d\u7684 <code>return</code> \u5c06\u59cb\u7ec8\u662f\u6700\u540e\u6267\u884c\u7684\u8bed\u53e5.</li> <li>\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c finally \u5b50\u53e5\u6267\u884c <code>return</code> \u6216 <code>break</code> \u8bed\u53e5\uff0c\u4e34\u65f6\u4fdd\u5b58\u7684\u5f02\u5e38\u5c06\u88ab\u4e22\u5f03\u3002</li> </ul>"},{"location":"CN/#for-what","title":"&gt; For what?/\u4e3a\u4ec0\u4e48?","text":"<pre><code>some_string = \"wtf\"\nsome_dict = {}\nfor i, some_dict[i] in enumerate(some_string):\n    pass\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; some_dict # \u521b\u5efa\u4e86\u7d22\u5f15\u5b57\u5178.\n{0: 'w', 1: 't', 2: 'f'}\n</code></pre></p>"},{"location":"CN/#_11","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>Python \u8bed\u6cd5 \u4e2d\u5bf9 <code>for</code> \u7684\u5b9a\u4e49\u662f:   <pre><code>for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]\n</code></pre>   \u5176\u4e2d <code>exprlist</code> \u6307\u5206\u914d\u76ee\u6807. \u8fd9\u610f\u5473\u7740\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e00\u9879\u90fd\u4f1a\u6267\u884c\u7c7b\u4f3c <code>{exprlist} = {next_value}</code> \u7684\u64cd\u4f5c.</li> </ul> <p>\u4e00\u4e2a\u6709\u8da3\u7684\u4f8b\u5b50\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9:   <pre><code>for i in range(4):\n    print(i)\n    i = 10\n</code></pre></p> <p>Output: <pre><code>0\n1\n2\n3\n</code></pre></p> <p>\u4f60\u53ef\u66fe\u89c9\u5f97\u8fd9\u4e2a\u5faa\u73af\u53ea\u4f1a\u8fd0\u884c\u4e00\u6b21?</p> <p>\ud83d\udca1 \u8bf4\u660e:</p> <ul> <li> <p>\u7531\u4e8e\u5faa\u73af\u5728Python\u4e2d\u5de5\u4f5c\u65b9\u5f0f, \u8d4b\u503c\u8bed\u53e5 <code>i = 10</code> \u5e76\u4e0d\u4f1a\u5f71\u54cd\u8fed\u4ee3\u5faa\u73af, \u5728\u6bcf\u6b21\u8fed\u4ee3\u5f00\u59cb\u4e4b\u524d, \u8fed\u4ee3\u5668(\u8fd9\u91cc\u6307 <code>range(4)</code>) \u751f\u6210\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u5c31\u88ab\u89e3\u5305\u5e76\u8d4b\u503c\u7ed9\u76ee\u6807\u5217\u8868\u7684\u53d8\u91cf(\u8fd9\u91cc\u6307 <code>i</code>)\u4e86.</p> </li> <li> <p>\u5728\u6bcf\u4e00\u6b21\u7684\u8fed\u4ee3\u4e2d, <code>enumerate(some_string)</code> \u51fd\u6570\u5c31\u751f\u6210\u4e00\u4e2a\u65b0\u503c <code>i</code> (\u8ba1\u6570\u5668\u589e\u52a0) \u5e76\u4ece <code>some_string</code> \u4e2d\u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26. \u7136\u540e\u5c06\u5b57\u5178 <code>some_dict</code> \u952e <code>i</code> (\u521a\u521a\u5206\u914d\u7684) \u7684\u503c\u8bbe\u4e3a\u8be5\u5b57\u7b26. \u672c\u4f8b\u4e2d\u5faa\u73af\u7684\u5c55\u5f00\u53ef\u4ee5\u7b80\u5316\u4e3a:   <pre><code>&gt;&gt;&gt; i, some_dict[i] = (0, 'w')\n&gt;&gt;&gt; i, some_dict[i] = (1, 't')\n&gt;&gt;&gt; i, some_dict[i] = (2, 'f')\n&gt;&gt;&gt; some_dict\n</code></pre></p> </li> </ul>"},{"location":"CN/#evaluation-time-discrepancy","title":"&gt; Evaluation time discrepancy/\u6267\u884c\u65f6\u673a\u5dee\u5f02","text":"<p>1. <pre><code>array = [1, 8, 15]\n# \u4e00\u4e2a\u5178\u578b\u7684\u751f\u6210\u5668\u8868\u8fbe\u5f0f\ng = (x for x in array if array.count(x) &gt; 0)\narray = [2, 8, 22]\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; print(list(g)) #\u5176\u4ed6\u7684\u503c\u53bb\u54ea\u513f\u4e86\uff1f\n[8]\n</code></pre></p> <p>2.</p> <pre><code>array_1 = [1,2,3,4]\ng1 = (x for x in array_1)\narray_1 = [1,2,3,4,5]\n\narray_2 = [1,2,3,4]\ng2 = (x for x in array_2)\narray_2[:] = [1,2,3,4,5]\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; print(list(g1))\n[1,2,3,4]\n\n&gt;&gt;&gt; print(list(g2))\n[1,2,3,4,5]\n</code></pre></p> <p>3.</p> <pre><code>array_3 = [1, 2, 3]\narray_4 = [10, 20, 30]\ngen = (i + j for i in array_3 for j in array_4)\n\narray_3 = [4, 5, 6]\narray_4 = [400, 500, 600]\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; print(list(gen))\n[401, 501, 601, 402, 502, 602, 403, 503, 603]\n</code></pre></p>"},{"location":"CN/#_12","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li>\u5728\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e2d, <code>in</code> \u5b50\u53e5\u5728\u58f0\u660e\u65f6\u6267\u884c, \u800c\u6761\u4ef6\u5b50\u53e5\u5219\u662f\u5728\u8fd0\u884c\u65f6\u6267\u884c.</li> <li>\u6240\u4ee5\u5728\u8fd0\u884c\u524d, <code>array</code> \u5df2\u7ecf\u88ab\u91cd\u65b0\u8d4b\u503c\u4e3a <code>[2, 8, 22]</code>, \u56e0\u6b64\u5bf9\u4e8e\u4e4b\u524d\u7684 <code>1</code>, <code>8</code> \u548c <code>15</code>, \u53ea\u6709 <code>count(8)</code> \u7684\u7ed3\u679c\u662f\u5927\u4e8e <code>0</code> \u7684, \u6240\u4ee5\u751f\u6210\u5668\u53ea\u4f1a\u751f\u6210 <code>8</code>.</li> <li>\u7b2c\u4e8c\u90e8\u5206\u4e2d <code>g1</code> \u548c <code>g2</code> \u7684\u8f93\u51fa\u5dee\u5f02\u5219\u662f\u7531\u4e8e\u53d8\u91cf <code>array_1</code> \u548c <code>array_2</code> \u88ab\u91cd\u65b0\u8d4b\u503c\u7684\u65b9\u5f0f\u5bfc\u81f4\u7684.</li> <li>\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b, <code>array_1</code> \u88ab\u7ed1\u5b9a\u5230\u65b0\u5bf9\u8c61 <code>[1,2,3,4,5]</code>, \u56e0\u4e3a <code>in</code> \u5b50\u53e5\u662f\u5728\u58f0\u660e\u65f6\u88ab\u6267\u884c\u7684\uff0c \u6240\u4ee5\u5b83\u4ecd\u7136\u5f15\u7528\u65e7\u5bf9\u8c61 <code>[1,2,3,4]</code>(\u5e76\u6ca1\u6709\u88ab\u9500\u6bc1).</li> <li>\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b, \u5bf9 <code>array_2</code> \u7684\u5207\u7247\u8d4b\u503c\u5c06\u76f8\u540c\u7684\u65e7\u5bf9\u8c61 <code>[1,2,3,4]</code> \u539f\u5730\u66f4\u65b0\u4e3a <code>[1,2,3,4,5]</code>. \u56e0\u6b64 <code>g2</code> \u548c <code>array_2</code> \u4ecd\u7136\u5f15\u7528\u540c\u4e00\u4e2a\u5bf9\u8c61(\u8fd9\u4e2a\u5bf9\u8c61\u73b0\u5728\u5df2\u7ecf\u66f4\u65b0\u4e3a <code>[1,2,3,4,5]</code>).</li> <li>\u597d\u5566\uff0c\u6309\u7167\u76ee\u524d\u8ba8\u8bba\u7684\u903b\u8f91\uff0c\u7b2c\u4e09\u4e2a\u4ee3\u7801\u6bb5\u4e2d\u7684 <code>list(gen)</code> \u7684\u503c\u4e0d\u5e94\u8be5\u662f <code>[11, 21, 31, 12, 22, 32, 13, 23, 33]</code> \u5417? \uff08\u6bd5\u7adf <code>array_3</code> \u548c <code>array_4</code> \u7684\u884c\u4e3a\u4e0e <code>array_1</code> \u4e00\u6837\uff09\u3002 PEP-289 \u4e2d\u89e3\u91ca\u4e86\uff08\u53ea\u6709\uff09<code>array_4</code> \u503c\u66f4\u65b0\u7684\u539f\u56e0      &gt; \u53ea\u6709\u6700\u5916\u5c42\u7684 for \u8868\u8fbe\u5f0f\u4f1a\u7acb\u5373\u8ba1\u7b97\uff0c\u5176\u4ed6\u8868\u8fbe\u5f0f\u4f1a\u5ef6\u8fdf\u5230\u751f\u6210\u5668\u8fd0\u884c\u3002</li> </ul>"},{"location":"CN/#is-not-is-not-is-not-is-not-is-not","title":"&gt; <code>is not ...</code> is not <code>is (not ...)</code>/<code>is not ...</code> \u4e0d\u662f <code>is (not ...)</code>","text":"<pre><code>&gt;&gt;&gt; 'something' is not None\nTrue\n&gt;&gt;&gt; 'something' is (not None)\nFalse\n</code></pre>"},{"location":"CN/#_13","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li><code>is not</code> \u662f\u4e2a\u5355\u72ec\u7684\u4e8c\u5143\u8fd0\u7b97\u7b26, \u4e0e\u5206\u522b\u4f7f\u7528 <code>is</code> \u548c <code>not</code> \u4e0d\u540c.</li> <li>\u5982\u679c\u64cd\u4f5c\u7b26\u4e24\u4fa7\u7684\u53d8\u91cf\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61, \u5219 <code>is not</code> \u7684\u7ed3\u679c\u4e3a <code>False</code>, \u5426\u5219\u7ed3\u679c\u4e3a <code>True</code>.</li> </ul>"},{"location":"CN/#a-tic-tac-toe-where-x-wins-in-the-first-attempt","title":"&gt; A tic-tac-toe where X wins in the first attempt!/\u4e00\u8e74\u5373\u81f3!","text":"<pre><code># \u6211\u4eec\u5148\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cfrow\nrow = [\"\"]*3 #row i['', '', '']\n# \u5e76\u521b\u5efa\u4e00\u4e2a\u53d8\u91cfboard\nboard = [row]*3\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; board\n[['', '', ''], ['', '', ''], ['', '', '']]\n&gt;&gt;&gt; board[0]\n['', '', '']\n&gt;&gt;&gt; board[0][0]\n''\n&gt;&gt;&gt; board[0][0] = \"X\"\n&gt;&gt;&gt; board\n[['X', '', ''], ['X', '', ''], ['X', '', '']]\n</code></pre></p> <p>\u6211\u4eec\u6709\u6ca1\u6709\u8d4b\u503c\u8fc73\u4e2a \"X\" \u5462\uff1f</p>"},{"location":"CN/#_14","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<p>\u5f53\u6211\u4eec\u521d\u59cb\u5316 <code>row</code> \u53d8\u91cf\u65f6, \u4e0b\u9762\u8fd9\u5f20\u56fe\u5c55\u793a\u4e86\u5185\u5b58\u4e2d\u7684\u60c5\u51b5\u3002</p> <p></p> <p>\u800c\u5f53\u901a\u8fc7\u5bf9 <code>row</code> \u505a\u4e58\u6cd5\u6765\u521d\u59cb\u5316 <code>board</code> \u65f6, \u5185\u5b58\u4e2d\u7684\u60c5\u51b5\u5219\u5982\u4e0b\u56fe\u6240\u793a (\u6bcf\u4e2a\u5143\u7d20 <code>board[0]</code>, <code>board[1]</code> \u548c <code>board[2]</code> \u90fd\u548c <code>row</code> \u4e00\u6837\u5f15\u7528\u4e86\u540c\u4e00\u5217\u8868.)</p> <p></p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u4f7f\u7528\u53d8\u91cf <code>row</code> \u751f\u6210 <code>board</code> \u6765\u907f\u514d\u8fd9\u79cd\u60c5\u51b5. (\u8fd9\u4e2aissue\u63d0\u51fa\u4e86\u8fd9\u4e2a\u9700\u6c42.)</p> <pre><code>&gt;&gt;&gt; board = [['']*3 for _ in range(3)]\n&gt;&gt;&gt; board[0][0] = \"X\"\n&gt;&gt;&gt; board\n[['X', '', ''], ['', '', ''], ['', '', '']]\n</code></pre>"},{"location":"CN/#schrodingers-variable","title":"&gt; Schr\u00f6dinger's variable/\u859b\u5b9a\u8c14\u7684\u53d8\u91cf *","text":"<pre><code>funcs = []\nresults = []\nfor x in range(7):\n    def some_func():\n        return x\n    funcs.append(some_func)\n    results.append(some_func()) # \u6ce8\u610f\u8fd9\u91cc\u51fd\u6570\u88ab\u6267\u884c\u4e86\n\nfuncs_results = [func() for func in funcs]\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; results\n[0, 1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; funcs_results\n[6, 6, 6, 6, 6, 6, 6]\n</code></pre></p> <p>\u5373\u4f7f\u6bcf\u6b21\u5728\u8fed\u4ee3\u4e2d\u5c06 <code>some_func</code> \u52a0\u5165 <code>funcs</code> \u524d\u7684 <code>x</code> \u503c\u90fd\u4e0d\u76f8\u540c, \u6240\u6709\u7684\u51fd\u6570\u8fd8\u662f\u90fd\u8fd4\u56de6.</p> <p>// \u518d\u6362\u4e2a\u4f8b\u5b50</p> <pre><code>&gt;&gt;&gt; powers_of_x = [lambda x: x**i for i in range(10)]\n&gt;&gt;&gt; [f(2) for f in powers_of_x]\n[512, 512, 512, 512, 512, 512, 512, 512, 512, 512]\n</code></pre>"},{"location":"CN/#_15","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li> <p>\u5f53\u5728\u5faa\u73af\u5185\u90e8\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6, \u5982\u679c\u8be5\u51fd\u6570\u5728\u5176\u4e3b\u4f53\u4e2d\u4f7f\u7528\u4e86\u5faa\u73af\u53d8\u91cf, \u5219\u95ed\u5305\u51fd\u6570\u5c06\u4e0e\u5faa\u73af\u53d8\u91cf\u7ed1\u5b9a, \u800c\u4e0d\u662f\u5b83\u7684\u503c. \u56e0\u6b64, \u6240\u6709\u7684\u51fd\u6570\u90fd\u662f\u4f7f\u7528\u6700\u540e\u5206\u914d\u7ed9\u53d8\u91cf\u7684\u503c\u6765\u8fdb\u884c\u8ba1\u7b97\u7684.</p> </li> <li> <p>\u53ef\u4ee5\u901a\u8fc7\u5c06\u5faa\u73af\u53d8\u91cf\u4f5c\u4e3a\u547d\u540d\u53d8\u91cf\u4f20\u9012\u7ed9\u51fd\u6570\u6765\u83b7\u5f97\u9884\u671f\u7684\u7ed3\u679c. \u4e3a\u4ec0\u4e48\u8fd9\u6837\u53ef\u884c? \u56e0\u4e3a\u8fd9\u4f1a\u5728\u51fd\u6570\u5185\u518d\u6b21\u5b9a\u4e49\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b83\u4f7f\u7528\u4e86\u6765\u81ea\u4e0a\u4e0b\u6587\u7684<code>x</code>\uff08\u5373\u4e0d\u662f\u5c40\u90e8\u53d8\u91cf\uff09\uff1a \uff08\u8bd1\u8005\u6ce8: inspect\u4f4d\u4e8ePython\u6807\u51c6\u5e93\u4e2d\uff0c\u8be5\u6a21\u5757\u7528\u4e8e\u6536\u96c6python\u5bf9\u8c61\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u83b7\u53d6\u7c7b\u6216\u51fd\u6570\u7684\u53c2\u6570\u7684\u4fe1\u606f\uff0c\u6e90\u7801\uff0c\u89e3\u6790\u5806\u6808\uff0c\u5bf9\u5bf9\u8c61\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u7b49\u7b49\uff0cPython3.3+\u7248\u672c\u652f\u6301getclosurevars\u51fd\u6570\uff09 <pre><code>&gt;&gt;&gt; import inspect\n&gt;&gt;&gt; inspect.getclosurevars(funcs[0])\nClosureVars(nonlocals={}, globals={'x': 6}, builtins={}, unbound=set())\n</code></pre></p> </li> </ul> <p>\u7531\u4e8e <code>x</code> \u662f\u4e00\u4e2a\u5168\u5c40\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u66f4\u65b0 <code>x</code> \u6765\u66f4\u6539 <code>funcs</code> \u7528\u6765\u67e5\u627e\u548c\u8fd4\u56de\u7684\u503c\uff1a</p> <pre><code>&gt;&gt;&gt; x = 42\n&gt;&gt;&gt; [func() for func in funcs]\n[42, 42, 42, 42, 42, 42, 42]\n</code></pre> <ul> <li>\u8981\u83b7\u5f97\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u60a8\u53ef\u4ee5\u5c06\u5faa\u73af\u53d8\u91cf\u4f5c\u4e3a\u547d\u540d\u53d8\u91cf\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\uff1f \u56e0\u4e3a\u8fd9\u4f1a\u5728\u51fd\u6570\u7684\u4f5c\u7528\u57df\u5185\u5b9a\u4e49\u53d8\u91cf\u3002 \u5b83\u5c06\u4e0d\u518d\u8fdb\u5165\u5468\u56f4\uff08\u5168\u5c40\uff09\u8303\u56f4\u6765\u67e5\u627e\u53d8\u91cf\u503c\uff0c\u800c\u662f\u4f1a\u521b\u5efa\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u6765\u5b58\u50a8\u8be5\u65f6\u95f4\u70b9\u7684\u201cx\u201d\u503c\u3002</li> </ul> <pre><code>funcs = []\nfor x in range(7):\n    def some_func(x=x):\n        return x\n    funcs.append(some_func)\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; funcs_results = [func() for func in funcs]\n&gt;&gt;&gt; funcs_results\n[0, 1, 2, 3, 4, 5, 6]\n</code></pre></p> <p>\u6b64\u65f6\uff0c\u4e0d\u518d\u4f7f\u7528\u5168\u5c40\u53d8\u91cf <code>x</code>\uff1a</p> <pre><code>&gt;&gt;&gt; inspect.getclosurevars(funcs[0])\nClosureVars(nonlocals={}, globals={}, builtins={}, unbound=set())\n</code></pre>"},{"location":"CN/#the-chicken-egg-problem","title":"&gt; The chicken-egg problem/\u5148\u6709\u9e21\u8fd8\u662f\u5148\u6709\u86cb *","text":"<p>1. <pre><code>&gt;&gt;&gt; isinstance(3, int)\nTrue\n&gt;&gt;&gt; isinstance(type, object)\nTrue\n&gt;&gt;&gt; isinstance(object, type)\nTrue\n</code></pre> \u90a3\u4e48\u5230\u5e95\u8c01\u662f\u201c\u6700\u7ec8\u201d\u7684\u57fa\u7c7b\u5462\uff1f\u4e0b\u8fb9\u987a\u4fbf\u5217\u51fa\u66f4\u591a\u7684\u4ee4\u4eba\u56f0\u60d1\u7684\u5730\u65b9</p> <p>2. </p> <pre><code>&gt;&gt;&gt; class A: pass\n&gt;&gt;&gt; isinstance(A, A)\nFalse\n&gt;&gt;&gt; isinstance(type, type)\nTrue\n&gt;&gt;&gt; isinstance(object, object)\nTrue\n</code></pre> <p>3.</p> <pre><code>&gt;&gt;&gt; issubclass(int, object)\nTrue\n&gt;&gt;&gt; issubclass(type, object)\nTrue\n&gt;&gt;&gt; issubclass(object, type)\nFalse\n</code></pre>"},{"location":"CN/#_16","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li><code>type</code> \u662f Python \u4e2d\u7684\u5143\u7c7b\u3002</li> <li>Python \u4e2d\uff0c\u4e00\u5207\u7686\u5bf9\u8c61\uff0c\u5176\u4e2d\u5305\u62ec\u7c7b\u53ca\u5176\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09\u3002</li> <li><code>type</code> \u7c7b\u578b\u662f<code>object</code>\u7c7b\u7684\u5143\u7c7b\uff0c\u6bcf\u4e2a\u7c7b\uff08\u5305\u62ec<code>type</code>\uff09\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u7ee7\u627f\u81ea<code>object</code>\u3002</li> <li>\u5bf9\u8c61\u548c\u7c7b\u578b\u4e4b\u95f4\u6ca1\u6709\u771f\u6b63\u7684\u57fa\u7c7b\u3002\u4e0a\u8ff0\u7247\u6bb5\u4e2d\u7684\u4ee4\u4eba\u56f0\u60d1\u7684\u5730\u65b9\u4e4b\u6240\u4ee5\u51fa\u73b0\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u4ece Python \u7c7b\u7684\u89d2\u5ea6\u8003\u8651\u8fd9\u4e9b\u5173\u7cfb\uff08issubclass \u548c isinstance\uff09\u3002 <code>object</code>\u548c<code>type</code>\u4e4b\u95f4\u7684\u5173\u7cfb\u4e0d\u80fd\u5728\u7eafpython\u4e2d\u91cd\u73b0\u3002 \u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u4ee5\u4e0b\u5173\u7cfb\u4e0d\u80fd\u5728\u7eaf Python \u4e2d\u91cd\u73b0:<ul> <li>A\u7c7b\u662fB\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0cB\u7c7b\u662fA\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002</li> <li>A\u7c7b\u662f\u5b83\u81ea\u5df1\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002</li> </ul> </li> <li><code>object</code>\u548c<code>type</code>\u4e4b\u95f4\u7684\u5173\u7cfb\uff08\u65e2\u662f\u5f7c\u6b64\u7684\u5b9e\u4f8b\uff0c\u4e5f\u662f\u5b83\u4eec\u81ea\u5df1\u7684\u5b9e\u4f8b\uff09\u5b58\u5728\u4e8e Python \u4e2d\uff0c\u8fd9\u662f\u6e90\u4e8e\u5b9e\u73b0\u5c42\u7ea7\u4e0a\u7684\u201c\u4f5c\u5f0a\u201d\u884c\u4e3a\u3002</li> </ul>"},{"location":"CN/#subclass-relationships","title":"&gt; Subclass relationships/\u5b50\u7c7b\u5173\u7cfb *","text":"<p>Output: <pre><code>&gt;&gt;&gt; from collections.abc import Hashable\n&gt;&gt;&gt; issubclass(list, object)\nTrue\n&gt;&gt;&gt; issubclass(object, Hashable)\nTrue\n&gt;&gt;&gt; issubclass(list, Hashable)\nFalse\n</code></pre></p> <p>\u5b50\u7c7b\u5173\u7cfb\u5e94\u8be5\u662f\u53ef\u4f20\u9012\u7684, \u5bf9\u5427? (\u5373, \u5982\u679c <code>A</code> \u662f <code>B</code> \u7684\u5b50\u7c7b, <code>B</code> \u662f <code>C</code> \u7684\u5b50\u7c7b, \u90a3\u4e48 <code>A</code> \u5e94\u8be5 \u662f <code>C</code> \u7684\u5b50\u7c7b.)</p>"},{"location":"CN/#_17","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>Python \u4e2d\u7684\u5b50\u7c7b\u5173\u7cfb\u5e76\u4e0d\u4e00\u5b9a\u662f\u4f20\u9012\u7684. \u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u5728\u5143\u7c7b\u4e2d\u968f\u610f\u5b9a\u4e49 <code>__subclasscheck__</code>.</li> <li>\u5f53 <code>issubclass(cls, Hashable)</code> \u88ab\u8c03\u7528\u65f6, \u5b83\u53ea\u662f\u5728 <code>cls</code> \u4e2d\u5bfb\u627e <code>__hash__</code> \u65b9\u6cd5\u6216\u8005\u4ece\u7ee7\u627f\u7684\u7236\u7c7b\u4e2d\u5bfb\u627e <code>__hash__</code> \u65b9\u6cd5.</li> <li>\u7531\u4e8e <code>object</code> is \u53ef\u6563\u5217\u7684(hashable), \u4f46\u662f <code>list</code> \u662f\u4e0d\u53ef\u6563\u5217\u7684, \u6240\u4ee5\u5b83\u6253\u7834\u4e86\u8fd9\u79cd\u4f20\u9012\u5173\u7cfb.</li> <li>\u5728\u8fd9\u91cc\u53ef\u4ee5\u627e\u5230\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca.</li> </ul>"},{"location":"CN/#methods-equality-and-identity","title":"&gt; Methods equality and identity/\u65b9\u6cd5\u7684\u76f8\u7b49\u6027\u548c\u552f\u4e00\u6027 *","text":"<p>1. <pre><code>class SomeClass:\n    def method(self):\n        pass\n\n    @classmethod\n    def classm(cls):\n        pass\n\n    @staticmethod\n    def staticm():\n        pass\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; print(SomeClass.method is SomeClass.method)\nTrue\n&gt;&gt;&gt; print(SomeClass.classm is SomeClass.classm)\nFalse\n&gt;&gt;&gt; print(SomeClass.classm == SomeClass.classm)\nTrue\n&gt;&gt;&gt; print(SomeClass.staticm is SomeClass.staticm)\nTrue\n</code></pre> \u8bbf\u95ee <code>classm</code> \u4e24\u6b21\uff0c\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u76f8\u7b49\u7684\u5bf9\u8c61\uff0c\u4f46\u4e0d\u662f\u540c\u4e00\u4e2a\uff1f \u8ba9\u6211\u4eec\u770b\u770b <code>SomeClass</code> \u7684\u5b9e\u4f8b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a</p> <p>2. <pre><code>o1 = SomeClass()\no2 = SomeClass()\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; print(o1.method == o2.method)\nFalse\n&gt;&gt;&gt; print(o1.method == o1.method)\nTrue\n&gt;&gt;&gt; print(o1.method is o1.method)\nFalse\n&gt;&gt;&gt; print(o1.classm is o1.classm)\nFalse\n&gt;&gt;&gt; print(o1.classm == o1.classm == o2.classm == SomeClass.classm)\nTrue\n&gt;&gt;&gt; print(o1.staticm is o1.staticm is o2.staticm is SomeClass.staticm)\nTrue\n</code></pre></p> <p>\u8bbf\u95ee <code>classm</code> or <code>method</code> \u4e24\u6b21, \u4e3a <code>SomeClass</code> \u7684\u540c\u4e00\u4e2a\u5b9e\u4f8b\u521b\u5efa\u4e86\u76f8\u7b49\u4f46\u662f\u4e0d\u540c\u7684\u5bf9\u8c61\u3002</p>"},{"location":"CN/#_18","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li>\u51fd\u6570\u662f\u63cf\u8ff0\u7b26\u3002\u6bcf\u5f53\u5c06\u51fd\u6570\u4f5c\u4e3a\u5c5e\u6027\u8bbf\u95ee\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528\u63cf\u8ff0\u7b26\uff0c\u521b\u5efa\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5c06\u51fd\u6570\u4e0e\u62e5\u6709\u8be5\u5c5e\u6027\u7684\u5bf9\u8c61\u201c\u7ed1\u5b9a\u201d\u3002\u5982\u679c\u88ab\u8c03\u7528\uff0c\u8be5\u65b9\u6cd5\u8c03\u7528\u51fd\u6570\uff0c\u9690\u5f0f\u4f20\u9012\u7ed1\u5b9a\u5bf9\u8c61\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08\u8fd9\u5c31\u662f\u6211\u4eec\u5982\u4f55\u5c06 self \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u83b7\u53d6\uff0c\u5c3d\u7ba1\u6ca1\u6709\u663e\u5f0f\u4f20\u9012\u5b83\uff09\u3002</li> </ul> <pre><code>&gt;&gt;&gt; o1.method\n&lt;bound method SomeClass.method of &lt;__main__.SomeClass object at ...&gt;&gt;\n</code></pre> <ul> <li>\u591a\u6b21\u8bbf\u95ee\u8be5\u5c5e\u6027\uff0c\u6bcf\u6b21\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u8c61\uff01 \u56e0\u6b64\uff0c<code>o1.method is o1.method</code> \u6c38\u8fdc\u4e0d\u4f1a\u662f\u771f\u7684\u3002\u4f46\u662f\uff0c\u5c06\u51fd\u6570\u4f5c\u4e3a\u7c7b\u5c5e\u6027\uff08\u800c\u4e0d\u662f\u5b9e\u4f8b\uff09\u8bbf\u95ee\u5e76\u4e0d\u4f1a\u521b\u5efa\u65b9\u6cd5\u5bf9\u8c61\uff0c\u6240\u4ee5 <code>SomeClass.method is SomeClass.method</code> \u662f\u771f\u7684\u3002</li> </ul> <pre><code>&gt;&gt;&gt; SomeClass.method\n&lt;function SomeClass.method at ...&gt;\n</code></pre> <ul> <li><code>classmethod</code> \u5c06\u51fd\u6570\u8f6c\u6362\u4e3a\u7c7b\u65b9\u6cd5\u3002 \u7c7b\u65b9\u6cd5\u662f\u63cf\u8ff0\u7b26\uff0c\u5f53\u88ab\u8bbf\u95ee\u65f6\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u7ed1\u5b9a\u7c7b\u672c\u8eab\u7684\u65b9\u6cd5\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u5bf9\u8c61\u672c\u8eab\u3002</li> </ul> <pre><code>&gt;&gt;&gt; o1.classm\n&lt;bound method SomeClass.classm of &lt;class '__main__.SomeClass'&gt;&gt;\n</code></pre> <ul> <li>\u4e0e\u51fd\u6570\u4e0d\u540c\uff0c<code>classmethod</code> \u5728\u4f5c\u4e3a\u7c7b\u5c5e\u6027\u8bbf\u95ee\u65f6\u4e5f\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b9\u6cd5\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u7ed1\u5b9a\u7c7b\uff0c\u800c\u4e0d\u662f\u7c7b\u7684\u7c7b\u578b\uff09\u3002 \u6240\u4ee5 <code>SomeClass.classm is SomeClass.classm</code> \u662f\u5047\u7684\u3002</li> </ul> <pre><code>&gt;&gt;&gt; SomeClass.classm\n&lt;bound method SomeClass.classm of &lt;class '__main__.SomeClass'&gt;&gt;\n</code></pre> <ul> <li>\u5f53\u4e24\u4e2a\u51fd\u6570\u76f8\u7b49\u5e76\u4e14\u7ed1\u5b9a\u7684\u5bf9\u8c61\u76f8\u540c\u65f6\uff0c\u65b9\u6cd5\u5bf9\u8c61\u6bd4\u8f83\u76f8\u7b49\u3002 \u6240\u4ee5<code>o1.method == o1.method</code> \u4e3a\u771f\uff0c\u5c3d\u7ba1\u5b83\u4eec\u5728\u5185\u5b58\u4e2d\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u5bf9\u8c61\u3002</li> <li><code>staticmethod</code> \u5c06\u51fd\u6570\u8f6c\u6362\u4e3a\u201c\u65e0\u64cd\u4f5c\u201d\u63cf\u8ff0\u7b26\uff0c\u5b83\u6309\u539f\u6837\u8fd4\u56de\u51fd\u6570\u3002\u6ca1\u6709\u65b9\u6cd5\u5bf9\u8c61\u88ab\u521b\u5efa\uff0c\u6240\u4ee5 <code>is</code> \u7684\u6bd4\u8f83\u8fd0\u7b97\u4e3a\u771f\u3002</li> </ul> <pre><code>&gt;&gt;&gt; o1.staticm\n&lt;function SomeClass.staticm at ...&gt;\n&gt;&gt;&gt; SomeClass.staticm\n&lt;function SomeClass.staticm at ...&gt;\n</code></pre> <ul> <li>\u6bcf\u6b21 Python \u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5\u65f6\u90fd\u5fc5\u987b\u521b\u5efa\u65b0\u7684\u201c\u65b9\u6cd5\u201d\u5bf9\u8c61\uff0c\u5e76\u4e14\u6bcf\u6b21\u90fd\u5fc5\u987b\u4fee\u6539\u53c2\u6570\u4ee5\u63d2\u5165 <code>self</code> \u4e25\u91cd\u5f71\u54cd\u6027\u80fd\u3002CPython 3.7 \u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898 \u3002\u901a\u8fc7\u5f15\u5165\u65b0\u7684\u64cd\u4f5c\u7801\u6765\u5904\u7406\u8c03\u7528\u65b9\u6cd5\u800c\u4e0d\u521b\u5efa\u4e34\u65f6\u65b9\u6cd5\u5bf9\u8c61\u3002\u8fd9\u4ec5\u5728\u5b9e\u9645\u8c03\u7528\u8bbf\u95ee\u7684\u51fd\u6570\u65f6\u4f7f\u7528\uff0c\u56e0\u6b64\u8fd9\u91cc\u7684\u4ee3\u7801\u7247\u6bb5\u4e0d\u53d7\u5f71\u54cd\uff0c\u4ecd\u7136\u4f1a\u751f\u6210\u65b9\u6cd5:)</li> </ul>"},{"location":"CN/#all-true-ationtrueall","title":"&gt; All-true-ation/\u8fd4\u56deTrue\u7684all\u51fd\u6570 *","text":"<pre><code>&gt;&gt;&gt; all([True, True, True])\nTrue\n&gt;&gt;&gt; all([True, True, False])\nFalse\n\n&gt;&gt;&gt; all([])\nTrue\n&gt;&gt;&gt; all([[]])\nFalse\n&gt;&gt;&gt; all([[[]]])\nTrue\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u79cdTrue-False\u7684\u53d8\u5316\uff1f</p>"},{"location":"CN/#_19","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li> <p><code>all</code> \u51fd\u6570\u7684\u5b9e\u73b0\u7b49\u4ef7\u4e8e\uff1a</p> </li> <li> <p><code>py   def all(iterable):       for element in iterable:           if not element:               return False       return True</code></p> </li> <li> <p><code>all([])</code> \u8fd4\u56de <code>True</code> \u56e0\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e3a\u7a7a\u3002 </p> </li> <li><code>all([[]])</code> \u8fd4\u56de <code>False</code> \u56e0\u4e3a\u4f20\u5165\u7684\u6570\u7ec4\u6709\u4e00\u4e2a\u5143\u7d20 <code>[]</code>\uff0c \u5728Python\u4e2d\uff0c\u7a7a\u5217\u8868\u4e3a\u5047\u3002</li> <li><code>all([[[]]])</code> \u548c\u66f4\u9ad8\u7684\u9012\u5f52\u53d8\u4f53\u603b\u662f<code>True</code>\u3002 \u8fd9\u662f\u56e0\u4e3a\u4f20\u9012\u7684\u6570\u7ec4\u7684\u5355\u4e2a\u5143\u7d20\uff08<code>[[...]]</code>\uff09\u4e0d\u518d\u662f\u7a7a\u7684\uff0c\u800c\u6709\u503c\u7684\u5217\u8868\u4e3a\u771f\u3002</li> </ul>"},{"location":"CN/#the-surprising-comma","title":"&gt; The surprising comma/\u610f\u5916\u7684\u9017\u53f7","text":"<p>Output: <pre><code>&gt;&gt;&gt; def f(x, y,):\n...     print(x, y)\n...\n&gt;&gt;&gt; def g(x=4, y=5,):\n...     print(x, y)\n...\n&gt;&gt;&gt; def h(x, **kwargs,):\n  File \"&lt;stdin&gt;\", line 1\n    def h(x, **kwargs,):\n                     ^\nSyntaxError: invalid syntax\n&gt;&gt;&gt; def h(*args,):\n  File \"&lt;stdin&gt;\", line 1\n    def h(*args,):\n                ^\nSyntaxError: invalid syntax\n</code></pre></p>"},{"location":"CN/#_20","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u5728Python\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u5217\u8868\u4e2d, \u5c3e\u968f\u9017\u53f7\u5e76\u4e0d\u4e00\u5b9a\u662f\u5408\u6cd5\u7684.</li> <li>\u5728Python\u4e2d, \u53c2\u6570\u5217\u8868\u90e8\u5206\u7528\u524d\u7f6e\u9017\u53f7\u5b9a\u4e49, \u90e8\u5206\u7528\u5c3e\u968f\u9017\u53f7\u5b9a\u4e49. \u8fd9\u79cd\u51b2\u7a81\u5bfc\u81f4\u9017\u53f7\u88ab\u5939\u5728\u4e2d\u95f4, \u6ca1\u6709\u89c4\u5219\u5b9a\u4e49\u5b83.(\u8bd1:\u8fd9\u4e00\u53e5\u770b\u5f97\u6211\u4e5f\u5f88\u61f5\u903c,\u53ea\u80fd\u5f3a\u7ffb\u4e86.\u8be6\u7ec6\u89e3\u91ca\u770b\u4e0b\u9762\u7684\u8ba8\u8bba\u5e16\u4f1a\u4e00\u76ee\u4e86\u7136.)</li> <li>\u6ce8\u610f: \u5c3e\u968f\u9017\u53f7\u7684\u95ee\u9898\u5df2\u7ecf\u5728Python 3.6\u4e2d\u88ab\u4fee\u590d\u4e86. \u800c\u8fd9\u7bc7\u5e16\u5b50\u4e2d\u5219\u7b80\u8981\u8ba8\u8bba\u4e86Python\u4e2d\u5c3e\u968f\u9017\u53f7\u7684\u4e0d\u540c\u7528\u6cd5.</li> </ul>"},{"location":"CN/#strings-and-the-backslashes","title":"&gt; Strings and the backslashes/\u5b57\u7b26\u4e32\u4e0e\u53cd\u659c\u6760","text":"<p>Output: <pre><code>&gt;&gt;&gt; print(\"\\\"\")\n\"\n\n&gt;&gt;&gt; print(r\"\\\"\")\n\\\"\n\n&gt;&gt;&gt; print(r\"\\\")\nFile \"&lt;stdin&gt;\", line 1\n    print(r\"\\\")\n              ^\nSyntaxError: EOL while scanning string literal\n\n&gt;&gt;&gt; r'\\'' == \"\\\\'\"\nTrue\n</code></pre></p>"},{"location":"CN/#_21","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li> <p>\u5728\u4e00\u822c\u7684python\u5b57\u7b26\u4e32\u4e2d\uff0c\u53cd\u659c\u6760\u7528\u4e8e\u8f6c\u4e49\u53ef\u80fd\u5177\u6709\u7279\u6b8a\u542b\u4e49\u7684\u5b57\u7b26\uff08\u5982\u5355\u5f15\u53f7\u3001\u53cc\u5f15\u53f7\u548c\u53cd\u659c\u6760\u672c\u8eab\uff09\u3002</p> <pre><code>&gt;&gt;&gt; \"wt\\\"f\"\n'wt\"f'\n</code></pre> </li> <li> <p>\u5728\u4ee5 <code>r</code> \u5f00\u5934\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d, \u53cd\u659c\u6760\u5e76\u6ca1\u6709\u7279\u6b8a\u542b\u4e49.     <pre><code>&gt;&gt;&gt; r'wt\\\"f' == 'wt\\\\\"f'\nTrue\n&gt;&gt;&gt; print(repr(r'wt\\\"f')\n'wt\\\\\"f'\n\n&gt;&gt;&gt; print(\"\\n\")\n\n&gt;&gt;&gt; print(r\"\\\\n\")\n'\\\\n'\n</code></pre></p> </li> <li> <p>\u8fd9\u610f\u5473\u7740\u5f53\u89e3\u6790\u5668\u5728\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u9047\u5230\u53cd\u659c\u6760\u65f6\uff0c\u5b83\u671f\u671b\u540e\u9762\u6709\u53e6\u4e00\u4e2a\u5b57\u7b26\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff08<code>print(r\"\\\")</code>\uff09\uff0c\u53cd\u659c\u6760\u8f6c\u4e49\u4e86\u5c3e\u968f\u5f15\u53f7\uff0c\u4f7f\u89e3\u6790\u5668\u6ca1\u6709\u7ec8\u6b62\u5f15\u53f7\uff08\u56e0\u6b64\u4ea7\u751f\u4e86<code>SyntaxError</code>\uff09\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u53cd\u659c\u6760\u5728\u539f\u59cb\u5b57\u7b26\u4e32\u672b\u5c3e\u4e0d\u8d77\u4f5c\u7528\u7684\u539f\u56e0\u3002</p> </li> </ul>"},{"location":"CN/#not-knot","title":"&gt; not knot!/\u522b\u7ea0\u7ed3!","text":"<pre><code>x = True\ny = False\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; not x == y\nTrue\n&gt;&gt;&gt; x == not y\n  File \"&lt;input&gt;\", line 1\n    x == not y\n           ^\nSyntaxError: invalid syntax\n</code></pre></p>"},{"location":"CN/#_22","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4f1a\u5f71\u54cd\u8868\u8fbe\u5f0f\u7684\u6c42\u503c\u987a\u5e8f, \u800c\u5728 Python \u4e2d <code>==</code> \u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u8981\u9ad8\u4e8e <code>not</code> \u8fd0\u7b97\u7b26.</li> <li>\u6240\u4ee5 <code>not x == y</code> \u76f8\u5f53\u4e8e <code>not (x == y)</code>, \u540c\u65f6\u7b49\u4ef7\u4e8e <code>not (True == False)</code>, \u6700\u540e\u7684\u8fd0\u7b97\u7ed3\u679c\u5c31\u662f <code>True</code>.</li> <li>\u4e4b\u6240\u4ee5 <code>x == not y</code> \u4f1a\u629b\u4e00\u4e2a <code>SyntaxError</code> \u5f02\u5e38, \u662f\u56e0\u4e3a\u5b83\u4f1a\u88ab\u8ba4\u4e3a\u7b49\u4ef7\u4e8e <code>(x == not) y</code>, \u800c\u4e0d\u662f\u4f60\u4e00\u5f00\u59cb\u671f\u671b\u7684 <code>x == (not y)</code>.</li> <li>\u89e3\u91ca\u5668\u671f\u671b <code>not</code> \u6807\u8bb0\u662f <code>not in</code> \u64cd\u4f5c\u7b26\u7684\u4e00\u90e8\u5206 (\u56e0\u4e3a <code>==</code> \u548c <code>not in</code> \u64cd\u4f5c\u7b26\u5177\u6709\u76f8\u540c\u7684\u4f18\u5148\u7ea7), \u4f46\u662f\u5b83\u5728 <code>not</code> \u6807\u8bb0\u540e\u9762\u627e\u4e0d\u5230 <code>in</code> \u6807\u8bb0, \u6240\u4ee5\u4f1a\u629b\u51fa <code>SyntaxError</code> \u5f02\u5e38.</li> </ul>"},{"location":"CN/#half-triple-quoted-strings","title":"&gt; Half triple-quoted strings/\u4e09\u4e2a\u5f15\u53f7","text":"<p>Output: <pre><code>&gt;&gt;&gt; print('wtfpython''')\nwtfpython\n&gt;&gt;&gt; print(\"wtfpython\"\"\")\nwtfpython\n&gt;&gt;&gt; # \u4e0b\u9762\u7684\u8bed\u53e5\u4f1a\u629b\u51fa `SyntaxError` \u5f02\u5e38\n&gt;&gt;&gt; # print('''wtfpython')\n&gt;&gt;&gt; # print(\"\"\"wtfpython\")\n</code></pre></p>"},{"location":"CN/#_23","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>Python \u63d0\u4f9b\u9690\u5f0f\u7684\u5b57\u7b26\u4e32\u8fde\u63a5, \u4f8b\u5982,   <pre><code>&gt;&gt;&gt; print(\"wtf\" \"python\")\nwtfpython\n&gt;&gt;&gt; print(\"wtf\" \"\") # or \"wtf\"\"\"\nwtf\n</code></pre></li> <li><code>'''</code> \u548c <code>\"\"\"</code> \u5728 Python\u4e2d\u4e5f\u662f\u5b57\u7b26\u4e32\u5b9a\u754c\u7b26, Python \u89e3\u91ca\u5668\u5728\u5148\u9047\u5230\u4e09\u4e2a\u5f15\u53f7\u7684\u7684\u65f6\u5019\u4f1a\u5c1d\u8bd5\u518d\u5bfb\u627e\u4e09\u4e2a\u7ec8\u6b62\u5f15\u53f7\u4f5c\u4e3a\u5b9a\u754c\u7b26, \u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f1a\u5bfc\u81f4 <code>SyntaxError</code> \u5f02\u5e38.</li> </ul>"},{"location":"CN/#whats-wrong-with-booleans","title":"&gt; What's wrong with booleans?/\u5e03\u5c14\u4f60\u548b\u4e86?","text":"<p>1. <pre><code># \u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50, \u7edf\u8ba1\u4e0b\u9762\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u5e03\u5c14\u578b\u503c\u7684\u4e2a\u6570\u548c\u6574\u578b\u503c\u7684\u4e2a\u6570\nmixed_list = [False, 1.0, \"some_string\", 3, True, [], False]\nintegers_found_so_far = 0\nbooleans_found_so_far = 0\n\nfor item in mixed_list:\n    if isinstance(item, int):\n        integers_found_so_far += 1\n    elif isinstance(item, bool):\n        booleans_found_so_far += 1\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; integers_found_so_far\n4\n&gt;&gt;&gt; booleans_found_so_far\n0\n</code></pre></p> <p>2. <pre><code>&gt;&gt;&gt; some_bool = True\n&gt;&gt;&gt; \"wtf\" * some_bool\n'wtf'\n&gt;&gt;&gt; some_bool = False\n&gt;&gt;&gt; \"wtf\" * some_bool\n''\n</code></pre></p> <p>3. <pre><code>def tell_truth():\n    True = False\n    if True == False:\n        print(\"I have lost faith in truth!\")\n</code></pre></p> <p>Output (&lt; 3.x):</p> <pre><code>&gt;&gt;&gt; tell_truth()\nI have lost faith in truth!\n</code></pre>"},{"location":"CN/#_24","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li> <p>\u5e03\u5c14\u503c\u662f <code>int</code> \u7684\u5b50\u7c7b     <pre><code>&gt;&gt;&gt; issubclass(bool, int)\nTrue\n&gt;&gt;&gt; issubclass(int, bool)\nFalse\n</code></pre></p> </li> <li> <p>\u56e0\u6b64\uff0c<code>True</code> \u548c <code>False</code> \u662f <code>int</code> \u7684\u5b9e\u4f8b   <pre><code>&gt;&gt;&gt; isinstance(True, int)\nTrue\n&gt;&gt;&gt; isinstance(False, int)\nTrue\n</code></pre></p> </li> <li> <p><code>True</code> \u7684\u6574\u6570\u503c\u662f <code>1</code>, \u800c <code>False</code> \u7684\u6574\u6570\u503c\u662f <code>0</code></p> </li> </ul> <pre><code>&gt;&gt;&gt; int(True)\n1\n&gt;&gt;&gt; int(False)\n0\n</code></pre> <ul> <li> <p>\u5173\u4e8e\u5176\u80cc\u540e\u7684\u539f\u7406, \u8bf7\u770b\u8fd9\u4e2a StackOverflow \u7684\u56de\u7b54.</p> </li> <li> <p>\u6700\u521d\uff0cPython \u6ca1\u6709 <code>bool</code> \u7c7b\u578b\uff08\u4eba\u4eec\u4f7f\u7528 0 \u8868\u793a\u5047\uff0c\u4f7f\u7528\u975e\u96f6\u503c\uff0c\u5982 1 \u8868\u793a\u771f\uff09\u3002<code>True</code>\u3001<code>False</code> \u548c <code>bool</code> \u7c7b\u578b\u5728 2.x \u7248\u672c\u4e2d\u88ab\u6dfb\u52a0\uff0c\u4f46\u4e3a\u4e86\u5411\u540e\u517c\u5bb9\uff0c<code>True</code> \u548c <code>False</code> \u4e0d\u80fd\u6210\u4e3a\u5e38\u91cf\u3002\u5b83\u4eec\u53ea\u662f\u5185\u7f6e\u53d8\u91cf\uff0c\u53ef\u4ee5\u91cd\u65b0\u5206\u914d\u5b83\u4eec</p> </li> <li> <p>Python 3 \u5411\u540e\u4e0d\u517c\u5bb9\uff0c\u95ee\u9898\u7ec8\u4e8e\u5f97\u5230\u89e3\u51b3\uff0c\u56e0\u6b64\u6700\u540e\u4e00\u4e2a\u4ee3\u7801\u6bb5\u4e0d\u9002\u7528\u4e8e Python 3.x\uff01</p> </li> </ul>"},{"location":"CN/#class-attributes-and-instance-attributes","title":"&gt; Class attributes and instance attributes/\u7c7b\u5c5e\u6027\u548c\u5b9e\u4f8b\u5c5e\u6027","text":"<p>1. <pre><code>class A:\n    x = 1\n\nclass B(A):\n    pass\n\nclass C(A):\n    pass\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; A.x, B.x, C.x\n(1, 1, 1)\n&gt;&gt;&gt; B.x = 2\n&gt;&gt;&gt; A.x, B.x, C.x\n(1, 2, 1)\n&gt;&gt;&gt; A.x = 3\n&gt;&gt;&gt; A.x, B.x, C.x\n(3, 2, 3)\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.x, A.x\n(3, 3)\n&gt;&gt;&gt; a.x += 1\n&gt;&gt;&gt; a.x, A.x\n(4, 3)\n</code></pre></p> <p>2. <pre><code>class SomeClass:\n    some_var = 15\n    some_list = [5]\n    another_list = [5]\n    def __init__(self, x):\n        self.some_var = x + 1\n        self.some_list = self.some_list + [x]\n        self.another_list += [x]\n</code></pre></p> <p>Output:</p> <pre><code>&gt;&gt;&gt; some_obj = SomeClass(420)\n&gt;&gt;&gt; some_obj.some_list\n[5, 420]\n&gt;&gt;&gt; some_obj.another_list\n[5, 420]\n&gt;&gt;&gt; another_obj = SomeClass(111)\n&gt;&gt;&gt; another_obj.some_list\n[5, 111]\n&gt;&gt;&gt; another_obj.another_list\n[5, 420, 111]\n&gt;&gt;&gt; another_obj.another_list is SomeClass.another_list\nTrue\n&gt;&gt;&gt; another_obj.another_list is some_obj.another_list\nTrue\n</code></pre>"},{"location":"CN/#_25","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf\u5728\u5185\u90e8\u662f\u901a\u8fc7\u7c7b\u5bf9\u8c61\u7684\u5b57\u5178\u6765\u5904\u7406(\u8bd1: \u5c31\u662f <code>__dict__</code> \u5c5e\u6027). \u5982\u679c\u5728\u5f53\u524d\u7c7b\u7684\u5b57\u5178\u4e2d\u627e\u4e0d\u5230\u7684\u8bdd\u5c31\u53bb\u5b83\u7684\u7236\u7c7b\u4e2d\u5bfb\u627e.</li> <li><code>+=</code> \u8fd0\u7b97\u7b26\u4f1a\u5728\u539f\u5730\u4fee\u6539\u53ef\u53d8\u5bf9\u8c61, \u800c\u4e0d\u662f\u521b\u5efa\u65b0\u5bf9\u8c61. \u56e0\u6b64, \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u4fee\u6539\u4e00\u4e2a\u5b9e\u4f8b\u7684\u5c5e\u6027\u4f1a\u5f71\u54cd\u5176\u4ed6\u5b9e\u4f8b\u548c\u7c7b\u5c5e\u6027.</li> </ul>"},{"location":"CN/#yielding-none-none","title":"&gt; yielding None/\u751f\u6210 None","text":"<pre><code>some_iterable = ('a', 'b')\n\ndef some_func(val):\n    return \"something\"\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; [x for x in some_iterable]\n['a', 'b']\n&gt;&gt;&gt; [(yield x) for x in some_iterable]\n&lt;generator object &lt;listcomp&gt; at 0x7f70b0a4ad58&gt;\n&gt;&gt;&gt; list([(yield x) for x in some_iterable])\n['a', 'b']\n&gt;&gt;&gt; list((yield x) for x in some_iterable)\n['a', None, 'b', None]\n&gt;&gt;&gt; list(some_func((yield x)) for x in some_iterable)\n['a', 'something', 'b', 'something']\n</code></pre></p>"},{"location":"CN/#_26","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u6765\u6e90\u548c\u89e3\u91ca\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230: https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions</li> <li>\u76f8\u5173\u9519\u8bef\u62a5\u544a: http://bugs.python.org/issue10544</li> <li>\u8fd9\u4e2abug\u57283.7\u4ee5\u540e\u7684\u7248\u672c\u4e2d\u4e0d\u88ab\u63a8\u8350\u4f7f\u7528, \u5e76\u57283.8\u4e2d\u88ab\u4fee\u590d. \u56e0\u6b64\u57283.8\u4e2d\u5c1d\u8bd5\u5728\u63a8\u5bfc\u5f0f\u4e2d\u4f7f\u7528 yield, \u53ea\u4f1a\u5f97\u5230\u4e00\u4e2a SyntaxError. \u8be6\u7ec6\u5185\u5bb9\u53ef\u4ee5\u770b3.7\u66f4\u65b0\u5185\u5bb9, 3.8\u66f4\u65b0\u5185\u5bb9.</li> </ul>"},{"location":"CN/#yielding-from-returnreturn","title":"&gt; Yielding from... return!/\u751f\u6210\u5668\u91cc\u7684return *","text":"<p>1.</p> <pre><code>def some_func(x):\n    if x == 3:\n        return [\"wtf\"]\n    else:\n        yield from range(x)\n</code></pre> <p>Output (&gt; 3.3):</p> <pre><code>&gt;&gt;&gt; list(some_func(3))\n[]\n</code></pre> <p><code>\"wtf\"</code> \u53bb\u54ea\u513f\u4e86\uff1f\u662f\u56e0\u4e3a<code>yield from</code>\u7684\u4e00\u4e9b\u7279\u6b8a\u6548\u679c\u5417\uff1f\u8ba9\u6211\u4eec\u9a8c\u8bc1\u4e00\u4e0b</p> <p>2.</p> <pre><code>def some_func(x):\n    if x == 3:\n        return [\"wtf\"]\n    else:\n        for i in range(x):\n          yield i\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; list(some_func(3))\n[]\n</code></pre> <p>\u540c\u6837\u7684\u7ed3\u679c\uff0c\u8fd9\u91cc\u4e5f\u4e0d\u8d77\u4f5c\u7528\u3002</p>"},{"location":"CN/#_27","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li>\u4ece Python 3.3 \u5f00\u59cb\uff0c\u53ef\u4ee5\u5728\u751f\u6210\u5668\u4e2d\u4f7f\u7528\u5e26\u6709\u503c\u7684 <code>return</code> \u8bed\u53e5\uff08\u53c2\u89c1 PEP380\uff09\u3002 \u5b98\u65b9\u6587\u6863 \u63cf\u8ff0\uff0c</li> </ul> <p>\"... \u751f\u6210\u5668\u4e2d\u7684 <code>return expr</code> \u4f1a\u5bfc\u81f4\u5728\u9000\u51fa\u751f\u6210\u5668\u65f6\u5f15\u53d1 <code>StopIteration(expr)</code>\u3002\"</p> <ul> <li> <p>\u5728 <code>some_func(3)</code> \u4f8b\u5b50\u4e2d\uff0c<code>return</code> \u8bed\u53e5\u5728\u5f00\u59cb\u5c31\u5f15\u53d1\u4e86<code>StopIteration</code>\u3002 <code>StopIteration</code> \u5f02\u5e38\u4f1a\u5728<code>list(...)</code> \u5305\u88c5\u5668\u548c<code>for</code> \u5faa\u73af\u4e2d\u81ea\u52a8\u6355\u83b7\u3002 \u56e0\u6b64\uff0c\u4ee5\u4e0a\u4e24\u4e2a\u7247\u6bb5\u90fd\u4ea7\u751f\u7684\u662f\u4e00\u4e2a\u7a7a\u5217\u8868\u3002</p> </li> <li> <p>\u8981\u4ece\u751f\u6210\u5668 <code>some_func</code> \u4e2d\u83b7\u53d6 <code>[\"wtf\"]</code>\uff0c\u6211\u4eec\u9700\u8981\u6355\u83b7 <code>StopIteration</code> \u5f02\u5e38\uff0c</p> <pre><code>try:\n    next(some_func(3))\nexcept StopIteration as e:\n    some_string = e.value\n</code></pre> <pre><code>&gt;&gt;&gt; some_string\n[\"wtf\"]\n</code></pre> </li> </ul>"},{"location":"CN/#nan-reflexivitynan","title":"&gt; Nan-reflexivity/Nan\u7684\u81ea\u53cd\u6027","text":"<p>1. <pre><code>a = float('inf')\nb = float('nan')\nc = float('-iNf')  # \u8fd9\u4e9b\u5b57\u7b26\u4e32\u4e0d\u533a\u5206\u5927\u5c0f\u5199\nd = float('nan')\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; a\ninf\n&gt;&gt;&gt; b\nnan\n&gt;&gt;&gt; c\n-inf\n&gt;&gt;&gt; float('some_other_string')\nValueError: could not convert string to float: some_other_string\n&gt;&gt;&gt; a == -c #inf==inf\nTrue\n&gt;&gt;&gt; None == None # None==None\nTrue\n&gt;&gt;&gt; b == d #\u4f46\u662f nan!=nan\nFalse\n&gt;&gt;&gt; 50/a\n0.0\n&gt;&gt;&gt; a/a\nnan\n&gt;&gt;&gt; 23 + b\nnan\n</code></pre></p> <p>2.</p> <pre><code>&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; y = x / x\n&gt;&gt;&gt; y is y # \u540c\u4e00\u6027(identity)\u5177\u5907\nTrue\n&gt;&gt;&gt; y == y # y\u4e0d\u5177\u5907\u76f8\u7b49\u6027(equality)\nFalse\n&gt;&gt;&gt; [y] == [y] # \u4f46\u5305\u542by\u7684\u5217\u8868\u9a8c\u8bc1\u76f8\u7b49\u6027(equality)\u6210\u529f\u4e86\nTrue\n</code></pre>"},{"location":"CN/#_28","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<p><code>'inf'</code> \u548c <code>'nan'</code> \u662f\u7279\u6b8a\u7684\u5b57\u7b26\u4e32(\u4e0d\u533a\u5206\u5927\u5c0f\u5199), \u5f53\u663e\u793a\u8f6c\u6362\u6210 <code>float</code> \u578b\u65f6, \u5b83\u4eec\u5206\u522b\u7528\u4e8e\u8868\u793a\u6570\u5b66\u610f\u4e49\u4e0a\u7684 \"\u65e0\u7a77\u5927\" \u548c \"\u975e\u6570\u5b57\". - \u7531\u4e8e\u6839\u636e IEEE \u6807\u51c6 <code>NaN != NaN</code>\uff0c\u9075\u5b88\u6b64\u89c4\u5219\u6253\u7834\u4e86 Python \u4e2d\u96c6\u5408\u5143\u7d20\u7684\u81ea\u53cd\u6027\u5047\u8bbe\uff0c\u5373\u5982\u679c <code>x</code> \u662f <code>list</code> \u7b49\u96c6\u5408\u7684\u4e00\u90e8\u5206\uff0c\u5219\u6bd4\u8f83\u7b49\u8fd0\u7b97\u7684\u5b9e\u73b0\u57fa\u4e8e\u5047\u8bbe<code>x == x</code>\u3002\u7531\u4e8e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5728\u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20\u65f6\u9996\u5148\u6bd4\u8f83\u8eab\u4efd<code>identity</code>\uff08\u56e0\u4e3a\u5b83\u66f4\u5feb\uff09\uff0c\u5e76\u4e14\u4ec5\u5728\u8eab\u4efd\u4e0d\u5339\u914d\u65f6\u624d\u6bd4\u8f83\u503c\u3002\u4ee5\u4e0b\u7247\u6bb5\u5c06\u66f4\u6e05\u695a\u5730\u8bf4\u660e\uff0c</p> <pre><code>&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; x == x, [x] == [x]\n(False, True)\n&gt;&gt;&gt; y = float('nan')\n&gt;&gt;&gt; y == y, [y] == [y]\n(False, True)\n&gt;&gt;&gt; x == y, [x] == [y]\n(False, False)\n</code></pre> <p>\u7531\u4e8e <code>x</code> \u548c <code>y</code> \u7684\u8eab\u4efd<code>identity</code>\u4e0d\u540c\uff0c\u6240\u4ee5\u8003\u8651\u7684\u503c\u4e5f\u4e0d\u540c\uff1b \u56e0\u6b64\u8fd9\u6b21\u6bd4\u8f83\u8fd4\u56de\u201cFalse\u201d\u3002</p> <ul> <li>\u611f\u5174\u8da3\u53ef\u4ee5\u9605\u8bfb Reflexivity, and other pillars of civilization</li> </ul>"},{"location":"CN/#mutating-the-immutable","title":"&gt; Mutating the immutable!/\u5f3a\u4eba\u6240\u96be","text":"<pre><code>some_tuple = (\"A\", \"tuple\", \"with\", \"values\")\nanother_tuple = ([1, 2], [3, 4], [5, 6])\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; some_tuple[2] = \"change this\"\nTypeError: 'tuple' object does not support item assignment\n&gt;&gt;&gt; another_tuple[2].append(1000) # \u8fd9\u91cc\u4e0d\u51fa\u73b0\u9519\u8bef\n&gt;&gt;&gt; another_tuple\n([1, 2], [3, 4], [5, 6, 1000])\n&gt;&gt;&gt; another_tuple[2] += [99, 999]\nTypeError: 'tuple' object does not support item assignment\n&gt;&gt;&gt; another_tuple\n([1, 2], [3, 4], [5, 6, 1000, 99, 999])\n</code></pre></p> <p>\u6211\u8fd8\u4ee5\u4e3a\u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7684\u5462...</p>"},{"location":"CN/#_29","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li> <p>\u5f15\u7528 https://docs.python.org/2/reference/datamodel.html</p> <p>\u4e0d\u53ef\u53d8\u5e8f\u5217     \u4e0d\u53ef\u53d8\u5e8f\u5217\u7684\u5bf9\u8c61\u4e00\u65e6\u521b\u5efa\u5c31\u4e0d\u80fd\u518d\u6539\u53d8. (\u5982\u679c\u5bf9\u8c61\u5305\u542b\u5bf9\u5176\u4ed6\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u5219\u8fd9\u4e9b\u5176\u4ed6\u5bf9\u8c61\u53ef\u80fd\u662f\u53ef\u53d8\u7684\u5e76\u4e14\u53ef\u80fd\u4f1a\u88ab\u4fee\u6539; \u4f46\u662f\uff0c\u7531\u4e0d\u53ef\u53d8\u5bf9\u8c61\u76f4\u63a5\u5f15\u7528\u7684\u5bf9\u8c61\u96c6\u5408\u4e0d\u80fd\u66f4\u6539.)</p> </li> <li> <p><code>+=</code> \u64cd\u4f5c\u7b26\u5728\u539f\u5730\u4fee\u6539\u4e86\u5217\u8868. \u5143\u7d20\u8d4b\u503c\u64cd\u4f5c\u5e76\u4e0d\u5de5\u4f5c, \u4f46\u662f\u5f53\u5f02\u5e38\u629b\u51fa\u65f6, \u5143\u7d20\u5df2\u7ecf\u5728\u539f\u5730\u88ab\u4fee\u6539\u4e86.</p> </li> </ul> <p>(\u8bd1: \u5bf9\u4e8e\u4e0d\u53ef\u53d8\u5bf9\u8c61, \u8fd9\u91cc\u6307tuple, <code>+=</code> \u5e76\u4e0d\u662f\u539f\u5b50\u64cd\u4f5c, \u800c\u662f <code>extend</code> \u548c <code>=</code> \u4e24\u4e2a\u52a8\u4f5c, \u8fd9\u91cc <code>=</code> \u64cd\u4f5c\u867d\u7136\u4f1a\u629b\u51fa\u5f02\u5e38, \u4f46 <code>extend</code> \u64cd\u4f5c\u5df2\u7ecf\u4fee\u6539\u6210\u529f\u4e86. \u8be6\u7ec6\u89e3\u91ca\u53ef\u4ee5\u770b\u8fd9\u91cc)</p>"},{"location":"CN/#the-disappearing-variable-from-outer-scope","title":"&gt; The disappearing variable from outer scope/\u6d88\u5931\u7684\u5916\u90e8\u53d8\u91cf","text":"<pre><code>e = 7\ntry:\n    raise Exception()\nexcept Exception as e:\n    pass\n</code></pre> <p>Output (Python 2.x): <pre><code>&gt;&gt;&gt; print(e)\n# prints nothing\n</code></pre></p> <p>Output (Python 3.x): <pre><code>&gt;&gt;&gt; print(e)\nNameError: name 'e' is not defined\n</code></pre></p>"},{"location":"CN/#_30","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u51fa\u5904: https://docs.python.org/3/reference/compound_stmts.html#except</li> </ul> <p>\u5f53\u4f7f\u7528 <code>as</code> \u4e3a\u76ee\u6807\u5206\u914d\u5f02\u5e38\u7684\u65f6\u5019, \u5c06\u5728except\u5b50\u53e5\u7684\u672b\u5c3e\u6e05\u9664\u8be5\u5f02\u5e38.</p> <p>\u8fd9\u5c31\u597d\u50cf</p> <pre><code>except E as N:\n    foo\n</code></pre> <p>\u4f1a\u88ab\u7ffb\u8bd1\u6210</p> <pre><code>except E as N:\n    try:\n        foo\n    finally:\n        del N\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u5f02\u5e38\u5fc5\u987b\u5728\u88ab\u8d4b\u503c\u7ed9\u5176\u4ed6\u53d8\u91cf\u624d\u80fd\u5728 <code>except</code> \u5b50\u53e5\u4e4b\u540e\u5f15\u7528\u5b83. \u800c\u5f02\u5e38\u4e4b\u6240\u4ee5\u4f1a\u88ab\u6e05\u9664, \u5219\u662f\u7531\u4e8e\u4e0a\u9762\u9644\u52a0\u7684\u56de\u6eaf\u4fe1\u606f(trackback)\u4f1a\u548c\u6808\u5e27(stack frame)\u5f62\u6210\u5faa\u73af\u5f15\u7528, \u4f7f\u5f97\u8be5\u6808\u5e27\u4e2d\u7684\u6240\u6709\u672c\u5730\u53d8\u91cf\u5728\u4e0b\u4e00\u6b21\u5783\u573e\u56de\u6536\u53d1\u751f\u4e4b\u524d\u90fd\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001.(\u8bd1: \u4e5f\u5c31\u662f\u8bf4\u4e0d\u4f1a\u88ab\u56de\u6536)</p> <ul> <li> <p>\u5b50\u53e5\u5728 Python \u4e2d\u5e76\u6ca1\u6709\u72ec\u7acb\u7684\u4f5c\u7528\u57df. \u793a\u4f8b\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u5904\u4e8e\u540c\u4e00\u4f5c\u7528\u57df\u5185, \u6240\u4ee5\u53d8\u91cf <code>e</code> \u4f1a\u7531\u4e8e\u6267\u884c\u4e86 <code>except</code> \u5b50\u53e5\u800c\u88ab\u5220\u9664. \u800c\u5bf9\u4e8e\u6709\u72ec\u7acb\u7684\u5185\u90e8\u4f5c\u7528\u57df\u7684\u51fd\u6570\u6765\u8bf4\u60c5\u51b5\u5c31\u4e0d\u4e00\u6837\u4e86. \u4e0b\u9762\u7684\u4f8b\u5b50\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9:</p> <pre><code>def f(x):\n    del(x)\n    print(x)\n\nx = 5\ny = [5, 4, 3]\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt;f(x)\nUnboundLocalError: local variable 'x' referenced before assignment\n&gt;&gt;&gt;f(y)\nUnboundLocalError: local variable 'x' referenced before assignment\n&gt;&gt;&gt; x\n5\n&gt;&gt;&gt; y\n[5, 4, 3]\n</code></pre></p> </li> <li> <p>\u5728 Python 2.x \u4e2d, <code>Exception()</code> \u5b9e\u4f8b\u88ab\u8d4b\u503c\u7ed9\u4e86\u53d8\u91cf <code>e</code>, \u6240\u4ee5\u5f53\u4f60\u5c1d\u8bd5\u6253\u5370\u7ed3\u679c\u7684\u65f6\u5019, \u5b83\u7684\u8f93\u51fa\u4e3a\u7a7a.\uff08\u8bd1: \u6b63\u5e38\u7684Exception\u5b9e\u4f8b\u6253\u5370\u51fa\u6765\u5c31\u662f\u7a7a\uff09</p> <p>Output (Python 2.x): <pre><code>&gt;&gt;&gt; e\nException()\n&gt;&gt;&gt; print e\n# \u6ca1\u6709\u6253\u5370\u4efb\u4f55\u5185\u5bb9!\n</code></pre></p> </li> </ul>"},{"location":"CN/#the-mysterious-key-type-conversion","title":"&gt; The mysterious key type conversion/\u795e\u79d8\u7684\u952e\u578b\u8f6c\u6362 *","text":"<pre><code>class SomeClass(str):\n    pass\n\nsome_dict = {'s':42}\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; type(list(some_dict.keys())[0])\nstr\n&gt;&gt;&gt; s = SomeClass('s')\n&gt;&gt;&gt; some_dict[s] = 40\n&gt;&gt;&gt; some_dict # \u9884\u671f: \u4e24\u4e2a\u4e0d\u540c\u7684\u952e\u503c\u5bf9\n{'s': 40}\n&gt;&gt;&gt; type(list(some_dict.keys())[0])\nstr\n</code></pre></p>"},{"location":"CN/#_31","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u7531\u4e8e <code>SomeClass</code> \u4f1a\u4ece <code>str</code> \u81ea\u52a8\u7ee7\u627f <code>__hash__</code> \u65b9\u6cd5, \u6240\u4ee5 <code>s</code> \u5bf9\u8c61\u548c <code>\"s\"</code> \u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\u662f\u76f8\u540c\u7684.</li> <li>\u800c <code>SomeClass(\"s\") == \"s\"</code> \u4e3a <code>True</code> \u662f\u56e0\u4e3a <code>SomeClass</code> \u4e5f\u7ee7\u627f\u4e86 <code>str</code> \u7c7b <code>__eq__</code> \u65b9\u6cd5.</li> <li>\u7531\u4e8e\u4e24\u8005\u7684\u54c8\u5e0c\u503c\u76f8\u540c\u4e14\u76f8\u7b49, \u6240\u4ee5\u5b83\u4eec\u5728\u5b57\u5178\u4e2d\u8868\u793a\u76f8\u540c\u7684\u952e.</li> <li>\u5982\u679c\u60f3\u8981\u5b9e\u73b0\u671f\u671b\u7684\u529f\u80fd, \u6211\u4eec\u53ef\u4ee5\u91cd\u5b9a\u4e49 <code>SomeClass</code> \u7684 <code>__eq__</code> \u65b9\u6cd5.   <pre><code>class SomeClass(str):\n  def __eq__(self, other):\n      return (\n          type(self) is SomeClass\n          and type(other) is SomeClass\n          and super().__eq__(other)\n      )\n\n  # \u5f53\u6211\u4eec\u81ea\u5b9a\u4e49 __eq__ \u65b9\u6cd5\u65f6, Python \u4e0d\u4f1a\u518d\u81ea\u52a8\u7ee7\u627f __hash__ \u65b9\u6cd5\n  # \u6240\u4ee5\u6211\u4eec\u4e5f\u9700\u8981\u5b9a\u4e49\u5b83\n  __hash__ = str.__hash__\n\nsome_dict = {'s':42}\n</code></pre></li> </ul> <p>Output: <pre><code>&gt;&gt;&gt; s = SomeClass('s')\n&gt;&gt;&gt; some_dict[s] = 40\n&gt;&gt;&gt; some_dict\n{'s': 40, 's': 42}\n&gt;&gt;&gt; keys = list(some_dict.keys())\n&gt;&gt;&gt; type(keys[0]), type(keys[1])\n(__main__.SomeClass, str)\n</code></pre></p>"},{"location":"CN/#lets-see-if-you-can-guess-this","title":"&gt; Let's see if you can guess this?/\u770b\u770b\u4f60\u80fd\u5426\u731c\u5230\u8fd9\u4e00\u70b9?","text":"<pre><code>a, b = a[b] = {}, 5\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; a\n{5: ({...}, 5)}\n</code></pre></p>"},{"location":"CN/#_32","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u6839\u636e Python \u8bed\u8a00\u53c2\u8003, \u8d4b\u503c\u8bed\u53e5\u7684\u5f62\u5f0f\u5982\u4e0b   <pre><code>(target_list \"=\")+ (expression_list | yield_expression)\n</code></pre></li> </ul> <p>\u8d4b\u503c\u8bed\u53e5\u8ba1\u7b97\u8868\u8fbe\u5f0f\u5217\u8868(expression list)(\u7262\u8bb0 \u8fd9\u53ef\u4ee5\u662f\u5355\u4e2a\u8868\u8fbe\u5f0f\u6216\u4ee5\u9017\u53f7\u5206\u9694\u7684\u5217\u8868, \u540e\u8005\u8fd4\u56de\u5143\u7ec4)\u5e76\u5c06\u5355\u4e2a\u7ed3\u679c\u5bf9\u8c61\u4ece\u5de6\u5230\u53f3\u5206\u914d\u7ed9\u76ee\u6807\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u9879.</p> <ul> <li> <p><code>(target_list \"=\")+</code> \u4e2d\u7684 <code>+</code> \u610f\u5473\u7740\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u76ee\u6807\u5217\u8868. \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d, \u76ee\u6807\u5217\u8868\u662f <code>a, b</code> \u548c <code>a[b]</code> (\u6ce8\u610f\u8868\u8fbe\u5f0f\u5217\u8868\u53ea\u80fd\u6709\u4e00\u4e2a, \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u662f <code>{}, 5</code>).</p> </li> <li> <p>\u8868\u8fbe\u5f0f\u5217\u8868\u8ba1\u7b97\u7ed3\u675f\u540e, \u5c06\u5176\u503c\u81ea\u52a8\u89e3\u5305\u540e\u4ece\u5de6\u5230\u53f3\u5206\u914d\u7ed9\u76ee\u6807\u5217\u8868(target list). \u56e0\u6b64, \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d, \u9996\u5148\u5c06 <code>{}, 5</code> \u5143\u7ec4\u5e76\u8d4b\u503c\u7ed9 <code>a, b</code>, \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230 <code>a = {}</code> \u4e14 <code>b = 5</code>.</p> </li> <li> <p><code>a</code> \u88ab\u8d4b\u503c\u7684 <code>{}</code> \u662f\u53ef\u53d8\u5bf9\u8c61.</p> </li> <li> <p>\u7b2c\u4e8c\u4e2a\u76ee\u6807\u5217\u8868\u662f <code>a[b]</code> (\u4f60\u53ef\u80fd\u89c9\u5f97\u8fd9\u91cc\u4f1a\u62a5\u9519, \u56e0\u4e3a\u5728\u4e4b\u524d\u7684\u8bed\u53e5\u4e2d <code>a</code> \u548c <code>b</code> \u90fd\u8fd8\u6ca1\u6709\u88ab\u5b9a\u4e49. \u4f46\u662f\u522b\u5fd8\u4e86, \u6211\u4eec\u521a\u521a\u5c06 <code>a</code> \u8d4b\u503c <code>{}</code> \u4e14\u5c06 <code>b</code> \u8d4b\u503c\u4e3a <code>5</code>).</p> </li> <li> <p>\u73b0\u5728, \u6211\u4eec\u5c06\u901a\u8fc7\u5c06\u5b57\u5178\u4e2d\u952e <code>5</code> \u7684\u503c\u8bbe\u7f6e\u4e3a\u5143\u7ec4 <code>({}, 5)</code> \u6765\u521b\u5efa\u5faa\u73af\u5f15\u7528 (\u8f93\u51fa\u4e2d\u7684 <code>{...}</code> \u6307\u4e0e <code>a</code> \u5f15\u7528\u4e86\u76f8\u540c\u7684\u5bf9\u8c61). \u4e0b\u9762\u662f\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u5faa\u73af\u5f15\u7528\u7684\u4f8b\u5b50   <pre><code>&gt;&gt;&gt; some_list = some_list[0] = [0]\n&gt;&gt;&gt; some_list\n[[...]]\n&gt;&gt;&gt; some_list[0]\n[[...]]\n&gt;&gt;&gt; some_list is some_list[0]\nTrue\n&gt;&gt;&gt; some_list[0][0][0][0][0][0] == some_list\nTrue\n</code></pre>   \u6211\u4eec\u7684\u4f8b\u5b50\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5 (<code>a[b][0]</code> \u4e0e <code>a</code> \u662f\u76f8\u540c\u7684\u5bf9\u8c61)</p> </li> <li> <p>\u603b\u7ed3\u4e00\u4e0b, \u4f60\u4e5f\u53ef\u4ee5\u628a\u4f8b\u5b50\u62c6\u6210   <pre><code>a, b = {}, 5\na[b] = a, b\n</code></pre>   \u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 <code>a[b][0]</code> \u4e0e <code>a</code> \u662f\u76f8\u540c\u7684\u5bf9\u8c61\u6765\u8bc1\u660e\u662f\u5faa\u73af\u5f15\u7528   <pre><code>&gt;&gt;&gt; a[b][0] is a\nTrue\n</code></pre></p> </li> </ul>"},{"location":"CN/#exceeds-the-limit-for-integer-string-conversion","title":"&gt; Exceeds the limit for integer string conversion/\u6574\u578b\u8f6c\u5b57\u7b26\u4e32\u8d8a\u754c","text":"<pre><code>&gt;&gt;&gt; # Python 3.10.6\n&gt;&gt;&gt; int(\"2\" * 5432)\n\n&gt;&gt;&gt; # Python 3.10.8\n&gt;&gt;&gt; int(\"2\" * 5432)\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; # Python 3.10.6\n222222222222222222222222222222222222222222222222222222222222222...\n\n&gt;&gt;&gt; # Python 3.10.8\nTraceback (most recent call last):\n   ...\nValueError: Exceeds the limit (4300) for integer string conversion:\n   value has 5432 digits; use sys.set_int_max_str_digits()\n   to increase the limit.\n</code></pre></p>"},{"location":"CN/#_33","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u5bf9<code>int()</code>\u7684\u8c03\u7528\u5728Python 3.10.6\u4e2d\u8fd0\u884c\u826f\u597d\uff0c\u4f46\u5728Python 3.10.8\u4e2d\u5f15\u53d1ValueError\u3002\u8bf7\u6ce8\u610f\uff0cPython\u4ecd\u7136\u53ef\u4ee5\u5904\u7406\u5927\u6574\u6570\u3002\u53ea\u6709\u5728\u6574\u578b\u548c\u5b57\u7b26\u4e32\u4e4b\u95f4\u8f6c\u6362\u65f6\u624d\u4f1a\u51fa\u73b0\u6b64\u9519\u8bef\u3002</li> <li>\u5e78\u8fd0\u7684\u662f\uff0c\u5f53\u60a8\u5e0c\u671b\u64cd\u4f5c\u8d85\u8fc7\u5141\u8bb8\u7684\u4f4d\u6570\u9650\u5236\u65f6\uff0c\u53ef\u4ee5\u589e\u52a0\u8be5\u9650\u5236\u7684\u4e0a\u9650\u3002\u4e3a\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u4e4b\u4e00\uff1a<ul> <li>\u4f7f\u7528 -X int_max_str_digits \u7684\u547d\u4ee4\u884c\u53c2\u6570\uff08\u4f8b\u5982\uff0c python3 -X int_max_str_digits=640\uff09</li> <li>\u4f7f\u7528\u6765\u81easys\u6a21\u5757\u7684set_int_max_str_digits()\u51fd\u6570</li> <li>\u8bbe\u5b9a PYTHONINTMAXSTRDIGITS \u73af\u5883\u53d8\u91cf</li> </ul> </li> </ul> <p>\u66f4\u591a\u66f4\u6539\u8bbe\u7f6e\u4e0a\u9650\u7684\u64cd\u4f5c\u7ec6\u8282\u67e5\u770b\u6587\u6863\u3002</p>"},{"location":"CN/#section-slippery-slopes","title":"Section: Slippery Slopes/\u6ed1\u5761\u8c2c\u8bef","text":""},{"location":"CN/#modifying-a-dictionary-while-iterating-over-it","title":"&gt; Modifying a dictionary while iterating over it/\u8fed\u4ee3\u5b57\u5178\u65f6\u7684\u4fee\u6539","text":"<pre><code>x = {0: None}\n\nfor i in x:\n    del x[i]\n    x[i+1] = None\n    print(i)\n</code></pre> <p>Output (Python 2.7- Python 3.5):</p> <pre><code>0\n1\n2\n3\n4\n5\n6\n7\n</code></pre> <p>\u662f\u7684, \u5b83\u8fd0\u884c\u4e86\u516b\u6b21\u7136\u540e\u624d\u505c\u4e0b\u6765.</p>"},{"location":"CN/#_34","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>Python\u4e0d\u652f\u6301\u5bf9\u5b57\u5178\u8fdb\u884c\u8fed\u4ee3\u7684\u540c\u65f6\u4fee\u6539\u5b83.</li> <li>\u5b83\u4e4b\u6240\u4ee5\u8fd0\u884c8\u6b21, \u662f\u56e0\u4e3a\u5b57\u5178\u4f1a\u81ea\u52a8\u6269\u5bb9\u4ee5\u5bb9\u7eb3\u66f4\u591a\u952e\u503c(\u6211\u4eec\u67098\u6b21\u5220\u9664\u8bb0\u5f55, \u56e0\u6b64\u9700\u8981\u6269\u5bb9). \u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5b9e\u73b0\u7ec6\u8282. (\u8bd1: \u5e94\u8be5\u662f\u56e0\u4e3a\u5b57\u5178\u7684\u521d\u59cb\u6700\u5c0f\u503c\u662f8, \u6269\u5bb9\u4f1a\u5bfc\u81f4\u6563\u5217\u8868\u5730\u5740\u53d1\u751f\u53d8\u5316\u800c\u4e2d\u65ad\u5faa\u73af.)</li> <li>\u5728\u4e0d\u540c\u7684Python\u5b9e\u73b0\u4e2d\u5220\u9664\u952e\u7684\u5904\u7406\u65b9\u5f0f\u4ee5\u53ca\u8c03\u6574\u5927\u5c0f\u7684\u65f6\u95f4\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c.(\u8bd1: \u5c31\u662f\u8bf4\u4ec0\u4e48\u65f6\u5019\u6269\u5bb9\u5728\u4e0d\u540c\u7248\u672c\u4e2d\u53ef\u80fd\u662f\u4e0d\u540c\u7684, \u57283.6\u53ca3.7\u7684\u7248\u672c\u4e2d\u52305\u5c31\u4f1a\u81ea\u52a8\u6269\u5bb9\u4e86. \u4ee5\u540e\u4e5f\u6709\u53ef\u80fd\u518d\u6b21\u53d1\u751f\u53d8\u5316. \u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u6563\u5217\u51b2\u7a81. \u987a\u5e26\u4e00\u63d0, \u540e\u9762\u4e24\u6b21\u6269\u5bb9\u4f1a\u6269\u5c55\u4e3a32\u548c256. \u5373<code>8-&gt;32-&gt;256</code>.)</li> <li>\u66f4\u591a\u7684\u4fe1\u606f, \u4f60\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2aStackOverflow\u7684\u56de\u7b54, \u5b83\u8be6\u7ec6\u7684\u89e3\u91ca\u4e00\u4e2a\u7c7b\u4f3c\u7684\u4f8b\u5b50.</li> </ul>"},{"location":"CN/#stubborn-del-operator-del","title":"&gt; Stubborn <code>del</code> operator/\u575a\u5f3a\u7684 <code>del</code> *","text":"<pre><code>class SomeClass:\n    def __del__(self):\n        print(\"Deleted!\")\n</code></pre> <p>Output: 1. <pre><code>&gt;&gt;&gt; x = SomeClass()\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; del x # \u8fd9\u91cc\u5e94\u8be5\u4f1a\u8f93\u51fa \"Deleted!\"\n&gt;&gt;&gt; del y\nDeleted!\n</code></pre></p> <p>\u5537, \u7ec8\u4e8e\u5220\u9664\u4e86. \u4f60\u53ef\u80fd\u5df2\u7ecf\u731c\u5230\u4e86\u5728\u6211\u4eec\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u5220\u9664 <code>x</code> \u65f6\u662f\u4ec0\u4e48\u8ba9 <code>__del__</code> \u514d\u4e8e\u88ab\u8c03\u7528\u7684. \u90a3\u8ba9\u6211\u4eec\u7ed9\u8fd9\u4e2a\u4f8b\u5b50\u589e\u52a0\u70b9\u96be\u5ea6.</p> <p>2. <pre><code>&gt;&gt;&gt; x = SomeClass()\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; del x\n&gt;&gt;&gt; y # \u68c0\u67e5\u4e00\u4e0by\u662f\u5426\u5b58\u5728\n&lt;__main__.SomeClass instance at 0x7f98a1a67fc8&gt;\n&gt;&gt;&gt; del y # \u50cf\u4e4b\u524d\u4e00\u6837, \u8fd9\u91cc\u5e94\u8be5\u4f1a\u8f93\u51fa \"Deleted!\"\n&gt;&gt;&gt; globals() # \u597d\u5427, \u5e76\u6ca1\u6709. \u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u6240\u6709\u7684\u5168\u5c40\u53d8\u91cf\nDeleted!\n{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'SomeClass': &lt;class __main__.SomeClass at 0x7f98a1a5f668&gt;, '__package__': None, '__name__': '__main__', '__doc__': None}\n</code></pre></p> <p>\u597d\u4e86\uff0c\u73b0\u5728\u5b83\u88ab\u5220\u9664\u4e86 :confused:</p>"},{"location":"CN/#_35","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li><code>del x</code> \u5e76\u4e0d\u4f1a\u7acb\u523b\u8c03\u7528 <code>x.__del__()</code>.</li> <li>\u6bcf\u5f53\u9047\u5230 <code>del x</code>, Python \u4f1a\u5c06 <code>x</code> \u7684\u5f15\u7528\u6570\u51cf1, \u5f53 <code>x</code> \u7684\u5f15\u7528\u6570\u51cf\u52300\u65f6\u5c31\u4f1a\u8c03\u7528 <code>x.__del__()</code>.</li> <li>\u5728\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u4e2d, <code>y.__del__()</code> \u4e4b\u6240\u4ee5\u672a\u88ab\u8c03\u7528, \u662f\u56e0\u4e3a\u524d\u4e00\u6761\u8bed\u53e5 (<code>&gt;&gt;&gt; y</code>) \u5bf9\u540c\u4e00\u5bf9\u8c61\u521b\u5efa\u4e86\u53e6\u4e00\u4e2a\u5f15\u7528, \u4ece\u800c\u9632\u6b62\u5728\u6267\u884c <code>del y</code> \u540e\u5bf9\u8c61\u7684\u5f15\u7528\u6570\u53d8\u4e3a0.</li> <li>\u8c03\u7528 <code>globals</code> \u5bfc\u81f4\u5f15\u7528\u88ab\u9500\u6bc1, \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u770b\u5230 \"Deleted!\" \u7ec8\u4e8e\u88ab\u8f93\u51fa\u4e86.</li> <li>(\u8bd1: \u8fd9\u5176\u5b9e\u662f Python \u4ea4\u4e92\u89e3\u91ca\u5668\u7684\u7279\u6027, \u5b83\u4f1a\u81ea\u52a8\u8ba9 <code>_</code> \u4fdd\u5b58\u4e0a\u4e00\u4e2a\u8868\u8fbe\u5f0f\u8f93\u51fa\u7684\u503c, \u8be6\u7ec6\u53ef\u4ee5\u770b\u8fd9\u91cc.)</li> </ul>"},{"location":"CN/#the-out-of-scope-variable","title":"&gt; The out of scope variable/\u5916\u90e8\u4f5c\u7528\u57df\u53d8\u91cf","text":"<p>1. <pre><code>a = 1\ndef some_func():\n    return a\n\ndef another_func():\n    a += 1\n    return a\n</code></pre></p> <p>2. <pre><code>def some_closure_func():\n    a = 1\n    def some_inner_func():\n        return a\n    return some_inner_func()\n\ndef another_closure_func():\n    a = 1\n    def another_inner_func():\n        a += 1\n        return a\n    return another_inner_func()\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; some_func()\n1\n&gt;&gt;&gt; another_func()\nUnboundLocalError: local variable 'a' referenced before assignment\n\n&gt;&gt;&gt; some_closure_func()\n1\n&gt;&gt;&gt; another_closure_func()\nUnboundLocalError: local variable 'a' referenced before assignment\n</code></pre></p>"},{"location":"CN/#_36","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u5f53\u4f60\u5728\u4f5c\u7528\u57df\u4e2d\u5bf9\u53d8\u91cf\u8fdb\u884c\u8d4b\u503c\u65f6, \u53d8\u91cf\u4f1a\u53d8\u6210\u8be5\u4f5c\u7528\u57df\u5185\u7684\u5c40\u90e8\u53d8\u91cf. \u56e0\u6b64 <code>a</code> \u4f1a\u53d8\u6210 <code>another_func</code> \u51fd\u6570\u4f5c\u7528\u57df\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf, \u4f46\u5b83\u5728\u51fd\u6570\u4f5c\u7528\u57df\u4e2d\u5e76\u6ca1\u6709\u88ab\u521d\u59cb\u5316, \u6240\u4ee5\u4f1a\u5f15\u53d1\u9519\u8bef.</li> <li>\u60f3\u8981\u5728 <code>another_func</code> \u4e2d\u4fee\u6539\u5916\u90e8\u4f5c\u7528\u57df\u53d8\u91cf <code>a</code> \u7684\u8bdd, \u53ef\u4ee5\u4f7f\u7528 <code>global</code> \u5173\u952e\u5b57.   <pre><code>def another_func()\n    global a\n    a += 1\n    return a\n</code></pre></li> </ul> <p>Output: <pre><code>&gt;&gt;&gt; another_func()\n2\n</code></pre></p> <ul> <li>\u5728 <code>another_closure_func</code> \u51fd\u6570\u4e2d\uff0c<code>a</code> \u4f1a\u53d8\u6210 <code>another_inner_func</code> \u51fd\u6570\u4f5c\u7528\u57df\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf, \u4f46\u5b83\u5728\u540c\u4e00\u4f5c\u7528\u57df\u4e2d\u5e76\u6ca1\u6709\u88ab\u521d\u59cb\u5316, \u6240\u4ee5\u4f1a\u5f15\u53d1\u9519\u8bef\u3002</li> <li>\u60f3\u8981\u5728 <code>another_inner_func</code> \u4e2d\u4fee\u6539\u5916\u90e8\u4f5c\u7528\u57df\u53d8\u91cf <code>a</code> \u7684\u8bdd, \u53ef\u4ee5\u4f7f\u7528 <code>nonlocal</code> \u5173\u952e\u5b57\u3002nonlocal \u8868\u8fbe\u5f0f\u7528\u4e8e\uff08\u9664\u5168\u5c40\u4f5c\u7528\u57df\u5916\uff09\u6700\u8fd1\u4e00\u7ea7\u7684\u5916\u90e8\u4f5c\u7528\u57df\u3002</li> </ul> <pre><code>def another_func():\n    a = 1\n    def another_inner_func():\n        nonlocal a\n        a += 1\n        return a\n    return another_inner_func()\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; another_func()\n2\n</code></pre></p> <ul> <li><code>global</code> and <code>nonlocal</code> \u5173\u952e\u5b57\u544a\u8bc9 <code>Python</code> \u89e3\u91ca\u5668\uff0c\u4e0d\u8981\u58f0\u660e\u65b0\u53d8\u91cf\uff0c\u800c\u662f\u5728\u76f8\u5e94\u7684\u5916\u90e8\u4f5c\u7528\u57df\u4e2d\u67e5\u627e\u53d8\u91cf\u3002</li> <li>\u53ef\u4ee5\u9605\u8bfb\u8fd9\u4e2a\u7b80\u77ed\u5374\u5f88\u68d2\u7684\u6307\u5357, \u4e86\u89e3\u66f4\u591a\u5173\u4e8e Python \u4e2d\u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df\u7684\u5de5\u4f5c\u539f\u7406\u3002</li> </ul>"},{"location":"CN/#deleting-a-list-item-while-iterating","title":"&gt; Deleting a list item while iterating/\u8fed\u4ee3\u5217\u8868\u65f6\u5220\u9664\u5143\u7d20","text":"<pre><code>list_1 = [1, 2, 3, 4]\nlist_2 = [1, 2, 3, 4]\nlist_3 = [1, 2, 3, 4]\nlist_4 = [1, 2, 3, 4]\n\nfor idx, item in enumerate(list_1):\n    del item\n\nfor idx, item in enumerate(list_2):\n    list_2.remove(item)\n\nfor idx, item in enumerate(list_3[:]):\n    list_3.remove(item)\n\nfor idx, item in enumerate(list_4):\n    list_4.pop(idx)\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; list_1\n[1, 2, 3, 4]\n&gt;&gt;&gt; list_2\n[2, 4]\n&gt;&gt;&gt; list_3\n[]\n&gt;&gt;&gt; list_4\n[2, 4]\n</code></pre></p> <p>\u4f60\u80fd\u731c\u5230\u4e3a\u4ec0\u4e48\u8f93\u51fa\u662f <code>[2, 4]</code> \u5417?</p>"},{"location":"CN/#_37","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li> <p>\u5728\u8fed\u4ee3\u65f6\u4fee\u6539\u5bf9\u8c61\u662f\u4e00\u4e2a\u5f88\u611a\u8822\u7684\u4e3b\u610f. \u6b63\u786e\u7684\u505a\u6cd5\u662f\u8fed\u4ee3\u5bf9\u8c61\u7684\u526f\u672c, <code>list_3[:]</code> \u5c31\u662f\u8fd9\u4e48\u505a\u7684.</p> <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4]\n&gt;&gt;&gt; id(some_list)\n139798789457608\n&gt;&gt;&gt; id(some_list[:]) # \u6ce8\u610fpython\u4e3a\u5207\u7247\u5217\u8868\u521b\u5efa\u4e86\u65b0\u5bf9\u8c61.\n139798779601192\n</code></pre> </li> </ul> <p><code>del</code>, <code>remove</code> \u548c <code>pop</code> \u7684\u4e0d\u540c: * <code>del var_name</code> \u53ea\u662f\u4ece\u672c\u5730\u6216\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u4e2d\u5220\u9664\u4e86 <code>var_name</code> (\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 <code>list_1</code> \u6ca1\u6709\u53d7\u5230\u5f71\u54cd). * <code>remove</code> \u4f1a\u5220\u9664\u7b2c\u4e00\u4e2a\u5339\u914d\u5230\u7684\u6307\u5b9a\u503c, \u800c\u4e0d\u662f\u7279\u5b9a\u7684\u7d22\u5f15, \u5982\u679c\u627e\u4e0d\u5230\u503c\u5219\u629b\u51fa <code>ValueError</code> \u5f02\u5e38. * <code>pop</code> \u5219\u4f1a\u5220\u9664\u6307\u5b9a\u7d22\u5f15\u5904\u7684\u5143\u7d20\u5e76\u8fd4\u56de\u5b83, \u5982\u679c\u6307\u5b9a\u4e86\u65e0\u6548\u7684\u7d22\u5f15\u5219\u629b\u51fa <code>IndexError</code> \u5f02\u5e38.</p> <p>\u4e3a\u4ec0\u4e48\u8f93\u51fa\u662f <code>[2, 4]</code>? - \u5217\u8868\u8fed\u4ee3\u662f\u6309\u7d22\u5f15\u8fdb\u884c\u7684, \u6240\u4ee5\u5f53\u6211\u4eec\u4ece <code>list_2</code> \u6216 <code>list_4</code> \u4e2d\u5220\u9664 <code>1</code> \u65f6, \u5217\u8868\u7684\u5185\u5bb9\u5c31\u53d8\u6210\u4e86 <code>[2, 3, 4]</code>. \u5269\u4f59\u5143\u7d20\u4f1a\u4f9d\u6b21\u4f4d\u79fb, \u4e5f\u5c31\u662f\u8bf4, <code>2</code> \u7684\u7d22\u5f15\u4f1a\u53d8\u4e3a 0, <code>3</code> \u4f1a\u53d8\u4e3a 1. \u7531\u4e8e\u4e0b\u4e00\u6b21\u8fed\u4ee3\u5c06\u83b7\u53d6\u7d22\u5f15\u4e3a 1 \u7684\u5143\u7d20 (\u5373 <code>3</code>), \u56e0\u6b64 <code>2</code> \u5c06\u88ab\u5f7b\u5e95\u7684\u8df3\u8fc7. \u7c7b\u4f3c\u7684\u60c5\u51b5\u4f1a\u4ea4\u66ff\u53d1\u751f\u5728\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0a.</p> <ul> <li>\u53c2\u8003\u8fd9\u4e2aStackOverflow\u7684\u56de\u7b54\u6765\u89e3\u91ca\u8fd9\u4e2a\u4f8b\u5b50</li> <li>\u5173\u4e8ePython\u4e2d\u5b57\u5178\u7684\u7c7b\u4f3c\u4f8b\u5b50, \u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2aStackoverflow\u7684\u56de\u7b54.</li> </ul>"},{"location":"CN/#lossy-zip-of-iteratorszip","title":"&gt; Lossy zip of iterators/\u4e22\u4e09\u843d\u56db\u7684zip *","text":"<pre><code>&gt;&gt;&gt; numbers = list(range(7))\n&gt;&gt;&gt; numbers\n[0, 1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; first_three, remaining = numbers[:3], numbers[3:]\n&gt;&gt;&gt; first_three, remaining\n([0, 1, 2], [3, 4, 5, 6])\n&gt;&gt;&gt; numbers_iter = iter(numbers)\n&gt;&gt;&gt; list(zip(numbers_iter, first_three)) \n[(0, 0), (1, 1), (2, 2)]\n# so far so good, let's zip the remaining\n&gt;&gt;&gt; list(zip(numbers_iter, remaining))\n[(4, 3), (5, 4), (6, 5)]\n</code></pre> <p><code>numbers</code> \u5217\u8868\u4e2d\u7684\u5143\u7d20 <code>3</code> \u54ea\u91cc\u53bb\u4e86\uff1f</p>"},{"location":"CN/#_38","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li> <p>\u6839\u636ePython \u6587\u6863\uff0c <code>zip</code> \u51fd\u6570\u7684\u5927\u6982\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>def zip(*iterables):\n    sentinel = object()\n    iterators = [iter(it) for it in iterables]\n    while iterators:\n        result = []\n        for it in iterators:\n            elem = next(it, sentinel)\n            if elem is sentinel: return\n            result.append(elem)\n        yield tuple(result)\n</code></pre> </li> <li> <p>\u8be5\u51fd\u6570\u63a5\u53d7\u4efb\u610f\u6570\u91cf\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u901a\u8fc7\u8c03\u7528 <code>next</code> \u51fd\u6570\u5c06\u5b83\u4eec\u7684\u6bcf\u4e2a\u9879\u76ee\u6dfb\u52a0\u5230 <code>result</code> \u5217\u8868\u4e2d\uff0c\u5e76\u5728\u4efb\u4e00\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8017\u5c3d\u65f6\u505c\u6b62\u3002</p> </li> <li>\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4efb\u4e00\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7528\u5c3d\u65f6\uff0c<code>result</code> \u5217\u8868\u4e2d\u7684\u73b0\u6709\u5143\u7d20\u5c06\u88ab\u4e22\u5f03\u3002\u8fd9\u5c31\u662f <code>numbers_iter</code> \u4e2d\u7684 <code>3</code> \u6240\u53d1\u751f\u7684\u60c5\u51b5\u3002</li> <li> <p>\u4f7f\u7528 zip \u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u7684\u6b63\u786e\u65b9\u6cd5\u662f:</p> <pre><code>&gt;&gt;&gt; numbers = list(range(7))\n&gt;&gt;&gt; numbers_iter = iter(numbers)\n&gt;&gt;&gt; list(zip(first_three, numbers_iter))\n[(0, 0), (1, 1), (2, 2)]\n&gt;&gt;&gt; list(zip(remaining, numbers_iter))\n[(3, 3), (4, 4), (5, 5), (6, 6)]\n</code></pre> <p><code>zip</code> \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5e94\u5f53\u662f\u6709\u6700\u5c11\u5143\u7d20\u7684\u90a3\u4e2a\u3002</p> </li> </ul>"},{"location":"CN/#loop-variables-leaking-out","title":"&gt; Loop variables leaking out!/\u5faa\u73af\u53d8\u91cf\u6cc4\u6f0f!","text":"<p>1. <pre><code>for x in range(7):\n    if x == 6:\n        print(x, ': for x inside loop')\nprint(x, ': x in global')\n</code></pre></p> <p>Output: <pre><code>6 : for x inside loop\n6 : x in global\n</code></pre></p> <p>\u4f46\u662f <code>x</code> \u4ece\u672a\u5728\u5faa\u73af\u5916\u88ab\u5b9a\u4e49...</p> <p>2. <pre><code># \u8fd9\u6b21\u6211\u4eec\u5148\u521d\u59cb\u5316x\nx = -1\nfor x in range(7):\n    if x == 6:\n        print(x, ': for x inside loop')\nprint(x, ': x in global')\n</code></pre></p> <p>Output: <pre><code>6 : for x inside loop\n6 : x in global\n</code></pre></p> <p>3. <pre><code>x = 1\nprint([x for x in range(5)])\nprint(x, ': x in global')\n</code></pre></p> <p>Output (on Python 2.x): <pre><code>[0, 1, 2, 3, 4]\n(4, ': x in global')\n</code></pre></p> <p>Output (on Python 3.x): <pre><code>[0, 1, 2, 3, 4]\n1 : x in global\n</code></pre></p>"},{"location":"CN/#_39","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li> <p>\u5728 Python \u4e2d, for \u5faa\u73af\u4f7f\u7528\u6240\u5728\u4f5c\u7528\u57df\u5e76\u5728\u7ed3\u675f\u540e\u4fdd\u7559\u5b9a\u4e49\u7684\u5faa\u73af\u53d8\u91cf. \u5982\u679c\u6211\u4eec\u66fe\u5728\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u4e2d\u5b9a\u4e49\u8fc7\u5faa\u73af\u53d8\u91cf. \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u5b83\u4f1a\u91cd\u65b0\u7ed1\u5b9a\u73b0\u6709\u53d8\u91cf.</p> </li> <li> <p>Python 2.x \u548c Python 3.x \u89e3\u91ca\u5668\u5728\u5217\u8868\u63a8\u5bfc\u5f0f\u793a\u4f8b\u4e2d\u7684\u8f93\u51fa\u5dee\u5f02, \u5728\u6587\u6863 What\u2019s New In Python 3.0 \u4e2d\u53ef\u4ee5\u627e\u5230\u76f8\u5173\u7684\u89e3\u91ca:</p> <p>\"\u5217\u8868\u63a8\u5bfc\u4e0d\u518d\u652f\u6301\u53e5\u6cd5\u5f62\u5f0f <code>[... for var in item1, item2, ...]</code>. \u53d6\u800c\u4ee3\u4e4b\u7684\u662f <code>[... for var in (item1, item2, ...)]</code>. \u53e6\u5916, \u6ce8\u610f\u5217\u8868\u63a8\u5bfc\u5177\u6709\u4e0d\u540c\u7684\u8bed\u4e49: \u5b83\u4eec\u66f4\u63a5\u8fd1\u4e8e <code>list()</code> \u6784\u9020\u51fd\u6570\u4e2d\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5\u7cd6(\u8bd1: \u8fd9\u4e00\u53e5\u6211\u4e5f\u4e0d\u662f\u5f88\u660e\u767d), \u7279\u522b\u662f\u5faa\u73af\u63a7\u5236\u53d8\u91cf\u4e0d\u518d\u6cc4\u6f0f\u5230\u5468\u56f4\u7684\u4f5c\u7528\u57df\u4e2d.\"</p> </li> </ul>"},{"location":"CN/#beware-of-default-mutable-arguments","title":"&gt; Beware of default mutable arguments!/\u5f53\u5fc3\u9ed8\u8ba4\u7684\u53ef\u53d8\u53c2\u6570!","text":"<pre><code>def some_func(default_arg=[]):\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; some_func()\n['some_string']\n&gt;&gt;&gt; some_func()\n['some_string', 'some_string']\n&gt;&gt;&gt; some_func([])\n['some_string']\n&gt;&gt;&gt; some_func()\n['some_string', 'some_string', 'some_string']\n</code></pre></p>"},{"location":"CN/#_40","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li> <p>Python\u4e2d\u51fd\u6570\u7684\u9ed8\u8ba4\u53ef\u53d8\u53c2\u6570\u5e76\u4e0d\u662f\u6bcf\u6b21\u8c03\u7528\u8be5\u51fd\u6570\u65f6\u90fd\u4f1a\u88ab\u521d\u59cb\u5316. \u76f8\u53cd, \u5b83\u4eec\u4f1a\u4f7f\u7528\u6700\u8fd1\u5206\u914d\u7684\u503c\u4f5c\u4e3a\u9ed8\u8ba4\u503c. \u5f53\u6211\u4eec\u660e\u786e\u7684\u5c06 <code>[]</code> \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 <code>some_func</code> \u7684\u65f6\u5019, \u5c31\u4e0d\u4f1a\u4f7f\u7528 <code>default_arg</code> \u7684\u9ed8\u8ba4\u503c, \u6240\u4ee5\u51fd\u6570\u4f1a\u8fd4\u56de\u6211\u4eec\u6240\u671f\u671b\u7684\u7ed3\u679c.</p> <pre><code>def some_func(default_arg=[]):\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; some_func.__defaults__ # \u8fd9\u91cc\u4f1a\u663e\u793a\u51fd\u6570\u7684\u9ed8\u8ba4\u53c2\u6570\u7684\u503c\n([],)\n&gt;&gt;&gt; some_func()\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string'],)\n&gt;&gt;&gt; some_func()\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string', 'some_string'],)\n&gt;&gt;&gt; some_func([])\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string', 'some_string'],)\n</code></pre></p> </li> <li> <p>\u907f\u514d\u53ef\u53d8\u53c2\u6570\u5bfc\u81f4\u7684\u9519\u8bef\u7684\u5e38\u89c1\u505a\u6cd5\u662f\u5c06 <code>None</code> \u6307\u5b9a\u4e3a\u53c2\u6570\u7684\u9ed8\u8ba4\u503c, \u7136\u540e\u68c0\u67e5\u662f\u5426\u6709\u503c\u4f20\u7ed9\u5bf9\u5e94\u7684\u53c2\u6570. \u4f8b:</p> <pre><code>def some_func(default_arg=None):\n    if not default_arg:\n        default_arg = []\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> </li> </ul>"},{"location":"CN/#catching-the-exceptions","title":"&gt; Catching the Exceptions/\u6355\u83b7\u5f02\u5e38","text":"<pre><code>some_list = [1, 2, 3]\ntry:\n    # \u8fd9\u91cc\u4f1a\u629b\u51fa\u5f02\u5e38 ``IndexError``\n    print(some_list[4])\nexcept IndexError, ValueError:\n    print(\"Caught!\")\n\ntry:\n    # \u8fd9\u91cc\u4f1a\u629b\u51fa\u5f02\u5e38 ``ValueError``\n    some_list.remove(4)\nexcept IndexError, ValueError:\n    print(\"Caught again!\")\n</code></pre> <p>Output (Python 2.x): <pre><code>Caught!\n\nValueError: list.remove(x): x not in list\n</code></pre></p> <p>Output (Python 3.x): <pre><code>  File \"&lt;input&gt;\", line 3\n    except IndexError, ValueError:\n                     ^\nSyntaxError: invalid syntax\n</code></pre></p>"},{"location":"CN/#_41","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li> <p>\u5982\u679c\u4f60\u60f3\u8981\u540c\u65f6\u6355\u83b7\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u5f02\u5e38\u65f6, \u4f60\u9700\u8981\u5c06\u5b83\u4eec\u7528\u62ec\u53f7\u5305\u6210\u4e00\u4e2a\u5143\u7ec4\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012. \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u540d\u79f0, \u5982\u679c\u4f60\u63d0\u4f9b, \u5b83\u5c06\u4e0e\u88ab\u6355\u83b7\u7684\u5f02\u5e38\u5b9e\u4f8b\u7ed1\u5b9a. \u4f8b,   <pre><code>some_list = [1, 2, 3]\ntry:\n   # \u8fd9\u91cc\u4f1a\u629b\u51fa\u5f02\u5e38 ``ValueError``\n   some_list.remove(4)\nexcept (IndexError, ValueError), e:\n   print(\"Caught again!\")\n   print(e)\n</code></pre> Output (Python 2.x): <pre><code>Caught again!\nlist.remove(x): x not in list\n</code></pre> Output (Python 3.x): <pre><code>  File \"&lt;input&gt;\", line 4\n    except (IndexError, ValueError), e:\n                                     ^\nIndentationError: unindent does not match any outer indentation level\n</code></pre></p> </li> <li> <p>\u5728 Python 3 \u4e2d, \u7528\u9017\u53f7\u533a\u5206\u5f02\u5e38\u4e0e\u53ef\u9009\u540d\u79f0\u662f\u65e0\u6548\u7684; \u6b63\u786e\u7684\u505a\u6cd5\u662f\u4f7f\u7528 <code>as</code> \u5173\u952e\u5b57. \u4f8b,   <pre><code>some_list = [1, 2, 3]\ntry:\n    some_list.remove(4)\n\nexcept (IndexError, ValueError) as e:\n    print(\"Caught again!\")\n    print(e)\n</code></pre> Output: <pre><code>Caught again!\nlist.remove(x): x not in list\n</code></pre></p> </li> </ul>"},{"location":"CN/#same-operands-different-story","title":"&gt; Same operands, different story!/\u540c\u4eba\u4e0d\u540c\u547d!","text":"<p>1. <pre><code>a = [1, 2, 3, 4]\nb = a\na = a + [5, 6, 7, 8]\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; a\n[1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; b\n[1, 2, 3, 4]\n</code></pre></p> <p>2. <pre><code>a = [1, 2, 3, 4]\nb = a\na += [5, 6, 7, 8]\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; a\n[1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; b\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre></p>"},{"location":"CN/#_42","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li> <p><code>a += b</code> \u5e76\u4e0d\u603b\u662f\u4e0e <code>a = a + b</code> \u8868\u73b0\u76f8\u540c. \u7c7b\u5b9e\u73b0 <code>op=</code> \u8fd0\u7b97\u7b26\u7684\u65b9\u5f0f \u4e5f\u8bb8 \u662f\u4e0d\u540c\u7684, \u5217\u8868\u5c31\u662f\u8fd9\u6837\u505a\u7684.</p> </li> <li> <p>\u8868\u8fbe\u5f0f <code>a = a + [5,6,7,8]</code> \u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u5217\u8868, \u5e76\u8ba9 <code>a</code> \u5f15\u7528\u8fd9\u4e2a\u65b0\u5217\u8868, \u540c\u65f6\u4fdd\u6301 <code>b</code> \u4e0d\u53d8.</p> </li> <li> <p>\u8868\u8fbe\u5f0f <code>a += [5,6,7,8]</code> \u5b9e\u9645\u4e0a\u662f\u4f7f\u7528\u7684\u662f \"extend\" \u51fd\u6570, \u6240\u4ee5 <code>a</code> \u548c <code>b</code> \u4ecd\u7136\u6307\u5411\u5df2\u88ab\u4fee\u6539\u7684\u540c\u4e00\u5217\u8868.</p> </li> </ul>"},{"location":"CN/#name-resolution-ignoring-class-scope","title":"&gt; Name resolution ignoring class scope/\u5ffd\u7565\u7c7b\u4f5c\u7528\u57df\u7684\u540d\u79f0\u89e3\u6790","text":"<p>1. <pre><code>x = 5\nclass SomeClass:\n    x = 17\n    y = (x for i in range(10))\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; list(SomeClass.y)[0]\n5\n</code></pre></p> <p>2. <pre><code>x = 5\nclass SomeClass:\n    x = 17\n    y = [x for i in range(10)]\n</code></pre></p> <p>Output (Python 2.x): <pre><code>&gt;&gt;&gt; SomeClass.y[0]\n17\n</code></pre></p> <p>Output (Python 3.x): <pre><code>&gt;&gt;&gt; SomeClass.y[0]\n5\n</code></pre></p>"},{"location":"CN/#_43","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u7c7b\u5b9a\u4e49\u4e2d\u5d4c\u5957\u7684\u4f5c\u7528\u57df\u4f1a\u5ffd\u7565\u7c7b\u5185\u7684\u540d\u79f0\u7ed1\u5b9a.</li> <li>\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u6709\u5b83\u81ea\u5df1\u7684\u4f5c\u7528\u57df.</li> <li>\u4ece Python 3.X \u5f00\u59cb, \u5217\u8868\u63a8\u5bfc\u5f0f\u4e5f\u6709\u81ea\u5df1\u7684\u4f5c\u7528\u57df.</li> </ul>"},{"location":"CN/#rounding-like-a-banker","title":"&gt; Rounding like a banker/\u50cf\u94f6\u884c\u5bb6\u4e00\u6837\u820d\u5165 *","text":"<p>\u8ba9\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u6765\u83b7\u53d6\u5217\u8868\u7684\u4e2d\u95f4\u5143\u7d20\uff1a</p> <pre><code>def get_middle(some_list):\n    mid_index = round(len(some_list) / 2)\n    return some_list[mid_index - 1]\n</code></pre> <p>Python 3.x: <pre><code>&gt;&gt;&gt; get_middle([1])  # looks good\n1\n&gt;&gt;&gt; get_middle([1,2,3])  # looks good\n2\n&gt;&gt;&gt; get_middle([1,2,3,4,5])  # huh?\n2\n&gt;&gt;&gt; len([1,2,3,4,5]) / 2  # good\n2.5\n&gt;&gt;&gt; round(len([1,2,3,4,5]) / 2)  # why?\n2\n</code></pre></p> <p>\u4f3c\u4e4e Python \u5c06 2.5 \u820d\u5165\u5230 2\u3002</p>"},{"location":"CN/#_44","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li> <ul> <li>\u8fd9\u4e0d\u662f\u6d6e\u70b9\u7cbe\u5ea6\u9519\u8bef\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u79cd\u884c\u4e3a\u662f\u6545\u610f\u7684\u3002\u4ece Python 3.0 \u5f00\u59cb\uff0c<code>round()</code> \u4f7f\u7528\u94f6\u884c\u8fdb\u4f4d\u6cd5\uff0c\u5176\u4e2d 0.5 \u5c0f\u6570\u56db\u820d\u4e94\u5165\u5230\u6700\u63a5\u8fd1\u7684 \u5076\u6570 \uff1a</li> </ul> </li> </ul> <pre><code>&gt;&gt;&gt; round(0.5)\n0\n&gt;&gt;&gt; round(1.5)\n2\n&gt;&gt;&gt; round(2.5)\n2\n&gt;&gt;&gt; import numpy  # numpy\u7684\u7ed3\u679c\u4e5f\u662f\u4e00\u6837\n&gt;&gt;&gt; numpy.round(0.5)\n0.0\n&gt;&gt;&gt; numpy.round(1.5)\n2.0\n&gt;&gt;&gt; numpy.round(2.5)\n2.0\n</code></pre> <ul> <li>\u8fd9\u662f IEEE 754 \u4e2d\u63cf\u8ff0\u7684\u5173\u4e8e0.5\u5206\u4f4d\u820d\u5165\u7684\u63a8\u8350\u65b9\u6cd5\u3002\u7136\u800c\uff0c\u53e6\u4e00\u79cd\u65b9\u6cd5\uff08\u4ece\u96f6\u53d6\u6574\uff09\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u662f\u5728\u5b66\u6821\u6559\u6388\u7684\uff0c\u6240\u4ee5\u94f6\u884c\u8fdb\u4f4d\u6cd5\u53ef\u80fd\u5e76\u4e0d\u4e3a\u4eba\u6240\u77e5\u3002\u6b64\u5916\uff0c\u4e00\u4e9b\u6700\u6d41\u884c\u7684\u7f16\u7a0b\u8bed\u8a00\uff08\u4f8b\u5982\uff1aJavaScript\u3001Java\u3001C/C++\u3001Ruby\u3001Rust\uff09\u4e5f\u4e0d\u4f7f\u7528\u94f6\u884c\u8fdb\u4f4d\u6cd5\u3002\u56e0\u6b64\uff0c\u8fd9\u5bf9 Python \u6765\u8bf4\u8fd8\u662f\u6bd4\u8f83\u7279\u6b8a\u7684\uff0c\u5728\u56db\u820d\u4e94\u5165\u65f6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6df7\u6dc6\u3002</li> <li>\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6587\u6863 round() \u6216 this stackoverflow thread </li> <li>\u8bf7\u6ce8\u610f\uff0c<code>get_middle([1])</code> \u53ea\u8fd4\u56de1\uff0c\u56e0\u4e3a\u5b83\u7684\u7d22\u5f15\u662f <code>round(0.5) - 1 = 0 - 1 = -1</code>\uff0c\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002</li> </ul>"},{"location":"CN/#needles-in-a-haystack","title":"&gt; Needles in a Haystack/\u5927\u6d77\u635e\u9488","text":"<p>\u8fc4\u4eca\u4e3a\u6b62\uff0c\u6bcf\u4e00\u4f4dPython\u5f00\u53d1\u8005\u90fd\u4f1a\u9047\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u60c5\u51b5\u3002</p> <p>1. <pre><code>x, y = (0, 1) if True else None, None\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; x, y  # \u671f\u671b\u7684\u7ed3\u679c\u662f (0, 1)\n((0, 1), None)\n</code></pre></p> <p>2. <pre><code>t = ('one', 'two')\nfor i in t:\n    print(i)\n\nt = ('one')\nfor i in t:\n    print(i)\n\nt = ()\nprint(t)\n</code></pre></p> <p>Output:</p> <pre><code>one\ntwo\no\nn\ne\ntuple()\n</code></pre> <p>3.</p> <pre><code>ten_words_list = [\n    \"some\",\n    \"very\",\n    \"big\",\n    \"list\",\n    \"that\"\n    \"consists\",\n    \"of\",\n    \"exactly\",\n    \"ten\",\n    \"words\"\n]\n</code></pre> <p>Output</p> <pre><code>&gt;&gt;&gt; len(ten_words_list)\n9\n</code></pre> <p>4. \u4e0d\u591f\u5065\u58ee\u7684\u65ad\u8a00\u673a\u5236</p> <pre><code>a = \"python\"\nb = \"javascript\"\n</code></pre> <p>Output:</p> <pre><code># \u5e26\u6709\u5931\u8d25\u8b66\u544a\u4fe1\u606f\u7684assert\u8868\u8fbe\u5f0f\n&gt;&gt;&gt; assert(a == b, \"Both languages are different\")\n# \u672a\u5f15\u53d1 AssertionError \n</code></pre> <p>5.</p> <pre><code>some_list = [1, 2, 3]\nsome_dict = {\n  \"key_1\": 1,\n  \"key_2\": 2,\n  \"key_3\": 3\n}\n\nsome_list = some_list.append(4) \nsome_dict = some_dict.update({\"key_4\": 4})\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; print(some_list)\nNone\n&gt;&gt;&gt; print(some_dict)\nNone\n</code></pre> <p>6.</p> <pre><code>def some_recursive_func(a):\n    if a[0] == 0:\n        return\n    a[0] -= 1\n    some_recursive_func(a)\n    return a\n\ndef similar_recursive_func(a):\n    if a == 0:\n        return a\n    a -= 1\n    similar_recursive_func(a)\n    return a\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; some_recursive_func([5, 0])\n[0, 0]\n&gt;&gt;&gt; similar_recursive_func(5)\n4\n</code></pre>"},{"location":"CN/#_45","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u5bf9\u4e8e 1, \u6b63\u786e\u7684\u8bed\u53e5\u662f <code>x, y = (0, 1) if True else (None, None)</code>.</li> <li>\u5bf9\u4e8e 2, \u6b63\u786e\u7684\u8bed\u53e5\u662f <code>t = ('one',)</code> \u6216\u8005 <code>t = 'one',</code> (\u7f3a\u5c11\u9017\u53f7) \u5426\u5219\u89e3\u91ca\u5668\u4f1a\u8ba4\u4e3a <code>t</code> \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32, \u5e76\u9010\u4e2a\u5b57\u7b26\u5bf9\u5176\u8fdb\u884c\u8fed\u4ee3.</li> <li><code>()</code> \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6807\u8bb0\uff0c\u8868\u793a\u7a7a\u5143\u7ec4.</li> <li>\u5bf9\u4e8e 3\uff0c\u6b63\u5982\u60a8\u53ef\u80fd\u5df2\u7ecf\u5f04\u6e05\u695a\u7684\u90a3\u6837\uff0c\u5217\u8868\u4e2d\u7684\u7b2c5\u4e2a\u5143\u7d20\uff08\"that\"\uff09\u540e\u9762\u7f3a\u5c11\u4e00\u4e2a\u9017\u53f7\u3002\u56e0\u6b64\uff0c\u901a\u8fc7\u9690\u5f0f\u5b57\u7b26\u4e32\u5b57\u9762\u8fde\u63a5\uff0c</li> </ul> <pre><code>&gt;&gt;&gt; ten_words_list\n['some', 'very', 'big', 'list', 'thatconsists', 'of', 'exactly', 'ten', 'words']\n</code></pre> <ul> <li>\u5728\u7b2c4\u4e2a\u4ee3\u7801\u6bb5\u4e2d\u6ca1\u6709\u5f15\u53d1\"AssertionError\"\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u662f\u65ad\u8a00\u5355\u4e2a\u8868\u8fbe\u5f0f <code>a == b</code>\uff0c\u800c\u662f\u65ad\u8a00\u6574\u4e2a\u5143\u7ec4\u3002\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u5c06\u8bf4\u660e\u95ee\u9898\uff0c</li> </ul> <p><pre><code>&gt;&gt;&gt; a = \"python\"\n&gt;&gt;&gt; b = \"javascript\"\n&gt;&gt;&gt; assert a == b\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n\n&gt;&gt;&gt; assert (a == b, \"Values are not equal\")\n&lt;stdin&gt;:1: SyntaxWarning: assertion is always true, perhaps remove parentheses?\n\n&gt;&gt;&gt; assert a == b, \"Values are not equal\"\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError: Values are not equal\n</code></pre> * \u81f3\u4e8e\u7b2c\u4e94\u4e2a\u7247\u6bb5\uff0c\u5927\u591a\u6570\u4fee\u6539\u5e8f\u5217/\u6620\u5c04\u5bf9\u8c61\u9879\u7684\u65b9\u6cd5\uff0c\u5982<code>list.append</code>\u3001<code>dict.update</code>\u3001<code>list.sort</code>\u7b49\uff0c\u90fd\u5728\u539f\u5730\u4fee\u6539\u5bf9\u8c61\u5e76\u8fd4\u56de<code>None</code>\u3002\u8fd9\u80cc\u540e\u7684\u57fa\u672c\u539f\u7406\u662f\u901a\u8fc7\u539f\u5730\u64cd\u4f5c\uff0c\u907f\u514d\u590d\u5236\u5bf9\u8c61\u6765\u63d0\u9ad8\u6027\u80fd(\u53c2\u8003\u8fd9\u91cc)\u3002 * \u6700\u540e\u4e00\u4e2a\u5e94\u8be5\u76f8\u5f53\u660e\u663e\uff0c\u53ef\u53d8\u5bf9\u8c61\uff08\u5982<code>list</code>\uff09\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u66f4\u6539\uff0c\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff08<code>a -= 1</code>\uff09\u7684\u91cd\u65b0\u8d4b\u503c\u5219\u4e0d\u5c5e\u4e8e\u503c\u7684\u6539\u53d8\u3002 * \u4e86\u89e3\u8fd9\u4e9b\u7ec6\u8282\u53ef\u4ee5\u5728\u7a0b\u5e8f\u957f\u671f\u8fd0\u884c\u4e2d\uff0c\u4e3a\u60a8\u8282\u7701\u6570\u5c0f\u65f6\u7684\u8c03\u8bd5\u5de5\u4f5c\u3002</p>"},{"location":"CN/#splitsies","title":"&gt; Splitsies/\u5206\u5272\u51fd\u6570 *","text":"<pre><code>&gt;&gt;&gt; 'a'.split()\n['a']\n\n# is same as\n&gt;&gt;&gt; 'a'.split(' ')\n['a']\n\n# but\n&gt;&gt;&gt; len(''.split())\n0\n\n# isn't the same as\n&gt;&gt;&gt; len(''.split(' '))\n1\n</code></pre>"},{"location":"CN/#_46","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li>\u8d77\u521d\u4eba\u4eec\u53ef\u80fd\u4f1a\u8ba4\u4e3a split \u7684\u9ed8\u8ba4\u5206\u9694\u7b26\u662f\u5355\u4e2a\u7a7a\u683c <code>' '</code>\uff0c\u4f46\u6839\u636e \u6587\u6863\uff1a     &gt;  \u5982\u679c sep \u672a\u6307\u5b9a\u6216\u4e3a <code>None</code>\uff0c\u5219\u5e94\u7528\u4e0d\u540c\u7684\u62c6\u5206\u7b97\u6cd5\uff1a\u8fde\u7eed\u7684\u7a7a\u683c\u88ab\u89c6\u4e3a\u5355\u4e2a\u5206\u9694\u7b26\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u6709\u524d\u5bfc\u6216\u5c3e\u968f\u7a7a\u683c\uff0c\u5219\u7ed3\u679c\u5c06\u5728\u5f00\u5934\u6216\u7ed3\u5c3e\u4e0d\u5305\u542b\u7a7a\u5b57\u7b26\u4e32\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 <code>None</code> \u5206\u9694\u7b26\u62c6\u5206\u7a7a\u5b57\u7b26\u4e32\u6216\u4ec5\u5305\u542b\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u5c06\u8fd4\u56de <code>[]</code>\u3002     &gt; \u5982\u679c\u7ed9\u5b9a sep\uff0c\u8fde\u7eed\u7684\u5206\u9694\u7b26\u4e0d\u4f1a\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5e76\u88ab\u89c6\u4e3a\u5206\u9694\u7a7a\u5b57\u7b26\u4e32\uff08\u4f8b\u5982\uff0c<code>'1,,2'.split(',')</code> \u8fd4\u56de <code>['1', '', '2 ']</code>\uff09\u3002\u4f7f\u7528\u6307\u5b9a\u7684\u5206\u9694\u7b26\u62c6\u5206\u7a7a\u5b57\u7b26\u4e32\u4f1a\u8fd4\u56de <code>['']</code>\u3002</li> <li>Noticing how the leading and trailing whitespaces are handled in the following snippet will make things clear,</li> <li> <p>\u6ce8\u610f\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u4e2d\u5982\u4f55\u5904\u7406\u524d\u5bfc\u548c\u5c3e\u968f\u7a7a\u683c\uff0c\u4fc3\u8fdb\u66f4\u6df1\u5165\u7684\u7406\u89e3\uff1a</p> <pre><code>&gt;&gt;&gt; ' a '.split(' ')\n['', 'a', '']\n&gt;&gt;&gt; ' a '.split()\n['a']\n&gt;&gt;&gt; ''.split(' ')\n['']\n</code></pre> </li> </ul>"},{"location":"CN/#wild-imports","title":"&gt; Wild imports/\u901a\u914d\u7b26\u5bfc\u5165\u65b9\u5f0f *","text":"<pre><code># File: module.py\n\ndef some_weird_name_func_():\n    print(\"works!\")\n\ndef _another_weird_name_func():\n    print(\"works!\")\n</code></pre> <p>Output</p> <pre><code>&gt;&gt;&gt; from module import *\n&gt;&gt;&gt; some_weird_name_func_()\n\"works!\"\n&gt;&gt;&gt; _another_weird_name_func()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name '_another_weird_name_func' is not defined\n</code></pre>"},{"location":"CN/#_47","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li>\u901a\u5e38\u5efa\u8bae\u4e0d\u8981\u4f7f\u7528\u901a\u914d\u7b26\u5bfc\u5165\u3002\u7b2c\u4e00\u4e2a\u660e\u663e\u7684\u539f\u56e0\u662f\uff0c\u5728\u901a\u914d\u7b26\u5bfc\u5165\u4e2d\uff0c\u5e26\u6709\u524d\u5bfc\u4e0b\u5212\u7ebf\u7684\u540d\u79f0\u4e0d\u4f1a\u88ab\u5bfc\u5165\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u51fa\u9519\u3002</li> <li> <p>\u5982\u679c\u6211\u4eec\u4f7f\u7528 <code>from ... import a, b, c</code> \u8bed\u6cd5\uff0c\u4e0a\u9762\u7684 <code>NameError</code> \u5c31\u4e0d\u4f1a\u53d1\u751f\u3002</p> <pre><code>&gt;&gt;&gt; from module import some_weird_name_func_, _another_weird_name_func\n&gt;&gt;&gt; _another_weird_name_func()\nworks!\n</code></pre> </li> <li> <p>\u5982\u679c\u4f60\u771f\u7684\u60f3\u4f7f\u7528\u901a\u914d\u7b26\u5bfc\u5165\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u5728\u4f60\u7684\u6a21\u5757\u4e2d\u5b9a\u4e49\u5217\u8868<code>__all__</code>\uff0c\u5b83\u5305\u542b\u4e00\u7cfb\u5217\u516c\u5171\u5bf9\u8c61\uff0c\u5f53\u6211\u4eec\u8fdb\u884c\u901a\u914d\u7b26\u5bfc\u5165\u65f6\uff0c\u5217\u8868\u4e2d\u7684\u8fd9\u4e9b\u5bf9\u8c61\u5c06\u88ab\u5bfc\u5165\u3002</p> <p><pre><code>__all__ = ['_another_weird_name_func']\n\ndef some_weird_name_func_():\n    print(\"works!\")\n\ndef _another_weird_name_func():\n    print(\"works!\")\n</code></pre> Output</p> <pre><code>&gt;&gt;&gt; _another_weird_name_func()\n\"works!\"\n&gt;&gt;&gt; some_weird_name_func_()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'some_weird_name_func_' is not defined\n</code></pre> </li> </ul>"},{"location":"CN/#all-sorted","title":"&gt; All sorted?/\u90fd\u6392\u5e8f\u4e86\u5417\uff1f *","text":"<pre><code>&gt;&gt;&gt; x = 7, 8, 9\n&gt;&gt;&gt; sorted(x) == x\nFalse\n&gt;&gt;&gt; sorted(x) == sorted(x)\nTrue\n\n&gt;&gt;&gt; y = reversed(x)\n&gt;&gt;&gt; sorted(y) == sorted(y)\nFalse\n</code></pre>"},{"location":"CN/#_48","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li> <p><code>sorted</code> \u65b9\u6cd5\u4e00\u5b9a\u8fd4\u56de\u5217\u8868\u7c7b\u578b, \u6bd4\u8f83\u5217\u8868\u4e0e\u5143\u7ec4\u5728Python\u4e2d\u4e00\u5b9a\u8fd4\u56de <code>False</code>. </p> </li> <li> <p>```py</p> <p>[] == tuple()   False x = 7, 8, 9 type(x), type(sorted(x))   (tuple, list)   ```</p> </li> <li> <p>\u4e0e <code>sorted</code> \u4e0d\u540c\uff0c<code>reversed</code> \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u6392\u5e8f\u9700\u8981\u5c31\u5730\u4fee\u6539\u8fed\u4ee3\u5668\u6216\u4f7f\u7528\u989d\u5916\u7684\u5bb9\u5668\uff08\u5217\u8868\uff09\uff0c\u800c\u53cd\u5411\u53ef\u4ee5\u7b80\u5355\u5730\u901a\u8fc7\u4ece\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\u8fed\u4ee3\u5230\u7b2c\u4e00\u4e2a\u7d22\u5f15\u6765\u5de5\u4f5c\u3002</p> </li> <li> <p>\u6240\u4ee5\u5728\u6bd4\u8f83 <code>sorted(y) == sorted(y)</code> \u65f6\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528 <code>sorted()</code> \u4f1a\u6d88\u8017\u8fed\u4ee3\u5668 <code>y</code>\uff0c\u4e0b\u4e00\u6b21\u8c03\u7528\u53ea\u4f1a\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5217\u8868\u3002</p> </li> </ul> <pre><code>&gt;&gt;&gt; x = 7, 8, 9\n&gt;&gt;&gt; y = reversed(x)\n&gt;&gt;&gt; sorted(y), sorted(y)\n([7, 8, 9], [])\n</code></pre>"},{"location":"CN/#midnight-time-doesnt-exist","title":"&gt; Midnight time doesn't exist?/\u4e0d\u5b58\u5728\u7684\u5348\u591c?","text":"<pre><code>from datetime import datetime\n\nmidnight = datetime(2018, 1, 1, 0, 0)\nmidnight_time = midnight.time()\n\nnoon = datetime(2018, 1, 1, 12, 0)\nnoon_time = noon.time()\n\nif midnight_time:\n    print(\"Time at midnight is\", midnight_time)\n\nif noon_time:\n    print(\"Time at noon is\", noon_time)\n</code></pre> <p>Output: <pre><code>('Time at noon is', datetime.time(12, 0))\n</code></pre></p> <p>midnight_time \u5e76\u6ca1\u6709\u88ab\u8f93\u51fa.</p>"},{"location":"CN/#_49","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<p>\u5728Python 3.5\u4e4b\u524d, \u5982\u679c <code>datetime.time</code> \u5bf9\u8c61\u5b58\u50a8\u7684UTC\u7684\u5348\u591c\u65f6\u95f4(\u8bd1: \u5c31\u662f <code>00:00</code>), \u90a3\u4e48\u5b83\u7684\u5e03\u5c14\u503c\u4f1a\u88ab\u8ba4\u4e3a\u662f <code>False</code>. \u5f53\u4f7f\u7528 <code>if obj:</code> \u8bed\u53e5\u6765\u68c0\u67e5 <code>obj</code> \u662f\u5426\u4e3a <code>null</code> \u6216\u8005\u67d0\u4e9b\u201c\u7a7a\u201d\u503c\u7684\u65f6\u5019, \u5f88\u5bb9\u6613\u51fa\u9519.</p>"},{"location":"CN/#section-the-hidden-treasures","title":"Section: The Hidden treasures!/\u9690\u85cf\u7684\u5b9d\u85cf!","text":"<p>\u672c\u8282\u5305\u542b\u4e86\u4e00\u4e9b\u50cf\u6211\u8fd9\u6837\u7684\u5927\u591a\u6570\u521d\u5b66\u8005\u90fd\u4e0d\u77e5\u9053\u7684\u5173\u4e8ePython\u7684\u9c9c\u4e3a\u4eba\u77e5\u7684\u6709\u8da3\u7684\u4e8b\u60c5\uff08\u597d\u5427\uff0c\u73b0\u5728\u4e0d\u662f\u4e86\uff09\u3002</p>"},{"location":"CN/#okay-python-can-you-make-me-flypython","title":"&gt; Okay Python, Can you make me fly?/Python, \u53ef\u5426\u5e26\u6211\u98de? *","text":"<p>\u597d, \u53bb\u5427.</p> <pre><code>import antigravity\n</code></pre> <p>Output: \u5618.. \u8fd9\u662f\u4e2a\u8d85\u7ea7\u79d8\u5bc6.</p>"},{"location":"CN/#_50","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li><code>antigravity</code> \u6a21\u5757\u662f Python \u5f00\u53d1\u4eba\u5458\u53d1\u5e03\u7684\u5c11\u6570\u590d\u6d3b\u8282\u5f69\u86cb\u4e4b\u4e00.</li> <li><code>import antigravity</code> \u4f1a\u6253\u5f00\u4e00\u4e2a Python \u7684\u7ecf\u5178 XKCD \u6f2b\u753b\u9875\u9762.</li> <li>\u4e0d\u6b62\u5982\u6b64. \u8fd9\u4e2a\u590d\u6d3b\u8282\u5f69\u86cb\u91cc\u8fd8\u6709\u4e00\u4e2a\u590d\u6d3b\u8282\u5f69\u86cb. \u5982\u679c\u4f60\u770b\u4e00\u4e0b\u4ee3\u7801, \u5c31\u4f1a\u53d1\u73b0\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570\u5b9e\u73b0\u4e86 XKCD's geohashing \u7b97\u6cd5.</li> </ul>"},{"location":"CN/#goto-but-whygoto","title":"&gt; <code>goto</code>, but why?/<code>goto</code>, \u4f46\u4e3a\u4ec0\u4e48? *","text":"<pre><code>from goto import goto, label\nfor i in range(9):\n    for j in range(9):\n        for k in range(9):\n            print(\"I'm trapped, please rescue!\")\n            if k == 2:\n                goto .breakout # \u4ece\u591a\u91cd\u5faa\u73af\u4e2d\u8df3\u51fa\nlabel .breakout\nprint(\"Freedom!\")\n</code></pre> <p>Output (Python 2.3): <pre><code>I'm trapped, please rescue!\nI'm trapped, please rescue!\nFreedom!\n</code></pre></p>"},{"location":"CN/#_51","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>2004\u5e744\u67081\u65e5, Python \u5ba3\u5e03 \u52a0\u5165\u4e00\u4e2a\u53ef\u7528\u7684 <code>goto</code> \u4f5c\u4e3a\u611a\u4eba\u8282\u793c\u7269.</li> <li>\u5f53\u524d\u7248\u672c\u7684 Python \u5e76\u6ca1\u6709\u8fd9\u4e2a\u6a21\u5757.</li> <li>\u5c31\u7b97\u53ef\u4ee5\u7528, \u4e5f\u8bf7\u4e0d\u8981\u4f7f\u7528\u5b83. \u8fd9\u91cc\u662f\u4e3a\u4ec0\u4e48Python\u4e2d\u6ca1\u6709 <code>goto</code> \u7684\u539f\u56e0.</li> </ul>"},{"location":"CN/#brace-yourself","title":"&gt; Brace yourself!/\u505a\u597d\u601d\u60f3\u51c6\u5907 *","text":"<p>\u5982\u679c\u4f60\u4e0d\u559c\u6b22\u5728Python\u4e2d\u4f7f\u7528\u7a7a\u683c\u6765\u8868\u793a\u4f5c\u7528\u57df, \u4f60\u53ef\u4ee5\u5bfc\u5165 C \u98ce\u683c\u7684 {},</p> <pre><code>from __future__ import braces\n</code></pre> <p>Output: <pre><code>  File \"some_file.py\", line 1\n    from __future__ import braces\nSyntaxError: not a chance\n</code></pre></p> <p>\u60f3\u7528\u5927\u62ec\u53f7 <code>braces</code>? \u6ca1\u95e8! \u89c9\u5f97\u4e0d\u723d, \u8bf7\u53bb\u7528java\u3002\u90a3\u4e48\uff0c\u53e6\u4e00\u4e2a\u4ee4\u4eba\u60ca\u8bb6\u7684\u4e8b\u60c5\uff0c\u627e\u4e00\u627e\u5728 <code>__future__</code> \u6a21\u5757\u4e2d\uff0c\u54ea\u91cc\u5f15\u53d1\u4e86 <code>SyntaxError</code> code?</p>"},{"location":"CN/#_52","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u901a\u5e38 <code>__future__</code> \u4f1a\u63d0\u4f9b Python \u672a\u6765\u7248\u672c\u7684\u529f\u80fd. \u7136\u800c\uff0c\u8fd9\u91cc\u7684 \u201c\u672a\u6765\u201d \u662f\u4e00\u4e2a\u8bbd\u523a.</li> <li>\u8fd9\u662f\u4e00\u4e2a\u8868\u8fbe\u793e\u533a\u5bf9\u6b64\u7c7b\u95ee\u9898\u6001\u5ea6\u7684\u590d\u6d3b\u8282\u5f69\u86cb.</li> <li>\u4ee3\u7801\u5b9e\u9645\u4e0a\u5728[<code>future.c</code> \u6587\u4ef6]\u4e2d (https://github.com/python/cpython/blob/025eb98dc0c1dc27404df6c544fc2944e0fa9f3a/Python/future.c#L49).</li> <li>\u5f53 CPython \u7f16\u8bd1\u5668\u9047\u5230 future\u8868\u8fbe\u5f0f \u65f6\uff0c\u5b83\u9996\u5148\u5728 <code>future.c</code> \u4e2d\u8fd0\u884c\u76f8\u5e94\u7684\u4ee3\u7801\uff0c\u7136\u540e\u518d\u5bf9\u5176\u8fdb\u884c\u5904\u7406\u4f5c\u4e3a\u6b63\u5e38\u7684<code>import</code>\u8868\u8fbe\u5f0f\u3002</li> </ul>"},{"location":"CN/#lets-meet-friendly-language-uncle-for-life","title":"&gt; Let's meet Friendly Language Uncle For Life/\u8ba9\u751f\u6d3b\u66f4\u53cb\u597d *","text":"<p>Output (Python 3.x) <pre><code>&gt;&gt;&gt; from __future__ import barry_as_FLUFL\n&gt;&gt;&gt; \"Ruby\" != \"Python\" # \u8fd9\u91cc\u6ca1\u4ec0\u4e48\u7591\u95ee\n  File \"some_file.py\", line 1\n    \"Ruby\" != \"Python\"\n              ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; \"Ruby\" &lt;&gt; \"Python\"\nTrue\n</code></pre></p> <p>\u8fd9\u5c31\u5bf9\u4e86.</p>"},{"location":"CN/#_53","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u76f8\u5173\u7684 PEP-401 \u53d1\u5e03\u4e8e 2009\u5e744\u67081\u65e5 (\u6240\u4ee5\u4f60\u73b0\u5728\u77e5\u9053\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u4e86\u5427).</li> <li>\u5f15\u7528 PEP-401 <p>\u610f\u8bc6\u5230 Python 3.0 \u91cc\u7684 != \u8fd0\u7b97\u7b26\u662f\u4e00\u4e2a\u4f1a\u5f15\u8d77\u624b\u6307\u75bc\u75db\u7684\u6050\u6016\u9519\u8bef, FLUFL \u5c06 &lt;&gt; \u8fd0\u7b97\u7b26\u6062\u590d\u4e3a\u552f\u4e00\u5199\u6cd5.</p> </li> <li>Uncle Barry \u5728 PEP \u4e2d\u8fd8\u5206\u4eab\u4e86\u5176\u4ed6\u4e1c\u897f; \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u83b7\u5f97\u4ed6\u4eec.</li> <li>(\u8bd1: \u867d\u7136\u6587\u6863\u4e2d\u6ca1\u5199\uff0c\u4f46\u5e94\u8be5\u662f\u53ea\u80fd\u5728\u4ea4\u4e92\u89e3\u91ca\u5668\u4e2d\u4f7f\u7528.)</li> <li> <p>\u5b83\u5728\u4ea4\u4e92\u5f0f\u73af\u5883\u4e2d\u6b63\u5e38\u8fd0\u884c\uff0c\u4f46\u662f\u5f53\u60a8\u901a\u8fc7 python \u6587\u4ef6\u8fd0\u884c\u65f6\u5b83\u4f1a\u5f15\u53d1 <code>SyntaxError</code>\uff08\u8bf7\u53c2\u9605\u6b64 \u95ee\u9898\uff09\u3002\u60a8\u53ef\u4ee5\u5c06\u8868\u8fbe\u5f0f\u4f5c\u4e3a<code>eval</code> \u6216 <code>compile</code> \u53c2\u6570\u4e2d\u4f7f\u7528\u3002</p> <pre><code>from __future__ import barry_as_FLUFL\nprint(eval('\"Ruby\" &lt;&gt; \"Python\"'))\n</code></pre> </li> </ul>"},{"location":"CN/#even-python-understands-that-love-is-complicatedpython","title":"&gt; Even Python understands that love is complicated/\u8fdePython\u4e5f\u77e5\u9053\u7231\u662f\u96be\u8a00\u7684 *","text":"<pre><code>import this\n</code></pre> <p>\u7b49\u7b49, this \u662f\u4ec0\u4e48? <code>this</code> \u662f\u7231 :heart:</p> <p>Output: <pre><code>The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\n\u4f18\u7f8e\u80dc\u4e8e\u4e11\u964b\uff08Python \u4ee5\u7f16\u5199\u4f18\u7f8e\u7684\u4ee3\u7801\u4e3a\u76ee\u6807\uff09\nExplicit is better than implicit.\n\u660e\u4e86\u80dc\u4e8e\u6666\u6da9\uff08\u4f18\u7f8e\u7684\u4ee3\u7801\u5e94\u5f53\u662f\u660e\u4e86\u7684\uff0c\u547d\u540d\u89c4\u8303\uff0c\u98ce\u683c\u76f8\u4f3c\uff09\nSimple is better than complex.\n\u7b80\u6d01\u80dc\u4e8e\u590d\u6742\uff08\u4f18\u7f8e\u7684\u4ee3\u7801\u5e94\u5f53\u662f\u7b80\u6d01\u7684\uff0c\u4e0d\u8981\u6709\u590d\u6742\u7684\u5185\u90e8\u5b9e\u73b0\uff09\nComplex is better than complicated.\n\u590d\u6742\u80dc\u4e8e\u51cc\u4e71\uff08\u5982\u679c\u590d\u6742\u4e0d\u53ef\u907f\u514d\uff0c\u90a3\u4ee3\u7801\u95f4\u4e5f\u4e0d\u80fd\u6709\u96be\u61c2\u7684\u5173\u7cfb\uff0c\u8981\u4fdd\u6301\u63a5\u53e3\u7b80\u6d01\uff09\nFlat is better than nested.\n\u6241\u5e73\u80dc\u4e8e\u5d4c\u5957\uff08\u4f18\u7f8e\u7684\u4ee3\u7801\u5e94\u5f53\u662f\u6241\u5e73\u7684\uff0c\u4e0d\u80fd\u6709\u592a\u591a\u7684\u5d4c\u5957\uff09\nSparse is better than dense.\n\u95f4\u9694\u80dc\u4e8e\u7d27\u51d1\uff08\u4f18\u7f8e\u7684\u4ee3\u7801\u6709\u9002\u5f53\u7684\u95f4\u9694\uff0c\u4e0d\u8981\u5962\u671b\u4e00\u884c\u4ee3\u7801\u89e3\u51b3\u95ee\u9898\uff09\nReadability counts.\n\u53ef\u8bfb\u6027\u5f88\u91cd\u8981\uff08\u4f18\u7f8e\u7684\u4ee3\u7801\u4e00\u5b9a\u662f\u53ef\u8bfb\u7684\uff09\nSpecial cases aren't special enough to break the rules.\n\u6ca1\u6709\u7279\u4f8b\u7279\u6b8a\u5230\u9700\u8981\u8fdd\u80cc\u8fd9\u4e9b\u89c4\u5219\uff08\u8fd9\u4e9b\u89c4\u5219\u81f3\u9ad8\u65e0\u4e0a\uff09\nAlthough practicality beats purity.\n\u5c3d\u7ba1\u6211\u4eec\u66f4\u503e\u5411\u4e8e\u5b9e\u7528\u6027\nErrors should never pass silently.\n\u4e0d\u8981\u5b89\u9759\u7684\u5305\u5bb9\u6240\u6709\u9519\u8bef\nUnless explicitly silenced.\n\u9664\u975e\u4f60\u786e\u5b9a\u9700\u8981\u8fd9\u6837\u505a\uff08\u7cbe\u51c6\u5730\u6355\u83b7\u5f02\u5e38\uff0c\u4e0d\u5199 except:pass \u98ce\u683c\u7684\u4ee3\u7801\uff09\nIn the face of ambiguity, refuse the temptation to guess.\n\u62d2\u7edd\u8bf1\u60d1\u4f60\u53bb\u731c\u6d4b\u7684\u66a7\u6627\u4e8b\u7269\nThere should be one-- and preferably only one --obvious way to do it.\n\u800c\u662f\u5c3d\u91cf\u627e\u4e00\u79cd\uff0c\u6700\u597d\u662f\u552f\u4e00\u4e00\u79cd\u660e\u663e\u7684\u89e3\u51b3\u65b9\u6848\uff08\u5982\u679c\u4e0d\u786e\u5b9a\uff0c\u5c31\u7528\u7a77\u4e3e\u6cd5\uff09\nAlthough that way may not be obvious at first unless you're Dutch.\n\u867d\u7136\u8fd9\u5e76\u4e0d\u5bb9\u6613\uff0c\u56e0\u4e3a\u4f60\u4e0d\u662f Python \u4e4b\u7236\uff08\u8fd9\u91cc\u7684 Dutch \u662f\u6307 Guido \uff09\nNow is better than never.\n\u73b0\u5728\u884c\u52a8\u597d\u8fc7\u6c38\u8fdc\u4e0d\u884c\u52a8\nAlthough never is often better than *right* now.\n\u5c3d\u7ba1\u4e0d\u884c\u52a8\u8981\u597d\u8fc7\u9c81\u83bd\u884c\u52a8\nIf the implementation is hard to explain, it's a bad idea.\n\u5982\u679c\u4f60\u65e0\u6cd5\u5411\u4eba\u63cf\u8ff0\u4f60\u7684\u65b9\u6848\uff0c\u90a3\u80af\u5b9a\u4e0d\u662f\u4e00\u4e2a\u597d\u65b9\u6848\uff1b\nIf the implementation is easy to explain, it may be a good idea.\n\u5982\u679c\u4f60\u80fd\u8f7b\u677e\u5411\u4eba\u63cf\u8ff0\u4f60\u7684\u65b9\u6848\uff0c\u90a3\u4e5f\u8bb8\u4f1a\u662f\u4e00\u4e2a\u597d\u65b9\u6848\uff08\u65b9\u6848\u6d4b\u8bc4\u6807\u51c6\uff09\nNamespaces are one honking great idea -- let's do more of those!\n\u547d\u540d\u7a7a\u95f4\u662f\u4e00\u79cd\u7edd\u5999\u7684\u7406\u5ff5\uff0c\u6211\u4eec\u5e94\u5f53\u591a\u52a0\u5229\u7528\uff08\u5021\u5bfc\u4e0e\u53f7\u53ec\uff09\n</code></pre></p> <p>\u8fd9\u662f Python \u4e4b\u7985!</p> <pre><code>&gt;&gt;&gt; love = this\n&gt;&gt;&gt; this is love\nTrue\n&gt;&gt;&gt; love is True\nFalse\n&gt;&gt;&gt; love is False\nFalse\n&gt;&gt;&gt; love is not True or False\nTrue\n&gt;&gt;&gt; love is not True or False; love is love  # \u7231\u662f\u96be\u8a00\u7684\nTrue\n</code></pre>"},{"location":"CN/#_54","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li><code>this</code> \u6a21\u5757\u662f\u5173\u4e8e Python \u4e4b\u7985\u7684\u590d\u6d3b\u8282\u5f69\u86cb (PEP 20).</li> <li>\u5982\u679c\u4f60\u8ba4\u4e3a\u8fd9\u5df2\u7ecf\u591f\u6709\u8da3\u7684\u4e86, \u53ef\u4ee5\u770b\u770b this.py \u7684\u5b9e\u73b0. \u6709\u8da3\u7684\u662f, Python \u4e4b\u7985\u7684\u5b9e\u73b0\u4ee3\u7801\u8fdd\u53cd\u4e86\u4ed6\u81ea\u5df1 (\u8fd9\u53ef\u80fd\u662f\u552f\u4e00\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u7684\u5730\u65b9). * \u81f3\u4e8e <code>love is not True or False; love is love</code>, \u610f\u5916\u5374\u53c8\u4e0d\u8a00\u800c\u55bb.</li> </ul>"},{"location":"CN/#yes-it-exists","title":"&gt; Yes, it exists!/\u662f\u7684, \u5b83\u5b58\u5728!","text":"<p>\u5faa\u73af\u7684 <code>else</code>. \u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50:</p> <pre><code>  def does_exists_num(l, to_find):\n      for num in l:\n          if num == to_find:\n              print(\"Exists!\")\n              break\n      else:\n          print(\"Does not exist\")\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; does_exists_num(some_list, 4)\nExists!\n&gt;&gt;&gt; does_exists_num(some_list, -1)\nDoes not exist\n</code></pre></p> <p>\u5f02\u5e38\u7684 <code>else</code> . \u4f8b,</p> <pre><code>try:\n    pass\nexcept:\n    print(\"Exception occurred!!!\")\nelse:\n    print(\"Try block executed successfully...\")\n</code></pre> <p>Output: <pre><code>Try block executed successfully...\n</code></pre></p>"},{"location":"CN/#_55","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u5faa\u73af\u540e\u7684 <code>else</code> \u5b50\u53e5\u53ea\u4f1a\u5728\u5faa\u73af\u6ca1\u6709\u89e6\u53d1 <code>break</code> \u8bed\u53e5, \u6b63\u5e38\u7ed3\u675f\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u6267\u884c.</li> <li>try \u4e4b\u540e\u7684 <code>else</code> \u5b50\u53e5\u4e5f\u88ab\u79f0\u4e3a \"\u5b8c\u6210\u5b50\u53e5\", \u56e0\u4e3a\u5728 <code>try</code> \u8bed\u53e5\u4e2d\u5230\u8fbe <code>else</code> \u5b50\u53e5\u610f\u5473\u7740try\u5757\u5b9e\u9645\u4e0a\u5df2\u6210\u529f\u5b8c\u6210.</li> </ul>"},{"location":"CN/#ellipsis","title":"&gt; Ellipsis/\u7701\u7565 *","text":"<pre><code>def some_func():\n    Ellipsis\n</code></pre> <p>Output <pre><code>&gt;&gt;&gt; some_func()\n# \u6ca1\u6709\u8f93\u51fa\uff0c\u4e5f\u6ca1\u6709\u62a5\u9519\n\n&gt;&gt;&gt; SomeRandomString\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'SomeRandomString' is not defined\n\n&gt;&gt;&gt; Ellipsis\nEllipsis\n</code></pre></p>"},{"location":"CN/#_56","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li> <p>\u5728 Python \u4e2d\uff0c<code>Ellipsis</code> \u662f\u4e00\u4e2a\u5168\u5c40\u53ef\u7528\u7684\u5185\u7f6e\u5bf9\u8c61\uff0c\u76f8\u5f53\u4e8e<code>...</code>\u3002</p> <pre><code>&gt;&gt;&gt; ...\nEllipsis\n</code></pre> </li> <li> <p>\u7701\u7565\u53f7\u53ef\u7528\u4e8e\u591a\u79cd\u7528\u9014\uff0c</p> <ul> <li>\u4f5c\u4e3a\u5c1a\u672a\u7f16\u5199\u7684\u4ee3\u7801\u7684\u5360\u4f4d\u7b26\uff08\u5c31\u50cf<code>pass</code>\u8bed\u53e5\uff09</li> <li>\u5728\u5207\u7247\u8bed\u6cd5\u4e2d\u8868\u793a\u5b8c\u6574\u5207\u7247\u7684\u5176\u4f59\u7ef4\u5ea6</li> </ul> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; three_dimensional_array = np.arange(8).reshape(2, 2, 2)\narray([\n    [\n        [0, 1],\n        [2, 3]\n    ],\n\n    [\n        [4, 5],\n        [6, 7]\n    ]\n])\n</code></pre> <p>\u6240\u4ee5\u6211\u4eec\u7684 <code>three_dimensional_array</code> \u662f\u4e00\u4e2a\u6570\u7ec4\u7684\u6570\u7ec4\u7684\u6570\u7ec4\u3002\u5047\u8bbe\u6211\u4eec\u8981\u6253\u5370\u6240\u6709\u6700\u5185\u5c42\u6570\u7ec4\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff08\u7d22\u5f15 <code>1</code>\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Ellipsis \u7ed5\u8fc7\u6240\u6709\u524d\u9762\u7684\u7ef4\u5ea6</p> <pre><code>&gt;&gt;&gt; three_dimensional_array[:,:,1]\narray([[1, 3],\n   [5, 7]])\n&gt;&gt;&gt; three_dimensional_array[..., 1] # \u4f7f\u7528Ellipsis.\narray([[1, 3],\n   [5, 7]])\n</code></pre> <p>\u6ce8\u610f\uff1a\u8fd9\u9002\u7528\u4e8e\u4efb\u610f\u6570\u91cf\u7684\u7ef4\u5ea6\u3002\u60a8\u751a\u81f3\u53ef\u4ee5\u5728\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u4e2d\u9009\u62e9\u5207\u7247\u5e76\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5ffd\u7565\u4e2d\u95f4\u7684\u5207\u7247(<code>n_dimensional_array[firs_dim_slice, ..., last_dim_slice]</code>)</p> <ul> <li> <p>\u5728 \u7c7b\u578b\u63d0\u793a\u4e2d\u4ec5\u8868\u793a\u7c7b\u578b\u7684\u4e00\u90e8\u5206\uff08\u5982 <code>(Callable[..., int]</code> \u6216 <code>Tuple[ str, ...]</code>))</p> </li> <li> <p>\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7701\u7565\u53f7\u4f5c\u4e3a\u9ed8\u8ba4\u51fd\u6570\u53c2\u6570\uff08\u5728\u60a8\u60f3\u8981\u533a\u5206\u201c\u65e0\u53c2\u6570\u201d\u548c\u201c\u4f20\u9012None\u503c\u201d\u573a\u666f\u7684\u60c5\u51b5\u4e0b\uff09\u3002</p> </li> </ul> </li> </ul>"},{"location":"CN/#inpinity","title":"&gt; Inpinity/\u65e0\u9650 *","text":"<p>\u82f1\u6587\u62fc\u5199\u662f\u6709\u610f\u7684, \u8bf7\u4e0d\u8981\u4e3a\u6b64\u63d0\u4ea4\u8865\u4e01. (\u8bd1: \u8fd9\u91cc\u662f\u4e3a\u4e86\u7a81\u51fa Python \u4e2d\u65e0\u9650\u7684\u5b9a\u4e49\u4e0ePi\u6709\u5173, \u6240\u4ee5\u5c06\u4e24\u4e2a\u5355\u8bcd\u62fc\u63a5\u4e86.)</p> <p>Output (Python 3.x): <pre><code>&gt;&gt;&gt; infinity = float('infinity')\n&gt;&gt;&gt; hash(infinity)\n314159\n&gt;&gt;&gt; hash(float('-inf'))\n-314159\n</code></pre></p>"},{"location":"CN/#_57","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>infinity \u7684\u54c8\u5e0c\u503c\u662f 10\u2075 x \u03c0.</li> <li>\u6709\u610f\u601d\u7684\u662f, <code>float('-inf')</code> \u7684\u54c8\u5e0c\u503c\u5728 Python 3 \u4e2d\u662f \"-10\u2075 x \u03c0\"  , \u800c\u5728 Python 2 \u4e2d\u662f \"-10\u2075 x e\".</li> </ul>"},{"location":"CN/#lets-mangle","title":"&gt; Let's mangle/\u4fee\u9970\u65f6\u95f4! *","text":"<p>1. <pre><code>class Yo(object):\n    def __init__(self):\n        self.__honey = True\n        self.bro = True\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; Yo().bro\nTrue\n&gt;&gt;&gt; Yo().__honey\nAttributeError: 'Yo' object has no attribute '__honey'\n&gt;&gt;&gt; Yo()._Yo__honey\nTrue\n</code></pre></p> <p>2. <pre><code>class Yo(object):\n    def __init__(self):\n        # \u8fd9\u6b21\u8bd5\u8bd5\u5bf9\u79f0\u5f62\u5f0f\n        self.__honey__ = True\n        self.bro = True\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; Yo().bro\nTrue\n\n&gt;&gt;&gt; Yo()._Yo__honey__\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'Yo' object has no attribute '_Yo__honey__'\n</code></pre></p> <p>\u4e3a\u4ec0\u4e48 <code>Yo()._Yo__honey</code> \u80fd\u8fd0\u884c? \u53ea\u6709\u5370\u5ea6\u4eba\u7406\u89e3.(\u8bd1: \u8fd9\u4e2a\u6897\u53ef\u80fd\u662f\u6307\u5370\u5ea6\u97f3\u4e50\u4ebaYo Yo Honey Singh)</p> <p>3.</p> <pre><code>_A__variable = \"Some value\"\n\nclass A(object):\n    def some_func(self):\n        return __variable # \u6ca1\u5728\u4efb\u4f55\u5730\u65b9\u521d\u59cb\u5316\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; A().__variable\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'A' object has no attribute '__variable'\n\n&gt;&gt;&gt; A().some_func()\n'Some value'\n</code></pre></p>"},{"location":"CN/#_58","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u547d\u540d\u4fee\u9970 \u7528\u4e8e\u907f\u514d\u4e0d\u540c\u547d\u540d\u7a7a\u95f4\u4e4b\u95f4\u540d\u79f0\u51b2\u7a81.</li> <li>\u5728 Python \u4e2d, \u89e3\u91ca\u5668\u4f1a\u901a\u8fc7\u7ed9\u7c7b\u4e2d\u4ee5 <code>__</code> (\u53cc\u4e0b\u5212\u7ebf)\u5f00\u5934\u4e14\u7ed3\u5c3e\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u4e0b\u5212\u7ebf\u7684\u7c7b\u6210\u5458\u540d\u79f0\u52a0\u4e0a<code>_NameOfTheClass</code> \u6765\u4fee\u9970(mangles)\u540d\u79f0.</li> <li>\u6240\u4ee5, \u8981\u8bbf\u95ee <code>__honey</code> \u5bf9\u8c61,\u6211\u4eec\u9700\u8981\u52a0\u4e0a <code>_Yo</code> \u4ee5\u9632\u6b62\u4e0e\u5176\u4ed6\u7c7b\u4e2d\u5b9a\u4e49\u7684\u76f8\u540c\u540d\u79f0\u7684\u5c5e\u6027\u53d1\u751f\u51b2\u7a81.</li> <li>\u4f46\u662f\u4e3a\u4ec0\u4e48\u5b83\u5728\u7b2c\u4e8c\u4e2a\u7247\u6bb5\u4e2d\u4e0d\u8d77\u4f5c\u7528\uff1f \u56e0\u4e3a\u547d\u540d\u4fee\u9970\u6392\u9664\u4e86\u4ee5\u53cc\u4e0b\u5212\u7ebf\u7ed3\u5c3e\u7684\u540d\u79f0\u3002</li> <li>\u7b2c\u4e09\u4e2a\u7247\u6bb5\u4e5f\u662f\u547d\u540d\u4fee\u9970\u7684\u7ed3\u679c\u3002 <code>return __variable</code> \u8bed\u53e5\u4e2d\u7684 <code>__variable</code> \u540d\u79f0\u88ab\u4fee\u6539\u4e3a <code>_A__variable</code>\uff0c\u8fd9\u4e5f\u6070\u597d\u662f\u6211\u4eec\u5728\u5916\u90e8\u4f5c\u7528\u57df\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\u7684\u540d\u79f0\u3002</li> <li>\u6b64\u5916\uff0c\u5982\u679c\u4fee\u9970\u540e\u7684\u53d8\u91cf\u540d\u8d85\u8fc7255\u4e2a\u5b57\u7b26\uff0c\u5219\u4f1a\u8fdb\u884c\u622a\u65ad\u3002</li> </ul>"},{"location":"CN/#section-appearances-are-deceptive","title":"Section: Appearances are deceptive!/\u5916\u8868\u662f\u9760\u4e0d\u4f4f\u7684!","text":""},{"location":"CN/#skipping-lines","title":"&gt; Skipping lines?/\u8df3\u8fc7\u4e00\u884c?","text":"<p>Output: <pre><code>&gt;&gt;&gt; value = 11\n&gt;&gt;&gt; valu\u0435 = 32\n&gt;&gt;&gt; value\n11\n</code></pre></p> <p>\u4ec0\u4e48\u9b3c?</p> <p>\u6ce8\u610f: \u5982\u679c\u4f60\u60f3\u8981\u91cd\u73b0\u7684\u8bdd\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u76f4\u63a5\u590d\u5236\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5230\u4f60\u7684\u6587\u4ef6\u6216\u547d\u4ee4\u884c\u91cc.</p>"},{"location":"CN/#_59","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<p>\u4e00\u4e9b\u975e\u897f\u65b9\u5b57\u7b26\u867d\u7136\u770b\u8d77\u6765\u548c\u82f1\u8bed\u5b57\u6bcd\u76f8\u540c, \u4f46\u4f1a\u88ab\u89e3\u91ca\u5668\u8bc6\u522b\u4e3a\u4e0d\u540c\u7684\u5b57\u6bcd.</p> <pre><code>&gt;&gt;&gt; ord('\u0435') # \u897f\u91cc\u5c14\u8bed\u7684 'e' (Ye)\n1077\n&gt;&gt;&gt; ord('e') # \u62c9\u4e01\u8bed\u7684 'e', \u7528\u4e8e\u82f1\u6587\u5e76\u4f7f\u7528\u6807\u51c6\u952e\u76d8\u8f93\u5165\n101\n&gt;&gt;&gt; '\u0435' == 'e'\nFalse\n\n&gt;&gt;&gt; value = 42 # \u62c9\u4e01\u8bed e\n&gt;&gt;&gt; valu\u0435 = 23 # \u897f\u91cc\u5c14\u8bed 'e', Python 2.x \u7684\u89e3\u91ca\u5668\u5728\u8fd9\u4f1a\u629b\u51fa `SyntaxError` \u5f02\u5e38\n&gt;&gt;&gt; value\n42\n</code></pre> <p>\u5185\u7f6e\u7684 <code>ord()</code> \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u7684 Unicode \u4ee3\u7801\u70b9, \u8fd9\u91cc\u897f\u91cc\u5c14\u8bed 'e' \u548c\u62c9\u4e01\u8bed 'e' \u7684\u4ee3\u7801\u70b9\u4e0d\u540c\u8bc1\u5b9e\u4e86\u4e0a\u8ff0\u4f8b\u5b50.</p>"},{"location":"CN/#teleportation","title":"&gt; Teleportation/\u7a7a\u95f4\u79fb\u52a8 *","text":"<pre><code>import numpy as np\n\ndef energy_send(x):\n    # \u521d\u59cb\u5316\u4e00\u4e2a numpy \u6570\u7ec4\n    np.array([float(x)])\n\ndef energy_receive():\n    # \u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684 numpy \u6570\u7ec4\n    return np.empty((), dtype=np.float).tolist()\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; energy_send(123.456)\n&gt;&gt;&gt; energy_receive()\n123.456\n</code></pre></p> <p>\u8c01\u6765\u7ed9\u6211\u53d1\u4e2a\u8bfa\u8d1d\u5c14\u5956?</p>"},{"location":"CN/#_60","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u6ce8\u610f\u5728 <code>energy_send</code> \u51fd\u6570\u4e2d\u521b\u5efa\u7684 numpy \u6570\u7ec4\u5e76\u6ca1\u6709\u8fd4\u56de, \u56e0\u6b64\u5185\u5b58\u7a7a\u95f4\u88ab\u91ca\u653e\u5e76\u53ef\u4ee5\u88ab\u91cd\u65b0\u5206\u914d.</li> <li><code>numpy.empty()</code> \u76f4\u63a5\u8fd4\u56de\u4e0b\u4e00\u6bb5\u7a7a\u95f2\u5185\u5b58\uff0c\u800c\u4e0d\u91cd\u65b0\u521d\u59cb\u5316. \u800c\u8fd9\u4e2a\u5185\u5b58\u70b9\u6070\u597d\u5c31\u662f\u521a\u521a\u91ca\u653e\u7684\u90a3\u4e2a(\u901a\u5e38\u60c5\u51b5\u4e0b, \u5e76\u4e0d\u7edd\u5bf9).</li> </ul>"},{"location":"CN/#well-something-is-fishy","title":"&gt; Well, something is fishy.../\u55ef\uff0c\u6709\u4e9b\u53ef\u7591...","text":"<pre><code>def square(x):\n    \"\"\"\n    \u4e00\u4e2a\u901a\u8fc7\u52a0\u6cd5\u8ba1\u7b97\u5e73\u65b9\u7684\u7b80\u5355\u51fd\u6570.\n    \"\"\"\n    sum_so_far = 0\n    for counter in range(x):\n        sum_so_far = sum_so_far + x\n  return sum_so_far\n</code></pre> <p>Output (Python 2.x):</p> <pre><code>&gt;&gt;&gt; square(10)\n10\n</code></pre> <p>\u96be\u9053\u4e0d\u5e94\u8be5\u662f100\u5417?</p> <p>\u6ce8\u610f: \u5982\u679c\u4f60\u65e0\u6cd5\u91cd\u73b0, \u53ef\u4ee5\u5c1d\u8bd5\u8fd0\u884c\u8fd9\u4e2a\u6587\u4ef6mixed_tabs_and_spaces.py.</p>"},{"location":"CN/#_61","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u4e0d\u8981\u6df7\u7528\u5236\u8868\u7b26(tab)\u548c\u7a7a\u683c(space)! \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, return \u7684\u524d\u9762\u662f\"1\u4e2a\u5236\u8868\u7b26\", \u800c\u5176\u4ed6\u90e8\u5206\u7684\u4ee3\u7801\u524d\u9762\u662f \"4\u4e2a\u7a7a\u683c\".</li> <li>Python\u662f\u8fd9\u4e48\u5904\u7406\u5236\u8868\u7b26\u7684: <p>\u9996\u5148, \u5236\u8868\u7b26\u4f1a\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u88ab\u66ff\u6362\u62108\u4e2a\u7a7a\u683c, \u76f4\u5230\u88ab\u66ff\u6362\u540e\u7684\u5b57\u7b26\u603b\u6570\u662f\u516b\u7684\u500d\u6570 &lt;...&gt;</p> </li> <li>\u56e0\u6b64, <code>square</code> \u51fd\u6570\u6700\u540e\u4e00\u884c\u7684\u5236\u8868\u7b26\u4f1a\u88ab\u66ff\u6362\u62108\u4e2a\u7a7a\u683c, \u5bfc\u81f4return\u8bed\u53e5\u8fdb\u5165\u5faa\u73af\u8bed\u53e5\u91cc\u9762.</li> <li> <p>Python 3 \u5f88\u53cb\u597d, \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f1a\u81ea\u52a8\u629b\u51fa\u9519\u8bef.</p> <p>Output (Python 3.x): <pre><code>TabError: inconsistent use of tabs and spaces in indentation\n</code></pre></p> </li> </ul>"},{"location":"CN/#section-miscellaneous","title":"Section: Miscellaneous/\u6742\u9879","text":""},{"location":"CN/#is-faster","title":"&gt; <code>+=</code> is faster/\u66f4\u5feb\u7684 <code>+=</code>","text":"<pre><code># \u7528 \"+\" \u8fde\u63a5\u4e09\u4e2a\u5b57\u7b26\u4e32:\n&gt;&gt;&gt; timeit.timeit(\"s1 = s1 + s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100)\n0.25748300552368164\n# \u7528 \"+=\" \u8fde\u63a5\u4e09\u4e2a\u5b57\u7b26\u4e32:\n&gt;&gt;&gt; timeit.timeit(\"s1 += s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100)\n0.012188911437988281\n</code></pre>"},{"location":"CN/#_62","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u8fde\u63a5\u4e24\u4e2a\u4ee5\u4e0a\u7684\u5b57\u7b26\u4e32\u65f6 <code>+=</code> \u6bd4 <code>+</code> \u66f4\u5feb, \u56e0\u4e3a\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32 (\u4f8b\u5982, <code>s1 += s2 + s3</code> \u4e2d\u7684 <code>s1</code>) \u4e0d\u4f1a\u88ab\u9500\u6bc1.(\u8bd1: \u5c31\u662f <code>+=</code> \u6267\u884c\u7684\u662f\u8ffd\u52a0\u64cd\u4f5c\uff0c\u5c11\u4e86\u4e00\u4e2a\u9500\u6bc1\u65b0\u5efa\u7684\u52a8\u4f5c.)</li> </ul>"},{"location":"CN/#lets-make-a-giant-string","title":"&gt; Let's make a giant string!/\u6765\u505a\u4e2a\u5de8\u5927\u7684\u5b57\u7b26\u4e32\u5427\uff01","text":"<pre><code>def add_string_with_plus(iters):\n    s = \"\"\n    for i in range(iters):\n        s += \"xyz\"\n    assert len(s) == 3*iters\n\ndef add_bytes_with_plus(iters):\n    s = b\"\"\n    for i in range(iters):\n        s += b\"xyz\"\n    assert len(s) == 3*iters\n\ndef add_string_with_format(iters):\n    fs = \"{}\"*iters\n    s = fs.format(*([\"xyz\"]*iters))\n    assert len(s) == 3*iters\n\ndef add_string_with_join(iters):\n    l = []\n    for i in range(iters):\n        l.append(\"xyz\")\n    s = \"\".join(l)\n    assert len(s) == 3*iters\n\ndef convert_list_to_string(l, iters):\n    s = \"\".join(l)\n    assert len(s) == 3*iters\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; timeit(add_string_with_plus(10000))\n1000 loops, best of 3: 972 \u00b5s per loop\n&gt;&gt;&gt; timeit(add_bytes_with_plus(10000))\n1000 loops, best of 3: 815 \u00b5s per loop\n&gt;&gt;&gt; timeit(add_string_with_format(10000))\n1000 loops, best of 3: 508 \u00b5s per loop\n&gt;&gt;&gt; timeit(add_string_with_join(10000))\n1000 loops, best of 3: 878 \u00b5s per loop\n&gt;&gt;&gt; l = [\"xyz\"]*10000\n&gt;&gt;&gt; timeit(convert_list_to_string(l, 10000))\n10000 loops, best of 3: 80 \u00b5s per loop\n</code></pre></p> <p>\u8ba9\u6211\u4eec\u5c06\u8fed\u4ee3\u6b21\u6570\u589e\u52a010\u500d.</p> <pre><code>&gt;&gt;&gt; timeit(add_string_with_plus(100000)) # \u6267\u884c\u65f6\u95f4\u7ebf\u6027\u589e\u52a0\n100 loops, best of 3: 9.75 ms per loop\n&gt;&gt;&gt; timeit(add_bytes_with_plus(100000)) # \u4e8c\u6b21\u589e\u52a0\n1000 loops, best of 3: 974 ms per loop\n&gt;&gt;&gt; timeit(add_string_with_format(100000)) # \u7ebf\u6027\u589e\u52a0\n100 loops, best of 3: 5.25 ms per loop\n&gt;&gt;&gt; timeit(add_string_with_join(100000)) # \u7ebf\u6027\u589e\u52a0\n100 loops, best of 3: 9.85 ms per loop\n&gt;&gt;&gt; l = [\"xyz\"]*100000\n&gt;&gt;&gt; timeit(convert_list_to_string(l, 100000)) # \u7ebf\u6027\u589e\u52a0\n1000 loops, best of 3: 723 \u00b5s per loop\n</code></pre>"},{"location":"CN/#_63","title":"\ud83d\udca1 \u8bf4\u660e:","text":"<ul> <li>\u4f60\u53ef\u4ee5\u5728\u8fd9\u83b7\u5f97\u66f4\u591a timeit \u7684\u76f8\u5173\u4fe1\u606f. \u5b83\u901a\u5e38\u7528\u4e8e\u8861\u91cf\u4ee3\u7801\u7247\u6bb5\u7684\u6267\u884c\u65f6\u95f4.</li> <li>\u4e0d\u8981\u7528 <code>+</code> \u53bb\u751f\u6210\u8fc7\u957f\u7684\u5b57\u7b26\u4e32, \u5728 Python \u4e2d, <code>str</code> \u662f\u4e0d\u53ef\u53d8\u7684, \u6240\u4ee5\u5728\u6bcf\u6b21\u8fde\u63a5\u4e2d\u4f60\u90fd\u8981\u628a\u5de6\u53f3\u4e24\u4e2a\u5b57\u7b26\u4e32\u590d\u5236\u5230\u65b0\u7684\u5b57\u7b26\u4e32\u4e2d. \u5982\u679c\u4f60\u8fde\u63a5\u56db\u4e2a\u957f\u5ea6\u4e3a10\u7684\u5b57\u7b26\u4e32, \u4f60\u9700\u8981\u62f7\u8d1d (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90 \u4e2a\u5b57\u7b26\u800c\u4e0d\u662f 40 \u4e2a\u5b57\u7b26. \u968f\u7740\u5b57\u7b26\u4e32\u7684\u6570\u91cf\u548c\u5927\u5c0f\u7684\u589e\u52a0, \u60c5\u51b5\u4f1a\u53d8\u5f97\u8d8a\u53d1\u7684\u7cdf\u7cd5 (\u5c31\u50cf<code>add_bytes_with_plus</code> \u51fd\u6570\u7684\u6267\u884c\u65f6\u95f4\u4e00\u6837)</li> <li>\u56e0\u6b64, \u66f4\u5efa\u8bae\u4f7f\u7528 <code>.format.</code> \u6216 <code>%</code> \u8bed\u6cd5 (\u4f46\u662f, \u5bf9\u4e8e\u77ed\u5b57\u7b26\u4e32, \u5b83\u4eec\u6bd4 <code>+</code> \u7a0d\u6162\u4e00\u70b9).</li> <li>\u53c8\u6216\u8005, \u5982\u679c\u4f60\u6240\u9700\u7684\u5185\u5bb9\u5df2\u7ecf\u4ee5\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5f62\u5f0f\u63d0\u4f9b\u4e86, \u4f7f\u7528 <code>''.join(\u53ef\u8fed\u4ee3\u5bf9\u8c61)</code> \u8981\u5feb\u591a\u4e86.</li> <li><code>add_string_with_plus</code> \u7684\u6267\u884c\u65f6\u95f4\u6ca1\u6709\u50cf <code>add_bytes_with_plus</code> \u4e00\u6837\u51fa\u73b0\u4e8c\u6b21\u589e\u52a0\u662f\u56e0\u4e3a\u89e3\u91ca\u5668\u4f1a\u5982\u540c\u4e0a\u4e00\u4e2a\u4f8b\u5b50\u6240\u8ba8\u8bba\u7684\u4e00\u6837\u4f18\u5316 <code>+=</code>. \u7528 <code>s = s + \"x\" + \"y\" + \"z\"</code> \u66ff\u4ee3 <code>s += \"xyz\"</code> \u7684\u8bdd, \u6267\u884c\u65f6\u95f4\u5c31\u4f1a\u4e8c\u6b21\u589e\u52a0\u4e86.   <pre><code>def add_string_with_plus(iters):\n    s = \"\"\n    for i in range(iters):\n        s = s + \"x\" + \"y\" + \"z\"\n    assert len(s) == 3*iters\n\n&gt;&gt;&gt; timeit(add_string_with_plus(10000))\n100 loops, best of 3: 9.87 ms per loop\n&gt;&gt;&gt; timeit(add_string_with_plus(100000)) # \u6267\u884c\u65f6\u95f4\u4e8c\u6b21\u589e\u52a0\n1 loops, best of 3: 1.09 s per loop\n</code></pre></li> </ul>"},{"location":"CN/#slowing-down-dict-lookups","title":"&gt; Slowing down <code>dict</code> lookups/\u8ba9\u5b57\u5178\u7684\u67e5\u627e\u6162\u4e0b\u6765 *","text":"<pre><code>some_dict = {str(i): 1 for i in range(1_000_000)}\nanother_dict = {str(i): 1 for i in range(1_000_000)}\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; %timeit some_dict['5']\n28.6 ns \u00b1 0.115 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n&gt;&gt;&gt; some_dict[1] = 1\n&gt;&gt;&gt; %timeit some_dict['5']\n37.2 ns \u00b1 0.265 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n\n&gt;&gt;&gt; %timeit another_dict['5']\n28.5 ns \u00b1 0.142 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n&gt;&gt;&gt; another_dict[1]  # Trying to access a key that doesn't exist\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nKeyError: 1\n&gt;&gt;&gt; %timeit another_dict['5']\n38.5 ns \u00b1 0.0913 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n</code></pre></p> <p>\u4e3a\u4ec0\u4e48\u76f8\u540c\u7684\u67e5\u627e\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u6162\uff1f</p>"},{"location":"CN/#_64","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li>CPython \u6709\u4e00\u4e2a\u901a\u7528\u7684\u5b57\u5178\u67e5\u627e\u51fd\u6570\uff0c\u53ef\u4ee5\u5904\u7406\u6240\u6709\u7c7b\u578b\u7684\u952e\uff08<code>str</code>\u3001<code>int</code>\u3001\u4efb\u4f55\u5bf9\u8c61...\uff09\uff0c\u4ee5\u53ca\u4e00\u4e2a\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u4ec5\u7531 <code>str</code> \u952e\u7ec4\u6210\u7684\u5b57\u5178\u7684\u5e38\u89c1\u60c5\u51b5\u3002</li> <li>\u4e13\u7528\u51fd\u6570\uff08\u5728 CPython \u7684 \u6e90 \u4e2d\u540d\u4e3a <code>lookdict_unicode</code>\uff09\u77e5\u9053\u6240\u6709\u73b0\u6709\u7684\u952e\uff08\u5305\u62ec\u67e5\u627e\u7684 key) \u662f\u5b57\u7b26\u4e32\uff0c\u5e76\u4f7f\u7528\u66f4\u5feb\u548c\u66f4\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\u6765\u6bd4\u8f83\u952e\uff0c\u800c\u4e0d\u662f\u8c03\u7528 <code>__eq__</code> \u65b9\u6cd5\u3002</li> <li>\u7b2c\u4e00\u6b21\u4f7f\u7528\u975e <code>str</code> \u952e\u8bbf\u95ee <code>dict</code> \u5b9e\u4f8b\u65f6\uff0c\u4f1a\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff0c\u4ee5\u4fbf\u5c06\u6765\u7684\u67e5\u627e\u4f7f\u7528\u901a\u7528\u51fd\u6570\u3002</li> <li>\u8fd9\u4e2a\u8fc7\u7a0b\u5bf9\u4e8e\u7279\u5b9a\u7684 <code>dict</code> \u5b9e\u4f8b\u662f\u4e0d\u53ef\u9006\u7684\uff0c\u5e76\u4e14\u952e\u751a\u81f3\u4e0d\u5fc5\u5b58\u5728\u4e8e\u5b57\u5178\u4e2d\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5bf9\u4e0d\u5b58\u5728\u7684\u952e\u8fdb\u884c\u67e5\u627e\u5177\u6709\u76f8\u540c\u526f\u4f5c\u7528\u7684\u539f\u56e0\u3002</li> </ul>"},{"location":"CN/#bloating-instance-dictsdict","title":"&gt; Bloating instance <code>dict</code>s/\u53d8\u81c3\u80bf\u7684<code>dict</code>\u5b9e\u4f8b\u4eec *","text":"<pre><code>import sys\n\nclass SomeClass:\n    def __init__(self):\n        self.some_attr1 = 1\n        self.some_attr2 = 2\n        self.some_attr3 = 3\n        self.some_attr4 = 4\n\n\ndef dict_size(o):\n    return sys.getsizeof(o.__dict__)\n</code></pre> <p>Output: (Python 3.8, \u5176\u4ed6 Python 3 \u7684\u7248\u672c\u4e5f\u8bb8\u7a0d\u6709\u4e0d\u540c) <pre><code>&gt;&gt;&gt; o1 = SomeClass()\n&gt;&gt;&gt; o2 = SomeClass()\n&gt;&gt;&gt; dict_size(o1)\n104\n&gt;&gt;&gt; dict_size(o2)\n104\n&gt;&gt;&gt; del o1.some_attr1\n&gt;&gt;&gt; o3 = SomeClass()\n&gt;&gt;&gt; dict_size(o3)\n232\n&gt;&gt;&gt; dict_size(o1)\n232\n</code></pre></p> <p>\u8ba9\u6211\u4eec\u5728\u4e00\u4e2a\u65b0\u7684\u89e3\u91ca\u5668\u4e2d\u518d\u8bd5\u4e00\u6b21\uff1a</p> <pre><code>&gt;&gt;&gt; o1 = SomeClass()\n&gt;&gt;&gt; o2 = SomeClass()\n&gt;&gt;&gt; dict_size(o1)\n104  # \u610f\u6599\u4e4b\u4e2d\n&gt;&gt;&gt; o1.some_attr5 = 5\n&gt;&gt;&gt; o1.some_attr6 = 6\n&gt;&gt;&gt; dict_size(o1)\n360\n&gt;&gt;&gt; dict_size(o2)\n272\n&gt;&gt;&gt; o3 = SomeClass()\n&gt;&gt;&gt; dict_size(o3)\n232\n</code></pre> <p>\u662f\u4ec0\u4e48\u8ba9\u90a3\u4e9b\u5b57\u5178\u53d8\u5f97\u81c3\u80bf\uff1f \u4e3a\u4ec0\u4e48\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u4e5f\u4f1a\u53d8\u81c3\u80bf\uff1f</p>"},{"location":"CN/#_65","title":"\ud83d\udca1 \u8bf4\u660e","text":"<ul> <li>CPython \u80fd\u591f\u5728\u591a\u4e2a\u5b57\u5178\u4e2d\u91cd\u7528\u76f8\u540c\u7684\u201c\u952e\u201d\u5bf9\u8c61\u3002 \u8fd9\u6dfb\u52a0\u5728 PEP 412 \u4e2d\uff0c\u76ee\u7684\u662f\u51cf\u5c11\u5185\u5b58\u4f7f\u7528\uff0c\u7279\u522b\u662f\u5728\u5b9e\u4f8b\u5b57\u5178\u4e2d \u2014\u2014 \u952e\uff08\u5b9e\u4f8b\u5c5e\u6027\uff09\u51e0\u4e4e\u5728\u6240\u6709\u5b9e\u4f8b\u90fd\u901a\u7528\u3002</li> <li>\u8fd9\u79cd\u4f18\u5316\u5bf9\u4e8e\u5b9e\u4f8b\u5b57\u5178\u6765\u8bf4\u662f\u5341\u5206\u81ea\u7136\u7684\uff0c\u4f46\u5982\u679c\u67d0\u4e9b\u5047\u8bbe\u88ab\u6253\u7834\uff0c\u5b83\u5c31\u4f1a\u88ab\u7981\u7528\u3002</li> <li>\u5bc6\u94a5\u5171\u4eab\u5b57\u5178\u4e0d\u652f\u6301\u5220\u9664\uff1b\u5982\u679c\u5220\u9664\u4e86\u5b9e\u4f8b\u5c5e\u6027\uff0c\u5219\u5b57\u5178\u662f\u201c\u672a\u5171\u4eab\u7684\u201d\uff0c\u5e76\u4e14\u540c\u4e00\u7c7b\u7684\u6240\u6709\u672a\u6765\u5b9e\u4f8b\u90fd\u7981\u7528\u5bc6\u94a5\u5171\u4eab\u3002</li> <li>\u53e6\u5916\uff0c\u5982\u679c\u5b57\u5178\u952e\u5df2\u88ab\u8c03\u6574\u5927\u5c0f\uff08\u56e0\u4e3a\u63d2\u5165\u4e86\u65b0\u952e\uff09\uff0c\u5b83\u4eec\u4fdd\u6301\u5171\u4eab\u4ec5\u5f53\u5b83\u4eec\u88ab\u4e00\u4e2a\u5b8c\u5168\u5355\u4e00\u7684\u5b57\u5178\u4f7f\u7528\u65f6\uff08\u8fd9\u5141\u8bb8\u5728\u7b2c\u4e00\u4e2a\u521b\u5efa\u7684\u5b9e\u4f8b\u7684 <code>__init__</code> \u4e2d\u6dfb\u52a0\u8bb8\u591a\u5c5e\u6027\uff0c\u800c\u4e0d\u4f1a\u5bfc\u81f4\u201c\u53d6\u6d88\u5171\u4eab\u201d\uff09\u3002\u5982\u679c\u53d1\u751f\u8c03\u6574\u5927\u5c0f\u65f6\u5b58\u5728\u591a\u4e2a\u5b9e\u4f8b\uff0c\u5219\u4e3a\u540c\u4e00\u7c7b\u7684\u6240\u6709\u672a\u6765\u5b9e\u4f8b\u7981\u7528\u5bc6\u94a5\u5171\u4eab\uff1aCPython \u65e0\u6cd5\u5224\u65ad\u60a8\u7684\u5b9e\u4f8b\u662f\u5426\u6b63\u5728\u4f7f\u7528\u76f8\u540c\u7684\u5c5e\u6027\u96c6\uff0c\u5e76\u51b3\u5b9a\u653e\u5f03\u5c1d\u8bd5\u5171\u4eab\u5b83\u4eec\u7684\u952e\u503c\u3002</li> <li>\u4e00\u4e2a\u5c0f\u63d0\u793a\uff0c\u5982\u679c\u4f60\u7684\u76ee\u6807\u662f\u964d\u4f4e\u7a0b\u5e8f\u7684\u5185\u5b58\u5360\u7528\uff1a\u4e0d\u8981\u5220\u9664\u5b9e\u4f8b\u5c5e\u6027\uff0c\u5e76\u786e\u4fdd\u5728 <code>__init__</code> \u4e2d\u521d\u59cb\u5316\u6240\u6709\u7684\u5c5e\u6027\uff01</li> </ul>"},{"location":"CN/#minor-ones","title":"&gt; Minor Ones/\u5c0f\u77e5\u8bc6\u70b9","text":"<ul> <li><code>join()</code> \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u64cd\u4f5c\u800c\u4e0d\u662f\u5217\u8868\u64cd\u4f5c. (\u7b2c\u4e00\u6b21\u63a5\u89e6\u4f1a\u89c9\u5f97\u6709\u70b9\u8fdd\u53cd\u76f4\u89c9)</li> </ul> <p>\ud83d\udca1 \u8bf4\u660e:   \u5982\u679c <code>join()</code> \u662f\u5b57\u7b26\u4e32\u65b9\u6cd5 \u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u5904\u7406\u4efb\u4f55\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61(\u5217\u8868\uff0c\u5143\u7ec4\uff0c\u8fed\u4ee3\u5668). \u5982\u679c\u5b83\u662f\u5217\u8868\u65b9\u6cd5, \u5219\u5fc5\u987b\u5728\u6bcf\u79cd\u7c7b\u578b\u4e2d\u5355\u72ec\u5b9e\u73b0. \u53e6\u5916, \u5728 <code>list</code> \u5bf9\u8c61\u7684\u901a\u7528API\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u4e13\u7528\u4e8e\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u6ca1\u6709\u592a\u5927\u7684\u610f\u4e49.</p> <ul> <li>\u770b\u7740\u5947\u602a\u4f46\u80fd\u6b63\u786e\u8fd0\u884c\u7684\u8bed\u53e5:</li> <li><code>[] = ()</code> \u8bed\u53e5\u5728\u8bed\u4e49\u4e0a\u662f\u6b63\u786e\u7684 (\u89e3\u5305\u4e00\u4e2a\u7a7a\u7684 <code>tuple</code> \u5e76\u8d4b\u503c\u7ed9 <code>list</code>)</li> <li><code>'a'[0][0][0][0][0]</code> \u5728\u8bed\u4e49\u4e0a\u4e5f\u662f\u6b63\u786e\u7684, \u56e0\u4e3a Python \u4e0d\u50cfC\u8bed\u8a00\u53ca\u5176\u6d3e\u751f\u8bed\u8a00\u90a3\u6837\uff0c\u5177\u6709\u5b57\u7b26\u6570\u636e\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u4ece\u5b57\u7b26\u4e32\u4e2d\u9009\u62e9\u5355\u4e2a\u5b57\u7b26\u5c06\u8fd4\u56de\u5355\u4e2a\u5b57\u7b26\u4e32\u3002</li> <li> <p><code>3 --0-- 5 == 8</code> \u548c <code>--5 == 5</code> \u5728\u8bed\u4e49\u4e0a\u90fd\u662f\u6b63\u786e\u7684, \u4e14\u7ed3\u679c\u7b49\u4e8e <code>True</code>.(\u8bd1: 3\u51cf\u8d1f0\u7b49\u4e8e3\uff0c\u518d\u51cf\u8d1f5\u76f8\u5f53\u4e8e\u52a05\u7b49\u4e8e8\uff1b\u8d1f\u7684\u8d1f5\u7b49\u4e8e5.)</p> </li> <li> <p>\u9274\u4e8e <code>a</code> \u662f\u4e00\u4e2a\u6570\u5b57, <code>++a</code> \u548c <code>--a</code> \u90fd\u662f\u6709\u6548\u7684 Python \u8bed\u53e5, \u4f46\u5176\u6548\u679c\u4e0e C, C++ \u6216 Java \u7b49\u4e0d\u4e00\u6837.   <pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; a\n5\n&gt;&gt;&gt; ++a\n5\n&gt;&gt;&gt; --a\n5\n</code></pre></p> </li> </ul> <p>\ud83d\udca1 \u8bf4\u660e:   + python \u91cc\u6ca1\u6709 <code>++</code> \u64cd\u4f5c\u7b26. \u8fd9\u5176\u5b9e\u662f\u4e24\u4e2a <code>+</code> \u64cd\u4f5c\u7b26.   + <code>++a</code> \u88ab\u89e3\u6790\u4e3a <code>+(+a)</code> \u6700\u540e\u7b49\u4e8e <code>a</code>. <code>--a</code> \u540c\u7406.   + \u8fd9\u4e2a StackOverflow \u56de\u7b54 \u8ba8\u8bba\u4e86\u4e3a\u4ec0\u4e48 Python \u4e2d\u7f3a\u5c11\u589e\u91cf\u548c\u51cf\u91cf\u8fd0\u7b97\u7b26.</p> <ul> <li> <p>Python \u4f7f\u7528 2\u4e2a\u5b57\u8282\u5b58\u50a8\u51fd\u6570\u4e2d\u7684\u672c\u5730\u53d8\u91cf. \u7406\u8bba\u4e0a, \u8fd9\u610f\u5473\u7740\u51fd\u6570\u4e2d\u53ea\u80fd\u5b9a\u4e4965536\u4e2a\u53d8\u91cf. \u4f46\u662f\uff0cPython \u5185\u7f6e\u4e86\u4e00\u4e2a\u65b9\u4fbf\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u7528\u4e8e\u5b58\u50a8\u8d85\u8fc72^16\u4e2a\u53d8\u91cf\u540d. \u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u4e86\u5f53\u5b9a\u4e49\u4e86\u8d85\u8fc765536\u4e2a\u5c40\u90e8\u53d8\u91cf\u65f6\u5806\u6808\u4e2d\u53d1\u751f\u7684\u60c5\u51b5 (\u8b66\u544a: \u8fd9\u6bb5\u4ee3\u7801\u4f1a\u6253\u5370\u5927\u7ea62^18\u884c\u6587\u672c, \u8bf7\u505a\u597d\u51c6\u5907!):      <pre><code>import dis\nexec(\"\"\"\ndef f():\n    \"\"\" + \"\"\"\n    \"\"\".join([\"X\"+str(x)+\"=\" + str(x) for x in range(65539)]))\n\nf()\n\nprint(dis.dis(f))\n</code></pre></p> </li> <li> <p>\u4f60\u7684 Python \u4ee3\u7801 \u5e76\u4e0d\u4f1a\u591a\u7ebf\u7a0b\u540c\u65f6\u8fd0\u884c (\u662f\u7684, \u4f60\u6ca1\u542c\u9519!). \u867d\u7136\u4f60\u89c9\u5f97\u4f1a\u4ea7\u751f\u591a\u4e2a\u7ebf\u7a0b\u5e76\u8ba9\u5b83\u4eec\u540c\u65f6\u6267\u884c\u4f60\u7684\u4ee3\u7801, \u4f46\u662f, \u7531\u4e8e \u5168\u5c40\u89e3\u91ca\u9501\u7684\u5b58\u5728, \u4f60\u6240\u505a\u7684\u53ea\u662f\u8ba9\u4f60\u7684\u7ebf\u7a0b\u4f9d\u6b21\u5728\u540c\u4e00\u4e2a\u6838\u5fc3\u4e0a\u6267\u884c. Python \u591a\u7ebf\u7a0b\u9002\u7528\u4e8eIO\u5bc6\u96c6\u578b\u7684\u4efb\u52a1, \u4f46\u5982\u679c\u60f3\u8981\u5e76\u884c\u5904\u7406CPU\u5bc6\u96c6\u578b\u7684\u4efb\u52a1, \u4f60\u5e94\u8be5\u4f1a\u60f3\u4f7f\u7528 multiprocessing \u6a21\u5757.</p> </li> <li> <p>\u5217\u8868\u5207\u7247\u8d85\u51fa\u7d22\u5f15\u8fb9\u754c\u800c\u4e0d\u5f15\u53d1\u4efb\u4f55\u9519\u8bef   <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; some_list[111:]\n[]\n</code></pre></p> </li> <li> <p><code>int('\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669')</code> \u5728 Python 3 \u4e2d\u4f1a\u8fd4\u56de <code>123456789</code>. \u5728 Python \u4e2d, \u5341\u8fdb\u5236\u5b57\u7b26\u5305\u62ec\u6570\u5b57\u5b57\u7b26, \u4ee5\u53ca\u53ef\u7528\u4e8e\u5f62\u6210\u5341\u8fdb\u5236\u6570\u5b57\u7684\u6240\u6709\u5b57\u7b26, \u4f8b\u5982: U+0660, ARABIC-INDIC DIGIT ZERO. \u8fd9\u6709\u4e00\u4e2a\u5173\u4e8e\u6b64\u7684 \u6709\u8da3\u6545\u4e8b.</p> </li> <li> <p><code>'abc'.count('') == 4</code>. \u8fd9\u6709\u4e00\u4e2a <code>count</code> \u65b9\u6cd5\u7684\u76f8\u8fd1\u5b9e\u73b0, \u80fd\u66f4\u597d\u7684\u8bf4\u660e\u95ee\u9898   <pre><code>def count(s, sub):\n    result = 0\n    for i in range(len(s) + 1 - len(sub)):\n        result += (s[i:i + len(sub)] == sub)\n    return result\n</code></pre>   \u8fd9\u4e2a\u884c\u4e3a\u662f\u7531\u4e8e\u7a7a\u5b50\u4e32(<code>''</code>)\u4e0e\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u957f\u5ea6\u4e3a0\u7684\u5207\u7247\u76f8\u5339\u914d\u5bfc\u81f4\u7684.</p> </li> </ul>"},{"location":"CN/#contributing","title":"Contributing/\u8d21\u732e","text":"<p>\u6b22\u8fce\u5404\u79cd\u8865\u4e01! \u8be6\u60c5\u8bf7\u770bCONTRIBUTING.md.(\u8bd1: \u8fd9\u662f\u7ed9\u539f\u5e93\u63d0\u8d21\u732e\u7684\u8981\u6c42\u6a21\u7248)</p> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u65b0\u5efa issue \u6216\u8005\u5728\u4e0a Gitter \u4e0e\u6211\u4eec\u8fdb\u884c\u8ba8\u8bba.</p> <p>(\u8bd1: \u5982\u679c\u4f60\u60f3\u5bf9\u8fd9\u4e2a\u7ffb\u8bd1\u9879\u76ee\u63d0\u4f9b\u5e2e\u52a9, \u8bf7\u770b\u8fd9\u91cc)</p>"},{"location":"CN/#acknowledgements","title":"Acknowledgements/\u81f4\u8c22","text":"<p>\u8fd9\u4e2a\u7cfb\u5217\u6700\u521d\u7684\u60f3\u6cd5\u548c\u8bbe\u8ba1\u7075\u611f\u6765\u81ea\u4e8e Denys Dovhan \u7684\u9879\u76ee wtfjs. \u793e\u533a\u7684\u5f3a\u5927\u652f\u6301\u8ba9\u5b83\u6210\u957f\u4e3a\u73b0\u5728\u7684\u6a21\u6837.</p>"},{"location":"CN/#some-nice-links","title":"Some nice Links!/\u4e00\u4e9b\u4e0d\u9519\u7684\u8d44\u6e90","text":"<ul> <li>https://www.youtube.com/watch?v=sH4XF6pKKmk</li> <li>https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python</li> <li>https://sopython.com/wiki/Common_Gotchas_In_Python</li> <li>https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines</li> <li>https://stackoverflow.com/questions/1011431/common-pitfalls-in-python</li> <li>https://www.python.org/doc/humor/</li> <li>https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65</li> </ul>"},{"location":"CN/#license","title":"\ud83c\udf93 License/\u8bb8\u53ef","text":"<p>\u00a9 Satwik Kansal</p>"},{"location":"CN/#help","title":"Help/\u5e2e\u52a9","text":"<p>\u5982\u679c\u60a8\u6709\u4efb\u4f55\u60f3\u6cd5\u6216\u5efa\u8bae\uff0c\u6b22\u8fce\u5206\u4eab.</p>"},{"location":"CN/#surprise-your-geeky-pythonist-friends","title":"Surprise your geeky pythonist friends?/\u60f3\u7ed9\u4f60\u7684\u6781\u5ba2\u670b\u53cb\u4e00\u4e2a\u60ca\u559c?","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u5feb\u94fe\u5411 Twitter \u548c Linkedin \u4e0a\u7684\u670b\u53cb\u63a8\u8350 wtfpython,</p> <p>Twitter  | Linkedin</p>"},{"location":"CN/#need-a-pdf-versionpdf","title":"Need a pdf version?/\u9700\u8981\u6765\u4e00\u4efdpdf\u7248\u7684?","text":"<p>\u4f60\u53ef\u4ee5\u5feb\u901f\u5728\u8fd9\u83b7\u5f97\u82f1\u6587\u4f5c\u8005\u5236\u4f5c\u7684\u7248\u672c.</p>"},{"location":"CN/#follow-commitcommit","title":"Follow Commit/\u8ffd\u8e2aCommit","text":"<p>\u8fd9\u662f\u4e2d\u6587\u7248 fork \u65f6\u6240\u5904\u7684\u539f\u5e93 Commit, \u5f53\u539f\u5e93\u66f4\u65b0\u65f6\u6211\u4f1a\u8ddf\u968f\u66f4\u65b0.</p> <p></p>"},{"location":"GE/","title":"German","text":"What the f*ck Python! \ud83d\ude31 <p>Entdecke und verstehe Python durch \u00fcberraschende Code-Schnipsel.</p> <p>\u00dcbersetzungen: English | Chinesisch \u4e2d\u6587 | Vietnamesisch Ti\u1ebfng Vi\u1ec7t | Spanisch Espa\u00f1ol | Koreanisch \ud55c\uad6d\uc5b4 | Russisch \u0420\u0443\u0441\u0441\u043a\u0438\u0439 | \u00dcbersetzung hinzuf\u00fcgen</p> <p>Andere Modi: Interaktive Website | Interaktives Notebook | CLI</p> <p>Python, bekannt als gut designte High-Level und Interpreter-basierte Programmiersprache, stellt viele Features zur Verf\u00fcgung, um dem Programmierer das Leben zu erleichtern. Allerdings kann es vorkommen, dass ein Python-Schnipsel ein unerwartetes Verhalten zeigt.</p> <p>Hier ist ein sch\u00f6nes Projekt, das versucht die Dinge aufzuzeigen, die bei einigen Code-Schnipseln unter der Haube passieren und dar\u00fcber hinaus einige weniger bekannte Features von Python zu erkl\u00e4ren.</p> <p>W\u00e4hrend manche Beispiele nicht unbedingt beeindruckend erscheinen, zeigen sie dennoch interessante Details von Python, die dir wom\u00f6glich noch nicht aufgefallen sind. Ich finde, dass es eine sch\u00f6ne M\u00f6glichkeit ist, die Interna einer Programmiersprache zu lernen und ich glaube das findest du auch !</p> <p>Wenn du ein erfahrener Python-Programmierer bist, kannst du dies als Herausforderung ansehen, um m\u00f6glichst viel beim ersten Anlauf richtig zu machen. Du hast vielleicht manches schon erlebt, sodass ich m\u00f6glicherweise alte Erinnerungen wecken kann! :sweat_smile:</p> <p>PS: Wenn du bereits mehrfach hier warst, kannst du dich hier \u00fcber neue Modifikationen informieren (die Beispiele, die mit einem Stern markiert sind, sind Teil des letzten Releases).</p> <p>Also, los gehts...</p>"},{"location":"GE/#inhaltsverzeichnis","title":"Inhaltsverzeichnis","text":"<ul> <li>Inhaltsverzeichnis</li> <li>Sruktur der Beispiele</li> <li>Benutzung</li> <li>\ud83d\udc40 Beispiele</li> <li>Kapitel: Fordere dein Gehirn heraus!<ul> <li>\u25b6 Das Wichtigste zuerst! *</li> <li>\ud83d\udca1 Erkl\u00e4rung</li> <li>\u25b6 Strings k\u00f6nnen manchmal schwierig sein</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Vorsicht bei verketteten Operationen</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Wie man den <code>is</code> Operator nicht nutzt</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Hash brownies</li> <li>\ud83d\udca1 Erkl\u00e4rung</li> <li>\u25b6 Tief im Inneren sind wir alle gleich</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> </ul> </li> <li>Unterschied macht.<ul> <li>\u25b6 Unordnung in der Ordnung *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Versuche es weiter... *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Wof\u00fcr?</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Diskrepanz in der Auswertungszeit</li> <li>\ud83d\udca1 Erkl\u00e4rung</li> <li>\u25b6 <code>is not ...</code> ist nicht <code>is (not ...)</code></li> <li>\ud83d\udca1 Erkl\u00e4rung</li> <li>\u25b6 Ein tic-tac-toe wo X im ersten Versuch gewinnt!</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Schr\u00f6dingers Variable *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Das Henne-Ei-Problem *</li> <li>\ud83d\udca1 Erkl\u00e4rung</li> <li>\u25b6 Beziehungen in Unterklassen</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Methodengleichheit und -identit\u00e4t</li> <li>\ud83d\udca1 Erkl\u00e4rung</li> <li>\u25b6 All-true-ation *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Strings und die Backslashes</li> <li>\ud83d\udca1 Erkl\u00e4rung</li> <li>\u25b6 not knot!</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Halbe Zeichenketten in dreifachen Anf\u00fchrungszeichen</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Was ist falsch an booleans?</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Klassen- und Instanzattribute</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 yielding None</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Yielding from... return! *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Nan-Reflexivit\u00e4t *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Ver\u00e4ndern des Unver\u00e4nderlichen!</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Die verschwindende Variable aus dem \u00e4u\u00dferen G\u00fcltigkeitsbereich</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Die mysteri\u00f6se key type Umwandlung</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Lass uns sehen, ob du dies err\u00e4tst?</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 \u00dcberschreitet den Grenzwert f\u00fcr die Umwandlung von Integer-Strings</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> </ul> </li> <li>Kapitel: Slippery Slopes<ul> <li>\u25b6 Modifizieren eines Dictionarys w\u00e4hrend einer Iteration</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Hartn\u00e4ckige <code>del</code> Operation</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Die Variable aus dem \u00e4u\u00dferen Geltungsbereich</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 L\u00f6schen eines Listenelements w\u00e4hrend einer Iteration</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Lossy Zips von Iteratoren *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Schleifenvariablen, die auslaufen!</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Vorsicht vor standardm\u00e4\u00dfig ver\u00e4nderbaren Argumenten!</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Fangen der Exceptions</li> <li>\ud83d\udca1 Erkl\u00e4rung</li> <li>\u25b6 Gleiche Operanden, unterschiedliche Story!</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Namensaufl\u00f6sung ohne Ber\u00fccksichtigung des Geltungsbereichs der Klasse</li> <li>\ud83d\udca1 Erkl\u00e4rung</li> <li>\u25b6 Runden wie ein Bankier *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Nadeln im Heuhaufen *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Splitsies *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Wilde Imports *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6  Alles sortieren ? *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Mitternachtszeit gibt es nicht ?</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> </ul> </li> <li>Kapitel: Die verborgenen Sch\u00e4tze!<ul> <li>\u25b6 Okay Python, kannst du mich fliegen lassen?</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 <code>goto</code>, aber wieso?</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Halte dich fest!</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Let's meet Friendly Language Uncle For Life</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Selbst Python versteht, dass Liebe kompliziert ist</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Ja, es existiert!</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Ellipsen *</li> <li>\ud83d\udca1 Erkl\u00e4rung</li> <li>\u25b6 Einbindung</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Lass uns demolieren</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> </ul> </li> <li>Kapitel: Der Schein tr\u00fcgt!<ul> <li>\u25b6 Zeilen \u00fcberspringen?</li> <li>\ud83d\udca1 Erkl\u00e4rung</li> <li>\u25b6 Teleportation</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Da ist wohl irgendwas faul...</li> <li>\ud83d\udca1 Erkl\u00e4rung</li> </ul> </li> <li>Kapitel: Sonstiges<ul> <li>\u25b6 <code>+=</code> ist schneller</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Lass uns einen gigantischen String machen!</li> <li>\ud83d\udca1 Erkl\u00e4rung</li> <li>\u25b6 Verlangsamen von <code>dict</code> Lookups *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Bl\u00e4hende Instanz <code>dict</code>s *</li> <li>\ud83d\udca1 Erkl\u00e4rung:</li> <li>\u25b6 Kleinigkeiten *</li> </ul> </li> <li>Das Verhalten ist darauf zur\u00fcckzuf\u00fchren, dass leere Teilstrings (<code>''</code>) mit Slices der L\u00e4nge 0 in der urspr\u00fcnglichen Zeichenkette \u00fcbereinstimmen</li> <li>Contributing</li> <li>Anerkennung<ul> <li>Ein paar n\u00fctzliche Links!</li> </ul> </li> <li>\ud83c\udf93 License</li> <li>\u00dcberrasche auch deine Freunde!</li> <li>Brauchst du eine pdf version?</li> </ul>"},{"location":"GE/#sruktur-der-beispiele","title":"Sruktur der Beispiele","text":"<p>Alle Beispiele sind nach folgendem Muster aufgebaut:</p> <p>Note: Alle Beispiele sind mit Pythons 3.5.2 interaktiven Interpreter getestet, und sie sollten f\u00fcr alle Python Versionen funktionieren. Ausnahmen werden vor dem Ausgabe kenntlich gemacht.</p>"},{"location":"GE/#ein-schicker-titel","title":"\u25b6 Ein schicker Titel","text":"<pre><code># Vorbereitung des Codes.\n# Vorbereitung f\u00fcr etwas Magisches...\n</code></pre> <p>Ausgabe (Python version(en)):</p> <p><pre><code>&gt;&gt;&gt; triggering_statement\nIrgendeine unerwartete Ausgabe\n</code></pre> (Optional): Eine Zeile, die die unerwartete Ausgabe beschreibt.</p>"},{"location":"GE/#erklarung","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Kurze Erkl\u00e4rung was und warum es passiert. <pre><code># Aufsetzen des Codes\n# Mehr Beispiele f\u00fcr ein besseres Verst\u00e4ndnis (wenn erforderlich)\n</code></pre> Ausgabe (Python version(en)):</li> </ul> <pre><code>&gt;&gt;&gt; trigger # Ein Beispiel, das es einfach macht, die Magie zu verstehen\n# Eine begr\u00fcndete Ausgabe\n</code></pre>"},{"location":"GE/#benutzung","title":"Benutzung","text":"<p>Ein guter Weg, um die Beispiele bestm\u00f6glich zu nutzen, ist es, sie von anfang an durchzugehen und bei jedem Beispiel folgendes zu tun: - Lese vorsichtig den initialen Code des Beispiels. Wenn du ein erfahrener Python-Programmierer bist, wirst du wahrscheinlich wissen, was als n\u00e4chstes kommt. - Lies die Schnippsel durch und   + \u00dcberpr\u00fcfe, dass die Ausgabe die ist, die du erwartet hast   + Wei\u00dft du, warum sich die Ausgabe so gestaltet, wie sie es tut ?     - Wenn die Antwort Nein ist (was vollkommen in Ordnung ist), nimm einen tiefen Atemzug, und lies dir die Erkl\u00e4rung durch. Wenn du es dann immernoch nicht verstanden hast, frage nach Hilfe, indem du hier ein Issue erstellst.     - Wenn Ja, kannst du dir auf die Schulter klopfen und zum n\u00e4chsten Beispiel springen. </p> <p>PS: Du kannst dir auch WTFPython im Terminal ansehen, indem du das pypi package nutzt: <pre><code>$ pip install wtfpython -U\n$ wtfpython\n</code></pre></p>"},{"location":"GE/#beispiele","title":"\ud83d\udc40 Beispiele","text":""},{"location":"GE/#kapitel-fordere-dein-gehirn-heraus","title":"Kapitel: Fordere dein Gehirn heraus!","text":""},{"location":"GE/#das-wichtigste-zuerst","title":"\u25b6 Das Wichtigste zuerst! *","text":"<p>Aus irgendwelchen Gr\u00fcnden ist der \"Walrus\" Operator (<code>:=</code>) in Python 3.8 ziemlich beliebt. Lass uns starten,</p> <p>1.</p> <pre><code># Python version 3.8+\n\n&gt;&gt;&gt; a = \"wtf_walrus\"\n&gt;&gt;&gt; a\n'wtf_walrus'\n\n&gt;&gt;&gt; a := \"wtf_walrus\"\nFile \"&lt;stdin&gt;\", line 1\n    a := \"wtf_walrus\"\n      ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; (a := \"wtf_walrus\") # Das funktioniert merkw\u00fcrdigerweise\n'wtf_walrus'\n&gt;&gt;&gt; a\n'wtf_walrus'\n</code></pre> <p>2 .</p> <pre><code># Python version 3.8+\n\n&gt;&gt;&gt; a = 6, 9\n&gt;&gt;&gt; a\n(6, 9)\n\n&gt;&gt;&gt; (a := 6, 9)\n(6, 9)\n&gt;&gt;&gt; a\n6\n\n&gt;&gt;&gt; a, b = 6, 9 # Typisches Auspacken\n&gt;&gt;&gt; a, b\n(6, 9)\n&gt;&gt;&gt; (a, b = 16, 19) # Oops\n  File \"&lt;stdin&gt;\", line 1\n    (a, b = 16, 19)\n          ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; (a, b := 16, 19) # Dies gibt ein eigenartiges 3-Tupel aus\n(6, 16, 19)\n\n&gt;&gt;&gt; a # Ist a immernoch unver\u00e4ndert ?\n6\n\n&gt;&gt;&gt; b\n16\n</code></pre>"},{"location":"GE/#erklarung_1","title":"\ud83d\udca1 Erkl\u00e4rung","text":"<p>Schneller R\u00fcckblick zum Walrus Operator</p> <p>Der Walrus Operator (<code>:=</code>) wurde in Python 3.8 eingef\u00fchrt. Er kann in Situationen sinvoll sein, in  denen du ein Wert einer Variablen in einem Ausdruck zuweisen m\u00f6chtest.</p> <pre><code>def irgendeine_funktion():\n        # Irgendeine Berechnung, die teuer ist (=&gt; sehr viel Zeit und Ressourcen in Aspruch nimmt)\n        # time.sleep(1000)\n        return 5\n\n# Anstatt:\nif irgendeine_funktion():\n        print(irgendeine_funktion()) # Schlechter Stil, da die Funktion zweimal aufgerufen wird\n\n# Oder:\na = irgendeine_funktion()\nif a:\n    print(a)\n\n# Nun kannst du folgendes schreiben:\nif a := irgendeine_funktion():\n        print(a)\n</code></pre> <p>Ausgabe (&gt; 3.8):</p> <pre><code>5\n5\n5\n</code></pre> <p>Das hat uns eine Zeile Code erspart. Zudem spart es einen zus\u00e4tzlichen Aufruf der Funktion <code>irgendeine_funktion</code>.</p> <ul> <li> <p>Nichtgeklammerte \"Zuweisung Ausdruck\" (Verwendung des Walrus-Operator), ist auf der obersten Ebene beschr\u00e4nkt, daher der <code>Syntaxfehler</code> in der Anweisung <code>a := \"wtf_walrus\"</code> des erstes Schnipsels.  Einklammeren hat funktioniert und wies <code>a</code> zu.</p> </li> <li> <p>Wie immer, Einklammerung eines Ausdrucks, welcher <code>=</code>- Operator enth\u00e4lt, ist nicht erlaubt. Daher der Syntaxfehler in <code>(a, b = 6, 9)</code>.</p> </li> <li> <p>Die Syntax des Walrus Operators lautet wie folgt: <code>NAME:= ausdruck</code>, wobei <code>NAME</code> ist ein g\u00fcltiger Identifier, und <code>ausdruck</code> ist ein g\u00fcltiger Ausdruck. Zudem werden iterierbares Verpacken und Entpacken nicht unterst\u00fctzt, d.h.: </p> </li> <li> <p><code>(a := 6, 9)</code> ist \u00e4quivalent zu <code>((a := 6), 9)</code> und zu <code>(a, 9)</code> (where <code>a</code>'s value is 6')</p> <pre><code>&gt;&gt;&gt; (a := 6, 9) == ((a := 6), 9)\nTrue\n&gt;&gt;&gt; x = (a := 696, 9)\n&gt;&gt;&gt; x\n(696, 9)\n&gt;&gt;&gt; x[0] is a # Both reference same memory location\nTrue\n</code></pre> </li> <li> <p>\u00c4hnlich: <code>(a, b := 16, 19)</code> ist \u00e4quivalent zu <code>(a, (b := 16), 19)</code>, was einfach ein 3-Tupel ist. </p> </li> </ul>"},{"location":"GE/#strings-konnen-manchmal-schwierig-sein","title":"\u25b6 Strings k\u00f6nnen manchmal schwierig sein","text":"<p>1.</p> <pre><code>&gt;&gt;&gt; a = \"irgendein_string\"\n&gt;&gt;&gt; id(a)\n140420665652016\n&gt;&gt;&gt; id(\"irgendein\" + \"_\" + \"string\") # Beachte, dass beide ids dieselben sind.\n140420665652016\n</code></pre> <p>2. <pre><code>&gt;&gt;&gt; a = \"wtf\"\n&gt;&gt;&gt; b = \"wtf\"\n&gt;&gt;&gt; a is b\nTrue\n\n&gt;&gt;&gt; a = \"wtf!\"\n&gt;&gt;&gt; b = \"wtf!\"\n&gt;&gt;&gt; a is b\nFalse\n</code></pre></p> <p>3.</p> <pre><code>&gt;&gt;&gt; a, b = \"wtf!\", \"wtf!\"\n&gt;&gt;&gt; a is b # Alle Versionen au\u00dfer 3.7.x\nTrue\n\n&gt;&gt;&gt; a = \"wtf!\"; b = \"wtf!\"\n&gt;&gt;&gt; a is b # Das wird True oder False ausgeben, je nach dem wo du es aufrufst (Python Shell / iPython / in einem Skript)\nFalse\n</code></pre> <pre><code># Dieses mal in einer Datei: some_file.py\na = \"wtf!\"\nb = \"wtf!\"\nprint(a is b)\n\n# Gibt True aus, wenn das Modul aufgerufen wird!\n</code></pre> <p>4.</p> <p>Ausgabe (&lt; Python3.7 )</p> <pre><code>&gt;&gt;&gt; 'a' * 20 is 'aaaaaaaaaaaaaaaaaaaa'\nTrue\n&gt;&gt;&gt; 'a' * 21 is 'aaaaaaaaaaaaaaaaaaaaa'\nFalse\n</code></pre> <p>Ergibt Sinn, Oder?</p>"},{"location":"GE/#erklarung_2","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Das Verhalten im ersten und zweiten Schnipsel erkl\u00e4rt sich durch eine CPython Optimierung (auch string interning genannt), die versucht, existierende immutable Objekte zu nutzen anstatt jedes mal ein neues Objekt zu erstellen.</li> <li> <p>Nachdem \"interned\" (festgehalten) wurde, kann es sein, dass viele Variablen dasselbe String-Objekt im Speicher referenzieren (man spart also Speicher). </p> </li> <li> <p>In den Schnipseln oben werden Strings implizit festgehalten. Die Entscheidung, wann ein String implizit festgehalten wird, ist von der Implementierung abh\u00e4ngig. Es gibt einige Regeln, die benutzt werden k\u00f6nnen, um zu erahnen, ob ein String festgehalten wird oder nicht:</p> </li> <li>Alle String der L\u00e4nge 0 und 1 werden festgehalten.</li> <li>Strings werden w\u00e4hrend der Compilezeit festgehalten (<code>'wtf'</code> wird festgehalten, aber <code>''.join(['w', 't', 'f'])</code> nicht)</li> <li>Strings, die nicht aus ASCII-Buchstaben, Ziffern oder Unterstrichen zusammengesetzt sind, werden nicht festgehalten. Das erkl\u00e4rt warum <code>'wtf!'</code> nicht festgehalten wurde (wegen <code>!</code>).    Die CPython-Implementierung dieser Regel kann hier gefunden werden   </li> <li>Wenn <code>a</code> und <code>b</code> in derselben Zeile auf <code>\"wtf!\"</code> gesetzt werden, erzeugt der Python Interpreter ein neues Objekt, welches von der zweiten Variable zur selben Zeit referenziert wird. Wenn du es in zwei verschiedenen Zeilen deklarierst, dann \"wei\u00df\" der Interpreter nicht, dass <code>\"wtf!\"</code> als Objekt schon existiert (weil <code>\"wtf!\"</code> nicht implizit festgehalten wird, siehe obige Auflistung). Es ist eine Compilezeit-Optimierung. Diese Optimierung gilt nicht f\u00fcr 3.7.x Versionen von CPython (siehe dieses Issue).</li> <li>Eine Compile-Unit ist eine interaktive Umgebung, wie z.B. IPython besteht aus einen einzigen Statement, w\u00e4hrend es aus einem ganzen Modul im Falle von Modulen besteht. <code>a, b = \"wtf!\", \"wtf!\"</code> ist ein einziges Statement, w\u00e4hrend <code>a = \"wtf!\"; b = \"wtf!\"</code> zwei Statements in einer Zeile sind. Das erkl\u00e4rt, warum die Identit\u00e4ten <code>a = \"wtf!\"; b = \"wtf!\"</code> verschieden sind. Es erkl\u00e4rt auch, warum sie dieselben sind, wenn sie in <code>some_file.py</code> aufgerufen werden.</li> <li>Die abrupte Ver\u00e4nderung in der Ausgabe des 4.Schnipsel ist der peephole Optimierung Technik geschuldet, auch als Constant Folding bekannt. Das bedeutet, der Ausdruck <code>'a'*20</code> wird durch <code>'aaaaaaaaaaaaaaaaaaaa'</code> w\u00e4hrend der Kompilierung ersetzt, um ein paar Taktzyklen w\u00e4hrend der Laufzeit zu sparen. Constant Folding wird nur f\u00fcr String mit einer kleineren L\u00e4nge als 21 angewendet. (Wieso ? Stelle dir die Gr\u00f6\u00dfe einer <code>.pyc</code> Datei vor, die durch den Ausdruck <code>'a'*10**10</code> generiert wurde). Hier ist die Quelle der Implementierung daf\u00fcr.</li> <li>Notiz: In Python 3.7, konstantes Folding wurde vom peephole-Optimierer zum neuen AST-Optimierer verschoben (mit ein paar Ver\u00e4nderungen in der Logik), d.h. das 4.Schnipsel funktioniert in Python 3.7 nicht. Du kannst hier mehr dar\u00fcber erfahren.</li> </ul>"},{"location":"GE/#vorsicht-bei-verketteten-operationen","title":"\u25b6 Vorsicht bei verketteten Operationen","text":"<pre><code>&gt;&gt;&gt; (False == False) in [False] # ergibt Sinn\nFalse\n&gt;&gt;&gt; False == (False in [False]) # ergibt Sinn\nFalse\n&gt;&gt;&gt; False == False in [False] # Was nun?\nTrue\n\n&gt;&gt;&gt; True is False == False\nFalse\n&gt;&gt;&gt; False is False is False\nTrue\n\n&gt;&gt;&gt; 1 &gt; 0 &lt; 1\nTrue\n&gt;&gt;&gt; (1 &gt; 0) &lt; 1\nFalse\n&gt;&gt;&gt; 1 &gt; (0 &lt; 1)\nFalse\n</code></pre>"},{"location":"GE/#erklarung_3","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<p>Zitat von https://docs.python.org/3/reference/expressions.html#comparisons</p> <p>Formally, if a, b, c, ..., y, z are expressions and op1, op2, ..., opN are comparison operators, then a op1 b op2 c ... y opN z is equivalent to a op1 b and b op2 c and ... y opN z, except that each expression is evaluated at most once.</p> <p>\u00dcbersetzt:</p> <p>Formal ausgedr\u00fcckt: wenn a, b, c, ..., y, z Ausdr\u00fccke und op1, op2, ..., opN Vergleichsoperatoren sind, dann sind a op1 b op2 c ... y opN z \u00e4quivalent zu a op1 b and b op2 c and ... y opN z, mit der Ausnahme, dass jeder Ausdruck h\u00f6chstens einmal ausgewertet wird.</p> <p>W\u00e4hrend dieses Verhalten in den Beispielen vielleicht unsinnig erscheint, kann es super verwendet werden, z.B. <code>a == b == c</code> und <code>0 &lt;= x &lt;= 100</code>.</p> <ul> <li><code>False is False is False</code> ist \u00e4quivalent zu <code>(False is False) and (False is False)</code></li> <li><code>True is False == False</code> ist \u00e4quivalent zu <code>(True is False) and (False == False)</code> und w\u00e4hrend der erste Teil des Statements (<code>True is False</code>) zu <code>False</code> ausgewertet wird, wird der gesamt Ausdruck zu <code>False</code> ausgewertet.</li> <li><code>1 &gt; 0 &lt; 1</code> ist \u00e4quivalent zu <code>(1 &gt; 0) and (0 &lt; 1)</code> which evaluates to <code>True</code>.</li> <li>Der Ausdruck <code>(1 &gt; 0) &lt; 1</code> ist \u00e4quivalent zu <code>True &lt; 1</code> und   <pre><code>&gt;&gt;&gt; int(True)\n1\n&gt;&gt;&gt; True + 1 # Nicht relevant f\u00fcr dieses Beispiel, aber trotzdem nur zum Spa\u00df\n2\n</code></pre>   So wird <code>1 &lt; 1</code> zu <code>False</code> ausgewertet</li> </ul>"},{"location":"GE/#wie-man-den-is-operator-nicht-nutzt","title":"\u25b6 Wie man den <code>is</code> Operator nicht nutzt","text":"<p>Das folgende Beispiel ist im Internet \u00fcberall bekannt.</p> <p>1.</p> <pre><code>&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; a is b\nTrue\n\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; a is b\nFalse\n</code></pre> <p>2.</p> <pre><code>&gt;&gt;&gt; a = []\n&gt;&gt;&gt; b = []\n&gt;&gt;&gt; a is b\nFalse\n\n&gt;&gt;&gt; a = tuple()\n&gt;&gt;&gt; b = tuple()\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <p>3. Ausgabe</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <p>Ausgabe (Python 3.7.x spezifisch)</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; a is b\nFalse\n</code></pre>"},{"location":"GE/#erklarung_4","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<p>Der Unterschied zwischen <code>is</code> und <code>==</code></p> <ul> <li><code>is</code> Operator checkt, ob sich beide Operanden auf dasselbe Objekt beziehen (i.e., it checks if the identity of the operands matches or not).</li> <li><code>==</code> Operator vergleicht die Werte der beiden Operanden und \u00fcberpr\u00fcft, ob diese gleich sind.</li> <li>Also <code>is</code> wird f\u00fcr Beziehungsgleichheit und <code>==</code> f\u00fcr Wertgleichheit benutzt. Ein Beispiel, um das Gesagte zu vertiefen:   <pre><code>&gt;&gt;&gt; class A: pass\n&gt;&gt;&gt; A() is A() # Das sind zwei leere Objekte an zwei verschiedenen Orten im Speicher.\nFalse\n</code></pre></li> </ul> <p><code>256</code> ist ein existierendes Objekt, aber <code>257</code> nicht</p> <p>Wenn du Python startest, werden die Nummern von <code>-5</code> bis <code>256</code> bereitgestellt. Diese Nummern werden sehr oft benutzt, also ergibt es Sinn, sie schnell bereit zu haben.</p> <p>Zitat von https://docs.python.org/3/c-api/long.html</p> <p>The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you just get back a reference to the existing object. So it should be possible to change the value of 1. I suspect the behavior of Python, in this case, is undefined. :-)</p> <p>\u00dcbersetzung:</p> <p>Die momentane Implementation stellt ein Array aus Integer-Objekten f\u00fcr alle Integer zwischen -5 und 256 bereit. Wenn du einen int in diesem Bereich erstellst, bekommst du nur eine Referenz auf das existierende Objekt zur\u00fcck. Also sollte es m\u00f6glich sein, den Wert von 1 zu \u00e4ndern. Ich vermute das Verhalten von Python ist in diesem Fall undefiniert. :-)</p> <pre><code>&gt;&gt;&gt; id(256)\n10922528\n&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; id(a)\n10922528\n&gt;&gt;&gt; id(b)\n10922528\n&gt;&gt;&gt; id(257)\n140084850247312\n&gt;&gt;&gt; x = 257\n&gt;&gt;&gt; y = 257\n&gt;&gt;&gt; id(x)\n140084850247440\n&gt;&gt;&gt; id(y)\n140084850247344\n</code></pre> <p>Hier ist der Interpreter nicht schlau genug w\u00e4hrend des Ausf\u00fchrens von <code>y = 257</code> zu erkennen, dass wir bereits ein Integer mit dem Wert <code>257</code> erstellt haben und daher wird ein neues Objekt im Speicher angelegt.</p> <p>\u00c4hnliche Optimierungen treffen auf andere immutable Objekte zu, z.B. leere Tuples. Da Listen mutable sind, wird <code>[] is []</code> zu <code>False</code> ausgewertet und <code>() is ()</code> wird zu <code>True</code> ausgewertet. Das erkl\u00e4rt unser zweiter Schnipsel. Lass uns mit dem dritten Beispiell weiter machen: </p> <p>Sowohl <code>a</code> und <code>b</code> beziehen sich auf dasselbe Objekt wenn sie in derselben Zeile mit demselben Wert initialisiert werden.</p> <p>Ausgabe</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; id(a)\n140640774013296\n&gt;&gt;&gt; id(b)\n140640774013296\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; id(a)\n140640774013392\n&gt;&gt;&gt; id(b)\n140640774013488\n</code></pre> <ul> <li> <p>Wenn a und b in derselben Zeile auf <code>257</code> gesetzt werden, erstellt der Python Interpreter ein neues Objekt, und referenziert die zweite Variable zur selben Zeit. Wenn man es in verschiedenen Zeilen macht, dann wei\u00df Python nicht, dass eine <code>257</code> als Objekt schon existiert.</p> </li> <li> <p>Es ist eine Compiler Optimierung, die speziell f\u00fcr die interaktive Umgebung gilt. Wenn man zwei Zeilen in einem Live Interpreter eingibt, dann werden sie getrennt kompiliert und auch getrennt optimiert. Wenn du dieses Beispiel in einer <code>.py</code> Datei ausprobierst, w\u00fcrdest du nicht dasselbe Verhalten beobachten, denn die Datei wird auf einmal kompiliert. Diese Optimierung ist nicht auf Integer beschr\u00e4nkt, sie funktioniert auch f\u00fcr andere immutable Datentypen, wie z.B. Strings (siehe auch das Beispiel \"Strings k\u00f6nnen manchmal schwierig sein\") oder floats:</p> </li> </ul> <pre><code>&gt;&gt;&gt; a, b = 257.0, 257.0\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <ul> <li>Warum funktioniert das nicht in Python 3.7 ? Die abstrakte Antwort ist: Die Compiler Optimierungen sind von der Implementierung abh\u00e4ngig (es ver\u00e4ndert sich mit der Version, dem Betriebssystem, etc.). Ich versuche noch herauszufinden, welche Implementierungs\u00e4nderung dieses Problem verursacht. F\u00fcr Updates, schaue dieses Issue an.</li> </ul>"},{"location":"GE/#hash-brownies","title":"\u25b6 Hash brownies","text":"<p>1. <pre><code>some_dict = {}\nsome_dict[5.5] = \"JavaScript\"\nsome_dict[5.0] = \"Ruby\"\nsome_dict[5] = \"Python\"\n</code></pre></p> <p>Ausgabe:</p> <pre><code>&gt;&gt;&gt; some_dict[5.5]\n\"JavaScript\"\n&gt;&gt;&gt; some_dict[5.0] # \"Python\" hat die Existenz von \"Ruby\" ausgel\u00f6scht ?\n\"Python\"\n&gt;&gt;&gt; some_dict[5] \n\"Python\"\n\n&gt;&gt;&gt; complex_five = 5 + 0j\n&gt;&gt;&gt; type(complex_five)\ncomplex\n&gt;&gt;&gt; some_dict[complex_five]\n\"Python\"\n</code></pre> <p>Warum also ist Python \u00fcberall zu finden ?</p>"},{"location":"GE/#erklarung_5","title":"\ud83d\udca1 Erkl\u00e4rung","text":"<ul> <li>Einzigartigkeit der Schl\u00fcssel in einem Python Dictionary wird durch \u00c4quivalenz, nicht durch Identit\u00e4t festgestellt. Obwohl also <code>5</code>, <code>5.0</code>, und <code>5 + 0j</code> verschiedene Objekte unterschiedlichen Typs sind, k\u00f6nnen sie, da sie gleichwertig sind, nicht im gleichen <code>dict</code> (oder <code>set</code>) sein. Sobald du einen von ihnen einf\u00fcgst, wird der Versuch, nach einem anderen, aber gleichwertigen Schl\u00fcssel zu suchen, mit dem urspr\u00fcnglichen zugeordneten Wert erfolgreich sein (und nicht mit einem <code>KeyError</code> fehlschlagen):   <pre><code>&gt;&gt;&gt; 5 == 5.0 == 5 + 0j\nTrue\n&gt;&gt;&gt; 5 is not 5.0 is not 5 + 0j\nTrue\n&gt;&gt;&gt; some_dict = {}\n&gt;&gt;&gt; some_dict[5.0] = \"Ruby\"\n&gt;&gt;&gt; 5.0 in some_dict\nTrue\n&gt;&gt;&gt; (5 in some_dict) and (5 + 0j in some_dict)\nTrue\n</code></pre></li> <li>Das gilt auch, wenn ein Item festgelegt wird. Wenn du also <code>some_dict[5] = \"Python\"</code> ausf\u00fchrst, findet Python das existierende Item mit demselben Key <code>5.0 -&gt; \"Ruby\"</code>, \u00fcberschreibt den Wert an dieser Stelle, und l\u00e4sst den  originalen Wert unangetastet.   <pre><code>&gt;&gt;&gt; some_dict\n{5.0: 'Ruby'}\n&gt;&gt;&gt; some_dict[5] = \"Python\"\n&gt;&gt;&gt; some_dict\n{5.0: 'Python'}\n</code></pre></li> <li> <p>Wie k\u00f6nnen wir also den Key zu <code>5</code> anstelle von <code>5.0</code> updaten? Wir k\u00f6nnen das tats\u00e4chlich nicht an dieser Stelle tun, aber wir k\u00f6nnen den Schl\u00fcssel zuerst l\u00f6schen (<code>del some_dict[5.0]</code>), und ihn danach neu festzulegen (<code>some_dict[5]</code>), um den Schl\u00fcssel <code>5</code> zu bekommen, anstelle des floats <code>5.0</code>. Das wird jedoch nur in seltenen F\u00e4llen ben\u00f6tigt.</p> </li> <li> <p>Wie hat Python <code>5</code> in einem Dictionary gefunden, welches <code>5.0</code> enth\u00e4lt? Python tut dies in konstanter Zeit, ohne jedes Item zu scannen, indem es Hash-Funktionen benutzt. Wenn Python den Key <code>foo</code> in einem Dictionary nachschl\u00e4gt, dann verarbeitet es zuerst <code>hash(foo)</code> (was in konstanter Zeit l\u00e4uft). Da es in Python notwendig ist, dass Objekte, die als gleich gelten auch den gleichen Hash-Wert haben ( siehe hier docs), haben <code>5</code>, <code>5.0</code>, und <code>5 + 0j</code> denselben Hash-Wert.   <pre><code>&gt;&gt;&gt; 5 == 5.0 == 5 + 0j\nTrue\n&gt;&gt;&gt; hash(5) == hash(5.0) == hash(5 + 0j)\nTrue\n</code></pre> Note: Das Inverse ist nicht unbedingt wahr: Objekte mit gleichem Hashwert k\u00f6nnen evtl. ungleich sein. (Das versursacht was auch als hash collision bekannt ist), und und verschlechtert die zeitlich konstante Leistung, die Hashing normalerweise bietet.</p> </li> </ul>"},{"location":"GE/#tief-im-inneren-sind-wir-alle-gleich","title":"\u25b6 Tief im Inneren sind wir alle gleich","text":"<pre><code>class WTF:\n  pass\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; WTF() == WTF() # zwei verschiedene Instanzen k\u00f6nnen nicht gleich sein\nFalse\n&gt;&gt;&gt; WTF() is WTF() # Idetit\u00e4ten sind ebenfalls unterschiedlich\nFalse\n&gt;&gt;&gt; hash(WTF()) == hash(WTF()) # Hash-Werte _sollten_ ebenfalls verschieden sein\nTrue\n&gt;&gt;&gt; id(WTF()) == id(WTF())\nTrue\n</code></pre></p>"},{"location":"GE/#erklarung_6","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Wenn <code>id</code> genannt wurde, hat Python hat ein <code>WTF</code> class-Objekt gebaut und es der <code>id</code>-Funktion \u00fcbergeben. Die <code>id</code>-Funktion nimmt die <code>id</code> (den Speicherort), und wirft das Objekt weg. Das Objekt ist zerst\u00f6rt.</li> <li>When we do this twice in succession, Python allocates the same memory location to this second object as well. Da (in CPython) <code>id</code> denselben Speicherort wie die Objekt-Id benutzt, ist die id der beiden Objekte dieselbe.</li> <li>Also ist die Id des Objektes nur f\u00fcr die Lebensdauer des Objektes einzigartig. Nachdem das Objekt zerst\u00f6rt wurde, oder bevor es gebaut wird, kann etwas anderes diese Id haben.</li> <li>Abe warum wurde der <code>is</code> zu <code>False</code> ausgewertet? Lass uns das anhand dieses Schnipsels betrachten.   <pre><code>class WTF(object):\n  def __init__(self): print(\"I\")\n  def __del__(self): print(\"D\")\n</code></pre></li> </ul> <p>Ausgabe: <pre><code>&gt;&gt;&gt; WTF() is WTF()\nI\nI\nD\nD\nFalse\n&gt;&gt;&gt; id(WTF()) == id(WTF())\nI\nD\nI\nD\nTrue\n</code></pre>   Wie du villeicht beobachtest hast, ist die Reihenfolge, in der die Objekte zerst\u00f6rt werden, das, was hier den   Unterschied macht.</p>"},{"location":"GE/#unordnung-in-der-ordnung","title":"\u25b6 Unordnung in der Ordnung *","text":"<pre><code>from collections import OrderedDict\n\ndictionary = dict()\ndictionary[1] = 'a'; dictionary[2] = 'b';\n\nordered_dict = OrderedDict()\nordered_dict[1] = 'a'; ordered_dict[2] = 'b';\n\nanother_ordered_dict = OrderedDict()\nanother_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';\n\nclass DictWithHash(dict):\n    \"\"\"\n    Ein Dictionary auch __hash__ magic implementiert.\n    \"\"\"\n    __hash__ = lambda self: 0\n\nclass OrderedDictWithHash(OrderedDict):\n    \"\"\"\n    Ein OrderedDict was auch __hash__ magic implementiert.\n    \"\"\"\n    __hash__ = lambda self: 0\n</code></pre> <p>Ausgabe <pre><code>&gt;&gt;&gt; dictionary == ordered_dict # Wenn a == b\nTrue\n&gt;&gt;&gt; dictionary == another_ordered_dict # und b == c\nTrue\n&gt;&gt;&gt; ordered_dict == another_ordered_dict # warum ist dann c != a ??\nFalse\n\n# Wir wissen alle, dass ein Set nur aus einzigartigen Elementen besteht,\n# Lass uns ein Set aus Dictionaries bauen und sehen, was passiert...\n\n&gt;&gt;&gt; len({dictionary, ordered_dict, another_ordered_dict})\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'dict'\n\n# Ergibt Sinn, denn ein Dictionary implementiert nicht __hash__, lass uns unsere\n# Wrapper-Klasse benutzen.\n&gt;&gt;&gt; dictionary = DictWithHash()\n&gt;&gt;&gt; dictionary[1] = 'a'; dictionary[2] = 'b';\n&gt;&gt;&gt; ordered_dict = OrderedDictWithHash()\n&gt;&gt;&gt; ordered_dict[1] = 'a'; ordered_dict[2] = 'b';\n&gt;&gt;&gt; another_ordered_dict = OrderedDictWithHash()\n&gt;&gt;&gt; another_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';\n&gt;&gt;&gt; len({dictionary, ordered_dict, another_ordered_dict})\n1\n&gt;&gt;&gt; len({ordered_dict, another_ordered_dict, dictionary}) # ver\u00e4ndere die Reihenfolge\n2\n</code></pre></p> <p>Was geht hier vor ?</p>"},{"location":"GE/#erklarung_7","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li> <p>Der Grund, warum die intransitive Gleichheit zwischen <code>dictionary</code>, <code>ordered_dict</code> und <code>another_ordered_dict</code> nicht gilt, liegt in der <code>__eq__</code> Methode und wie diese in der <code>OrderedDict</code>-Klasse implementiert ist. Aus der Dokumentation</p> <p>Gleichheitstests zwischen OrderedDict-Objekten sind ordnungsabh\u00e4ngig und werden als <code>list(od1.items())==list(od2.items())</code> implementiert. Gleichheitstests zwischen <code>OrderedDict</code>-Objekten und anderen Mapping-Objekten sind nicht ordnungsabh\u00e4ngig wie bei regul\u00e4ren Dictionaries.</p> </li> <li> <p>Der Grund f\u00fcr diese Gleichheit im Verhalten ist, dass sie es erm\u00f6glicht, <code>OrderedDict</code>-Objekte direkt \u00fcberall dort zu ersetzen, wo ein regul\u00e4res W\u00f6rterbuch verwendet wird.</p> </li> <li>Okay, warum also hat die \u00c4nderung der Reihenfolge Auswirkungen auf die L\u00e4nge des erzeugten <code>set</code>-Objekts? Die Antwort ist das Fehlen der intransitiven Gleichheit. Da Mengen \"ungeordnete\" Sammlungen von eindeutigen Elementen sind, sollte die Reihenfolge, in der die Elemente eingef\u00fcgt werden, keine Rolle spielen. Aber in diesem Fall spielt sie doch eine Rolle. Lass uns das ein wenig aufschl\u00fcsseln     <pre><code>&gt;&gt;&gt; some_set = set()\n&gt;&gt;&gt; some_set.add(dictionary) # das sind die Mapping-Objekte von unseren Schnipseln oben\n&gt;&gt;&gt; ordered_dict in some_set\nTrue\n&gt;&gt;&gt; some_set.add(ordered_dict)\n&gt;&gt;&gt; len(some_set)\n1\n&gt;&gt;&gt; another_ordered_dict in some_set\nTrue\n&gt;&gt;&gt; some_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(some_set)\n1\n\n&gt;&gt;&gt; another_set = set()\n&gt;&gt;&gt; another_set.add(ordered_dict)\n&gt;&gt;&gt; another_ordered_dict in another_set\nFalse\n&gt;&gt;&gt; another_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(another_set)\n2\n&gt;&gt;&gt; dictionary in another_set\nTrue\n&gt;&gt;&gt; another_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(another_set)\n2\n</code></pre>     Die Inkonsistenz liegt bei <code>another_ordered_dict in another_set</code>, was <code>False</code> ist, weil <code>ordered_dict</code> bereits in <code>another_set</code> enthalten ist und wie schon vorher beobachtet, <code>ordered_dict == another_ordered_dict</code> ist <code>False</code>.</li> </ul>"},{"location":"GE/#versuche-es-weiter","title":"\u25b6 Versuche es weiter... *","text":"<pre><code>def some_func():\n    try:\n        return 'from_try'\n    finally:\n        return 'from_finally'\n\ndef another_func(): \n    for _ in range(3):\n        try:\n            continue\n        finally:\n            print(\"Finally!\")\n\ndef one_more_func(): # Ein gotcha!\n    try:\n        for i in range(3):\n            try:\n                1 / i\n            except ZeroDivisionError:\n                # Lass es uns hier hin packen und es au\u00dferhalb des Loops behandeln\n                raise ZeroDivisionError(\"A trivial divide by zero error\")\n            finally:\n                print(\"Iteration\", i)\n                break\n    except ZeroDivisionError as e:\n        print(\"Zero division error occurred\", e)\n</code></pre> <p>Ausgabe:</p> <pre><code>&gt;&gt;&gt; some_func()\n'from_finally'\n\n&gt;&gt;&gt; another_func()\nFinally!\nFinally!\nFinally!\n\n&gt;&gt;&gt; 1 / 0\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero\n\n&gt;&gt;&gt; one_more_func()\nIteration 0\n</code></pre>"},{"location":"GE/#erklarung_8","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Wenn ein <code>return</code>-, <code>break</code>- oder <code>continue</code>-Anweisung in einem <code>try</code> (\"try\u2026finally\") Anweisung ausgef\u00fchrt wird, dann wird der <code>finally</code>-Abschnitt am Ende ebenfalls ausgef\u00fchrt.</li> <li>Der R\u00fcckgabewert einer Funktion wird durch die letzte <code>return</code>-Anweisung bestimmt. Da der <code>finally</code>-Abschnitt immer ausgef\u00fchrt wird, wird eine <code>return</code>-Anweisung im <code>finally</code>-Abschnitt immer die letzte sein, die ausgef\u00fchrt wird.</li> <li>Wenn also der <code>finally</code>-Abschnitt eine <code>return</code>- oder <code>break</code>-Anweisung ausf\u00fchrt, dann wird die kurzzeitige Exception verworfen.</li> </ul>"},{"location":"GE/#wofur","title":"\u25b6 Wof\u00fcr?","text":"<pre><code>some_string = \"wtf\"\nsome_dict = {}\nfor i, some_dict[i] in enumerate(some_string):\n    i = 10\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; some_dict # Ein indiziertes dictionary erscheint.\n{0: 'w', 1: 't', 2: 'f'}\n</code></pre></p>"},{"location":"GE/#erklarung_9","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Eine <code>for</code> Anweisung ist in Python Syntax wie folgt definiert:   <pre><code>for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]\n</code></pre> <code>exprlist</code> ist dabei das Zuweisungsziel. Das hei\u00dft, dass das \u00c4quivalente von <code>{exprlist} = {next_value}</code> im Iterable executed for each item ist.   Ein interessantes Beispiel, was dies verdeutlicht:   <pre><code>for i in range(4):\n    print(i)\n    i = 10\n</code></pre></li> </ul> <p>Ausgabe: <pre><code>0\n1\n2\n3\n</code></pre></p> <p>Hast du erwartet, dass die Schleife nur einmal l\u00e4uft ?</p> <p>\ud83d\udca1 Erkl\u00e4rung:</p> <ul> <li> <p>Das Zuweisungs-Statement <code>i = 10</code> hat niemals einen Effekt auf die Schleife, aufgrund der Funktionsweise von    for-Schleifen in Python. Vor dem Beginn jeder Iteration, wird das n\u00e4chste Objekt, was vom Iterator (in diesem   Fall <code>range(4)</code>) bereitgestellt wird, wird ausgepackt und der Zielliste zugewiesen (in diesem Fall <code>i</code>).</p> </li> <li> <p>Die <code>enumerate(some_string)</code> Funktion liefert ein neuen Wert <code>i</code> (ein Z\u00e4hler, der aufw\u00e4rts l\u00e4uft) und ein Character vom String <code>some_string</code> in jeder Iteration. Dann wird der gerade erzeugte Wert <code>i</code> des Dictionaries <code>some_dict</code> als Key zu diesem Character gesetzt. Das Verhalten der Schleife kann wie folgt vereinfacht werden:</p> </li> </ul> <pre><code>&gt;&gt;&gt; i, some_dict[i] = (0, 'w')\n&gt;&gt;&gt; i, some_dict[i] = (1, 't')\n&gt;&gt;&gt; i, some_dict[i] = (2, 'f')\n&gt;&gt;&gt; some_dict\n</code></pre>"},{"location":"GE/#diskrepanz-in-der-auswertungszeit","title":"\u25b6 Diskrepanz in der Auswertungszeit","text":"<p>1. <pre><code>array = [1, 8, 15]\n# Ein typischer Generator-Ausdruck\ngen = (x for x in array if array.count(x) &gt; 0)\narray = [2, 8, 22]\n</code></pre></p> <p>Ausgabe:</p> <pre><code>&gt;&gt;&gt; print(list(gen)) # Wo sind die anderen Variablen hin?\n[8]\n</code></pre> <p>2.</p> <pre><code>array_1 = [1,2,3,4]\ngen_1 = (x for x in array_1)\narray_1 = [1,2,3,4,5]\n\narray_2 = [1,2,3,4]\ngen_2 = (x for x in array_2)\narray_2[:] = [1,2,3,4,5]\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; print(list(gen_1))\n[1, 2, 3, 4]\n\n&gt;&gt;&gt; print(list(gen_2))\n[1, 2, 3, 4, 5]\n</code></pre></p> <p>3.</p> <pre><code>array_3 = [1, 2, 3]\narray_4 = [10, 20, 30]\ngen = (i + j for i in array_3 for j in array_4)\n\narray_3 = [4, 5, 6]\narray_4 = [400, 500, 600]\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; print(list(gen))\n[401, 501, 601, 402, 502, 602, 403, 503, 603]\n</code></pre></p>"},{"location":"GE/#erklarung_10","title":"\ud83d\udca1 Erkl\u00e4rung","text":"<ul> <li>In einem Generator-Ausdruck wird die <code>in</code>-Klausel zur Deklarationszeit ausgewertet, w\u00e4hrend die Bedingungsklausel zur Laufzeit ausgewertet wird.</li> <li>Vor der Laufzeit wird <code>array</code> wieder der Liste <code>[2, 8, 22]</code> zugewiesen, und da von  <code>1</code>, <code>8</code> und <code>15</code>, nur die Anzahl von <code>8</code> gr\u00f6\u00dfer als <code>0</code> ist, liefert der Generator nur <code>8</code>.</li> <li>Die Unterschiede in der Ausgabe von <code>g1</code> und <code>g2</code> im zweiten Teil sind auf die Art und Weise zur\u00fcckzuf\u00fchren, wie den Variablen <code>array_1</code> und <code>array_2</code> neue Werte zugewiesen werden.</li> <li>Im ersten Fall wird <code>array_1</code> zum neuen Objekt <code>[1,2,3,4,5]</code> gebunden und da die <code>in</code>-Klausel zur Deklarationszeit ausgewertet wird, bezieht es sich immer noch auf das alte Objekt <code>[1,2,3,4]</code> (was nicht zerst\u00f6rt wird).</li> <li>Im zweiten Fall updated die Slice-Anweisung an <code>array_2</code> das gleiche alte Objekt <code>[1,2,3,4]</code> zu <code>[1,2,3,4,5]</code>. Daher verweisen sowohl <code>g2</code> als auch <code>array_2</code> immer noch auf dasselbe Objekt  (welches nun zu <code>[1,2,3,4,5]</code> geupdated wird).</li> <li> <p>Okay, wenn wir die Logik anwenden, die wir bis jetzt kennengelernt haben, sollte dann der Wert von <code>list(gen)</code> im dritten Schnipsel nicht <code>[11, 21, 31, 12, 22, 32, 13, 23, 33]</code> sein? (weil <code>array_3</code> und <code>array_4</code> sich genauso wie <code>array_1</code> verhalten werden). Die Grund, warum (nur) die Werte von <code>array_4</code> ge\u00e4ndert werden, wird im PEP-289 erkl\u00e4rt.</p> </li> </ul>"},{"location":"GE/#nur-der-auerste-for-ausdruck-wird-direkt-ausgewertet-die-anderen-ausdrucke-werden-zuruckgestellt-bis-der-generator-ausgefuhrt-wird","title":"&gt; Nur der \u00e4u\u00dferste for-Ausdruck wird direkt ausgewertet, die anderen Ausdr\u00fccke werden zur\u00fcckgestellt, bis der Generator ausgef\u00fchrt wird.","text":""},{"location":"GE/#is-not-ist-nicht-is-not","title":"\u25b6 <code>is not ...</code> ist nicht <code>is (not ...)</code>","text":"<pre><code>&gt;&gt;&gt; 'something' is not None\nTrue\n&gt;&gt;&gt; 'something' is (not None)\nFalse\n</code></pre>"},{"location":"GE/#erklarung_11","title":"\ud83d\udca1 Erkl\u00e4rung","text":"<ul> <li><code>is not</code> ist ein einzelner bin\u00e4rer Operator, der anderes Verhalten zeigt, als wenn man <code>is</code> und <code>not</code> einzeln benutzt.</li> <li><code>is not</code> wird zu <code>False</code> ausgewertet wenn die Variablen auf beiden Seiten des Operators auf dasselbe Objekt verweisen, andernfalls zu <code>True</code>.</li> <li>Im Beispiel wird <code>(not None)</code> zu <code>True</code> ausgewertet, denn der Wert <code>None</code> ist <code>False</code> im booleschen Kontext, also wird der Ausdruck zu <code>'something' is True</code> ausgewertet.</li> </ul>"},{"location":"GE/#ein-tic-tac-toe-wo-x-im-ersten-versuch-gewinnt","title":"\u25b6 Ein tic-tac-toe wo X im ersten Versuch gewinnt!","text":"<pre><code># Lass uns eine Zeile initialisieren\nrow = [\"\"] * 3 #row i['', '', '']\n# Lass uns ein board bauen\nboard = [row] * 3\n</code></pre> <p>Ausgabe:</p> <pre><code>&gt;&gt;&gt; board\n[['', '', ''], ['', '', ''], ['', '', '']]\n&gt;&gt;&gt; board[0]\n['', '', '']\n&gt;&gt;&gt; board[0][0]\n''\n&gt;&gt;&gt; board[0][0] = \"X\"\n&gt;&gt;&gt; board\n[['X', '', ''], ['X', '', ''], ['X', '', '']]\n</code></pre> <p>Wir haben nicht dreimal <code>\"X\"</code> zugewiesen, oder?</p>"},{"location":"GE/#erklarung_12","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<p>Wenn wir die Variable <code>row</code> initialisieren, dann erkl\u00e4rt diese Visualisierung, was im Speicher passiert</p> <p></p> <p>Und wenn das <code>board</code> durch Multiplizieren der <code>row</code> initialisiert wird, dann passiert das hier innerhalb des Speichers (jedes der Elemente <code>board[0]</code>, <code>board[1]</code> und <code>board[2]</code> ist eine Referenz aud dieselbe Liste, aud die <code>row</code> verweist)</p> <p></p> <p>Wir k\u00f6nnen dieses Szenario umfahren, indem wir nicht die <code>row</code> Variable zum generieren von <code>board</code> benutzen. (gefragt hier).</p> <pre><code>&gt;&gt;&gt; board = [['']*3 for _ in range(3)]\n&gt;&gt;&gt; board[0][0] = \"X\"\n&gt;&gt;&gt; board\n[['X', '', ''], ['', '', ''], ['', '', '']]\n</code></pre>"},{"location":"GE/#schrodingers-variable","title":"\u25b6 Schr\u00f6dingers Variable *","text":"<pre><code>funcs = []\nresults = []\nfor x in range(7):\n    def some_func():\n        return x\n    funcs.append(some_func)\n    results.append(some_func())  # Beachte hier den Funktionsaufruf \n\nfuncs_results = [func() for func in funcs]\n</code></pre> <p>Ausgabe (Python version): <pre><code>&gt;&gt;&gt; results\n[0, 1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; funcs_results\n[6, 6, 6, 6, 6, 6, 6]\n</code></pre></p> <p>The values of <code>x</code> were different in every iteration prior to appending <code>some_func</code> to <code>funcs</code>, but all the functions return 6 when they're evaluated after the loop completes.</p> <p>2.</p> <pre><code>&gt;&gt;&gt; powers_of_x = [lambda x: x**i for i in range(10)]\n&gt;&gt;&gt; [f(2) for f in powers_of_x]\n[512, 512, 512, 512, 512, 512, 512, 512, 512, 512]\n</code></pre>"},{"location":"GE/#erklarung_13","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Wenn wir eine Funktion innerhalb einer Schleife definieren, welche die Schleifenvariable in ihrem K\u00f6rper benutzt, dann ist der Abschluss der Schleifenfunktion an die Variable gebunden, nicht an ihren Wert. Die Funktion schl\u00e4gt <code>x</code> in dem umgebenden Kontext nach, anstatt den Wert von <code>x</code> zum Zeitpunkt der Erstellung der Funktion zu benutzen. Also verwenden alle Funktionen den letzten Wert, der der Variable zugewiesen wurde, f\u00fcr ihre Berechnungen. Wir k\u00f6nnen beobachten, dass <code>x</code> vom umgebenen Kontext verwendet wird (d.h. keine lokale Variable) mit: </li> </ul> <p><pre><code>&gt;&gt;&gt; import inspect\n&gt;&gt;&gt; inspect.getclosurevars(funcs[0])\nClosureVars(nonlocals={}, globals={'x': 6}, builtins={}, unbound=set())\n</code></pre> Da <code>x</code> ein globaler Wert ist, k\u00f6nnen wir den Wert, den <code>funcs</code> nachschl\u00e4gt und zur\u00fcchgibt, ver\u00e4ndern, indem wir <code>x</code> updaten:</p> <pre><code>&gt;&gt;&gt; x = 42\n&gt;&gt;&gt; [func() for func in funcs]\n[42, 42, 42, 42, 42, 42, 42]\n</code></pre> <ul> <li>Um das entsprechende Verhalten zu bekommen, kannst du die Loop-Variable als named-Variable der Funktion \u00fcbergeben. Warum funktioniert das? Weil dies die Variable innerhalb des Scopes der Funktion definiert. Sie wird nicht l\u00e4nger im umgebenden (globalen) Scope definiert, sondern es wird eine lokale Variable erzeugt, die den Wert von <code>x</code> zu diesem Zeitpunkt speichert.</li> </ul> <pre><code>funcs = []\nfor x in range(7):\n    def some_func(x=x):\n        return x\n    funcs.append(some_func)\n</code></pre> <p>Ausgabe:</p> <pre><code>&gt;&gt;&gt; funcs_results = [func() for func in funcs]\n&gt;&gt;&gt; funcs_results\n[0, 1, 2, 3, 4, 5, 6]\n</code></pre> <p><code>x</code> wird nicht l\u00e4nger im globalen Scope verwendet:</p> <pre><code>&gt;&gt;&gt; inspect.getclosurevars(funcs[0])\nClosureVars(nonlocals={}, globals={}, builtins={}, unbound=set())\n</code></pre>"},{"location":"GE/#das-henne-ei-problem","title":"\u25b6 Das Henne-Ei-Problem *","text":"<p>1. <pre><code>&gt;&gt;&gt; isinstance(3, int)\nTrue\n&gt;&gt;&gt; isinstance(type, object)\nTrue\n&gt;&gt;&gt; isinstance(object, type)\nTrue\n</code></pre></p> <p>Was ist also die ultimative Basisklasse? Die Verwirrung wird noch gr\u00f6\u00dfer:</p> <p>2. </p> <pre><code>&gt;&gt;&gt; class A: pass\n&gt;&gt;&gt; isinstance(A, A)\nFalse\n&gt;&gt;&gt; isinstance(type, type)\nTrue\n&gt;&gt;&gt; isinstance(object, object)\nTrue\n</code></pre> <p>3.</p> <pre><code>&gt;&gt;&gt; issubclass(int, object)\nTrue\n&gt;&gt;&gt; issubclass(type, object)\nTrue\n&gt;&gt;&gt; issubclass(object, type)\nFalse\n</code></pre>"},{"location":"GE/#erklarung_14","title":"\ud83d\udca1 Erkl\u00e4rung","text":"<ul> <li><code>type</code> ist eine Metaklasse in Python.</li> <li>Alles ist ein <code>object</code> in Python, was Klassen und ihre Objekte (Instanzen) einschlie\u00dft.</li> <li>Die Klasse <code>type</code> ist eine Metaklasse der Klasse <code>object</code>, und jede Klasse (einschlie\u00dflich <code>type</code>) hat direkt oder indirekt von <code>object</code> geerbt.</li> <li>Es gibt keine echte Basisklasse zwischen <code>object</code> und <code>type</code>. Die Verwirrung im obigen Schnipsel ergibt sich weil wir \u00fcber diese Beziehungen (<code>issubclass</code> und <code>isinstance</code>) in Form von Python-Klassen denken. Die Beziehung zwischen <code>object</code> und <code>type</code> kann nicht in reinem Python reproduziert werden. Um pr\u00e4ziser zu sein, die folgenden Beziehungen k\u00f6nnen nicht in reinem Python reproduziert werden:<ul> <li>Klasse A ist eine Instanz der Klasse B, und Klasse B ist eine Instanz von Klasse A.</li> <li>Klasse A ist eine Instanz von sich selbst.</li> </ul> </li> <li>Diese Beziehungen zwischen <code>object</code> und <code>type</code> (beide sind Instanzen voneinander und von sich selbst) existieren in Python, weil auf dem Level der Implementierung \"geschummelt\" wird.</li> </ul>"},{"location":"GE/#beziehungen-in-unterklassen","title":"\u25b6 Beziehungen in Unterklassen","text":"<p>Ausgabe: <pre><code>&gt;&gt;&gt; from collections import Hashable\n&gt;&gt;&gt; from collections.abc import Hashable\n&gt;&gt;&gt; issubclass(list, object)\nTrue\n&gt;&gt;&gt; issubclass(object, Hashable)\nTrue\n&gt;&gt;&gt; issubclass(list, Hashable)\nFalse\n</code></pre></p> <p>Die Unterklassenbeziehungen sollten transitiv sein, nicht wahr? (d.h., wenn <code>A</code> eine Unterklasse von <code>B</code> ist, und <code>B</code> eine Unterklasse von <code>C</code>, dann sollte <code>A</code> eine Unterklasse von <code>C</code> sein)</p>"},{"location":"GE/#erklarung_15","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Unterklassenbeziehungen in Python sind nicht notwendigerweise transitiv in Python. Jedem ist es erlaubt, seine eigene, beliebige <code>__subclasscheck__</code> in einer Metaklasse zu definieren.</li> <li>Wenn <code>issubclass(cls, Hashable)</code> aufgerufen wird, sucht es einfach nach nicht-Falsey \"<code>__hash__</code>\" Methoden in <code>cls</code> oderallem, von dem es erbt.</li> <li>Da <code>object</code> hashable ist, aber <code>list</code> nicht-hashable, bricht es die transitive Relation.</li> <li>Eine ausf\u00fchrlichere Erkl\u00e4rung kann hier gefunden werden.</li> </ul>"},{"location":"GE/#methodengleichheit-und-identitat","title":"\u25b6 Methodengleichheit und -identit\u00e4t","text":"<p>1. <pre><code>class SomeClass:\n    def method(self):\n        pass\n\n    @classmethod\n    def classm(cls):\n        pass\n\n    @staticmethod\n    def staticm():\n        pass\n</code></pre></p> <p>Ausgabe: <pre><code>&gt;&gt;&gt; print(SomeClass.method is SomeClass.method)\nTrue\n&gt;&gt;&gt; print(SomeClass.classm is SomeClass.classm)\nFalse\n&gt;&gt;&gt; print(SomeClass.classm == SomeClass.classm)\nTrue\n&gt;&gt;&gt; print(SomeClass.staticm is SomeClass.staticm)\nTrue\n</code></pre></p> <p>Wenn wir zweimal auf <code>classm</code> zugreifen, bekommen wir ein gleiches Objekt, aber nicht dasselbe oder? Lass uns sehen, was mit Instanzen von <code>SomeClass</code> passiert:</p> <p>2. <pre><code>o1 = SomeClass()\no2 = SomeClass()\n</code></pre></p> <p>Ausgabe: <pre><code>&gt;&gt;&gt; print(o1.method == o2.method)\nFalse\n&gt;&gt;&gt; print(o1.method == o1.method)\nTrue\n&gt;&gt;&gt; print(o1.method is o1.method)\nFalse\n&gt;&gt;&gt; print(o1.classm is o1.classm)\nFalse\n&gt;&gt;&gt; print(o1.classm == o1.classm == o2.classm == SomeClass.classm)\nTrue\n&gt;&gt;&gt; print(o1.staticm is o1.staticm is o2.staticm is SomeClass.staticm)\nTrue\n</code></pre></p> <p>Der zweifache Zugriff auf <code>classm</code> oder <code>method</code>, erzeugt gleiche, aber nicht gleiche Objekte f\u00fcr dieselbe Instanz von <code>SomeClass</code>.</p>"},{"location":"GE/#erklarung_16","title":"\ud83d\udca1 Erkl\u00e4rung","text":"<ul> <li>Funktionen sind Deskriptoren. Wann immer auf eine Funktion als Attribut zugegriffen wird, wird der Deskriptor aufgerufen, was ein Methodenobjekt erzeugt, das die Funktion mit dem Objekt \"verbindet\", welches das Attribut besitzt. Wenn aufgerufen, ruft die Methode die Funktion auf und \u00fcbergibt implizit das gebundene Objekt als erstes Argument (so erhalten wir <code>self</code> als erstes Argument, obwohl es nicht explizit \u00fcbergeben wird). <pre><code>&gt;&gt;&gt; o1.method\n&lt;bound method SomeClass.method of &lt;__main__.SomeClass object at ...&gt;&gt;\n</code></pre></li> <li>Ein mehrfacher Zugriff auf das Attribut erzeugt jedes Mal ein Methodenobjekt! Daher ist <code>o1.method is o1.method</code> niemals wahr. Der Zugriff auf Klassenattribute (im Gegensatz zu Instanzen) erzeugt jedoch keine Methoden; also ist <code>SomeClass.method is SomeClass.method</code> wahr. <pre><code>&gt;&gt;&gt; SomeClass.method\n&lt;function SomeClass.method at ...&gt;\n</code></pre></li> <li><code>classmethod</code> (Klassenmethoden) transformiert Funktionen in Klassenmethoden. Klassenmethoden sind Deskriptoren, die, wenn auf sie zugegriffen wird, ein Methodenobjekt erzeugen, welches die Klasse (Typ) des Objektes bindet, anstelle des Objektes selbst. <pre><code>&gt;&gt;&gt; o1.classm\n&lt;bound method SomeClass.classm of &lt;class '__main__.SomeClass'&gt;&gt;\n</code></pre></li> <li>Im Gegensatz zu Funktionen erzeugen Klassenmethoden auch dann eine Methode, wenn sie als Klassenattribute aufgerufen werden (in diesem Fall binden sie die Klasse, nicht den Typ der Klasse). Also ist <code>SomeClass.classm is SomeClass.classm</code> unwahr. <pre><code>&gt;&gt;&gt; SomeClass.classm\n&lt;bound method SomeClass.classm of &lt;class '__main__.SomeClass'&gt;&gt;\n</code></pre></li> <li>Ein Methodenobjekt ist gleich wenn beide Funktionen gleich sind, und die gebundenen Objekte gleich sind. Also ist <code>o1.method == o1.method</code> wahr, auch wenn sie nicht das gleiche Objekt im Speicher sind.</li> <li><code>staticmethod</code> transformiert Funktionen in ein \"no-op\" Deskriptor, welches die Funktion so zur\u00fcckgibt, wie sie ist. Es werden nie Methodenobjekte erzeugt, also ist der Vergleich mit <code>is</code> wahr. <pre><code>&gt;&gt;&gt; o1.staticm\n&lt;function SomeClass.staticm at ...&gt;\n&gt;&gt;&gt; SomeClass.staticm\n&lt;function SomeClass.staticm at ...&gt;\n</code></pre></li> <li>Jedes Mal wenn Python Instanzmethoden aufruft, m\u00fcssen neue \"Methoden\"-Objekte erstellt und die Argumente ge\u00e4ndert werden, um <code>self</code> einf\u00fcgen zu k\u00f6nnen, was die Leistung negativ beeinflusst. CPython 3.7 l\u00f6ste dies, indem neue Opcodes eingef\u00fchrt wurden, die den Aufruf von Methoden behandeln, ohne die tempor\u00e4ren Methodenobjekte zu erzeugen. Das wird nur genutzt, wenn die Funktion, auf die zugegriffen wird, tats\u00e4chlich aufgerufen wird, also sind die Schnipsel hier nicht betroffen. Sie erzeugen also immer noch Methoden :)</li> </ul>"},{"location":"GE/#all-true-ation","title":"\u25b6 All-true-ation *","text":"<pre><code>&gt;&gt;&gt; all([True, True, True])\nTrue\n&gt;&gt;&gt; all([True, True, False])\nFalse\n\n&gt;&gt;&gt; all([])\nTrue\n&gt;&gt;&gt; all([[]])\nFalse\n&gt;&gt;&gt; all([[[]]])\nTrue\n</code></pre> <p>Warum ist diese \u00c4nderung True/False ?</p>"},{"location":"GE/#erklarung_17","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li> <p>Die Implementierung der <code>all</code> Funktion ist \u00e4quivalent zu</p> </li> <li> <p><code>py   def all(iterable):       for element in iterable:           if not element:               return False       return True</code></p> </li> <li> <p><code>all([])</code> gibt <code>True</code> zur\u00fcck, da das Iterable leer ist. </p> </li> <li><code>all([[]])</code> gibt <code>False</code> zur\u00fcck, weil das \u00fcbergebene Array ein Element hat, <code>[]</code>, und in Python, eine leere Liste <code>False</code> ist.</li> <li><code>all([[[]]])</code> und h\u00f6here, rekursive Varianten sind immer <code>True</code>, weil das einzelne Element des \u00fcbergebenen Arrays (<code>[[...]]</code>) nicht l\u00e4nger leer ist, und Listen mit Werten <code>True</code> sind.</li> </ul>"},{"location":"GE/#das-uberraschende-komma","title":"\u25b6 Das \u00fcberraschende Komma","text":"<p>Ausgabe (&lt; 3.6):</p> <pre><code>&gt;&gt;&gt; def f(x, y,):\n...     print(x, y)\n...\n&gt;&gt;&gt; def g(x=4, y=5,):\n...     print(x, y)\n...\n&gt;&gt;&gt; def h(x, **kwargs,):\n  File \"&lt;stdin&gt;\", line 1\n    def h(x, **kwargs,):\n                     ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; def h(*args,):\n  File \"&lt;stdin&gt;\", line 1\n    def h(*args,):\n                ^\nSyntaxError: invalid syntax\n</code></pre>"},{"location":"GE/#erklarung_18","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Ein Komma am Ende ist in der Liste der formalen Parameter einer Python-Funktion ist nicht immer zul\u00e4ssig.</li> <li>In Python wird die Liste der Argumente teilweise mit f\u00fchrenden und teilweise mit abschlie\u00dfenden Kommas definiert. Dieser Konflikt f\u00fchrt zu Situationen, in denen ein Komma in der Mitte gefangen ist, und keine Regel dies akzeptiert.</li> <li>Hinweis: Das abschlie\u00dfende-Komma-Problem wurde in Python 3.6 gel\u00f6st. Die Bemerkungen in diesem Post diskutieren in K\u00fcrze die verschiedenen Verwendungen von abschlie\u00dfenden Kommas in Python.  </li> </ul>"},{"location":"GE/#strings-und-die-backslashes","title":"\u25b6 Strings und die Backslashes","text":"<p>Ausgabe: <pre><code>&gt;&gt;&gt; print(\"\\\"\")\n\"\n\n&gt;&gt;&gt; print(r\"\\\"\")\n\\\"\n\n&gt;&gt;&gt; print(r\"\\\")\nFile \"&lt;stdin&gt;\", line 1\n    print(r\"\\\")\n              ^\nSyntaxError: EOL while scanning string literal\n\n&gt;&gt;&gt; r'\\'' == \"\\\\'\"\nTrue\n</code></pre></p>"},{"location":"GE/#erklarung_19","title":"\ud83d\udca1 Erkl\u00e4rung","text":"<ul> <li>In einem normalen Python-String wird der Backslash zum Escapen von Charactern benutzt, die evtl. eine besondere Bedeutung haben (bspw. einfache Anf\u00fchrungszeichen, doppelte Anf\u00fchrungszeichen und der Backslash selbst).     <pre><code>&gt;&gt;&gt; \"wt\\\"f\"\n'wt\"f'\n</code></pre></li> <li>In einem raw-String-Literal (wie durch das Pr\u00e4fix <code>r</code> gekennzeichnet), werden die Backslashes so wie sie sind weitergegeben, zusammen mit den Verhalten, dass die folgenden Zeichen escaped werden.     <pre><code>&gt;&gt;&gt; r'wt\\\"f' == 'wt\\\\\"f'\nTrue\n&gt;&gt;&gt; print(repr(r'wt\\\"f')\n'wt\\\\\"f'\n\n&gt;&gt;&gt; print(\"\\n\")\n\n&gt;&gt;&gt; print(r\"\\\\n\")\n'\\\\n'\n</code></pre></li> <li>Das hei\u00dft wenn ein Parser auf ein Backslash in einem raw-String trifft, dann erwartet es noch einen Character, der diesem Backslash folgt. Und in unserem Fall (<code>print(r\"\\\")</code>) escaped der Backslash das abschlie\u00dfende Anf\u00fchrungszeichen, wodurch der Parser kein terminierendes Anf\u00fchrungszeichen bekommt (daher der <code>SyntaxError</code>). Deshalb funktionieren Backslashes am Ende eines raw-Strings nicht.</li> </ul>"},{"location":"GE/#not-knot","title":"\u25b6 not knot!","text":"<pre><code>x = True\ny = False\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; not x == y\nTrue\n&gt;&gt;&gt; x == not y\n  File \"&lt;input&gt;\", line 1\n    x == not y\n           ^\nSyntaxError: invalid syntax\n</code></pre></p>"},{"location":"GE/#erklarung_20","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Operator-Reihenfolge beeinflusst wie ein Ausdruck ausgewertet wird, und der <code>==</code> Operator hat eine h\u00f6here Priorit\u00e4t als der <code>not</code>-Operator in Python.</li> <li>Also ist <code>not x == y</code> \u00e4quivalent zu <code>not (x == y)</code>, was \u00e4quivalent zu <code>not (True == False)</code> ist und schlie\u00dflich zu <code>True</code> ausgewertet wird.</li> <li>Aber <code>x == not y</code> wirft einen <code>SyntaxError</code>, weil man es mit <code>(x == not) y</code> gleich setzen k\u00f6nnte und nicht <code>x == (not y)</code>, was man zuerst erwarten w\u00fcrde.</li> <li>Der Parser erwartet das <code>not</code>-Token als Teil de <code>not in</code>-Operators (weil sowohl der <code>==</code>- als auch der <code>not in</code>-Operator die gleiche Priorit\u00e4t haben), aber nachdem er kein <code>in</code>-Token, welches nach einem <code>not</code>-Token folgt, gefunden hat, wirft er einen <code>SyntaxError</code>. </li> </ul>"},{"location":"GE/#halbe-zeichenketten-in-dreifachen-anfuhrungszeichen","title":"\u25b6 Halbe Zeichenketten in dreifachen Anf\u00fchrungszeichen","text":"<p>Ausgabe: <pre><code>&gt;&gt;&gt; print('wtfpython''')\nwtfpython\n&gt;&gt;&gt; print(\"wtfpython\"\"\")\nwtfpython\n&gt;&gt;&gt; # Die folgende Anweisung wirft einen `SyntaxError`\n&gt;&gt;&gt; # print('''wtfpython')\n&gt;&gt;&gt; # print(\"\"\"wtfpython\")\n  File \"&lt;input&gt;\", line 3\n    print(\"\"\"wtfpython\")\n                        ^\nSyntaxError: EOF while scanning triple-quoted string literal\n</code></pre></p>"},{"location":"GE/#erklarung_21","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Python unterst\u00fctzt implizite String-literal-Konkatenation, Beispiel:   <pre><code>&gt;&gt;&gt; print(\"wtf\" \"python\")\nwtfpython\n&gt;&gt;&gt; print(\"wtf\" \"\") # or \"wtf\"\"\"\nwtf\n</code></pre></li> <li><code>'''</code> und <code>\"\"\"</code> sind auch String-Trennzeichen in Python, was einen SyntaxError hervorruft, weil der Python-Interpreter ein abschlie\u00dfendes dreifaches Anf\u00fchrungszeichen als Trennzeichen erwartet, w\u00e4hrend er das momentane String-Literal mit dreifachen Anf\u00fchrungszeichen scannt.</li> </ul>"},{"location":"GE/#was-ist-falsch-an-booleans","title":"\u25b6 Was ist falsch an booleans?","text":"<p>1.</p> <pre><code># Ein einfaches Beispiel, um die Anzahl der Booleans und\n# der Integer in einem Iterable mit gemischten Datentypen zu z\u00e4hlen.\nmixed_list = [False, 1.0, \"some_string\", 3, True, [], False]\nintegers_found_so_far = 0\nbooleans_found_so_far = 0\n\nfor item in mixed_list:\n    if isinstance(item, int):\n        integers_found_so_far += 1\n    elif isinstance(item, bool):\n        booleans_found_so_far += 1\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; integers_found_so_far\n4\n&gt;&gt;&gt; booleans_found_so_far\n0\n</code></pre></p> <p>2. <pre><code>&gt;&gt;&gt; some_bool = True\n&gt;&gt;&gt; \"wtf\" * some_bool\n'wtf'\n&gt;&gt;&gt; some_bool = False\n&gt;&gt;&gt; \"wtf\" * some_bool\n''\n</code></pre></p> <p>3.</p> <pre><code>def tell_truth():\n    True = False\n    if True == False:\n        print(\"I have lost faith in truth!\")\n</code></pre> <p>Ausgabe (&lt; 3.x):</p> <pre><code>&gt;&gt;&gt; tell_truth()\nI have lost faith in truth!\n</code></pre>"},{"location":"GE/#erklarung_22","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li> <p><code>bool</code> ist eine Unterklasse von <code>int</code> in Python</p> <pre><code>&gt;&gt;&gt; issubclass(bool, int)\nTrue\n&gt;&gt;&gt; issubclass(int, bool)\nFalse\n</code></pre> </li> <li> <p>Zudem sind <code>True</code> und <code>False</code> Instanzen von <code>int</code> <pre><code>&gt;&gt;&gt; isinstance(True, int)\nTrue\n&gt;&gt;&gt; isinstance(False, int)\nTrue\n</code></pre></p> </li> <li> <p>Der Integer Wert von <code>True</code> ist <code>1</code> und der von <code>False</code> ist <code>0</code>.   <pre><code>&gt;&gt;&gt; int(True)\n1\n&gt;&gt;&gt; int(False)\n0\n</code></pre></p> </li> <li> <p>Siehe auch diese StackOverflow Antwort f\u00fcr die Begr\u00fcndung dahinter.</p> </li> <li>Anf\u00e4nglich hatte Python keinen <code>bool</code> Typ (Leute benutzten 0 f\u00fcr False und nicht-null Werte wie 1 f\u00fcr True).  <code>True</code>, <code>False</code>, und ein <code>bool</code> Typ wurden in den 2.x Versionen hinzugef\u00fcgt, aber, f\u00fcr R\u00fcckw\u00e4rtskompatibilit\u00e4t, konnten <code>True</code> und <code>False</code> nicht zu Konstanten gemacht werden. Sie waren nur built-in Variablen, was es m\u00f6glich machte, sie neu zuzuweisen.</li> <li>Python 3 war r\u00fcckw\u00e4rtskompatibel, das Problem wurde schlie\u00dflich gel\u00f6st, und daher wird der letzte Schnipsel nicht mit Python 3.x funktionieren!</li> </ul>"},{"location":"GE/#klassen-und-instanzattribute","title":"\u25b6 Klassen- und Instanzattribute","text":"<p>1. <pre><code>class A:\n    x = 1\n\nclass B(A):\n    pass\n\nclass C(A):\n    pass\n</code></pre></p> <p>Ausgabe: <pre><code>&gt;&gt;&gt; A.x, B.x, C.x\n(1, 1, 1)\n&gt;&gt;&gt; B.x = 2\n&gt;&gt;&gt; A.x, B.x, C.x\n(1, 2, 1)\n&gt;&gt;&gt; A.x = 3\n&gt;&gt;&gt; A.x, B.x, C.x # C.x wurde ver\u00e4ndert, aber B.x nicht\n(3, 2, 3)\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.x, A.x\n(3, 3)\n&gt;&gt;&gt; a.x += 1\n&gt;&gt;&gt; a.x, A.x\n(4, 3)\n</code></pre></p> <p>2. <pre><code>class SomeClass:\n    some_var = 15\n    some_list = [5]\n    another_list = [5]\n    def __init__(self, x):\n        self.some_var = x + 1\n        self.some_list = self.some_list + [x]\n        self.another_list += [x]\n</code></pre></p> <p>Ausgabe:</p> <pre><code>&gt;&gt;&gt; some_obj = SomeClass(420)\n&gt;&gt;&gt; some_obj.some_list\n[5, 420]\n&gt;&gt;&gt; some_obj.another_list\n[5, 420]\n&gt;&gt;&gt; another_obj = SomeClass(111)\n&gt;&gt;&gt; another_obj.some_list\n[5, 111]\n&gt;&gt;&gt; another_obj.another_list\n[5, 420, 111]\n&gt;&gt;&gt; another_obj.another_list is SomeClass.another_list\nTrue\n&gt;&gt;&gt; another_obj.another_list is some_obj.another_list\nTrue\n</code></pre>"},{"location":"GE/#erklarung_23","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Klassenvariablen und Variablen in Klasseninstanzen werden intern als Dictionaries von einem Klassenobjekt behandelt. Wenn einen Variablenname nicht im Dictionary der momentanen Klasse gefunden wird, wird die Elternklasse durchsucht.</li> <li>Der <code>+=</code> Operator modifiziert das ver\u00e4nderbare Objekt in-place ohne ein neues Objekt zu erzeugen. Also beeinflusst das \u00c4ndern eines Attributtes von einer Instanz die anderen Instanzen und die Klassenattribute.</li> </ul>"},{"location":"GE/#yielding-none","title":"\u25b6 yielding None","text":"<pre><code>some_iterable = ('a', 'b')\n\ndef some_func(val):\n    return \"something\"\n</code></pre> <p>Ausgabe (&lt;= 3.7.x):</p> <pre><code>&gt;&gt;&gt; [x for x in some_iterable]\n['a', 'b']\n&gt;&gt;&gt; [(yield x) for x in some_iterable]\n&lt;generator object &lt;listcomp&gt; at 0x7f70b0a4ad58&gt;\n&gt;&gt;&gt; list([(yield x) for x in some_iterable])\n['a', 'b']\n&gt;&gt;&gt; list((yield x) for x in some_iterable)\n['a', None, 'b', None]\n&gt;&gt;&gt; list(some_func((yield x)) for x in some_iterable)\n['a', 'something', 'b', 'something']\n</code></pre>"},{"location":"GE/#erklarung_24","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Das ist ein Fehler in CPythons Handhabung von <code>yield</code> in Generatoren und Comprehensions.</li> <li>Die Quelle und eine Erkl\u00e4rung k\u00f6nnen hier gefunden werden: https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions</li> <li>Der zugeh\u00f6rige Fehlerbericht: https://bugs.python.org/issue10544</li> <li>Python 3.8+ erlaubt kein <code>yield</code> in List-Comprehensions und wird einen <code>SyntaxError</code> werfen.</li> </ul>"},{"location":"GE/#yielding-from-return","title":"\u25b6 Yielding from... return! *","text":"<p>1.</p> <pre><code>def some_func(x):\n    if x == 3:\n        return [\"wtf\"]\n    else:\n        yield from range(x)\n</code></pre> <p>Ausgabe (&gt; 3.3):</p> <pre><code>&gt;&gt;&gt; list(some_func(3))\n[]\n</code></pre> <p>Wo ist das <code>\"wtf\"</code> hin? Liegt es an einem besonderen Effekt von <code>yield from</code>? Lass uns das best\u00e4tigen:</p> <p>2.</p> <pre><code>def some_func(x):\n    if x == 3:\n        return [\"wtf\"]\n    else:\n        for i in range(x):\n          yield i\n</code></pre> <p>Ausgabe:</p> <pre><code>&gt;&gt;&gt; list(some_func(3))\n[]\n</code></pre> <p>Das gleiche Ergebnis; hat also auch nicht funktioniert.</p>"},{"location":"GE/#erklarung_25","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Von Python 3.3 aus wurde es m\u00f6glich, die <code>return</code>-Anweisung mit Werten innerhalb eines Generators zu benutzen (Siehe PEP380). Die offiziellen docs sagen:</li> </ul> <p>\"... <code>return expr</code> in einem Generator f\u00fchrt zu einem <code>StopIteration(expr)</code>, was beim Verlassen des Generators geworfen wird.\"</p> <ul> <li>Im Fall von <code>some_func(3)</code> wird <code>StopIteration</code> am Beginn  wegen der <code>return</code>-Anweisung geworfen. Die <code>StopIteration</code> Exception wird automatisch innerhalb des <code>list(...)</code>-Wrapppers und der <code>for</code>-Schleife abgefangen. Daher enden die beiden Schnipsel mit einer leeren Liste.</li> <li>Um <code>[\"wtf\"]</code> vom Generator <code>some_func</code> zu bekommen, m\u00fcssen wir die <code>StopIteration</code> Exception auffangen:</li> </ul> <pre><code>try:\n    next(some_func(3))\nexcept StopIteration as e:\n    some_string = e.value\n</code></pre> <pre><code>&gt;&gt;&gt; some_string\n[\"wtf\"]\n</code></pre>"},{"location":"GE/#nan-reflexivitat","title":"\u25b6 Nan-Reflexivit\u00e4t *","text":"<p>1.</p> <pre><code>a = float('inf')\nb = float('nan')\nc = float('-iNf')  # Diese Strings sind case-insensitiv\nd = float('nan')\n</code></pre> <p>Ausgabe:</p> <pre><code>&gt;&gt;&gt; a\ninf\n&gt;&gt;&gt; b\nnan\n&gt;&gt;&gt; c\n-inf\n&gt;&gt;&gt; float('some_other_string')\nValueError: could not convert string to float: some_other_string\n&gt;&gt;&gt; a == -c # inf==inf\nTrue\n&gt;&gt;&gt; None == None # None == None\nTrue\n&gt;&gt;&gt; b == d # but nan!=nan\nFalse\n&gt;&gt;&gt; 50 / a\n0.0\n&gt;&gt;&gt; a / a\nnan\n&gt;&gt;&gt; 23 + b\nnan\n</code></pre> <p>2.</p> <pre><code>&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; y = x / x\n&gt;&gt;&gt; y is y # Identit\u00e4t funktioniert\nTrue\n&gt;&gt;&gt; y == y # Gleichheit von y schl\u00e4gt fehl\nFalse\n&gt;&gt;&gt; [y] == [y] # aber die Gleichheit f\u00fcr die Liste, die y enth\u00e4lt, gelingt\nTrue\n</code></pre>"},{"location":"GE/#erklarung_26","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li> <p><code>'inf'</code> und <code>'nan'</code> sind spezielle Strings (case-insensitiv), die, wenn sie explizit zu <code>floats</code> getypcasted werden, benutzt werden, um die mathematische \"Unendlichkeit\" und \"not a number\" zu repr\u00e4sentieren.</p> </li> <li> <p>Da nach dem IEEE Standard <code>NaN != NaN</code>, bircht die Befolgung dieser Regel die Reflexivit\u00e4tsannahme eines Collection-Elements in Python, d.h. wenn <code>x</code> Teil einer Collection wie einer <code>list</code> ist, dann basieren die Implementierungen, wie zum Beispiel Vergleiche, auf der Annahme, dass <code>x == x</code>. Aufgrund dieser Annahme, wird die Identit\u00e4t zuerst verglichen (da dies schneller ist), w\u00e4hrend die beiden Elemente verglichen werden, und die Werte werden nur verglichen, wenn die Identit\u00e4ten ungleich sind. Der folgende Schnipsel wird die Dinge klarer erscheinen lassen:</p> </li> </ul> <pre><code>&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; x == x, [x] == [x]\n(False, True)\n&gt;&gt;&gt; y = float('nan')\n&gt;&gt;&gt; y == y, [y] == [y]\n(False, True)\n&gt;&gt;&gt; x == y, [x] == [y]\n(False, False)\n</code></pre> <p>Da die Identit\u00e4ten von <code>x</code> und <code>y</code> unterschiedlich sind, werden die Werte betrachtet, die ebenfalls unterschiedlich sind; deshalb gibt der Vergleich dieses Mal <code>False</code> zur\u00fcck.</p> <ul> <li>Interessant zu lesen: Reflexivity, and other pillars of civilization</li> </ul>"},{"location":"GE/#verandern-des-unveranderlichen","title":"\u25b6 Ver\u00e4ndern des Unver\u00e4nderlichen!","text":"<p>Das sieht vielleicht trivial aus, wenn du wei\u00dft wie Referenzen in Python funktionieren.</p> <pre><code>some_tuple = (\"A\", \"tuple\", \"with\", \"values\")\nanother_tuple = ([1, 2], [3, 4], [5, 6])\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; some_tuple[2] = \"change this\"\nTypeError: 'tuple' object does not support item assignment\n&gt;&gt;&gt; another_tuple[2].append(1000) #Das wirft keinen Fehler\n&gt;&gt;&gt; another_tuple\n([1, 2], [3, 4], [5, 6, 1000])\n&gt;&gt;&gt; another_tuple[2] += [99, 999]\nTypeError: 'tuple' object does not support item assignment\n&gt;&gt;&gt; another_tuple\n([1, 2], [3, 4], [5, 6, 1000, 99, 999])\n</code></pre></p> <p>Aber ich dachte Tupel sind unver\u00e4nderlich...</p>"},{"location":"GE/#erklarung_27","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li> <p>Zitat von https://docs.python.org/3/reference/datamodel.html</p> <p>Unver\u00e4nderliche Sequenzen     Ein Objekt eines unver\u00e4nderlichen Sequenztypen kann nicht nach der Erzeugung ver\u00e4ndert werden. (Wenn das Objekt Referenzen zu anderen Objekten enth\u00e4lt, k\u00f6nnen die anderen Objekte ver\u00e4nderlich und modifizierbar sein; jedoch kann die Collection von Objekten, die von einem unver\u00e4nderlichen Objekt referenziert werden, nicht ge\u00e4ndert werden.)</p> </li> <li> <p>Der <code>+=</code> Operator ver\u00e4ndert die Liste in-place. Die Element-Zuweisung funktioniert nicht, aber wenn die Exception auftritt, wurde das Element bereits an Ort und Stelle ver\u00e4ndert.</p> </li> <li>Es gibt auch eine Erkl\u00e4rung im offiziellen Python FAQ.</li> </ul>"},{"location":"GE/#die-verschwindende-variable-aus-dem-aueren-gultigkeitsbereich","title":"\u25b6 Die verschwindende Variable aus dem \u00e4u\u00dferen G\u00fcltigkeitsbereich","text":"<pre><code>e = 7\ntry:\n    raise Exception()\nexcept Exception as e:\n    pass\n</code></pre> <p>Ausgabe (Python 2.x): <pre><code>&gt;&gt;&gt; print(e)\n# gibt nichts aus\n</code></pre></p> <p>Ausgabe (Python 3.x): <pre><code>&gt;&gt;&gt; print(e)\nNameError: name 'e' is not defined\n</code></pre></p>"},{"location":"GE/#erklarung_28","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Quelle: https://docs.python.org/3/reference/compound_stmts.html#except</li> </ul> <p>Wenn eine Exception mit dem <code>as</code>-Target zugewiesen wurde, wird sie am Ende der <code>except</code>-Klausel gel\u00f6scht. Das ist so, als ob</p> <pre><code>except E as N:\n    foo\n</code></pre> <p>\u00fcbersetzt wurde in</p> <pre><code>except E as N:\n    try:\n        foo\n    finally:\n        del N\n</code></pre> <p>Das bedeutet, dass einer Exception ein anderer Name zugewiesen werden muss, wenn man es nach einer except-Klausel benutzen m\u00f6chte. Exceptions werden gel\u00f6scht, weil sie mit dem angeh\u00e4ngten Traceback einen Referenzzyklus mit dem SatckFrame bilden, der alle Locals in diesem Frame am Leben erh\u00e4lt, bis die n\u00e4chste Garbage Collection stattfindet.</p> <ul> <li> <p>Die Klauseln besitzen keinen Scope in Python. Alles im Beispiel liegt im selben Scope, und die Variable <code>e</code> wurde entfernt, da die except-Klausel ausgef\u00fchrt wurde. Das gleiche gilt nicht f\u00fcr Funktionen, die ihren eigenen inneren Scope haben. Das Beispiel unten erl\u00e4utert dies:</p> <pre><code>def f(x):\n    del(x)\n    print(x)\n\nx = 5\ny = [5, 4, 3]\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; f(x)\nUnboundLocalError: local variable 'x' referenced before assignment\n&gt;&gt;&gt; f(y)\nUnboundLocalError: local variable 'x' referenced before assignment\n&gt;&gt;&gt; x\n5\n&gt;&gt;&gt; y\n[5, 4, 3]\n</code></pre></p> </li> <li> <p>In Python 2.x wird der Variable <code>e</code> eine <code>Exception()</code>-Instanz zugewiesen, wenn du also versuchst, dies auszugeben, wird gar nichts ausgegeben.</p> <p>Ausgabe (Python 2.x): <pre><code>&gt;&gt;&gt; e\nException()\n&gt;&gt;&gt; print e\n# Nichts wird ausgegeben!\n</code></pre></p> </li> </ul>"},{"location":"GE/#die-mysteriose-key-type-umwandlung","title":"\u25b6 Die mysteri\u00f6se key type Umwandlung","text":"<pre><code>class SomeClass(str):\n    pass\n\nsome_dict = {'s': 42}\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; type(list(some_dict.keys())[0])\nstr\n&gt;&gt;&gt; s = SomeClass('s')\n&gt;&gt;&gt; some_dict[s] = 40\n&gt;&gt;&gt; some_dict # erwartet: zwei verschiedene key-value-Paare\n{'s': 40}\n&gt;&gt;&gt; type(list(some_dict.keys())[0])\nstr\n</code></pre></p>"},{"location":"GE/#erklarung_29","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Das Objekt <code>s</code> und der String <code>\"s\"</code> hashen auf denselben Wert, weil <code>SomeClass</code> erbt die <code>__hash__</code>-Methode von der <code>str</code>-Klasse.</li> <li><code>SomeClass(\"s\") == \"s\"</code> wird zu <code>True</code> ausgewertet, weil <code>SomeClass</code> auch die <code>__eq__</code>-Methode von der <code>str</code>-Klasse erbt.</li> <li>Da beide Objekte auf denselben Wert hashen und gleich sind, werden sie durch denselben Key im Dictionary repr\u00e4sentiert.</li> <li>F\u00fcr das gew\u00fcnschte Verhalten, k\u00f6nnen wir die <code>__eq__</code>-Methode in <code>SomeClass</code> neu definieren:   <pre><code>class SomeClass(str):\n  def __eq__(self, other):\n      return (\n          type(self) is SomeClass\n          and type(other) is SomeClass\n          and super().__eq__(other)\n      )\n\n  # Wenn wir ein benutzerdefiniertes __eq__ definieren, stoppt Python automatisch die Vererbung der\n  # __hash__ Methode, also m\u00fcssen wir diese auch noch definieren\n  __hash__ = str.__hash__\n\nsome_dict = {'s':42}\n</code></pre></li> </ul> <p>Ausgabe: <pre><code>&gt;&gt;&gt; s = SomeClass('s')\n&gt;&gt;&gt; some_dict[s] = 40\n&gt;&gt;&gt; some_dict\n{'s': 40, 's': 42}\n&gt;&gt;&gt; keys = list(some_dict.keys())\n&gt;&gt;&gt; type(keys[0]), type(keys[1])\n(__main__.SomeClass, str)\n</code></pre></p>"},{"location":"GE/#lass-uns-sehen-ob-du-dies-erratst","title":"\u25b6 Lass uns sehen, ob du dies err\u00e4tst?","text":"<pre><code>a, b = a[b] = {}, 5\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; a\n{5: ({...}, 5)}\n</code></pre></p>"},{"location":"GE/#erklarung_30","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Nach der Python-Sprachreferenz haben Zuweisungsanweisungen die Form   <pre><code>(target_list \"=\")+ (expression_list | yield_expression)\n</code></pre>   und</li> </ul> <p>Eine Zuweisungsanweisung wertet eine Liste von Ausdr\u00fccken aus (denk daran, dass dies ein einzelner Ausdruck oder eine durch Komma getrennte Liste sein kann, wobei letzteres ein Tupel ergibt) und weist dem einzelnen resultierenden Objekt jeder der Ziellisten zu, von links nach rechts.</p> <ul> <li> <p>Das <code>+</code> in <code>(target_list \"=\")+</code> meint, dass es  eine oder mehrere Ziellisten geben kann. In diesem Fall sind die Ziellisten <code>a, b</code> und <code>a[b]</code> (beachte, dass die Liste von Ausdr\u00fccken exakt eine ist, was in unserem Fall <code>{}, 5</code> ist).</p> </li> <li> <p>Nachdem die Liste der Ausdr\u00fccke ausgewertet wurde, wird ihr Wert von links nach rechts in die Ziellisten entpackt. Also wird, in unserem Fall, zuerst das Tupel <code>{}, 5</code> zu <code>a, b</code> entpackt und wir haben nun <code>a = {}</code> und <code>b = 5</code>.</p> </li> <li> <p><code>a</code> wird nun <code>{}</code> zugewiesen, was ein ver\u00e4nderliches Objekt ist.</p> </li> <li> <p>Die zweite Zielliste ist <code>a[b]</code> (vielleicht h\u00e4ttest du erwartet, dass dies einen Fehler wirft, da sowohl <code>a</code> als auch <code>b</code> nicht in der Anweisung vorher definiert wurden. Aber denk daran, dass wir gerade <code>a</code> dem <code>{}</code> und <code>b</code> der <code>5</code> zugewiesen haben).</p> </li> <li> <p>Jetzt setzen wir den Schl\u00fcssel <code>5</code> im Dictionary auf das Tupel <code>({}, 5)</code>, was einen Zirkelschluss erzeugt (das <code>{...}</code> in der Ausgabe bezieht sich auf dasselbe Objekt, was <code>a</code> bereits referenziert). Ein weiteres, einfacheres Beispiel einer zirkul\u00e4ren Referenz:   <pre><code>&gt;&gt;&gt; some_list = some_list[0] = [0]\n&gt;&gt;&gt; some_list\n[[...]]\n&gt;&gt;&gt; some_list[0]\n[[...]]\n&gt;&gt;&gt; some_list is some_list[0]\nTrue\n&gt;&gt;&gt; some_list[0][0][0][0][0][0] == some_list\nTrue\n</code></pre>   \u00c4hnlich verh\u00e4lt es sich in unserem Beispiel (<code>a[b][0]</code> ist dasselbe Objekt wie <code>a</code>)</p> </li> <li> <p>Um zusammenzufassen, kannst du das Beispiel wie folgt aufgliedern   <pre><code>a, b = {}, 5\na[b] = a, b\n</code></pre>   Und der zirkul\u00e4re Bezug l\u00e4sst sich durch die Tatsache rechtfertigen, dass <code>a[b][0]</code> dasselbe Objekt ist wie <code>a</code> <pre><code>&gt;&gt;&gt; a[b][0] is a\nTrue\n</code></pre></p> </li> </ul>"},{"location":"GE/#uberschreitet-den-grenzwert-fur-die-umwandlung-von-integer-strings","title":"\u25b6 \u00dcberschreitet den Grenzwert f\u00fcr die Umwandlung von Integer-Strings","text":"<pre><code>&gt;&gt;&gt; # Python 3.10.6\n&gt;&gt;&gt; int(\"2\" * 5432)\n\n&gt;&gt;&gt; # Python 3.10.8\n&gt;&gt;&gt; int(\"2\" * 5432)\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; # Python 3.10.6\n222222222222222222222222222222222222222222222222222222222222222...\n\n&gt;&gt;&gt; # Python 3.10.8\nTraceback (most recent call last):\n   ...\nValueError: Exceeds the limit (4300) for integer string conversion:\n   value has 5432 digits; use sys.set_int_max_str_digits()\n   to increase the limit.\n</code></pre></p>"},{"location":"GE/#erklarung_31","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<p>Die Aufforderung <code>int()</code> funktioniert gut in Python 3.10.6 und gibt einen ValueError in Python 3.10.8 aus. Beachte, dass Python auch mit gro\u00dfen ganzen Zahlen arbeiten kann. Der Fehler tritt nur auf, wenn du zwischen Integern und Strings konvertiert wird.</p> <p>Gl\u00fccklicherweise kannst du den Grenzwert f\u00fcr die zul\u00e4ssige Anzahl von Ziffern erh\u00f6hen, wenn du erwartest, dass ein Vorgang diesen Grenzwert \u00fcberschreitet. Um das zu tun, kannst du folgendes benutzen: - Das -X int_max_str_digits command-line flag - Die set_int_max_str_digits() Funktion vom sys-modul - Die PYTHONINTMAXSTRDIGITS Umgebungsvariable</p> <p>Check die Dokumentation f\u00fcr mehr Details \u00fcber das Ver\u00e4ndern des Default-Limits, wenn du erwartest, dass dein Code diesen Wert \u00fcbersteigt.</p>"},{"location":"GE/#kapitel-slippery-slopes","title":"Kapitel: Slippery Slopes","text":""},{"location":"GE/#modifizieren-eines-dictionarys-wahrend-einer-iteration","title":"\u25b6 Modifizieren eines Dictionarys w\u00e4hrend einer Iteration","text":"<pre><code>x = {0: None}\n\nfor i in x:\n    del x[i]\n    x[i+1] = None\n    print(i)\n</code></pre> <p>Ausgabe (Python 2.7- Python 3.5):</p> <pre><code>0\n1\n2\n3\n4\n5\n6\n7\n</code></pre> <p>Ja, es l\u00e4uft exakt acht mal und stoppt dann.</p>"},{"location":"GE/#erklarung_32","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Iteration \u00fcber ein Dictionary, welches du zur selben Zeit modifizierst, wird nicht unterst\u00fctzt.</li> <li>Es l\u00e4uft acht Mal, weil sich die Gr\u00f6\u00dfe des Dictionary an diesem Punkt \u00e4ndert, um mehr Schl\u00fcssel beherbergen zu k\u00f6nnen (wir haben acht L\u00f6scheintr\u00e4ge, daher ist eine Gr\u00f6\u00dfen\u00e4nderung n\u00f6tig). Das ist tats\u00e4chlich ein Implementierungsdetail.</li> <li>Wie gel\u00f6schte Schl\u00fcssel gehandhabt werden und wann eine Gr\u00f6\u00dfen\u00e4nderung erfolgt, kann sich je nach Python-Implementierung unterscheiden.</li> <li>Daher mag sich die Anzahl f\u00fcr andere Python-Versionen, als f\u00fcr 2.7 - 3.5, von 8 unterscheiden (aber wie die Anzahl auch sein mag, sie wird bei jedem Programmdurchlauf gleich bleiben). Du kannst ein paar Diskussionen rund um das Thema hier oder in diesem StackOverflow thread finden.</li> <li>Ab Python 3.7.6 wirst du eine <code>RuntimeError: dictionary keys changed during iteration</code> Exception sehen, wenn du so etwas versuchst.</li> </ul>"},{"location":"GE/#hartnackige-del-operation","title":"\u25b6 Hartn\u00e4ckige <code>del</code> Operation","text":"<pre><code>class SomeClass:\n    def __del__(self):\n        print(\"Deleted!\")\n</code></pre> <p>Ausgabe: 1. <pre><code>&gt;&gt;&gt; x = SomeClass()\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; del x # das sollte \"Deleted!\" ausgeben\n&gt;&gt;&gt; del y\nDeleted!\n</code></pre></p> <p>Endlich wird deleted ausgegeben. Vielleicht erahnst du schon schon, warum <code>__del__</code> nicht schon bei unserem ersten Versuch, <code>x</code> zu l\u00f6schen, aufgerufen wurde. Erg\u00e4nzen wir das Beispiel um weitere Aspekte</p> <p>2. <pre><code>&gt;&gt;&gt; x = SomeClass()\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; del x\n&gt;&gt;&gt; y # check, ob y existiert\n&lt;__main__.SomeClass instance at 0x7f98a1a67fc8&gt;\n&gt;&gt;&gt; del y # Wie vorher sollte das \"Deleted!\" ausgeben\n&gt;&gt;&gt; globals() # oh, das hat es nicht. Lass uns alle globalen Variablen checken und das best\u00e4tigen\nDeleted!\n{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'SomeClass': &lt;class __main__.SomeClass at 0x7f98a1a5f668&gt;, '__package__': None, '__name__': '__main__', '__doc__': None}\n</code></pre></p> <p>Okay, jetzt ist es gel\u00f6scht :confused:</p>"},{"location":"GE/#erklarung_33","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li><code>del x</code> ruft nicht direkt <code>x.__del__()</code> auf.</li> <li>Wenn auf <code>del x</code> gesto\u00dfen wird, dann l\u00f6scht Python den Namen <code>x</code> vom momentanen Scope und dekrementiert den Referenz-Counter des Objektes, welches <code>x</code> referenziert, um 1. <code>__del__()</code> wird nur aufgerufen, wenn der Referenz-Counter des Objektes 0 erreicht.</li> <li>Im zweiten Ausgabe-Schnipsel wurde <code>__del__()</code> nicht aufgerufen, weil die vorherige Anweisung (<code>&gt;&gt;&gt; y</code>) im interaktiven Interpreter eine neue Referenz zum selben Objekt erzeugt hat (spezifisch die magische Variable <code>_</code>, welche das Ergebnis des letzten, nicht-<code>None</code> Ausdrucks der REPL referenziert), und daher den Referenz-Counter davon abh\u00e4lt, die 0 zu erreichen, wenn <code>del y</code> gelesen wurde.</li> <li>Mit dem Aufruf von <code>globals</code> (oder irgendetwas, dass kein Ergebnis hat, dass <code>None</code> ist) wurde <code>_</code> angewiesen, dass neue Ergebnis zu referenzieren, wodurch die bestehende Referenz fallen gelassen wurde. Nun hat der Referenz-Counter 0 erreicht und wir k\u00f6nnen sehen, dass \"Deleted!\" ausgegeben wurde (Endlich!)</li> </ul>"},{"location":"GE/#die-variable-aus-dem-aueren-geltungsbereich","title":"\u25b6 Die Variable aus dem \u00e4u\u00dferen Geltungsbereich","text":"<p>1. <pre><code>a = 1\ndef some_func():\n    return a\n\ndef another_func():\n    a += 1\n    return a\n</code></pre></p> <p>2. <pre><code>def some_closure_func():\n    a = 1\n    def some_inner_func():\n        return a\n    return some_inner_func()\n\ndef another_closure_func():\n    a = 1\n    def another_inner_func():\n        a += 1\n        return a\n    return another_inner_func()\n</code></pre></p> <p>Ausgabe: <pre><code>&gt;&gt;&gt; some_func()\n1\n&gt;&gt;&gt; another_func()\nUnboundLocalError: local variable 'a' referenced before assignment\n\n&gt;&gt;&gt; some_closure_func()\n1\n&gt;&gt;&gt; another_closure_func()\nUnboundLocalError: local variable 'a' referenced before assignment\n</code></pre></p>"},{"location":"GE/#erklarung_34","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Wenn du eine einer Variablen in einem Scope etwas zuweist, dann wird das f\u00fcr diesen Scope lokal. Also wird <code>a</code> lokal f\u00fcr den Scope von <code>another_func</code>, aber es wurde vorher nicht im selben Scope initialisiert, was einen Fehler wirft.</li> <li>Um die Outer-Scope-Variable <code>a</code> in <code>another_func</code> zu modifizieren, m\u00fcssen wir das <code>global</code> Schl\u00fcsselwort verwenden.   <pre><code>def another_func()\n    global a\n    a += 1\n    return a\n</code></pre></li> </ul> <p>Ausgabe: <pre><code>&gt;&gt;&gt; another_func()\n2\n</code></pre> * In <code>another_closure_func</code> wird <code>a</code> f\u00fcr den Scope von <code>another_inner_func</code> lokal, aber es wurde vorher nicht im selben Scope initialisiert, was der Grund f\u00fcr den Fehler ist. * Um die Outer-Scope-Variable <code>a</code> in <code>another_inner_func</code> zu modifizieren, brauchen wir das <code>nonlocal</code> Schl\u00fcsselwort. Die nonlocal-Anweisung bezieht sich auf Variablen, die im n\u00e4chstgelegenen \u00e4u\u00dferen Scope (globaler exkludiert) definiert wurden.   <pre><code>def another_func():\n    a = 1\n    def another_inner_func():\n        nonlocal a\n        a += 1\n        return a\n    return another_inner_func()\n</code></pre></p> <p>Ausgabe: <pre><code>&gt;&gt;&gt; another_func()\n2\n</code></pre> * Die Schl\u00fcsselw\u00f6rter <code>global</code> und <code>nonlocal</code> teilen dem Python Interpreter mit, keine neuen Variablen zu deklarieren und diese im entsprechenden \u00e4u\u00dferen Scope nachzuschlagen. * Lies diesen kurzen, aber tollen Artikel durch, der ein super Leitfaden ist, um mehr \u00fcber Namespaces und Scope-Aufl\u00f6sung in Python zu lernen. </p>"},{"location":"GE/#loschen-eines-listenelements-wahrend-einer-iteration","title":"\u25b6 L\u00f6schen eines Listenelements w\u00e4hrend einer Iteration","text":"<pre><code>list_1 = [1, 2, 3, 4]\nlist_2 = [1, 2, 3, 4]\nlist_3 = [1, 2, 3, 4]\nlist_4 = [1, 2, 3, 4]\n\nfor idx, item in enumerate(list_1):\n    del item\n\nfor idx, item in enumerate(list_2):\n    list_2.remove(item)\n\nfor idx, item in enumerate(list_3[:]):\n    list_3.remove(item)\n\nfor idx, item in enumerate(list_4):\n    list_4.pop(idx)\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; list_1\n[1, 2, 3, 4]\n&gt;&gt;&gt; list_2\n[2, 4]\n&gt;&gt;&gt; list_3\n[]\n&gt;&gt;&gt; list_4\n[2, 4]\n</code></pre></p> <p>Kannst du erkl\u00e4ren, warum die Ausgabe <code>[2, 4]</code> ist?</p>"},{"location":"GE/#erklarung_35","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li> <p>Es ist nie eine gute Idee ein Objekt zu ver\u00e4ndern, wor\u00fcber du gerade iterierst. Korrekt w\u00e4re es stattdessen \u00fcber eine Kopie des Objektes zu iterieren, und <code>list_3[:]</code> tut genau das.</p> <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4]\n&gt;&gt;&gt; id(some_list)\n139798789457608\n&gt;&gt;&gt; id(some_list[:]) # Beachte, dass Python ein neues Objekt f\u00fcr geslicte Listen baut.\n139798779601192\n</code></pre> </li> </ul> <p>Unterschied zwischen <code>del</code>, <code>remove</code>, und <code>pop</code>: * <code>del var_name</code> entfernt nur die Bindung von <code>var_name</code> vom lokalen oder globalen Namespace (Deshalb ist <code>list_1</code> davon nicht betroffen). * <code>remove</code> entfernt den ersten Wert, der \u00fcbereinstimmt, keinen spezifischen Index, und wirft einen <code>ValueError</code>, wenn der Wert nicht gefunden werden konnte. * <code>pop</code> entfernt ein Element am angegebenen Index und gibt dieses zur\u00fcck und wirft einen <code>IndexError</code>, wenn ein falscher Index angegeben wurde.</p> <p>Warum ist die Ausgabe <code>[2, 4]</code>? - Die Listeniteration wird \u00fcber den Index ausgef\u00fchrt und wenn wir <code>1</code> von <code>list_2</code> oder <code>list_4</code> entfernen, ist der Inhalt der Listen nun <code>[2, 3, 4]</code>. Die verbliebenen Elemente werden heruntergeschoben, d.h.., <code>2</code> ist am Index 0, und <code>3</code> ist am Index 1. Da die n\u00e4chste Iteration an Index 1 nachsehen wird (wo <code>3</code> steht), wird die <code>2</code> komplett \u00fcbersprungen. \u00c4hnliches wird anderen Element in einer Listensequenz passieren.</p> <ul> <li>Ich verweise auf diesen StackOverflow thread, welches das Beispiel erkl\u00e4rt</li> <li>Siehe auch diesen sch\u00f6nen StackOverflow thread f\u00fcr ein \u00e4hnliches Beispiel im Bezug auf Dictionaries in Python.</li> </ul>"},{"location":"GE/#lossy-zips-von-iteratoren","title":"\u25b6 Lossy Zips von Iteratoren *","text":"<p><pre><code>&gt;&gt;&gt; numbers = list(range(7))\n&gt;&gt;&gt; numbers\n[0, 1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; first_three, remaining = numbers[:3], numbers[3:]\n&gt;&gt;&gt; first_three, remaining\n([0, 1, 2], [3, 4, 5, 6])\n&gt;&gt;&gt; numbers_iter = iter(numbers)\n&gt;&gt;&gt; list(zip(numbers_iter, first_three)) \n[(0, 0), (1, 1), (2, 2)]\n# so weit, so gut, lass uns den Rest zippen\n&gt;&gt;&gt; list(zip(numbers_iter, remaining))\n[(4, 3), (5, 4), (6, 5)]\n</code></pre> Wo ist das Element <code>3</code> von der Liste <code>numbers</code> hin?</p>"},{"location":"GE/#erklarung_36","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Von der Python-Dokumentation, hier ist eine ungef\u00e4hre Implementierung der zip-Funktion:     <pre><code>def zip(*iterables):\n    sentinel = object()\n    iterators = [iter(it) for it in iterables]\n    while iterators:\n        result = []\n        for it in iterators:\n            elem = next(it, sentinel)\n            if elem is sentinel: return\n            result.append(elem)\n        yield tuple(result)\n</code></pre></li> <li>Die Funktion nimmt also beliebige Zahlen von Iterable-Objekten, f\u00fcgt jedes ihrer Elemente der Liste <code>result</code> hinzu, indem es die Funktion <code>next</code> auf ihnen aufruft, und stoppt immer dann, wenn einer der Iterables aufgebraucht ist. </li> <li>Die Einschr\u00e4nkung liegt hier darin, dass wenn ein Iterable aufgebraucht ist, die verbleibenden Elemente in der <code>result</code> Liste verworfen werden. Das ist mit der <code>3</code> in <code>numbers_iter</code> passiert.</li> <li>Die korrekte Vorgehensweise mit <code>zip</code> f\u00fcr das obige s\u00e4he wie folgt aus:     <pre><code>&gt;&gt;&gt; numbers = list(range(7))\n&gt;&gt;&gt; numbers_iter = iter(numbers)\n&gt;&gt;&gt; list(zip(first_three, numbers_iter))\n[(0, 0), (1, 1), (2, 2)]\n&gt;&gt;&gt; list(zip(remaining, numbers_iter))\n[(3, 3), (4, 4), (5, 5), (6, 6)]\n</code></pre>     Das erste Argument von zip sollte das mit der geringsten Anzahl an Elementen sein.</li> </ul>"},{"location":"GE/#schleifenvariablen-die-auslaufen","title":"\u25b6 Schleifenvariablen, die auslaufen!","text":"<p>1. <pre><code>for x in range(7):\n    if x == 6:\n        print(x, ': for x inside loop')\nprint(x, ': x in global')\n</code></pre></p> <p>Ausgabe: <pre><code>6 : for x inside loop\n6 : x in global\n</code></pre></p> <p>Aber <code>x</code> wurde nie au\u00dferhalb des Scopes der for-Schleife definiert...</p> <p>2. <pre><code># Las uns dieses Mal x zuerst initialisieren\nx = -1\nfor x in range(7):\n    if x == 6:\n        print(x, ': for x inside loop')\nprint(x, ': x in global')\n</code></pre></p> <p>Ausgabe: <pre><code>6 : for x inside loop\n6 : x in global\n</code></pre></p> <p>3.</p> <p>Ausgabe (Python 2.x): <pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; print([x for x in range(5)])\n[0, 1, 2, 3, 4]\n&gt;&gt;&gt; print(x)\n4\n</code></pre></p> <p>Ausgabe (Python 3.x): <pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; print([x for x in range(5)])\n[0, 1, 2, 3, 4]\n&gt;&gt;&gt; print(x)\n1\n</code></pre></p>"},{"location":"GE/#erklarung_37","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li> <p>In Python benutzen for-Schleifen den Scope, in dem sie existieren und lassen ihre definierte Schleifenvariable zur\u00fcck. Das passiert auch, wenn wir diese Variable vorher im globalen Namespace definieren. In diesem Fall wird die bestehende Variable neu gebunden.</p> </li> <li> <p>Die Unterschiede in der Ausgabe des Python 2.x und Python 3.x Interpreters f\u00fcr List-Comprehensions k\u00f6nnen durch die folgende \u00c4nderung erkl\u00e4rt werden, welche im What\u2019s New In Python 3.0 Changelog dokumentiert wurde:</p> <p>\"List-Comprehensions unterst\u00fctzen nicht l\u00e4nger die syntaktische Form <code>[... for var in item1, item2, ...]</code>. Benutze <code>[... for var in (item1, item2, ...)]</code> stattdessen. Beachte zudem, dass List-Comprehensions eine andere Semantik haben: sie sind eher syntaktischer Zucker f\u00fcr einen Generator-Ausdruck innerhalb eines <code>list()</code>-Konstruktors und insbesondere werden die Steuervariablen der Schleife nicht mehr in den umgebenden Scope geleakt.\"</p> </li> </ul>"},{"location":"GE/#vorsicht-vor-standardmaig-veranderbaren-argumenten","title":"\u25b6 Vorsicht vor standardm\u00e4\u00dfig ver\u00e4nderbaren Argumenten!","text":"<pre><code>def some_func(default_arg=[]):\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; some_func()\n['some_string']\n&gt;&gt;&gt; some_func()\n['some_string', 'some_string']\n&gt;&gt;&gt; some_func([])\n['some_string']\n&gt;&gt;&gt; some_func()\n['some_string', 'some_string', 'some_string']\n</code></pre></p>"},{"location":"GE/#erklarung_38","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li> <p>Die vorgegebenen ver\u00e4nderbaren Argumente von Funktionen in Python werden nicht wirklich jedes Mal, wenn du die Funktion aufrufst, initialisiert. Stattdessen wird der zuletzt zugewiesene Wert als default genommen. Als wir explizit <code>[]</code> an <code>some_func</code> als Argument \u00fcbergeben haben, dann wurde der default-Wert der <code>default_arg</code>-Variable nicht benutzt, also hat die Funktion das zur\u00fcckgegeben, was wir erwartet hatten.</p> <pre><code>def some_func(default_arg=[]):\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; some_func.__defaults__ #Das zeigt die default-Werte der Argumente f\u00fcr die Funktion\n([],)\n&gt;&gt;&gt; some_func()\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string'],)\n&gt;&gt;&gt; some_func()\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string', 'some_string'],)\n&gt;&gt;&gt; some_func([])\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string', 'some_string'],)\n</code></pre></p> </li> <li> <p>Eine typische Vorgehensweise um Fehler, ausgel\u00f6st durch ver\u00e4nderbare Argumente, zu verhindern ist es, <code>None</code> dem default-Wert zuzuweisen und sp\u00e4ter zu \u00fcberpr\u00fcfen, ob irgendein Wert an die Funktion \u00fcbergeben wird, der diesem Argument entspricht. Beispiel:</p> <pre><code>def some_func(default_arg=None):\n    if default_arg is None:\n        default_arg = []\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> </li> </ul>"},{"location":"GE/#fangen-der-exceptions","title":"\u25b6 Fangen der Exceptions","text":"<pre><code>some_list = [1, 2, 3]\ntry:\n    # Das sollte einen ``IndexError`` werfen\n    print(some_list[4])\nexcept IndexError, ValueError:\n    print(\"Caught!\")\n\ntry:\n    # Das sollte einen ``ValueError`` werfen\n    some_list.remove(4)\nexcept IndexError, ValueError:\n    print(\"Caught again!\")\n</code></pre> <p>Ausgabe (Python 2.x): <pre><code>Caught!\n\nValueError: list.remove(x): x not in list\n</code></pre></p> <p>Ausgabe (Python 3.x): <pre><code>  File \"&lt;input&gt;\", line 3\n    except IndexError, ValueError:\n                     ^\nSyntaxError: invalid syntax\n</code></pre></p>"},{"location":"GE/#erklarung_39","title":"\ud83d\udca1 Erkl\u00e4rung","text":"<ul> <li>Um mehrere Exceptions der except-Klausel hinzuzuf\u00fcgen, musst du diese als Tupel mit Klammern und als erstes Argument \u00fcbergeben. Das zweite Argument ist ein optionaler Name, der, wenn angegeben, die Exception-Instanz bindet, die geworfen wurde. Beispiel:</li> </ul> <p><pre><code>some_list = [1, 2, 3]\ntry:\n   # Das sollte einen ``ValueError`` werfen\n   some_list.remove(4)\nexcept (IndexError, ValueError), e:\n   print(\"Caught again!\")\n   print(e)\n</code></pre> Ausgabe (Python 2.x): <pre><code>Caught again!\nlist.remove(x): x not in list\n</code></pre> Ausgabe (Python 3.x): <pre><code>  File \"&lt;input&gt;\", line 4\n    except (IndexError, ValueError), e:\n                                     ^\nIndentationError: unindent does not match any outer indentation level\n</code></pre></p> <ul> <li>Die Exceptions und die Variable mit einem Komma zu trennen ist veraltet und funktioniert in Python 3 nicht mehr; der korrekte Weg w\u00e4re <code>as</code> zu benutzen. Beispiel:   <pre><code>some_list = [1, 2, 3]\ntry:\n    some_list.remove(4)\n\nexcept (IndexError, ValueError) as e:\n    print(\"Caught again!\")\n    print(e)\n</code></pre> Ausgabe: <pre><code>Caught again!\nlist.remove(x): x not in list\n</code></pre></li> </ul>"},{"location":"GE/#gleiche-operanden-unterschiedliche-story","title":"\u25b6 Gleiche Operanden, unterschiedliche Story!","text":"<p>1. <pre><code>a = [1, 2, 3, 4]\nb = a\na = a + [5, 6, 7, 8]\n</code></pre></p> <p>Ausgabe: <pre><code>&gt;&gt;&gt; a\n[1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; b\n[1, 2, 3, 4]\n</code></pre></p> <p>2. <pre><code>a = [1, 2, 3, 4]\nb = a\na += [5, 6, 7, 8]\n</code></pre></p> <p>Ausgabe: <pre><code>&gt;&gt;&gt; a\n[1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; b\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre></p>"},{"location":"GE/#erklarung_40","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li> <p><code>a += b</code> verh\u00e4lt sich nicht immer wie <code>a = a + b</code>. Klassen k\u00f6nnen die <code>op=</code> Operatoren unterschiedlich implementieren und Listen tun das.</p> </li> <li> <p>Der Ausdruck <code>a = a + [5,6,7,8]</code> generiert eine neue Liste und setzt <code>a</code>s Referenz auf diese neue Liste, wodurch <code>b</code> unver\u00e4ndert bleibt.</p> </li> <li> <p>Der Ausdruck <code>a += [5,6,7,8]</code> wird tats\u00e4chlich zu einer \"extend\"-Funktion gemapped wird, die auf der Liste arbeitet, sodass <code>a</code> und <code>b</code> immer noch auf dieselbe Liste zeigen, die in-place modifiziert wurde.</p> </li> </ul>"},{"location":"GE/#namensauflosung-ohne-berucksichtigung-des-geltungsbereichs-der-klasse","title":"\u25b6 Namensaufl\u00f6sung ohne Ber\u00fccksichtigung des Geltungsbereichs der Klasse","text":"<p>1. <pre><code>x = 5\nclass SomeClass:\n    x = 17\n    y = (x for i in range(10))\n</code></pre></p> <p>Ausgabe: <pre><code>&gt;&gt;&gt; list(SomeClass.y)[0]\n5\n</code></pre></p> <p>2. <pre><code>x = 5\nclass SomeClass:\n    x = 17\n    y = [x for i in range(10)]\n</code></pre></p> <p>Ausgabe (Python 2.x): <pre><code>&gt;&gt;&gt; SomeClass.y[0]\n17\n</code></pre></p> <p>Ausgabe (Python 3.x): <pre><code>&gt;&gt;&gt; SomeClass.y[0]\n5\n</code></pre></p>"},{"location":"GE/#erklarung_41","title":"\ud83d\udca1 Erkl\u00e4rung","text":"<ul> <li>Innerhalb der Klassendefinition verschachtelte Scopes ignorieren die auf Klassenebene gebundenen Namen.</li> <li>Ein Generator-Ausdruck hat seinen eigenen Scope.</li> <li>Ausgehend von Python 3.X haben List Comprehensions auch ihren eigenen Scope.</li> </ul>"},{"location":"GE/#runden-wie-ein-bankier","title":"\u25b6 Runden wie ein Bankier *","text":"<p>Lass uns eine naive Funktion implementieren, um das mittlere Element einer Liste zu bekommen: <pre><code>def get_middle(some_list):\n    mid_index = round(len(some_list) / 2)\n    return some_list[mid_index - 1]\n</code></pre></p> <p>Python 3.x: <pre><code>&gt;&gt;&gt; get_middle([1])  # sieht gut aus\n1\n&gt;&gt;&gt; get_middle([1,2,3])  # sieht gut aus\n2\n&gt;&gt;&gt; get_middle([1,2,3,4,5])  # huh?\n2\n&gt;&gt;&gt; len([1,2,3,4,5]) / 2  # gut\n2.5\n&gt;&gt;&gt; round(len([1,2,3,4,5]) / 2)  # Warum?\n2\n</code></pre> Sieht so aus, als ob Python 2.5 zu 2 rundet.</p>"},{"location":"GE/#erklarung_42","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Das ist kein Gleitkommafehler, denn faktisch ist dieses Verhalten Absicht. Seit Python 3.0 benutzt <code>round()</code> banker's rounding, wodurch 0,5er-Br\u00fcche auf die n\u00e4chste gerade Zahl gerundet werden:</li> </ul> <pre><code>&gt;&gt;&gt; round(0.5)\n0\n&gt;&gt;&gt; round(1.5)\n2\n&gt;&gt;&gt; round(2.5)\n2\n&gt;&gt;&gt; import numpy  # numpy tut dasselbe\n&gt;&gt;&gt; numpy.round(0.5)\n0.0\n&gt;&gt;&gt; numpy.round(1.5)\n2.0\n&gt;&gt;&gt; numpy.round(2.5)\n2.0\n</code></pre> <ul> <li>Das ist der empfohlene Weg um 0,5er-Br\u00fcche zu runden, wie es auch in IEEE 754 beschrieben wurde. Allerdings wird in der Schule meist die andere Methode (von Null abrunden) gelehrt, so dass banker's rounding wahrscheinlich nicht so bekannt ist. Au\u00dferdem benutzen manche der popul\u00e4rsten Programmiersprachen (zum Beispiel: JavaScript, Java, C/C++, Ruby, Rust) nicht das banker's rounding. Daher ist das ziemlich besonders f\u00fcr Python und kann zu Verwirrung beim runden von Br\u00fcchen f\u00fchren.</li> <li>Sieh dir die round() docs oder diesen stackoverflow thread, um mehr Informationen zu bekommen.</li> <li>Beachte, dass <code>get_middle([1])</code> nur 1 zur\u00fcckgegeben hat, weil der Index <code>round(0.5) - 1 = 0 - 1 = -1</code> war, wodurch das letzte Element in der Liste zur\u00fcckgibt.</li> </ul>"},{"location":"GE/#nadeln-im-heuhaufen","title":"\u25b6 Nadeln im Heuhaufen *","text":"<p>Ich habe bis heute keinen einzigen erfahrenen Pythonisten getroffen, der nicht auf eines oder mehrere der folgenden Szenarien gesto\u00dfen ist:</p> <p>1.</p> <pre><code>x, y = (0, 1) if True else None, None\n</code></pre> <p>Ausgabe:</p> <pre><code>&gt;&gt;&gt; x, y  # erwartet: (0, 1)\n((0, 1), None)\n</code></pre> <p>2.</p> <pre><code>t = ('one', 'two')\nfor i in t:\n    print(i)\n\nt = ('one')\nfor i in t:\n    print(i)\n\nt = ()\nprint(t)\n</code></pre> <p>Ausgabe:</p> <pre><code>one\ntwo\no\nn\ne\ntuple()\n</code></pre> <p>3.</p> <pre><code>ten_words_list = [\n    \"some\",\n    \"very\",\n    \"big\",\n    \"list\",\n    \"that\"\n    \"consists\",\n    \"of\",\n    \"exactly\",\n    \"ten\",\n    \"words\"\n]\n</code></pre> <p>Ausgabe</p> <pre><code>&gt;&gt;&gt; len(ten_words_list)\n9\n</code></pre> <p>4. Not asserting strongly enough</p> <pre><code>a = \"python\"\nb = \"javascript\"\n</code></pre> <p>Ausgabe:</p> <pre><code># Eine assert-Anweisung mit einer assertion-Fehlermeldung.\n&gt;&gt;&gt; assert(a == b, \"Both languages are different\")\n# Kein AssertionError wurde geworfen\n</code></pre> <p>5.</p> <pre><code>some_list = [1, 2, 3]\nsome_dict = {\n  \"key_1\": 1,\n  \"key_2\": 2,\n  \"key_3\": 3\n}\n\nsome_list = some_list.append(4) \nsome_dict = some_dict.update({\"key_4\": 4})\n</code></pre> <p>Ausgabe:</p> <pre><code>&gt;&gt;&gt; print(some_list)\nNone\n&gt;&gt;&gt; print(some_dict)\nNone\n</code></pre> <p>6.</p> <pre><code>def some_recursive_func(a):\n    if a[0] == 0:\n        return\n    a[0] -= 1\n    some_recursive_func(a)\n    return a\n\ndef similar_recursive_func(a):\n    if a == 0:\n        return a\n    a -= 1\n    similar_recursive_func(a)\n    return a\n</code></pre> <p>Ausgabe:</p> <pre><code>&gt;&gt;&gt; some_recursive_func([5, 0])\n[0, 0]\n&gt;&gt;&gt; similar_recursive_func(5)\n4\n</code></pre>"},{"location":"GE/#erklarung_43","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li> <p>F\u00fcr 1 w\u00e4re die korrekte Anweisung f\u00fcr das erwartete Verhalten <code>x, y = (0, 1) if True else (None, None)</code>.</p> </li> <li> <p>F\u00fcr 2 w\u00e4re die korrekte Anweisung f\u00fcr das erwartete Verhalten <code>t = ('one',)</code> oder <code>t = 'one',</code> (fehlendes Komma) andernfalls wird der Interpreter <code>t</code> als ein <code>str</code> betrachten und iteriert Character f\u00fcr Character \u00fcber es.</p> </li> <li> <p><code>()</code> ist ein spezielles Token und bezeichnet ein leeres <code>tuple</code>.</p> </li> <li> <p>In 3, wie du vielleicht schon mitbekommen hast, fehlt ein Komma nach dem f\u00fcnften Element (<code>\"that\"</code>) in der Liste. Also bei implizierter String-Literal-Konkatenation:</p> </li> </ul> <pre><code>&gt;&gt;&gt; ten_words_list\n['some', 'very', 'big', 'list', 'thatconsists', 'of', 'exactly', 'ten', 'words']\n</code></pre> <ul> <li>Es wurde kein <code>AssertionError</code> im 4.ten Schnipsel geworfen, weil wir statt den individuellen Ausdruck <code>a == b</code> zu asserten, das ganze Tupel asserten. Der folgende Schnipsel wird die Dinge klarer werden lassen:</li> </ul> <pre><code>&gt;&gt;&gt; a = \"python\"\n&gt;&gt;&gt; b = \"javascript\"\n&gt;&gt;&gt; assert a == b\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n\n&gt;&gt;&gt; assert (a == b, \"Values are not equal\")\n&lt;stdin&gt;:1: SyntaxWarning: assertion is always true, perhaps remove parentheses?\n\n&gt;&gt;&gt; assert a == b, \"Values are not equal\"\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError: Values are not equal\n</code></pre> <ul> <li> <p>Was den f\u00fcnften Schnipsel betrifft, so modifizieren die meisten Methoden, die die Elemente von Sequenzen/Mapping-Objekten modifizieren, wie <code>list.append</code>, <code>dict.update</code>, <code>list.sort</code>, die Objekte in-place und geben <code>None</code> zur\u00fcck. Der Grund daf\u00fcr ist eine Leistungsverbesserung, indem die Erstellung einer Kopie vermieden wird, wenn die Operation in-place ausgef\u00fchrt werden kann (Verweis nach hier).</p> </li> <li> <p>Das letzte sollte ziemlich offensichtlich sein. Ein ver\u00e4nderliches Objekt (wie <code>list</code>) kann in der Funktion ge\u00e4ndert werden und die Neuzuweisung eines unver\u00e4nderlichen Wertes (<code>a -= 1</code>) ist keine \u00c4nderung des WErtes</p> </li> <li> <p>Wenn du dir dieser Kleinigkeiten bewusst bist, dann kannst du dir auf lange Sicht stundenlanges Debugging sparen. </p> </li> </ul>"},{"location":"GE/#splitsies","title":"\u25b6 Splitsies *","text":"<pre><code>&gt;&gt;&gt; 'a'.split()\n['a']\n\n# ist dasselbe wie\n&gt;&gt;&gt; 'a'.split(' ')\n['a']\n\n# aber\n&gt;&gt;&gt; len(''.split())\n0\n\n# ist nicht dasselbe wie\n&gt;&gt;&gt; len(''.split(' '))\n1\n</code></pre>"},{"location":"GE/#erklarung_44","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Auf den ersten Blick sieht es so aus, als w\u00e4re das Standardtrennzeichen f\u00fcr split ein einzelnes Leerzeichen <code>' '</code>, aber der Dokumentation zufolge     &gt;  Wenn ein Separator nicht angegeben oder <code>None</code> ist, dann wird ein anderer Splitting-Algorithmus angewendet: aufeinanderfolgende Leerzeichen werden als ein einziges Trennzeichen betrachtet, und das Ergebnis enth\u00e4lt keine leeren Strings am Anfang oder Ende, wenn der String f\u00fchrende oder nachfolgende Leerzeichen enth\u00e4lt. Folglich gibt das Splitten eines leeren Strings oder eines Strings, der nur ein Leerzeichen enth\u00e4lt, mit einen None-Separator <code>[]</code> zur\u00fcck.     &gt; Wenn ein Separator gegeben ist,Aufeinanderfolgende Begrenzungszeichen werden nicht zusammengefasst und gelten als Begrenzung leerer Strings. (zum Beispiel, <code>'1,,2'.split(',')</code> gibt <code>['1', '', '2']</code> zur\u00fcck). Einen leeren String mit einem angegebenen Separator zu splitten gibt <code>['']</code> zur\u00fcck.</li> <li>Wenn du dir ansiehst, wie die f\u00fchrenden und nachfolgenden Leerzeichen im folgenden Schnipsel gehandhabt werden, wird die Sache klarer:     <pre><code>&gt;&gt;&gt; ' a '.split(' ')\n['', 'a', '']\n&gt;&gt;&gt; ' a '.split()\n['a']\n&gt;&gt;&gt; ''.split(' ')\n['']\n</code></pre></li> </ul>"},{"location":"GE/#wilde-imports","title":"\u25b6 Wilde Imports *","text":"<pre><code># Datei: module.py\n\ndef some_weird_name_func_():\n    print(\"works!\")\n\ndef _another_weird_name_func():\n    print(\"works!\")\n</code></pre> <p>Ausgabe</p> <pre><code>&gt;&gt;&gt; from module import *\n&gt;&gt;&gt; some_weird_name_func_()\n\"works!\"\n&gt;&gt;&gt; _another_weird_name_func()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name '_another_weird_name_func' is not defined\n</code></pre>"},{"location":"GE/#erklarung_45","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Es ist oft ratsam, keine Wildcard-Importe zu verwenden. Der erste offensichtliche Grund daf\u00fcr ist, dass bei Wildcard-Importen die Namen mit einem f\u00fchrenden Unterstrich nicht importiert werden. Das kann zu Fehlern w\u00e4hrend der Laufzeit f\u00fchren.</li> <li>H\u00e4tten wir diese <code>from ... import a, b, c</code> Syntax benutzt, w\u00e4re der obige <code>NameError</code> nicht aufgetreten.     <pre><code>&gt;&gt;&gt; from module import some_weird_name_func_, _another_weird_name_func\n&gt;&gt;&gt; _another_weird_name_func()\nworks!\n</code></pre></li> <li> <p>Wenn du wirklich Wildcard-Importe verwenden willst, musst du in deinem Modul die Liste <code>__all__</code> definieren, die eine Liste der \u00f6ffentlichen Objekte enth\u00e4lt, die bei Wildcard-Importen zur Verf\u00fcgung stehen werden.     <pre><code>__all__ = ['_another_weird_name_func']\n\ndef some_weird_name_func_():\n    print(\"works!\")\n\ndef _another_weird_name_func():\n    print(\"works!\")\n</code></pre> Ausgabe</p> <pre><code>&gt;&gt;&gt; _another_weird_name_func()\n\"works!\"\n&gt;&gt;&gt; some_weird_name_func_()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'some_weird_name_func_' is not defined\n</code></pre> </li> </ul>"},{"location":"GE/#alles-sortieren","title":"\u25b6  Alles sortieren ? *","text":"<pre><code>&gt;&gt;&gt; x = 7, 8, 9\n&gt;&gt;&gt; sorted(x) == x\nFalse\n&gt;&gt;&gt; sorted(x) == sorted(x)\nTrue\n\n&gt;&gt;&gt; y = reversed(x)\n&gt;&gt;&gt; sorted(y) == sorted(y)\nFalse\n</code></pre>"},{"location":"GE/#erklarung_46","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li> <p>Die <code>sorted</code> Methode gibt immer eine Liste zur\u00fcck, und das Vergleichen von Listen und Tupeln gibt in Python immer <code>False</code> zur\u00fcck. </p> </li> <li> <p>```py</p> <p>[] == tuple()   False x = 7, 8, 9 type(x), type(sorted(x))   (tuple, list)   ```</p> </li> <li> <p>Im Gegensatz zu <code>sorted</code>, gibt die <code>reversed</code> Methode einen Iterator zur\u00fcck. Warum? Weil Sortieren  vorraussetzt, dass der Iterator entweder in-place modifiziert wird oder einen extra Container (eine Liste) benutzt, w\u00e4hrend die Umkehrung einfach durch Iteration vom letzten Index zum ersten funktionieren kann.</p> </li> <li> <p>Also w\u00e4hrend des Vergleichs <code>sorted(y) == sorted(y)</code>, wird der erste Aufruf von <code>sorted()</code> den Iterator <code>y</code> konsumieren, und der n\u00e4chste Aufruf wird nur eine leere Liste zur\u00fcckgeben.</p> </li> </ul> <pre><code>&gt;&gt;&gt; x = 7, 8, 9\n&gt;&gt;&gt; y = reversed(x)\n&gt;&gt;&gt; sorted(y), sorted(y)\n([7, 8, 9], [])\n</code></pre>"},{"location":"GE/#mitternachtszeit-gibt-es-nicht","title":"\u25b6 Mitternachtszeit gibt es nicht ?","text":"<pre><code>from datetime import datetime\n\nmidnight = datetime(2018, 1, 1, 0, 0)\nmidnight_time = midnight.time()\n\nnoon = datetime(2018, 1, 1, 12, 0)\nnoon_time = noon.time()\n\nif midnight_time:\n    print(\"Time at midnight is\", midnight_time)\n\nif noon_time:\n    print(\"Time at noon is\", noon_time)\n</code></pre> <p>Ausgabe (&lt; 3.5):</p> <p><pre><code>('Time at noon is', datetime.time(12, 0))\n</code></pre> The midnight time is not printed.</p>"},{"location":"GE/#erklarung_47","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<p>Vor Python 3.5, wurde der boolesche Wert f\u00fcr das <code>datetime.time</code>-Objekt als <code>False</code> betrachtet, wenn wenn es Mitternacht in UTC dargestellt h\u00e4tte. Es ist fehleranf\u00e4llig, wenn die <code>if obj:</code>-Syntax verwendet wird, um zu pr\u00fcfen, ob <code>obj</code> null oder ein \u00c4quivalent von \"leer\" ist.</p>"},{"location":"GE/#-","title":"---","text":""},{"location":"GE/#kapitel-die-verborgenen-schatze","title":"Kapitel: Die verborgenen Sch\u00e4tze!","text":"<p>Dieser Abschnitt enth\u00e4lt ein paar weniger bekannte und interessante Dinge \u00fcber Python, die den meisten Anf\u00e4ngern wie mir nicht bekannt sind (nun aber schon).</p>"},{"location":"GE/#okay-python-kannst-du-mich-fliegen-lassen","title":"\u25b6 Okay Python, kannst du mich fliegen lassen?","text":"<p>Nun hier w\u00e4ren wir:</p> <pre><code>import antigravity\n</code></pre> <p>Ausgabe: Sshh... It's a super-secret.</p>"},{"location":"GE/#erklarung_48","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Das <code>antigravity</code> Modul ist eines der wenigen easter eggs, die von Python Entwicklern ver\u00f6ffentlicht werden.</li> <li><code>import antigravity</code> \u00f6ffnet deinen Webbrowser und zeigt zum klassischen XKCD Comic.</li> <li>Nun, es gibt noch mehr. Es gibt noch ein easter egg im easter egg. Wenn du dir den code anschaust, dann findest du eine Funktion, die die Ausf\u00fchrung des XKCDs Geohashing Algorithmus beabsichtigt.</li> </ul>"},{"location":"GE/#goto-aber-wieso","title":"\u25b6 <code>goto</code>, aber wieso?","text":"<pre><code>from goto import goto, label\nfor i in range(9):\n    for j in range(9):\n        for k in range(9):\n            print(\"I am trapped, please rescue!\")\n            if k == 2:\n                goto .breakout # Ausbrechen aus einer tief verschachtelten Schleife\nlabel .breakout\nprint(\"Freedom!\")\n</code></pre> <p>Ausgabe (Python 2.3): <pre><code>I am trapped, please rescue!\nI am trapped, please rescue!\nFreedom!\n</code></pre></p>"},{"location":"GE/#erklarung_49","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Eine funktionierende Version von <code>goto</code> in Python wurde als Aprilscherz am 1. April 2004 angek\u00fcndigt.</li> <li>Aktuelle Versionen von Python haben dieses Modul nicht.</li> <li>Auch wenn es funktioniert, benutze es bitte nicht. Hier ist die Antwort, warum <code>goto</code> in Python nicht verwendet wird.</li> </ul>"},{"location":"GE/#halte-dich-fest","title":"\u25b6 Halte dich fest!","text":"<p>Wenn du zu den Leuten geh\u00f6rst, die keine Leerzeichen in Python verwenden wollen, um Bereiche zu kennzeichnen, kannst du den C-Stil {} verwenden, indem du folgendes importierst:</p> <pre><code>from __future__ import braces\n</code></pre> <p>Ausgabe: <pre><code>  File \"some_file.py\", line 1\n    from __future__ import braces\nSyntaxError: not a chance\n</code></pre></p> <p>Klammern? Niemals! Wenn du entt\u00e4uscht bist, nutze Java. Okay, eine weitere \u00fcberraschende Sache, kannst du herausfinden, wo <code>SyntaxError</code> im <code>__future__</code> Mmodul geworfen wird code?</p>"},{"location":"GE/#erklarung_50","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Das <code>__future__</code> Modul wird normalerweise benutzt, um Features von zuk\u00fcnftigen Python Versionen bereitzustellen. Das \"future\" is in diesem spezifischen Kontext ironisch gemeint.</li> <li>Das ist ein easter egg die die Gef\u00fchle der Community in dieser Frage wiederspiegeln.</li> <li>Der Code ist tats\u00e4chlich hier in der Datei <code>future.c</code> verf\u00fcgbar.</li> <li>Wenn der CPython Compiler auf ein  future Statement trifft, wird zun\u00e4chst der entsprechende Code in <code>future.c</code> ausgef\u00fchrt, bevor es als normale Importanweisung behandelt wird.</li> </ul>"},{"location":"GE/#lets-meet-friendly-language-uncle-for-life","title":"\u25b6 Let's meet Friendly Language Uncle For Life","text":"<p>Ausgabe (Python 3.x) <pre><code>&gt;&gt;&gt; from __future__ import barry_as_FLUFL\n&gt;&gt;&gt; \"Ruby\" != \"Python\" # Hier bestehen keine Zweifel\n  File \"some_file.py\", line 1\n    \"Ruby\" != \"Python\"\n              ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; \"Ruby\" &lt;&gt; \"Python\"\nTrue\n</code></pre></p> <p>Das wars schon.</p>"},{"location":"GE/#erklarung_51","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<p>-Das ist relevant f\u00fcr PEP-401, was am 1. April 2009 ver\u00f6ffentlicht wurde (nun wei\u00dft du, was das hei\u00dft). - Zitat vom PEP-401</p> <p>Die FLUFL hat erkannt, dass der Ungleichheitsoperator != in Python 3.0 ein schrecklicher, fingerschmerzverursachender Fehler war, und f\u00fchrt den &lt;&gt; Diamantoperator als einzige Schreibweise wieder ein. - Es gab mehrere Dinge, die Onkel Barry im PEP teilte; du kannst das hier nachlesen. - Es funktioniert gut in einem Interactive Environment, aber es wirft einen <code>SyntaxError</code>, wenn du es in einer Python-Datei ausf\u00fchrst (siehe auch dieses issue). Du kannst jedoch die Anweisung innerhalb einer <code>eval</code> oder <code>compile</code> verpacken, um es zum Laufen zu bekommen:     <pre><code>from __future__ import barry_as_FLUFL\nprint(eval('\"Ruby\" &lt;&gt; \"Python\"'))\n</code></pre></p>"},{"location":"GE/#selbst-python-versteht-dass-liebe-kompliziert-ist","title":"\u25b6 Selbst Python versteht, dass Liebe kompliziert ist","text":"<pre><code>import this\n</code></pre> <p>Warte, was ist this? <code>this</code> ist love :heart:</p> <p>Ausgabe: <pre><code>Der Zen von Python, von Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code></pre></p> <p>Das ist der Zen von Python!</p> <pre><code>&gt;&gt;&gt; love = this\n&gt;&gt;&gt; this is love\nTrue\n&gt;&gt;&gt; love is True\nFalse\n&gt;&gt;&gt; love is False\nFalse\n&gt;&gt;&gt; love is not True or False\nTrue\n&gt;&gt;&gt; love is not True or False; love is love  # Liebe ist kompliziert\nTrue\n</code></pre>"},{"location":"GE/#erklarung_52","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Das <code>this</code> Modul in Python ist ein Easter Egg f\u00fcr den Zen von Python (PEP 20).</li> <li>Und wenn du denkst, dass das schon interessant genug ist, sieh dir die Implementierung von this.py an. Interessanterweise verst\u00f6\u00dft der Code f\u00fcr das Zen gegen sich selbst (und das ist wahrscheinlich der einzige Ort, an dem dies geschieht).</li> <li>Die Aussage <code>love is not True or False; love is love</code> ist ironisch, aber selbsterkl\u00e4rend (wenn nicht, sieh dir die Beispiele zu den <code>is</code> und <code>is not</code> Operatoren an).</li> </ul>"},{"location":"GE/#ja-es-existiert","title":"\u25b6 Ja, es existiert!","text":"<p>The <code>else</code> clause for loops. Ein typisches Beispiel w\u00e4re:</p> <pre><code>  def does_exists_num(l, to_find):\n      for num in l:\n          if num == to_find:\n              print(\"Exists!\")\n              break\n      else:\n          print(\"Does not exist\")\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; does_exists_num(some_list, 4)\nExists!\n&gt;&gt;&gt; does_exists_num(some_list, -1)\nDoes not exist\n</code></pre></p> <p>Die <code>else</code>-Klausel in der Behandlung von Exceptions. Ein Beispiel:</p> <pre><code>try:\n    pass\nexcept:\n    print(\"Exception occurred!!!\")\nelse:\n    print(\"Try block executed successfully...\")\n</code></pre> <p>Ausgabe: <pre><code>Try block executed successfully...\n</code></pre></p>"},{"location":"GE/#erklarung_53","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Die <code>else</code>-Klausel nach einer Schleife wird nur dann ausgef\u00fchrt, wenn es kein explizites <code>break</code> nach allen Iterationen gibt. Du kannst es dir als eine \"nobreak\"-Klausel vorstellen.</li> <li>Eine <code>else</code>-Klausel nach einem try-Block wird auch \"completion clause\" genannt, da wenn die <code>else</code>-Klausel in einer <code>try</code>-Anweisung erreicht wird, dies bedeutet, dass der try-Block tats\u00e4chlich komplett erfolgreich durchlief.</li> </ul>"},{"location":"GE/#ellipsen","title":"\u25b6 Ellipsen *","text":"<pre><code>def some_func():\n    Ellipsis\n</code></pre> <p>Ausgabe <pre><code>&gt;&gt;&gt; some_func()\n# Keine Ausgabe, Kein Fehler\n\n&gt;&gt;&gt; SomeRandomString\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'SomeRandomString' is not defined\n\n&gt;&gt;&gt; Ellipsis\nEllipsis\n</code></pre></p>"},{"location":"GE/#erklarung_54","title":"\ud83d\udca1 Erkl\u00e4rung","text":"<ul> <li>In Python ist <code>Ellipsis</code> ein global verf\u00fcgbares built-in Objekt, was \u00e4quivalent zu <code>...</code> ist.     <pre><code>&gt;&gt;&gt; ...\nEllipsis\n</code></pre></li> <li>Ellipsen k\u00f6nnen f\u00fcr verschiedene Dinge eingesetzt werden,<ul> <li>Als ein Platzhalter f\u00fcr Code, der noch nicht geschrieben wurde (wie auch die <code>pass</code>-Anweisung)</li> <li>In Slicing-Syntax, um die vollen Slices in der \u00fcbrigen Richtung zu repr\u00e4sentieren <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; three_dimensional_array = np.arange(8).reshape(2, 2, 2)\narray([\n    [\n        [0, 1],\n        [2, 3]\n    ],\n\n    [\n        [4, 5],\n        [6, 7]\n    ]\n])\n</code></pre> Also ist unser <code>three_dimensional_array</code> ein Array von Arrays von Arrays. Angenommen, wir wollen das zweite Element (index <code>1</code>) aller innersten Arrays ausgeben, dann k\u00f6nnen wir Ellipsis verwenden, um alle vorhergehenden Dimensionen zu umgehen <pre><code>&gt;&gt;&gt; three_dimensional_array[:,:,1]\narray([[1, 3],\n   [5, 7]])\n&gt;&gt;&gt; three_dimensional_array[..., 1] # Benutzen der Ellipsis.\narray([[1, 3],\n   [5, 7]])\n</code></pre> Beachte: dies funktioniert f\u00fcr eine beliebige Anzahl von Dimensionen. Auf diese Weise kannst du sogar die erste und letzte Dimension ausw\u00e4hlen und die mittleren ignorieren. (<code>n_dimensional_array[firs_dim_slice, ..., last_dim_slice]</code>)</li> <li>In type hinting um nur einen Teil des Typs anzugeben (wie <code>(Callable[..., int]</code> oder <code>Tuple[str, ...]</code>))</li> <li>Du kannst Ellipsis auch als default-Argument einer Funktion verwenden (in den F\u00e4llen, wo du zwischen den Szenarien \"no argument passed\" und \"None value passed\" unterscheiden willst).</li> </ul> </li> </ul>"},{"location":"GE/#einbindung","title":"\u25b6 Einbindung","text":"<p>Die Schreibweise ist beabsichtigt. Bitte schicke keinen Patch hierf\u00fcr ab.</p> <p>Ausgabe (Python 3.x): <pre><code>&gt;&gt;&gt; infinity = float('infinity')\n&gt;&gt;&gt; hash(infinity)\n314159\n&gt;&gt;&gt; hash(float('-inf'))\n-314159\n</code></pre></p>"},{"location":"GE/#erklarung_55","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Der Hash von infinity ist 10\u2075 x \u03c0.</li> <li>Interessanterweise ist der Hash von <code>float('-inf')</code> \"-10\u2075 x \u03c0\" in Python 3, w\u00e4hrend er in Python 2 \"-10\u2075 x e\" ist.</li> </ul>"},{"location":"GE/#lass-uns-demolieren","title":"\u25b6 Lass uns demolieren","text":"<p>1. <pre><code>class Yo(object):\n    def __init__(self):\n        self.__honey = True\n        self.bro = True\n</code></pre></p> <p>Ausgabe: <pre><code>&gt;&gt;&gt; Yo().bro\nTrue\n&gt;&gt;&gt; Yo().__honey\nAttributeError: 'Yo' object has no attribute '__honey'\n&gt;&gt;&gt; Yo()._Yo__honey\nTrue\n</code></pre></p> <p>2. <pre><code>class Yo(object):\n    def __init__(self):\n        # Versuchen wir es dieses Mal mit etwas Symmetrischem\n        self.__honey__ = True\n        self.bro = True\n</code></pre></p> <p>Ausgabe: <pre><code>&gt;&gt;&gt; Yo().bro\nTrue\n\n&gt;&gt;&gt; Yo()._Yo__honey__\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'Yo' object has no attribute '_Yo__honey__'\n</code></pre></p> <p>Warum hat <code>Yo()._Yo__honey</code> funktioniert?</p> <p>3.</p> <pre><code>_A__variable = \"Some value\"\n\nclass A(object):\n    def some_func(self):\n        return __variable # noch nirgends initialisiert\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; A().__variable\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'A' object has no attribute '__variable'\n\n&gt;&gt;&gt; A().some_func()\n'Some value'\n</code></pre></p>"},{"location":"GE/#erklarung_56","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Name Mangling wird verwendet, um Namenskollisionen zwischen verschiedenen Namespaces zu vermeiden.</li> <li>In Python modifiziert (lies: demoliert) der Interpreter die Namen der Klassenattribute, die mit <code>__</code> (doppelter Unterstrich a.k.a \"dunder\") anfangen und nicht mit mehr als einem Unterstrich am Ende enden, indem er <code>_NameOfTheClass</code> voranstellt.</li> <li>Um also auf das <code>__honey</code>-Attribut im ersten Schnipsel zugreifen zu k\u00f6nnen, m\u00fcssten wir <code>_Yo</code> vorne anh\u00e4ngen, was Konflikte mit demselben Attributsnamen, das in einer anderen Klasse definiert ist, verhindern w\u00fcrde.</li> <li>Aber warum hat es dann im zweiten Schnipsel nicht geklappt? Weil Name Mangling die Namen ausschlie\u00dft, die mit doppelten Unterstrichen enden.</li> <li>Der dritte Schnipsel war auch eine Konsequenz des Name Manglings. Der Name <code>__variable</code> in der Anweisung <code>return __variable</code> wurde zu <code>_A__variable</code>, was zuf\u00e4llig auch der Name der Variablen ist, die wir im \u00e4u\u00dferen Scope deklariert haben.</li> <li>Wenn der demolierte Name l\u00e4nger als 255 Zeichen ist, wird er au\u00dferdem abgeschnitten.</li> </ul>"},{"location":"GE/#-_1","title":"---","text":""},{"location":"GE/#kapitel-der-schein-trugt","title":"Kapitel: Der Schein tr\u00fcgt!","text":""},{"location":"GE/#zeilen-uberspringen","title":"\u25b6 Zeilen \u00fcberspringen?","text":"<p>Ausgabe: <pre><code>&gt;&gt;&gt; value = 11\n&gt;&gt;&gt; valu\u0435 = 32\n&gt;&gt;&gt; value\n11\n</code></pre></p> <p>Was?</p> <p>Beachte: Um dies zu reproduzieren, kopiere einfach die Anweisungen aus dem obigen Ausschnitt und f\u00fcge sie in deine Datei/Shell ein.</p>"},{"location":"GE/#erklarung_57","title":"\ud83d\udca1 Erkl\u00e4rung","text":"<p>Einige nicht-westliche Schriftzeichen sehen genauso aus wie die Buchstaben des englischen Alphabets, werden aber von Interpreter als unterschiedlich angesehen.</p> <pre><code>&gt;&gt;&gt; ord('\u0435') # kyrillisches 'e' (Ye)\n1077\n&gt;&gt;&gt; ord('e') # lateinisches 'e', wie es in Englisch benutzt wird und auch auf einer Standard-Tastatur vorkommt\n101\n&gt;&gt;&gt; '\u0435' == 'e'\nFalse\n\n&gt;&gt;&gt; value = 42 # lateinisches e\n&gt;&gt;&gt; valu\u0435 = 23 # kyrillisches 'e', der Python 2.x Interpreter w\u00fcrde hier einen `SyntaxError` werfen\n&gt;&gt;&gt; value\n42\n</code></pre> <p>Die built-in <code>ord()</code>-Funktion gibt den Unicode eines Characters zur\u00fcck code point, und unterschiedliche Codepositionen des kyrillischen \"e\" und des lateinischen \"e\" begr\u00fcnden das Verhalten des obigen Beispiels.</p>"},{"location":"GE/#teleportation","title":"\u25b6 Teleportation","text":"<pre><code># `pip install numpy` vorher.\nimport numpy as np\n\ndef energy_send(x):\n    # Initialisiere ein numpy array\n    np.array([float(x)])\n\ndef energy_receive():\n    # Gib ein leeres numpy array zur\u00fcck\n    return np.empty((), dtype=np.float).tolist()\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; energy_send(123.456)\n&gt;&gt;&gt; energy_receive()\n123.456\n</code></pre></p> <p>Wo ist der Nobelpreis?</p>"},{"location":"GE/#erklarung_58","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>Beachte, dass das numpy array, was in der Funktion <code>energy_send</code> erzeugt wurde, nicht zur\u00fcckgegeben wird, so dass Speicherplatz f\u00fcr die Neuzuweisung frei ist.</li> <li><code>numpy.empty()</code> gibt den n\u00e4chsten freien Speicherplatz zur\u00fcck, ohne ihn neu zu initialisieren. Dieser Speicherplatz ist zuf\u00e4llig der gleiche, der gerade freigegeben wurde (normalerweise, aber nicht immer).</li> </ul>"},{"location":"GE/#da-ist-wohl-irgendwas-faul","title":"\u25b6 Da ist wohl irgendwas faul...","text":"<pre><code>def square(x):\n    \"\"\"\n    Eine einfahce Funktion, um das Quadrat einer Zahl durch Addition zu bestimmen\n    \"\"\"\n    sum_so_far = 0\n    for counter in range(x):\n        sum_so_far = sum_so_far + x\n  return sum_so_far\n</code></pre> <p>Ausgabe (Python 2.x):</p> <pre><code>&gt;&gt;&gt; square(10)\n10\n</code></pre> <p>Sollte das nicht 100 sein?</p> <p>Note: Wenn du das Ergebnis nicht reproduzieren kannst, versuch die Datei mixed_tabs_and_spaces.py via shell auszuf\u00fchren.</p>"},{"location":"GE/#erklarung_59","title":"\ud83d\udca1 Erkl\u00e4rung","text":"<ul> <li>Vermische keine Leerzeichen und Tabs! Das Zeichen unmittelbar vor dem Return ist ein \"Tab\", und der Code ist an anderer Stelle im Beispiel um ein Vielfaches von \"4 Leerzeichen\" einger\u00fcckt.</li> <li>So geht Python mit Tabs um:</li> </ul> <p>Als erstes werden Tabs (von links nach rechts) durch ein bis acht Leerzeichen ersetzt, so dass die Gesamtzahl der Zeichen bis einschlie\u00dflich der Ersetzung ein Vielfaches von acht ist &lt;...&gt; * So wird \"tab\" in der letzten Zeile der Funktion <code>square</code> durch acht Leerzeichen ersetzt und gelangt in die Schleife. * Python 3 ist so freundlich, in solchen F\u00e4llen automatisch einen Fehler zu melden.</p> <pre><code>**Ausgabe (Python 3.x):**\n```py\nTabError: inconsistent use of tabs and spaces in indentation\n```\n</code></pre>"},{"location":"GE/#-_2","title":"---","text":""},{"location":"GE/#kapitel-sonstiges","title":"Kapitel: Sonstiges","text":""},{"location":"GE/#ist-schneller","title":"\u25b6 <code>+=</code> ist schneller","text":"<pre><code># Benutzen von \"+\" mit drei Strings:\n&gt;&gt;&gt; timeit.timeit(\"s1 = s1 + s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100)\n0.25748300552368164\n# Benutzen von \"+=\" mit drei Strings:\n&gt;&gt;&gt; timeit.timeit(\"s1 += s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100)\n0.012188911437988281\n</code></pre>"},{"location":"GE/#erklarung_60","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li><code>+=</code> ist schneller als <code>+</code>, um mehr als zwei String zu konkatenieren, weil der erste String (Beispiel: <code>s1</code> f\u00fcr <code>s1 += s2 + s3</code>), w\u00e4hrend der Berechnung des gesamten Strings, nicht zerst\u00f6rt wird.</li> </ul>"},{"location":"GE/#lass-uns-einen-gigantischen-string-machen","title":"\u25b6 Lass uns einen gigantischen String machen!","text":"<pre><code>def add_string_with_plus(iters):\n    s = \"\"\n    for i in range(iters):\n        s += \"xyz\"\n    assert len(s) == 3*iters\n\ndef add_bytes_with_plus(iters):\n    s = b\"\"\n    for i in range(iters):\n        s += b\"xyz\"\n    assert len(s) == 3*iters\n\ndef add_string_with_format(iters):\n    fs = \"{}\"*iters\n    s = fs.format(*([\"xyz\"]*iters))\n    assert len(s) == 3*iters\n\ndef add_string_with_join(iters):\n    l = []\n    for i in range(iters):\n        l.append(\"xyz\")\n    s = \"\".join(l)\n    assert len(s) == 3*iters\n\ndef convert_list_to_string(l, iters):\n    s = \"\".join(l)\n    assert len(s) == 3*iters\n</code></pre> <p>Ausgabe:</p> <pre><code># Ausgef\u00fchrt in der ipython-Shell unter Verwendung von %timeit f\u00fcr eine bessere Lesbarkeit der Ergebnisse.\n# Du kannst das timeit-Modul auch in der normalen Python-Shell/scriptm= verwenden, Beispielverwendung unten\n# timeit.timeit('add_string_with_plus(10000)', number=1000, globals=globals())\n\n&gt;&gt;&gt; NUM_ITERS = 1000\n&gt;&gt;&gt; %timeit -n1000 add_string_with_plus(NUM_ITERS)\n124 \u00b5s \u00b1 4.73 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS)\n211 \u00b5s \u00b1 10.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_format(NUM_ITERS)\n61 \u00b5s \u00b1 2.18 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_join(NUM_ITERS)\n117 \u00b5s \u00b1 3.21 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; l = [\"xyz\"]*NUM_ITERS\n&gt;&gt;&gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS)\n10.1 \u00b5s \u00b1 1.06 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre> <p>Erh\u00f6hen wir die Anzahl der Iterationen um den Faktor 10.</p> <pre><code>&gt;&gt;&gt; NUM_ITERS = 10000\n&gt;&gt;&gt; %timeit -n1000 add_string_with_plus(NUM_ITERS) # Linearer Anstieg der Ausf\u00fchrungszeit\n1.26 ms \u00b1 76.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS) # Quadratische Anstieg\n6.82 ms \u00b1 134 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_format(NUM_ITERS) # Linearer Anstieg\n645 \u00b5s \u00b1 24.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_join(NUM_ITERS) # Linearer Anstieg\n1.17 ms \u00b1 7.25 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; l = [\"xyz\"]*NUM_ITERS\n&gt;&gt;&gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS) # Linearer Anstieg\n86.3 \u00b5s \u00b1 2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre>"},{"location":"GE/#erklarung_61","title":"\ud83d\udca1 Erkl\u00e4rung","text":"<ul> <li>Du kannst mehr \u00fcber timeit hier timeit oder hier %timeit lesen. Sie werden verwendet, um die Ausf\u00fchrungszeit von Codest\u00fccken zu messen.</li> <li>Benutze <code>+</code> nicht, um lange Strings zu generieren \u2014 In Python ist <code>str</code> unver\u00e4nderlich, daher m\u00fcssen der linke und der rechte String f\u00fcr jedes Paar von Verkettungen in den neuen String kopiert werden. Wenn du 4 String mit L\u00e4nge 10 konkatenierst, dann kopierst du (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90 Characters anstatt nur 40 Characters. Die Situation verschlechtert sich quadratisch mit zunehmender Anzahl und Gr\u00f6\u00dfe der Zeichenketten (mit den Ausf\u00fchrungszeiten der Funktion <code>add_bytes_with_plus</code> begr\u00fcndet)</li> <li>Daher ist es ratsam, die Syntax <code>.format.</code> oder <code>%</code> zu verwenden. (sie sind jedoch bei sehr kurzen Zeichenfolgen etwas langsamer als <code>x</code>).</li> <li>Oder besser, wenn du bereits Inhalte in Form eines iterierbaren Objekts zur Verf\u00fcgung hast, dann verwende <code>''.join(iterable_object)</code>, was viel schneller ist.</li> <li>Im Gegensatz zu <code>add_bytes_with_plus</code> zeigte <code>add_string_with_plus</code> aufgrund der im vorherigen Beispiel besprochenen <code>+=</code>-Optimierungen keinen quadratischen Anstieg der Ausf\u00fchrungszeit. W\u00e4re die Anweisung <code>s = s + \"x\" + \"y\" + \"z\"</code> statt <code>s += \"xyz\"</code> gewesen, w\u00e4re der Anstieg quadratisch gewesen.   <pre><code>def add_string_with_plus(iters):\n    s = \"\"\n    for i in range(iters):\n        s = s + \"x\" + \"y\" + \"z\"\n    assert len(s) == 3*iters\n\n&gt;&gt;&gt; %timeit -n100 add_string_with_plus(1000)\n388 \u00b5s \u00b1 22.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n100 add_string_with_plus(10000) # Quadratischer Anstieg der Ausf\u00fchrungszeit\n9 ms \u00b1 298 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n</code></pre></li> <li> <p>So viele M\u00f6glichkeiten einen gigantischen String zu erzeugen und zu formatieren stehen irgendwie in Kontrast zum Zen von Python, nachdem gilt:</p> <p>Es sollte einen - und vorzugsweise nur einen - offensichtlichen Weg geben, dies zu tun.</p> </li> </ul>"},{"location":"GE/#verlangsamen-von-dict-lookups","title":"\u25b6 Verlangsamen von <code>dict</code> Lookups *","text":"<pre><code>some_dict = {str(i): 1 for i in range(1_000_000)}\nanother_dict = {str(i): 1 for i in range(1_000_000)}\n</code></pre> <p>Ausgabe: <pre><code>&gt;&gt;&gt; %timeit some_dict['5']\n28.6 ns \u00b1 0.115 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n&gt;&gt;&gt; some_dict[1] = 1\n&gt;&gt;&gt; %timeit some_dict['5']\n37.2 ns \u00b1 0.265 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n\n&gt;&gt;&gt; %timeit another_dict['5']\n28.5 ns \u00b1 0.142 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n&gt;&gt;&gt; another_dict[1]  # Versuch, auf einen Schl\u00fcssel zuzugreifen, der nicht existiert\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nKeyError: 1\n&gt;&gt;&gt; %timeit another_dict['5']\n38.5 ns \u00b1 0.0913 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n</code></pre> Wieso werden dieselben lookups immer langsamer?</p>"},{"location":"GE/#erklarung_62","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>CPython hat eine generische Funktion zum Nachschlagen in Dictionaries, die alle Arten von Schl\u00fcsseln (<code>str</code>, <code>int</code>, beliebige Objekte ...) behandelt, und eine spezialisierte Funktion f\u00fcr den h\u00e4ufigen Fall von Dictionaries, die nur aus <code>str</code>-Schl\u00fcsseln bestehen.</li> <li>Die spezialisierte Funktion (wird <code>lookdict_unicode</code> in CPythons code genannt) wei\u00df, dass alle vorhandenen Schl\u00fcssel (einschlie\u00dflich des nachgeschlagenen Schl\u00fcssels) Strings sind, und verwendet den schnelleren und einfacheren Stringvergleich, um Schl\u00fcssel zu vergleichen, anstatt die Methode <code>__eq__</code> aufzurufen.</li> <li>Das erste Mal, wenn auf eine <code>dict</code>-Instanz mit einem Nicht-<code>str</code>-Schl\u00fcssel zugegriffen wird, wird sie so ge\u00e4ndert, dass zuk\u00fcnftige Suchvorg\u00e4nge die generische Funktion verwenden.</li> <li>Dieser Prozess ist f\u00fcr die jeweilige <code>dict</code>-Instanz nicht umkehrbar, und der Schl\u00fcssel muss nicht einmal im Dictionary vorhanden sein. Deshalb hat der Versuch eines fehlgeschlagenen Nachschlagevorgangs denselben Effekt.</li> </ul>"},{"location":"GE/#blahende-instanz-dicts","title":"\u25b6 Bl\u00e4hende Instanz <code>dict</code>s *","text":"<pre><code>import sys\n\nclass SomeClass:\n    def __init__(self):\n        self.some_attr1 = 1\n        self.some_attr2 = 2\n        self.some_attr3 = 3\n        self.some_attr4 = 4\n\n\ndef dict_size(o):\n    return sys.getsizeof(o.__dict__)\n</code></pre> <p>Ausgabe: (Python 3.8, oder Python 3 Versionen k\u00f6nnen ein bisschen variieren) <pre><code>&gt;&gt;&gt; o1 = SomeClass()\n&gt;&gt;&gt; o2 = SomeClass()\n&gt;&gt;&gt; dict_size(o1)\n104\n&gt;&gt;&gt; dict_size(o2)\n104\n&gt;&gt;&gt; del o1.some_attr1\n&gt;&gt;&gt; o3 = SomeClass()\n&gt;&gt;&gt; dict_size(o3)\n232\n&gt;&gt;&gt; dict_size(o1)\n232\n</code></pre></p> <p>Versuchen wir es noch einmal... in einem neuen Interpreter:</p> <pre><code>&gt;&gt;&gt; o1 = SomeClass()\n&gt;&gt;&gt; o2 = SomeClass()\n&gt;&gt;&gt; dict_size(o1)\n104  # wie erwartet\n&gt;&gt;&gt; o1.some_attr5 = 5\n&gt;&gt;&gt; o1.some_attr6 = 6\n&gt;&gt;&gt; dict_size(o1)\n360\n&gt;&gt;&gt; dict_size(o2)\n272\n&gt;&gt;&gt; o3 = SomeClass()\n&gt;&gt;&gt; dict_size(o3)\n232\n</code></pre> <p>Was f\u00fchrt dazu, dass diese Dictionaries aufgebl\u00e4ht werden? Und warum werden neu erstellte Objekte ebenfalls aufgebl\u00e4ht?</p>"},{"location":"GE/#erklarung_63","title":"\ud83d\udca1 Erkl\u00e4rung:","text":"<ul> <li>CPython ist in der Lage, das gleiche \"keys\"-Objekt in mehreren Dictionaries wiederzuverwenden. Dies wurde in PEP 412 mit der Motivation hinzugef\u00fcgt, die Speichernutzung zu reduzieren, insbesondere in Dictionaries von Instanzen - wo Schl\u00fcssel (Instanzattribute) tendenziell f\u00fcr alle Instanzen gleich sind.</li> <li>Diese Optimierung ist f\u00fcr Instanz-Dictionaries v\u00f6llig nahtlos, wird aber deaktiviert, wenn bestimmte Annahmen nicht eingehalten werden.</li> <li>Key-Sharing-Dictionaries unterst\u00fctzen keine L\u00f6schung; wird ein Instanzattribut gel\u00f6scht, ist das W\u00f6rterbuch \"unshared\" und Key-Sharing ist f\u00fcr alle zuk\u00fcnftigen Instanzen derselben Klasse deaktiviert.</li> <li>Wenn die Gr\u00f6\u00dfe der Dictionary-Schl\u00fcssel ge\u00e4ndert wurde (weil neue Schl\u00fcssel eingef\u00fcgt wurden), werden sie au\u00dferdem nur dann gemeinsam genutzt, wenn sie von genau einem einzigen Dictionary verwendet werden (dies erm\u00f6glicht das Hinzuf\u00fcgen vieler Attribute in der <code>__init__</code> der allerersten erstellten Instanz, ohne ein \"unshare\" zu verursachen). Wenn mehrere Instanzen existieren, wenn eine Gr\u00f6\u00dfen\u00e4nderung stattfindet, wird das Key-Sharing f\u00fcr alle zuk\u00fcnftigen Instanzen der gleichen Klasse deaktiviert: CPython kann nicht mehr feststellen, ob die Instanzen den gleichen Satz von Attributen verwenden und entscheidet sich, den Versuch, ihre Schl\u00fcssel zu teilen, abzubrechen.</li> <li>Ein kleiner Tipp, wenn du den Speicherbedarf deines Programms verringern willst: l\u00f6sche  keine Instanzattribute und stelle sicher, dass alle Attribute in <code>__init__</code> initialisiert werden!</li> </ul>"},{"location":"GE/#kleinigkeiten","title":"\u25b6 Kleinigkeiten *","text":"<ul> <li><code>join()</code> ist eine String-Operation anstatt einer List-Operation. (auf den ersten Blick nicht einfach zu verstehen)</li> </ul> <p>\ud83d\udca1 Erkl\u00e4rung: Wenn <code>join()</code> eine Methode auf einem String ist, dann kann es auf irgendeinem Iterable operieren (Liste, Tuple, Iteratoren). W\u00e4re es eine Methode auf einer Liste, m\u00fcsste sie von jedem Typ separat implementiert werden. Au\u00dferdem macht es nicht viel Sinn, eine String-spezifische Methode auf eine generische API eines <code>listen</code>-Objektes anzuwenden</p> <ul> <li>Ein paar komisch aussehende aber semantisch korrekte Statements:</li> <li><code>[] = ()</code> ist ein semantisch korrektes Statement (entpacken eines leeren <code>Tuples</code> in eine leere <code>Liste</code>)</li> <li><code>'a'[0][0][0][0][0]</code> ist auch semantisch korrect, weil Python keinen Char-Datentyp wie viele andere Sprachen, die auf C basieren, hat. Also ergibt das Ausw\u00e4hlen eines einzelnen Characters aus einem String einen Single-character String.</li> <li> <p><code>3 --0-- 5 == 8</code> und <code>--5 == 5</code> sind beides semantisch korrekte Statements und wird zu <code>True</code> ausgewertet.</p> </li> <li> <p>Sei <code>a</code> eine Zahl, <code>++a</code> und <code>--a</code> sind beides valide Python Statements aber sie verhaten sich nicht so wie vergleichbare Statements in Sprachen wie C, C++, oder Java.   <pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; a\n5\n&gt;&gt;&gt; ++a\n5\n&gt;&gt;&gt; --a\n5\n</code></pre></p> </li> </ul> <p>\ud83d\udca1 Erkl\u00e4rung:   + Es gibt keinen <code>++</code> Operator in der Python Grammatik. Es handelt sich eigentlich um zwei <code>+</code> Operatoren.   + <code>++a</code> parst eigentlich <code>+(+a)</code> was \u00fcbersetzt wird zu <code>a</code>. In \u00e4hnlicher Weise kann die Ausgabe des Statement <code>--a</code> begr\u00fcndet werden.   + Dieser StackOverflow Thread er\u00f6rtert die Gr\u00fcnde f\u00fcr das Fehlen von Inkrement- und Dekrementoperatoren in Python.</p> <ul> <li> <p>Der Walrus Operator in Python sollte dir bekannt sein. Aber hast du schon mal von dem space-invader Operator geh\u00f6rt?   <pre><code>&gt;&gt;&gt; a = 42\n&gt;&gt;&gt; a -=- 1\n&gt;&gt;&gt; a\n43\n</code></pre>   Er wird als alternativer Inkrementierungsoperator verwendet, zusammen mit einem anderen Operator   <pre><code>&gt;&gt;&gt; a +=+ 1\n&gt;&gt;&gt; a\n&gt;&gt;&gt; 44\n</code></pre> \ud83d\udca1 Erkl\u00e4rung: Dieser Streich kommt von Raymond Hettingers Tweet. Der Space Invader Operator ist tats\u00e4chlich nur ein schlecht formatiertes <code>a -= (-1)</code>, was \u00e4quivalent zu <code>a = a - (- 1)</code> ist. \u00c4hnliches gilt f\u00fcr <code>a += (+ 1)</code>.</p> </li> <li> <p>Python hat einen undokumentierten umgekehrten Implikations Operator. </p> <pre><code>&gt;&gt;&gt; False ** False == True\nTrue\n&gt;&gt;&gt; False ** True == False\nTrue\n&gt;&gt;&gt; True ** False == True\nTrue\n&gt;&gt;&gt; True ** True == True\nTrue\n</code></pre> <p>\ud83d\udca1 Erkl\u00e4rung: Wenn du <code>False</code> und <code>True</code> durch 0 und 1 ersetzt und dann rechnest, dann ist die Wahrheitstabelle \u00e4quivalent zu einem Operator der umgekehrten Implikation. (Quelle)</p> </li> <li> <p>Weil wir \u00fcber Operatoren sprechen, erw\u00e4hnen wir auch den <code>@</code> Ooperator, der f\u00fcr Matrixmultiplikation benutzt wird (Keine Sorge, diese mal ist es ernst).</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.array([2, 2, 2]) @ np.array([7, 8, 8])\n46\n</code></pre> <p>\ud83d\udca1 Erkl\u00e4rung: Der <code>@</code> Operator wurde, mit der wissenschaftlichen Community im Hinterkopf, in Python 3.5 eingef\u00fchrt. Jedes Objekt kann die magische <code>__matmul__</code>  Method \u00fcberladen, um ein bestimmtes Verhalten f\u00fcr diesen Operator zu definieren.</p> </li> <li> <p>Ab Python 3.8 kannst du eine typische f-String-Syntax wie <code>f'{some_var=}</code> f\u00fcr schnelles Debugging verwenden. Zum Beispiel:     <pre><code>&gt;&gt;&gt; some_string = \"wtfpython\"\n&gt;&gt;&gt; f'{some_string=}'\n\"some_string='wtfpython'\"\n</code></pre></p> </li> <li> <p>Python nutzt 2 Bytes die Speicherung lokaler Variablen in Funktionen. Theoretisch hei\u00dft das, dass nur 65536 Variablen in einer Funktion gespeichert werden k\u00f6nnen. Allerdings hat Python eine praktische, eingebaute L\u00f6sung, die benutzt werden kann, um mehr als 2^16 Variablennamen zu speichern. Der folgende Code demonstriert, was im Stack passiert, wenn mehr als 65536 lokale Variablen definiert werden (Warnung: Dieser Code gibt ungef\u00e4hr 2^18 Zeilen Text aus, also sei darauf vorbereitet!):</p> <p>```py  import dis exec(\"\"\" def f():     \"\"\" + \"\"\"     \"\"\".join([\"X\" + str(x) + \"=\" + str(x) for x in range(65539)]))</p> <p>f()</p> <p>print(dis.dis(f)) ```</p> </li> <li> <p>Mehrere Python Threads werden deinen Python code nicht gleichzeitig laufen lassen (Ja, du hast richtig geh\u00f6rt!). Es mag intuitiv erscheinen, mehrere Threads zu erzeugen, die dann deinen Python code gleichzeitig ausf\u00fchren, aber wegen dem Global Interpreter Lock in Python, sorgst du nur daf\u00fcr, dass die Threads abwechselnd auf demselben Kern ausgef\u00fchrt werden.  Python Threads sind gut f\u00fcr IO-gebundene Aufgaben, aber um tats\u00e4chliche Parallelisierung f\u00fcr CPU-gebundene Aufgaben in Python zu erreichen, solltest du lieber das Python multiprocessing Modul benutzen.</p> </li> <li> <p>Manchmal gibt die <code>print</code> Methode die Werte nicht sofort aus. Zum Beispiel:</p> <pre><code># Datei some_file.py\nimport time\n\nprint(\"wtfpython\", end=\"_\")\ntime.sleep(3)\n</code></pre> <p>Das wird <code>wtfpython</code> nach 3 Sekunden, aufgrund des <code>end</code> Argumentes ausgeben, wei der Ausgabe-Puffer, entweder nach <code>\\n</code> oder wenn das Programm die Ausf\u00fchrung beendet, geflusht wird. Mit dem Argument <code>flush=True</code> k\u00f6nnen wir den Puffer zum Flushen zwingen.</p> </li> <li> <p>List slicing mit Indices, die nicht innerhalb der Grenzen liegen, wirft keinen Fehler   <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; some_list[111:]\n[]\n</code></pre></p> </li> <li> <p>Slicing eines Iterables erzeugt nicht immer ein neues Objekt. Zum Beispiel:     <pre><code>&gt;&gt;&gt; some_str = \"wtfpython\"\n&gt;&gt;&gt; some_list = ['w', 't', 'f', 'p', 'y', 't', 'h', 'o', 'n']\n&gt;&gt;&gt; some_list is some_list[:] # False erwartet, weil ein neues Objekt erzeugt wird.\nFalse\n&gt;&gt;&gt; some_str is some_str[:] # True, weil Strings immutable sind, daher ist die Erstellung eines neuen Objektes sinnlos.\nTrue\n</code></pre></p> </li> <li> <p><code>int('\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669')</code> gibt <code>123456789</code> in Python 3 zur\u00fcck. In Python umfassen Dezimalzeichen auch Ziffernzeichen, und alle Zeichen, die zum Erstellen von Dezimal-Radix-Nummern benutzt werden k\u00f6nnen, z.B. U+0660, ARABIC-INDIC DIGIT ZERO. Hier  ist eine interessante Geschichte im Zusammenhang mit diesem Verhalten in Python.</p> </li> <li> <p>Du kannst numerische Literale mit Unterstrichen trennen, um die Lesbarkeit zu erh\u00f6hen (Python 3 spezifisch).</p> <pre><code>&gt;&gt;&gt; sechs_millionen = 6_000_000\n&gt;&gt;&gt; sechs_millionen\n6000000\n&gt;&gt;&gt; sechs_millionen = 0xF00D_CAFE\n&gt;&gt;&gt; sechs_millionen\n4027435774\n</code></pre> </li> <li> <p><code>'abc'.count('') == 4</code>. Hier ist eine ungef\u00e4hre Implementierung der Methode <code>count</code>, die die Dinge klarer machen w\u00fcrde   <pre><code>def count(s, sub):\n    result = 0\n    for i in range(len(s) + 1 - len(sub)):\n        result += (s[i:i + len(sub)] == sub)\n    return result\n</code></pre>   Das Verhalten ist darauf zur\u00fcckzuf\u00fchren, dass leere Teilstrings (<code>''</code>) mit Slices der L\u00e4nge 0 in der urspr\u00fcnglichen Zeichenkette \u00fcbereinstimmen </p> </li> </ul>"},{"location":"GE/#contributing","title":"Contributing","text":"<p>Ein paar Wege, wie du zu wtfpython beitragen kannst:</p> <ul> <li>neue Beispiele vorschlagen</li> <li>bei der \u00dcbersetzung helfen (Siehe issues sind mit 'translation' markiert)</li> <li>Verbesserungen vorschlagen, z.B. Aufzeigen von veralteten Schnipseln, Typen, Formatfehlern, etc.</li> <li>L\u00fccken identifizieren (z.B. unzureichende Erkl\u00e4rungen, \u00fcberfl\u00fcssige Beispiele, etc.)</li> <li>Irgendwelche kreativen Vorschl\u00e4ge unterbreiten, um dieses Projekt spa\u00dfiger und n\u00fctzlicher zu machen</li> </ul> <p>F\u00fcr mehr Details, wirf bitte einen Blick auf CONTRIBUTING.md. Erstelle ruhig ein neues Issue, um zu diskutieren.</p> <p>PS: Bitte keine Anfragen mit Links erstellen. Es werden keine Links hinzugef\u00fcgt, es sein denn sie sind f\u00fcr das Projekt relevant.</p>"},{"location":"GE/#anerkennung","title":"Anerkennung","text":"<p>Die Idee und das Design f\u00fcr diese Sammlung wurden durch Denys Dovhans tolles Projekt inspiriert wtfjs. Der \u00fcberragende Support von Pythonisten hat es zu dem gemacht, was es heute ist.</p>"},{"location":"GE/#ein-paar-nutzliche-links","title":"Ein paar n\u00fctzliche Links!","text":"<ul> <li>https://www.youtube.com/watch?v=sH4XF6pKKmk</li> <li>https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python</li> <li>https://sopython.com/wiki/Common_Gotchas_In_Python</li> <li>https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines</li> <li>https://stackoverflow.com/questions/1011431/common-pitfalls-in-python</li> <li>https://www.python.org/doc/humor/</li> <li>https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator</li> <li>https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65</li> <li>https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;type=Issues</li> <li>WFTPython discussion threads on Hacker News and Reddit.</li> </ul>"},{"location":"GE/#license","title":"\ud83c\udf93 License","text":"<p>\u00a9 Satwik Kansal</p>"},{"location":"GE/#uberrasche-auch-deine-freunde","title":"\u00dcberrasche auch deine Freunde!","text":"<p>Wenn du wtfpython cool findest, kannst du diese Quick-Links nutzen, um es mit deinen Freunden zu teilen:</p> <p>Twitter | Linkedin | Facebook </p>"},{"location":"GE/#brauchst-du-eine-pdf-version","title":"Brauchst du eine pdf version?","text":"<p>Ich habe ein paar Anfragen f\u00fcr eine pdf (und epub) Version von wtfpython erhalten. Du kannst hier deine Daten angeben, um sie schnellstm\u00f6glich zu bekommen.</p> <p>Das ist alles, Freunde! Um neue Updates zu erhalten, kannst du deine email hier hinzuf\u00fcgen.</p>"},{"location":"KO/","title":"Korean","text":"<p>\ubc88\uc5ed\uc5d0 \ucc38\uc5ec\ud558\uace0 \uc2f6\uc73c\uc2dc\uba74 Github Discussion\uc744 \ubc29\ubb38\ud558\uc138\uc694!</p> <p></p> What the f*ck Python! \ud83d\ude31 <p>\ub180\ub77c\uc6b4 \uc608\uc81c\ub4e4\uc744 \ud1b5\ud574\uc11c \ud30c\uc774\uc36c \ud0d0\ud5d8\ud558\uace0 \uc774\ud574\ud558\uae30</p> <p>\uc601\uc5b4 English(\uc6d0\ubb38) | \uc911\uad6d\uc5b4 \u4e2d\u6587</p> <p>\ub2e4\ub978 \uc77d\ub294 \ubc29\ubc95: \uc778\ud130\ub799\ud2f0\ube0c | CLI</p> <p>\uc124\uacc4\uac00 \uc798\ub41c \uace0\uae09 \uc778\ud130\ud504\ub9ac\ud130 \uc5b8\uc5b4\uc778 \ud30c\uc774\uc36c\uc5d0\ub294 \ud504\ub85c\uadf8\ub798\uba38\ub97c \uc704\ud55c \ud3b8\uc758 \uae30\ub2a5\uc774 \ub9ce\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uac04\ud639 \uc5b4\ub5a4 \ud30c\uc774\uc36c \ucf54\ub4dc\ub4e4\uc740 \uc2e4\ud589 \uacb0\uacfc\uac00 \uc774\uc0c1\ud574\ubcf4\uc77c \ub54c\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.</p> <p>\uc774 \ubb38\uc11c\ub294 \uc9c1\uad00\uc801\uc774\uc9c0 \uc54a\uac70\ub098 \ub35c \uc54c\ub824\uc9c4 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\ub294 \uc608\uc81c\ub4e4\uc5d0 \ub300\ud574 \uadf8 \uc774\uba74\uc758 \ub3d9\uc791\uc744 \uc815\ud655\ud558\uac8c \uc124\uba85\ud569\ub2c8\ub2e4.</p> <p>\uc544\ub798\uc758 \uc608\uc81c\ub4e4\uc774 WTF \uae4c\uc9c0\ub294 \uc544\ub2d0 \uc218\ub3c4 \uc788\uc9c0\ub9cc, \ud30c\uc774\uc36c\uc758 \uc798 \ubab0\ub790\ub358 \ubd80\ubd84\uc744 \ubcf4\uc5ec\ub4dc\ub9b4 \uc218\ub294 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uc774\ub7f0 \uc2dd\uc73c\ub85c \uacf5\ubd80\ud558\ub294 \uac83\uc774 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc758 \ub0b4\ubd80\ub97c \uc54c\uac8c\ub418\ub294\ub370 \ud6a8\uacfc\uc801\uc774\ub77c\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\ub3c4 \ub3d9\uc758\ud558\uac8c \ub418\uc2e4\uac70\ub77c \ubbff\uc2b5\ub2c8\ub2e4!</p> <p>\ub9cc\uc57d \ud30c\uc774\uc36c\uc758 \uace0\uc778\ubb3c\uc774\ub77c\uba74 \uccab\ub208\uc5d0 \uc608\uc81c\uc758 \uc758\ubbf8\ub97c \ud30c\uc545\ud574\ubcf4\uc138\uc694. \uc544\ub9c8 \uc774\ubbf8 \uacbd\ud5d8\ud55c \uc801\uc774 \uc788\ub294 \ucf54\ub4dc\uc77c \uc218\ub3c4 \uc788\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc61b \ucd94\uc5b5\uc744 \ub5a0\uc73c\ub85c\uac8c \ud574\ub4dc\ub9b0 \uc148\uc774 \ub418\uaca0\ub124\uc694! :sweat_smile:</p> <p>\ucd94\uc2e0: \uc608\uc804\uc5d0 \uc77d\uc5c8\ub294\ub370 \ub2e4\uc2dc \uc624\uc2e0 \ubd84\uc774\ub77c\uba74 \uc5ec\uae30\uc11c \ubc14\ub010 \ubd80\ubd84\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <p>\ucd94\uc2e0 2: \uc62e\uae34\uc774\uc758 \ub9d0\uc744 \uc77d\ub294 \uac83\uc744 \ucd94\ucc9c\ud569\ub2c8\ub2e4.</p> <p>\uadf8\ub7fc, \uc2dc\uc791\ud569\ub2c8\ub2e4!</p>"},{"location":"KO/#_1","title":"\ubc88\uc5ed","text":""},{"location":"KO/#_2","title":"\ubaa9\ucc28","text":"<ul> <li>\uc608\uc81c\uc758 \uad6c\uc131</li> <li>\u25b6 \ube5b\ub098\ub294 \uc81c\ubaa9</li> <li>\uc0ac\uc6a9\ubc29\ubc95</li> <li>\ud83d\udc40 \uc608\uc81c</li> <li>\"\uba38\ub9ac\uac00 \uc544\ud50c\uc218\ub3c4 \uc788\uc5b4\uc694!\" \ub2e8\uc6d0<ul> <li>\u25b6 \uba3c\uc800 \ucc98\uc74c \uac83\ub4e4\ubd80\ud130 *</li> <li>\u25b6 \ubb38\uc790\uc5f4\uc740 \uac00\ub054 \ud5f7\uac08\ub824\uc694</li> <li>\u25b6 \uc5f0\uacb0\ub41c \uc5f0\uc0b0\ub4e4\uc744 \uc870\uc2ec\ud558\uc138\uc694</li> <li>\u25b6 <code>is</code> \uc5f0\uc0b0\uc790\ub97c \uc548 \uc4f0\ub294 \ubc29\ubc95</li> <li>\u25b6 \ud574\uc2dc \ube0c\ub77c\uc6b0\ub2c8</li> <li>\u25b6 \uae4a\uc774 \ub4e4\uc5b4\uac00\uba74 \uc6b0\ub9ac\ub294 \ub2e4 \ub611\uac19\uc544.</li> <li>\u25b6 \uc9c8\uc11c \uc18d\uc758 \ubb34\uc9c8\uc11c *</li> <li>\u25b6 \uacc4\uc18d \uc2dc\ub3c4\ud574 \ubcf4\uc138\uc694... *</li> <li>\u25b6 \ubb34\uc5c7\uc744 \uc704\ud574\uc11c(for)?</li> <li>\u25b6 \uc2e4\ud589\ub418\ub294 \uc2dc\uac04\uc758 \ucc28\uc774</li> <li>\u25b6 <code>is not ...</code> \uc740 <code>is (not ...)</code>\uc774 \uc544\ub2c8\ub2e4</li> <li>\u25b6 X\uac00 \uccab \ubc88\uc9f8 \uc2dc\ub3c4\uc5d0\uc11c \uc2b9\ub9ac\ud558\ub294 \ud2f1\ud0dd\ud1a0!</li> <li>\u25b6 \ub2ec\ub77c\ubd99\ub294 \ucd9c\ub825 \ud568\uc218</li> <li>\u25b6 \ub2ed\uc774 \uba3c\uc800\uc77c\uae4c, \ub2ec\uac40\uc774 \uba3c\uc800\uc77c\uae4c *</li> <li>\u25b6 \uc11c\ube0c \ud074\ub798\uc2a4\uc758 \uad00\uacc4</li> <li>\u25b6 \uba54\uc18c\ub4dc\uc758 \uac19\uc74c\uacfc \ub3d9\uc77c\ud568</li> <li>\u25b6 \ucc38 \uac70\uc9d3\uc758 \ubc18\ubcf5 *</li> <li>\u25b6 \ub180\ub77c\uc6b4 \ucf64\ub9c8</li> <li>\u25b6 \ubb38\uc790\uc5f4\uacfc \ubc31\uc2ac\ub798\uc2dc</li> <li>\u25b6 \ub9e4\ub4ed\uc774 \uc544\ub2c8\uc57c!</li> <li>\u25b6 \ubc18\ucabd 3\uc911 \ub530\uc634\ud45c \ubb38\uc790\uc5f4</li> <li>\u25b6 \ubd88\ub9b0\uc758 \ubb38\uc81c\uc810\uc774 \ubb50\uc57c?</li> <li>\u25b6 \ud074\ub798\uc2a4 \uc18d\uc131\uacfc \uc778\uc2a4\ud134\uc2a4 \uc18d\uc131</li> <li>\u25b6 yielding None</li> <li>\u25b6 Yielding from... return! *</li> <li>\u25b6 Nan-\uc7ac\uadc0\uc131 *</li> <li>\u25b6 \ubd88\ubcc0\uc744 \ubcc0\ud615\ud558\uae30!</li> <li>\u25b6 \uc678\ubd80 \ubc94\uc704\uc5d0\uc11c \uc0ac\ub77c\uc9c0\ub294 \ubcc0\uc218</li> <li>\u25b6 \ubbf8\uc2a4\ud14c\ub9ac\ud55c \ud0a4 \ud0c0\uc785 \ud615 \ubcc0\ud658</li> <li>\u25b6 \uc5ec\ub7ec\ubd84\uc774 \ub9de\ucd9c \uc218 \uc788\ub294\uc9c0 \ud55c\ubc88 \ubcfc\uae4c\uc694?</li> </ul> </li> <li>\"\ubbf8\ub044\ub7ec\uc6b4 \ube44\ud0c8\uae38\" \ub2e8\uc6d0<ul> <li>\u25b6 \ub515\uc154\ub108\ub9ac\uac00 \ubc18\ubcf5 \uc911\uc77c \ub54c \uc218\uc815\ud558\uae30</li> <li>\u25b6 \uc644\uac15\ud55c <code>del</code> \uc5f0\uc0b0\uc790</li> <li>\u25b6 \ubc94\uc704\ub97c \ubc97\uc5b4\ub09c \ubcc0\uc218</li> <li>\u25b6 \ubc18\ubcf5\ud558\ub294 \ub3d9\uc548 \ub9ac\uc2a4\ud2b8\uc758 \uc544\uc774\ud15c\uc744 \uc0ad\uc81c\ud558\uae30</li> <li>\u25b6 \ubc18\ubcf5\uc790\uc758 \uc190\uc2e4\ub418\ub294 zip *</li> <li>\u25b6 \ub8e8\ud504 \ubcc0\uc218\uac00 \uc720\ucd9c\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4!</li> <li>\u25b6 \uae30\ubcf8 \uac00\ubcc0\uc778\uc218\ub97c \uc870\uc2ec\ud558\uc138\uc694!</li> <li>\u25b6 \uc5ec\ub7ec \uc608\uc678\ub4e4\uc744 \uc7a1\uae30</li> <li>\u25b6 \uac19\uc740 \ud53c\uc5f0\uc0b0\uc790, \ub2e4\ub978 \uc774\uc57c\uae30!</li> <li>\u25b6 \uc774\ub984 \ud655\uc778\uc740 \ud074\ub798\uc2a4 \ubc94\uc704\ub97c \ubb34\uc2dc\ud569\ub2c8\ub2e4</li> <li>\u25b6 \ubaa8\ub798\ubc2d\uc5d0\uc11c \ubc14\ub298\ucc3e\uae30 *</li> <li>\u25b6 \ub098\ub220\ubd05\uc2dc\ub2e4 *</li> <li>\u25b6 \uc81c\uba4b\ub300\ub85c \uac00\uc838\uc624\uae30 *</li> <li>\u25b6 \ub2e4 \uc815\ub82c\ub418\uc5c8\ub098\uc694? *</li> <li>\u25b6 \uc790\uc815\uc740 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub098\uc694?</li> </ul> </li> <li>\"\uc228\uaca8\uc9c4 \ubcf4\ubb3c\ub4e4!\" \ub2e8\uc6d0<ul> <li>\u25b6 \ud30c\uc774\uc36c, \ub0a0 \ub0a0\uac8c\ud574\uc904 \uc218 \uc788\ub2c8?</li> <li>\u25b6 <code>goto</code>, \ud558\uc9c0\ub9cc \uc65c?</li> <li>\u25b6 \ub9c8\uc74c \ub2e8\ub2e8\ud788 \uba39\uc73c\uc138\uc694!</li> <li>\u25b6 \ud3c9\uc0dd \uce5c\uadfc\ud55c \uc544\uc800\uc528 \uac19\uc740 \uc5b8\uc5b4\ub97c \ub9cc\ub098\ubd05\uc2dc\ub2e4</li> <li>\u25b6 \ud30c\uc774\uc36c \uc870\ucc28 \uc0ac\ub791\uc774 \ubcf5\uc7a1\ud558\ub2e4\ub294 \uac83\uc744 \uc774\ud574\ud569\ub2c8\ub2e4</li> <li>\u25b6 \ub124, \uc874\uc7ac\ud569\ub2c8\ub2e4!</li> <li>\u25b6 Ellipsis *</li> <li>\u25b6 Inpinity</li> <li>\u25b6 \ub9dd\uccd0\ubd05\uc2dc\ub2e4</li> </ul> </li> <li>\"\uac89\ubaa8\uc2b5\uc740 \uae30\ub9cc\uc801\uc785\ub2c8\ub2e4!\" \ub2e8\uc6d0<ul> <li>\u25b6 \uc904 \uac74\ub108\ub6f0\uae30?</li> <li>\u25b6 \uc21c\uac04\uc774\ub3d9</li> <li>\u25b6 \uc74c, \ubb54\uac00 \uc218\uc0c1\ud55c\ub370...</li> </ul> </li> <li>\"\uae30\ud0c0 \ub4f1\ub4f1\" \ub2e8\uc6d0<ul> <li>\u25b6 <code>+=</code> \uac00 \ub354 \ube68\ub77c\uc694</li> <li>\u25b6 \uac70\ub300\ud55c \ubb38\uc790\uc5f4\uc744 \ub9cc\ub4e4\uc5b4\ubd10\uc694!</li> <li>\u25b6 dict \uac80\uc0c9 \uc18d\ub3c4 \ub290\ub824\uc9c0\uac8c \ud558\uae30 *</li> <li>\u25b6 <code>dict</code> \uc778\uc2a4\ud134\uc2a4 \ubd80\ud480\ub9ac\uae30 *</li> <li>\u25b6 \uc0ac\uc18c\ud55c \uac83\ub4e4 *</li> </ul> </li> <li>\uae30\uc5ec\ud558\uae30</li> <li>\uac10\uc0ac\uc758 \ub9d0</li> <li>\ud83c\udf93 License</li> <li>\uce5c\uad6c\ub4e4\uc744 \ub180\ub77c\uac8c \ud574\ubcf4\uc138\uc694!</li> <li>Need a pdf version?</li> </ul>"},{"location":"KO/#_3","title":"\uc608\uc81c\uc758 \uad6c\uc131","text":"<p>\ubaa8\ub4e0 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\uc740 \uad6c\uc870\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc2b5\ub2c8\ub2e4.</p> <p>\ucc38\uace0: \uc5ec\uae30\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \uc608\uc81c\ub294 \ud30c\uc774\uc36c 3.5.2 \uc778\ud130\ub809\ud2f0\ube0c \uc778\ud130\ud504\ub9ac\ud130\uc5d0\uc11c \ud14c\uc2a4\ud2b8 \ub418\uc5c8\uace0 \ucd94\uac00\uc801\uc73c\ub85c \uba85\uc2dc\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc740 \uc774\uc0c1 \ubaa8\ub4e0 \ubc84\uc804\uc5d0\uc11c \uc791\ub3d9\ud560 \uac83\uc785\ub2c8\ub2e4.</p>"},{"location":"KO/#_4","title":"\u25b6 \ube5b\ub098\ub294 \uc81c\ubaa9","text":"<pre><code># \uc608\uc81c \uc138\ud305\n# \ub9c8\ubc95 \uac19\uc740 \uc77c\uc744 \uae30\ub300\ud558\uc138\uc694...\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (\uc720\ud6a8\ud55c \ud30c\uc774\uc36c \ubc84\uc804\ub4e4):</p> <pre><code>&gt;&gt;&gt; \uc785\ub825\n\ub180\ub77c\uc6b4 \uacb0\uacfc\n</code></pre> <p>\ub180\ub77c\uc6b4 \uacb0\uacfc\uc5d0 \ub300\ud55c \ud55c \uc904 \uc124\uba85\uc774 \uc788\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"KO/#_5","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ubb34\uc5c7\uc774 \uc77c\uc5b4\ub098\uace0 \uc788\ub294\uc9c0\uc640 \uc65c \uc77c\uc5b4\ub098\ub294\uc9c0\uc5d0 \ub300\ud55c \uac04\ub7b5\ud55c \uc124\uba85</li> </ul> <pre><code># \uc124\uba85\uc744 \ub3c4\uc6b8 \uc608\uc81c\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (\uc720\ud6a8\ud55c \ud30c\uc774\uc36c \ubc84\uc804\ub4e4):</p> <pre><code>&gt;&gt;&gt; \uc785\ub825 # \ub180\ub77c\uc6b4 \uacb0\uacfc\uc758 \uc774\ud574\ub97c \ub3d5\uae30 \uc704\ud55c \uc608\uc81c\n# \uc774\ud574 \uac00\ub2a5\ud55c \uacb0\uacfc\n</code></pre>"},{"location":"KO/#_6","title":"\uc0ac\uc6a9\ubc29\ubc95","text":"<p>\uc608\uc81c\ub4e4\uc744 \uc21c\uc11c\ub300\ub85c \uc77d\uc5b4\ub0b4\ub824\uac00\ub294 \uac83\uc744 \uad8c\uc7a5\ud558\uace0 \uc608\uc81c\ub9c8\ub2e4:</p> <ul> <li>\uc608\uc81c\uc758 \ucf54\ub4dc\ub97c \uc798 \uc77d\uc5b4\ubcf4\uc138\uc694. \ub9cc\uc57d \ud30c\uc774\uc36c \uace0\uc778\ubb3c\uc774\ub77c\uba74 \ub300\ubd80\ubd84 \uacb0\uacfc\uac00 \uc5b4\ub5bb\uac8c \ub420\uc9c0 \ubbf8\ub9ac \uc54c\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.</li> <li>\uacb0\uacfc\ub97c \uc77d\uace0,</li> <li>\uc608\uc0c1\ud55c \uacb0\uacfc\uc640 \uc2e4\uc81c \uacb0\uacfc\uac00 \ub9de\ub294\uc9c0 \ud655\uc778\ud574 \ubcf4\uc138\uc694.</li> <li>\uacb0\uacfc\uc640 \uadf8 \uc791\ub3d9\uc6d0\ub9ac\uc5d0 \ub300\ud55c \uc815\ud655\ud55c \uc6d0\ub9ac\ub97c \uc54c\uace0 \uc788\ub098\uc694?</li> <li>\ub9cc\uc57d \uc544\ub2c8\ub77c\uba74 (\uc0c1\uad00\uc5c6\uc5b4\uc694), \ud070 \uc228\uc744 \ud55c \ubc88 \ub4e4\uc774\ub9c8\uc2dc\uace0, \uc124\uba85\uc744 \uc77d\uc5b4\ubcf4\uc138\uc694 (\uadf8\ub798\ub3c4 \uc774\ud574\ud558\uc9c0 \ubabb\ud588\ub2e4\uba74, \uc5ec\uae30\uc5d0 \uc774\uc288\ub97c \uc791\uc131\ud574\uc8fc\uc138\uc694).</li> <li>\uc54c\uace0 \uc788\ub2e4\uba74, \uc790\uc2e0\uc744 \ud55c\ubc88 \ud1a0\ub2e5\uc5ec\uc8fc\uace0 \ub2e4\uc74c \uc608\uc81c\ub85c \ub118\uc5b4\uac00\uc138\uc694.</li> </ul> <p>\ucd94\uc2e0: pypi \ud328\ud0a4\uc9c0\ub97c \uc0ac\uc6a9\ud558\uba74 command line\uc5d0\uc11c\ub3c4 \uc774 \ubb38\uc11c\ub97c \uc77d\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>$ pip install wtfpython -U\n$ wtfpython\n</code></pre>"},{"location":"KO/#_7","title":"\ud83d\udc40 \uc608\uc81c","text":""},{"location":"KO/#_8","title":"\"\uba38\ub9ac\uac00 \uc544\ud50c\uc218\ub3c4 \uc788\uc5b4\uc694!\" \ub2e8\uc6d0","text":""},{"location":"KO/#_9","title":"\u25b6 \uba3c\uc800 \ucc98\uc74c \uac83\ub4e4\ubd80\ud130 *","text":"<p>\uc5b4\ub5a4 \uc774\uc720\uc5d0\uc11c\uc778\uc9c0, \ud30c\uc774\uc36c 3.8\uc758 Walrus \uc5f0\uc0b0\uc790 (<code>:=</code>) \uac00 \uaf64 \uc54c\ub824\uc9c0\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud655\uc778\ud574\ubd05\uc2dc\ub2e4.</p> <p>1.</p> <pre><code># \ud30c\uc774\uc36c 3.8+\n\n&gt;&gt;&gt; a = \"wtf_walrus\"\n'wtf_walrus'\n&gt;&gt;&gt; a\n'wtf_walrus'\n\n&gt;&gt;&gt; a := \"wtf_walrus\"\nFile \"&lt;stdin&gt;\", line 1\n    a := \"wtf_walrus\"\n      ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; (a := \"wtf_walrus\") # \uc774\uac74 \uc798 \uc791\ub3d9\ud558\ub124\uc694\n&gt;&gt;&gt; a\n'wtf_walrus'\n</code></pre> <p>2 .</p> <pre><code># \ud30c\uc774\uc36c 3.8+\n\n&gt;&gt;&gt; a = 6, 9\n&gt;&gt;&gt; a\n(6, 9)\n\n&gt;&gt;&gt; (a := 6, 9)\n&gt;&gt;&gt; a\n6\n\n&gt;&gt;&gt; a, b = 6, 9 # \uc804\ud615\uc801\uc778 \uc5b8\ud328\ud0b9\n&gt;&gt;&gt; a, b\n(6, 9)\n&gt;&gt;&gt; (a, b = 16, 19) # \uc774\ub7f0\n  File \"&lt;stdin&gt;\", line 1\n    (a, b = 6, 9)\n          ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; (a, b := 16, 19) # \uc774\uac83\uc740 \uc774\uc0c1\ud55c 3-\ud29c\ud50c\uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4.\n(6, 16, 19)\n\n&gt;&gt;&gt; a # a\uac00 \uc544\uc9c1\ub3c4 \uc548 \ubc14\ub00c\uc5c8\ub124\uc694?\n6\n\n&gt;&gt;&gt; b\n16\n</code></pre>"},{"location":"KO/#_10","title":"\ud83d\udca1 \uc124\uba85","text":"<p>\uac04\ub2e8\ud55c walrus \uc5f0\uc0b0\uc790 \uc124\uba85</p> <p>walrus \uc5f0\uc0b0\uc790 (<code>:=</code>) \ub294 \ud30c\uc774\uc36c 3.8\uc5d0\uc11c \uc18c\uac1c\ub418\uc5c8\uc73c\uba70, \ubcc0\uc218\uc5d0 \ud560\ub2f9\ud558\uba74\uc11c \uc5f0\uc0b0\uc744 \ud558\uace0 \uc2f6\uc744 \ub54c \uc720\uc6a9\ud558\uac8c \uc4f0\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>def some_func():\n        # \ub9ce\uc740 \uacc4\uc0b0\uc744 \ud558\ub294 \ud568\uc218\ub77c\uace0 \uac00\uc815\ud569\uc2dc\ub2e4.\n        # time.sleep(1000)\n        return 5\n\n# \uadf8\ub798\uc11c\nif some_func():\n        print(some_func()) # \uac19\uc740 \uacc4\uc0b0\uc774 \ub450 \ubc88 \uc774\ub8e8\uc5b4\uc9c0\ubbc0\ub85c \uc548 \uc88b\uc740 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n\n# \ub610\ub294\na = some_func()\nif a:\n    print(a)\n\n# \ub300\uc2e0\uc5d0 \uc774\ub807\uac8c \uac04\ub2e8\ud558\uac8c \uc4f8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nif a := some_func():\n        print(a)\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (&gt; 3.8):</p> <pre><code>5\n5\n5\n</code></pre> <p>\uc774 \uc5f0\uc0b0\uc790\ub294 \ud55c \uc904\uc758 \ucf54\ub4dc\ub97c \uc544\ub07c\uace0 <code>some_func</code>\ub97c \ub450 \ubc88 \ud638\ucd9c\ud558\ub294 \uac83\uc744 \ubc29\uc9c0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <ul> <li> <p>(walrus \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud55c) \uad04\ud638\ub85c \ubb36\uc774\uc9c0 \uc54a\uc740 \"\ud560\ub2f9\ubb38(assignment expression)\"\uc740 \ucef4\ud30c\uc77c\ub7ec\uc758 \uc0c1\uc704 \ub2e8\uacc4\uc5d0\uc11c \uc81c\ud55c\ub418\ubbc0\ub85c \uccab \ubc88\uc9f8 \uc904 <code>a := \"wtf_walrus\"</code>\uc5d0\uc11c <code>SyntaxError</code>\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \uad04\ud638\ub85c \ubb36\uac8c \ub418\uba74 \uc608\uc0c1\ud588\ub358 \ub300\ub85c \uc791\ub3d9\ud558\uace0 <code>a</code>\uc5d0 \uac12\uc744 \ud560\ub2f9\ud558\uac8c \ub429\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\uc0c1\uc801\uc73c\ub85c, <code>=</code> \uc5f0\uc0b0\uc790\ub97c \ud3ec\ud568\ud55c \ud45c\ud604\uc2dd\uc5d0\uc11c\ub294 \uad04\ud638\ub85c \ub458\ub7ec\uc2f8\ub294 \uac83\uc774 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0, <code>(a, b = 6, 9)</code>\uc5d0\uc11c syntax error\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</p> </li> <li> <p>walrus \uc5f0\uc0b0\uc790\ub294 <code>Name</code>\uc774 \uc720\ud6a8\ud55c \uc2dd\ubcc4\uc790(identifier)\uc774\uace0 <code>expr</code>\uc774 \uc720\ud6a8\ud55c \ud45c\ud604\uc2dd \uc77c \ub54c, <code>Name := expr</code>\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud328\ud0b9\uacfc \uc5b8\ud328\ud0b9\uc740 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c,</p> </li> <li> <p><code>(a := 6, 9)</code>\ub294 <code>((a := 6), 9)</code>\uc640 \uac19\uace0 \uacb0\uad6d <code>(a, 9)</code> (<code>a</code>\uc758 \uac12\uc774 6 \uc77c\ub54c) \uc640 \uac19\uac8c \ub429\ub2c8\ub2e4.</p> <pre><code>&gt;&gt;&gt; (a := 6, 9) == ((a := 6), 9)\nTrue\n&gt;&gt;&gt; x = (a := 696, 9)\n&gt;&gt;&gt; x\n(696, 9)\n&gt;&gt;&gt; x[0] is a # \ub458 \ub2e4 \uba54\ubaa8\ub9ac\uc758 \uac19\uc740 \uc704\uce58\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\uc2b5\ub2c8\ub2e4.\nTrue\n</code></pre> </li> <li> <p>\ube44\uc2b7\ud558\uac8c, <code>(a, b := 16, 19)</code>\ub294 <code>(a, (b := 16), 19)</code>\uc640 \uac19\uac8c \ub418\uace0 \uc774\ub294 \ub2e8\uc21c\ud55c 3-\ud29c\ud50c\uacfc \uac19\uc2b5\ub2c8\ub2e4.</p> </li> </ul>"},{"location":"KO/#_11","title":"\u25b6 \ubb38\uc790\uc5f4\uc740 \uac00\ub054 \ud5f7\uac08\ub824\uc694","text":"<p>1.</p> <pre><code>&gt;&gt;&gt; a = \"some_string\"\n&gt;&gt;&gt; id(a)\n140420665652016\n&gt;&gt;&gt; id(\"some\" + \"_\" + \"string\") # \ub450 id\uac00 \uac19\ub124\uc694\n140420665652016\n</code></pre> <p>2.</p> <pre><code>&gt;&gt;&gt; a = \"wtf\"\n&gt;&gt;&gt; b = \"wtf\"\n&gt;&gt;&gt; a is b\nTrue\n\n&gt;&gt;&gt; a = \"wtf!\"\n&gt;&gt;&gt; b = \"wtf!\"\n&gt;&gt;&gt; a is b\nFalse\n</code></pre> <p>3.</p> <pre><code>&gt;&gt;&gt; a, b = \"wtf!\", \"wtf!\"\n&gt;&gt;&gt; a is b # 3.7.x \ubc84\uc804\uc744 \uc81c\uc678\ud558\uace0 \ubaa8\ub4e0 \ubc84\uc804\uc5d0\uc11c \uc774\ub807\uac8c \uc791\ub3d9\ud569\ub2c8\ub2e4.\nTrue\n\n&gt;&gt;&gt; a = \"wtf!\"; b = \"wtf!\"\n&gt;&gt;&gt; a is b # \uc5b4\ub514\uc11c \uc2e4\ud589\uc2dc\ud0a4\ub294\uc9c0\uc5d0 \ub530\ub77c True \ud639\uc740 False\uac00 \ucd9c\ub825\ub420 \uac83\uc785\ub2c8\ub2e4. (\ud30c\uc774\uc36c \uc258 / ipython / \ud30c\uc774\uc36c \uc2a4\ud06c\ub9bd\ud2b8)\nFalse\n</code></pre> <pre><code># \uc774\ubc88\uc5d0\ub294 some_file.py \ud30c\uc77c\uc5d0\uc11c \uc2e4\ud589\uc2dc\ucf1c\ubd05\uc2dc\ub2e4.\na = \"wtf!\"\nb = \"wtf!\"\nprint(a is b)\n\n# \ubaa8\ub4c8\uc744 \uc2e4\ud589\uc2dc\ud0a4\uba74 True\ub97c \ucd9c\ub825\ud558\ub124\uc694.\n</code></pre> <p>4.</p> <p>\ucd9c\ub825 \uacb0\uacfc (&lt; 3.7 )</p> <pre><code>&gt;&gt;&gt; 'a' * 20 is 'aaaaaaaaaaaaaaaaaaaa'\nTrue\n&gt;&gt;&gt; 'a' * 21 is 'aaaaaaaaaaaaaaaaaaaaa'\nFalse\n</code></pre> <p>\ub9d0\uc774 \ub418\ub294 \uac70 \uac19\uc8e0?</p>"},{"location":"KO/#_12","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\uccab \ubc88\uc9f8\uc640 \ub450 \ubc88\uc9f8 \ucf54\ub4dc\uc5d0\uc11c\uc758 \uacb0\uacfc\ub294 \uc0c8\ub85c\uc6b4 \uac1d\uccb4\ub97c \ud56d\uc0c1 \ub9cc\ub4dc\ub294 \uac83\ubcf4\ub2e4 \uc774\ubbf8 \uc874\uc7ac\ud558\uace0 \ubc14\ub00c\uc9c0 \uc54a\ub294 \uac1d\uccb4\ub97c \uc0ac\uc6a9\ud558\ub824\uace0 \ud558\ub294 CPython \ucd5c\uc801\ud654 \ub54c\ubb38\uc5d0 \uadf8\ub807\uc2b5\ub2c8\ub2e4. (\ubb38\uc790\uc5f4 interning\uc774\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4)</li> <li>interning\uc774 \ub418\uace0 \ub09c \ub2e4\uc74c, \ub9ce\uc740 \ubcc0\uc218\ub294 \uac19\uc740 \uba54\ubaa8\ub9ac\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uac00\ub9ac\ud0a4\uace0 \uc788\uc744 \uac81\ub2c8\ub2e4. (\uba54\ubaa8\ub9ac\ub97c \uc904\uc774\uac8c \ub429\ub2c8\ub2e4)</li> <li>\uc704\uc758 \ucf54\ub4dc\ub4e4\uc744 \ubcf4\uba74, \ubb38\uc790\uc5f4\uc740 \uc54c\uc544\uc11c interning\uc774 \ub429\ub2c8\ub2e4. \uad6c\ud604 \ubc29\uc2dd\uc5d0 \ub530\ub77c\uc11c \uc54c\uc544\uc11c interning\uc774 \ub420 \uac83\uc778\uc9c0 \uacb0\uc815\ub429\ub2c8\ub2e4. \uc54c\uc544\uc11c interning\uc774 \ub420 \uac83\uc778\uc9c0 \uc608\uce21\ud574\ubcfc \uba87 \uac00\uc9c0 \uaddc\uce59\uc774 \uc788\uc2b5\ub2c8\ub2e4:</li> <li>\uae38\uc774\uac00 0\uacfc 1\uc778 \ubaa8\ub4e0 \ubb38\uc790\uc5f4\uc740 interning\uc774 \ub429\ub2c8\ub2e4.</li> <li>\ubb38\uc790\uc5f4\uc740 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 interning\uc774 \ub429\ub2c8\ub2e4. (<code>'wtf'</code>\uc740 interning\uc774 \ub418\uc9c0\ub9cc <code>''.join(['w', 't', 'f'])</code>\uc740 interning\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4)</li> <li>\uc544\uc2a4\ud0a4 \ubb38\uc790, \uc22b\uc790, \uc5b8\ub354\ubc14 \uc774\uc678\uc758 \ubb38\uc790\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc73c\uba74 interning\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c <code>'wtf!'</code>\uc774 <code>!</code> \ub54c\ubb38\uc5d0 interning\uc774 \ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. CPython\uc5d0\uc11c\uc758 \uad6c\ud604\uc740 \uc5ec\uae30\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.     </li> <li><code>a</code>\uc640 <code>b</code>\uac00 \uac19\uc740 \uc904\uc5d0\uc11c <code>\"wtf!\"</code>\uc758 \uac12\uc73c\ub85c \ud560\ub2f9\ub41c\ub2e4\uba74, \ud30c\uc774\uc36c \uc778\ud130\ud504\ub9ac\ud130\uac00 \uc0c8\ub85c\uc6b4 \uac1d\uccb4\ub97c \ub9cc\ub4e4\uace0 \ub450 \ubc88\uc9f8 \ubcc0\uc218\ub3c4 \uac00\ub9ac\ud0a4\uac8c \ub9cc\ub4ed\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ub9cc\uc57d \uc774 \uc791\uc5c5\uc744 \ub2e4\ub978 \uc904\uc5d0\uc11c \ud55c\ub2e4\uba74, \ud30c\uc774\uc36c \uc778\ud130\ud504\ub9ac\ud130\ub294 \uc774\ubbf8 <code>\"wtf!\"</code>\uac00 \uac1d\uccb4\ub85c \uc874\uc7ac\ud55c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \ubaa8\ub985\ub2c8\ub2e4 (\uc65c\ub0d0\ud558\uba74 <code>\"wtf!\"</code>\ub294 interning\uc774 \ub418\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4). interning\uc740 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \uc791\ub3d9\ud558\ub294 \ucd5c\uc801\ud654\uc785\ub2c8\ub2e4. \uc774 \ucd5c\uc801\ud654\ub294 CPython 3.7.x \ubc84\uc804\ub4e4\uc5d0\ub294 \uc801\uc6a9\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. (\ub354 \ub9ce\uc740 \uc815\ubcf4\ub294 \uc774 \uc774\uc288\ub97c \ud655\uc778\ud558\uc138\uc694).</li> <li>IPython\uacfc \uac19\uc740 \uc778\ud130\ub799\ud2f0\ube0c \ud658\uacbd\uc5d0\uc11c\ub294 \ud558\ub098\uc758 \ucef4\ud30c\uc77c \uc720\ub2db(unit)\uc774 \ud558\ub098\uc758 \ud45c\ud604\uc2dd\uc774\uace0 \ubaa8\ub4c8\uc77c \ub54c\ub294 \ubaa8\ub4c8 \uc804\uccb4\uc77c \ub54c\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. <code>a, b = \"wtf!\", \"wtf!\"</code>\uc740 \ud558\ub098\uc758 \ud45c\ud604\uc2dd\uc774\uc9c0\ub9cc <code>a = \"wtf!\"; b = \"wtf!\"</code>\uc740 \ud55c \uc904\uc5d0 \uc788\ub294 \ub450 \uac1c\uc758 \ud45c\ud604\uc2dd\uc785\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc704 \uc608\uc81c\ub4e4\uc758 \uacb0\uacfc\ub97c \uc124\uba85\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\ub124 \ubc88\uc9f8 \ucd9c\ub825 \uacb0\uacfc\uc758 \uac11\uc791\uc2a4\ub7ec\uc6b4 \ubcc0\ud654\ub294 \ud54d\ud640 \ucd5c\uc801\ud654\uc5d0 \uc758\ud55c \uac83\uc785\ub2c8\ub2e4. \uc989 <code>'a'*20</code>\uc740 \uc2e4\ud589 \uc2dc\uac04\uc5d0 \ud074\ub85d\uc218\ub97c \uc904\uc774\uae30 \uc704\ud574 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 <code>aaaaaaaaaaaaaaaaaaaa</code>\ub85c\ubc14\ub01d\ub2c8\ub2e4. \ud54d\ud640 \ucd5c\uc801\ud654\ub294 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uac00 20 \uc774\ud558\uc77c \ub54c\ub9cc \uc77c\uc5b4\ub0a9\ub2c8\ub2e4 (<code>'a'*10**10</code>\uc758 \uacb0\uacfc\ub85c <code>.pyc</code>\ud30c\uc77c\uc758 \ud06c\uae30\ub97c \uc0dd\uac01\ud574\ubcf4\uc138\uc694). \uc5ec\uae30\uc5d0 \uadf8\uc5d0 \ub300\ud55c \uad6c\ud604\uc774 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\ucc38\uace0: \ud30c\uc774\uc36c 3.7\uc5d0\uc11c\ub294 \uc0c8\ub85c\uc6b4 AST \ucd5c\uc801\ud654 \uc0c8\ub85c\uc6b4 \ub85c\uc9c1\uc73c\ub85c \ud54d\ud640 \ucd5c\uc801\ud654\uac00 \ube60\uc84c\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc138 \ubc88\uc9f8 \ucf54\ub4dc\uac00 \ud30c\uc774\uc36c 3.7\uc5d0\uc11c\ub294 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c \ub354 \uc790\uc138\ud788 \uc54c\uc544\ubcf4\uc138\uc694.</li> </ul>"},{"location":"KO/#_13","title":"\u25b6 \uc5f0\uacb0\ub41c \uc5f0\uc0b0\ub4e4\uc744 \uc870\uc2ec\ud558\uc138\uc694","text":"<pre><code>&gt;&gt;&gt; (False == False) in [False] # \ub9d0\uc774 \ub418\ub124\uc694\nFalse\n&gt;&gt;&gt; False == (False in [False]) # \uc774\uac83\ub3c4 \ub9d0\uc774 \ub429\ub2c8\ub2e4\nFalse\n&gt;&gt;&gt; False == False in [False] # \uc774\uac74 \ubb50\uc8e0?\nTrue\n\n&gt;&gt;&gt; True is False == False\nFalse\n&gt;&gt;&gt; False is False is False\nTrue\n\n&gt;&gt;&gt; 1 &gt; 0 &lt; 1\nTrue\n&gt;&gt;&gt; (1 &gt; 0) &lt; 1\nFalse\n&gt;&gt;&gt; 1 &gt; (0 &lt; 1)\nFalse\n</code></pre>"},{"location":"KO/#_14","title":"\ud83d\udca1 \uc124\uba85:","text":"<p>https://docs.python.org/2/reference/expressions.html#not-in \uc5d0 \ub530\ub77c\uc11c</p> <p>\ud615\uc2dd\uc801\uc73c\ub85c, a, b, c, ..., y, z\uac00 \ud45c\ud604\uc2dd\uc774\uace0 op1, op2, ..., opN\uc774 \ube44\uad50 \uc5f0\uc0b0\uc790\ub77c\uba74, \uac01 \uc2dd\uc774 \ud55c\ubc88\uc5d0 \ud3c9\uac00\ub41c\ub2e4\ub294 \uc810\uc744 \uc81c\uc678\ud558\uace0 a op1 b op2 c ... y opN z\ub294 a op1 b and b op2 c and ... y opN z\uc5d0 \ud574\ub2f9\ud569\ub2c8\ub2e4.</p> <p>\uc704\uc758 \uc608\uc2dc\uc640 \uac19\uc740 \uacb0\uacfc\ub4e4\uc740 \uc774\uc0c1\ud574 \ubcf4\uc77c\uc9c0\ub3c4 \ubaa8\ub974\uc9c0\ub9cc, <code>a == b == c</code>\ub098 <code>0 &lt;= x &lt;= 100</code>\uc640 \uac19\uc740 \ud45c\ud604\ub4e4\uc740 \ud658\uc0c1\uc801\uc785\ub2c8\ub2e4.</p> <ul> <li><code>False is False is False</code>\ub294 <code>(False is False) and (False is False)</code>\uc640 \uac19\uc2b5\ub2c8\ub2e4.</li> <li><code>True is False == False</code>\ub294 <code>True is False and False == False</code>\uc640 \uac19\uc73c\uba70 \uad6c\ubb38\uc758 \uccab \ubd80\ubd84 (<code>True is False</code>)\uac00 <code>False</code>\ub85c \ud3c9\uac00\ub418\uae30 \ub54c\ubb38\uc5d0 \uc804\uccb4 \ud45c\ud604\uc2dd\uc758 \uacb0\uacfc\ub294 <code>False</code>\uac00 \ub429\ub2c8\ub2e4.</li> <li><code>1 &gt; 0 &lt; 1</code>\uc740 <code>1 &gt; 0 and 0 &lt; 1</code>\uacfc \uac19\uc544 <code>True</code>\uac00 \uacc4\uc0b0\ub429\ub2c8\ub2e4.</li> <li>\ud45c\ud604\uc2dd <code>(1 &gt; 0) &lt; 1</code>\uc740 <code>True &lt; 1</code>\uacfc \uac19\uc73c\uba70   <pre><code>&gt;&gt;&gt; int(True)\n1\n&gt;&gt;&gt; True + 1 #\uc608\uc81c\uc640\ub294 \uad00\ub828\uc774 \uc5c6\uc9c0\ub9cc, \uc7ac\ubbf8\ub97c \uc704\ud574\uc11c\uc785\ub2c8\ub2e4.\n2\n</code></pre>   \uc989, <code>1 &lt; 1</code>\uc758 \uacb0\uacfc\ub294 <code>False</code>\uc785\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#is","title":"\u25b6 <code>is</code> \uc5f0\uc0b0\uc790\ub97c \uc548 \uc4f0\ub294 \ubc29\ubc95","text":"<p>\uc544\ub798 \uc608\uc81c\ub294 \uc778\ud130\ub137\uc5d0\uc11c \ub9e4\uc6b0 \uc720\uba85\ud55c \uc608\uc81c\ub85c \ud37c\uc838\uc788\uc2b5\ub2c8\ub2e4.</p> <p>1.</p> <pre><code>&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; a is b\nTrue\n\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; a is b\nFalse\n</code></pre> <p>2.</p> <pre><code>&gt;&gt;&gt; a = []\n&gt;&gt;&gt; b = []\n&gt;&gt;&gt; a is b\nFalse\n\n&gt;&gt;&gt; a = tuple()\n&gt;&gt;&gt; b = tuple()\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <p>3. \ucd9c\ub825 \uacb0\uacfc</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (\ud30c\uc774\uc36c 3.7.x)</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt; a is b\nFalse\n</code></pre>"},{"location":"KO/#_15","title":"\ud83d\udca1 \uc124\uba85:","text":"<p><code>is</code>\uc640 <code>==</code>\uc758 \ucc28\uc774\uc810</p> <ul> <li><code>is</code> \uc5f0\uc0b0\uc790\ub294 \uc5f0\uc0b0\uc790 \uc591\ucabd\uc774 \uac19\uc740 \uac1d\uccb4\ub97c \ucc38\uc870\ud558\uace0 \uc788\ub294\uc9c0\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. (\uc989, \ub458\uc774 \uc9c4\uc9dc\ub85c \uac19\uc740\uc9c0\ub97c \ud655\uc778\ud569\ub2c8\ub2e4).</li> <li><code>==</code> \uc5f0\uc0b0\uc790\ub294 \uc591\ucabd\uc758 \uac12\uc744 \ube44\uad50\ud558\uc5ec \uc774 \ub458\uc774 \uac19\uc740\uc9c0\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.</li> <li>\uadf8\ub798\uc11c <code>is</code>\ub294 \ucc38\uc870\uc758 \ub3d9\ub4f1\uc744, <code>==</code>\ub294 \uac12\uc758 \ub3d9\ub4f1\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. \ub2e4\uc74c \uc608\uc81c\ub85c \uc815\ub9ac\ud574\ubcf4\uba74,   <pre><code>&gt;&gt;&gt; class A: pass\n&gt;&gt;&gt; A() is A() # \uc774 \ub458\uc740 \uba54\ubaa8\ub9ac\uc0c1\uc5d0 \ub2e4\ub978 \uacf3\uc5d0 \uc788\ub294 \ub450 \ube48 \uac1d\uccb4\uc785\ub2c8\ub2e4.\nFalse\n</code></pre></li> </ul> <p><code>256</code>\uc740 \uc874\uc7ac\ud558\ub294 \uac1d\uccb4\uc774\uc9c0\ub9cc <code>257</code>\uc740 \uc544\ub2d9\ub2c8\ub2e4</p> <p>\ud30c\uc774\uc36c\uc744 \uc2dc\uc791\ud558\uac8c \ub418\uba74, <code>-5</code>\ubd80\ud130 <code>256</code>\uae4c\uc9c0\uc758 \uc218\ub4e4\uc740 \ud560\ub2f9\ub429\ub2c8\ub2e4. \uc774 \uc218\ub4e4\uc740 \ub9ce\uc774 \uc0ac\uc6a9\ub418\uae30 \ub54c\ubb38\uc5d0 \ubbf8\ub9ac \uc900\ube44\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.</p> <p>https://docs.python.org/3/c-api/long.html \uc5d0\uc11c \uc778\uc6a9\ud55c \uae00\uc785\ub2c8\ub2e4.</p> <p>\ud604 \uad6c\ud604\uc740 -5\ubd80\ud130 256\uae4c\uc9c0\uc758 \uc815\uc218\ub4e4\uc744 \ub2f4\ub294 \ubc30\uc5f4\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \ub9cc\uc57d \uc774 \ubc94\uc704 \uc548\uc5d0 \uc788\ub294 \uc815\uc218\ub97c \ub9cc\ub4e4\uac8c \ub418\uba74 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \uac1d\uccb4\uc758 \ucc38\uc870\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c 1\uc758 \uac12\uc744 \ubc14\uafb8\ub294 \uac83\uc774 \uac00\ub2a5\ud560 \uac83\uc785\ub2c8\ub2e4. \uc544\ub9c8\ub3c4 \uc774 \uacbd\uc6b0\ub294 \ud30c\uc774\uc36c\uc758 \ud589\ub3d9\uc740 \uc815\uc758\ub418\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. :-)</p> <pre><code>&gt;&gt;&gt; id(256)\n10922528\n&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; id(a)\n10922528\n&gt;&gt;&gt; id(b)\n10922528\n&gt;&gt;&gt; id(257)\n140084850247312\n&gt;&gt;&gt; x = 257\n&gt;&gt;&gt; y = 257\n&gt;&gt;&gt; id(x)\n140084850247440\n&gt;&gt;&gt; id(y)\n140084850247344\n</code></pre> <p>\uc5ec\uae30\uc11c \uc778\ud130\ud504\ub9ac\ud130\ub294 <code>y = 257</code>\uc744 \uc2e4\ud589\ud560 \ub54c \uc704\uc5d0\uc11c \ubc8c\uc368 <code>257</code>\uc744 \uac00\uc9c0\ub294 \uc815\uc218\ub97c \ub9cc\ub4e4\uc5c8\ub2e4\ub294 \uac83\uc744 \uc54c \uc815\ub3c4\ub85c \ub611\ub611\ud558\uc9c0 \uc54a\uc544\uc11c \uba54\ubaa8\ub9ac\uc5d0 \uc0c8\ub85c\uc6b4 \uac1d\uccb4\ub97c \ub9cc\ub4e4\uac8c \ub429\ub2c8\ub2e4.</p> <p>\ube48 \ud29c\ud50c\uacfc \uac19\uc774 \ub2e4\ub978 \ubcc0\ud558\uc9c0 \uc54a\ub294 \uac1d\uccb4\uc5d0 \ub300\ud574\uc11c\ub3c4 \ube44\uc2b7\ud55c \ucd5c\uc801\ud654\uac00 \uc801\uc6a9\ub429\ub2c8\ub2e4. \ubc30\uc5f4\uc740 \ubcc0\ud560 \uc218 \uc788\uc5b4\uc11c, <code>[] is []</code>\ub294 \ud56d\uc0c1 <code>False</code>\ub97c \ubc18\ud658\ud558\uace0 <code>() is ()</code>\ub294 \ud56d\uc0c1 <code>True</code>\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uc774\ub294 \ub450 \ubc88\uc9f8 \uc608\uc81c\ub97c \uc131\uba85\ud569\ub2c8\ub2e4. \uc774\uc81c \uc138 \ubc88\uca30\ub85c \ub118\uc5b4\uac00\ubcfc\uae4c\uc694?</p> <p>\uac19\uc740 \uc904\uc5d0\uc11c \uac19\uc740 \uac12\uc73c\ub85c \ucd08\uae30\ud654\ud560 \ub54c <code>a</code>\uc640 <code>b</code> \ub458 \ub2e4 \uac19\uc740 \uac1d\uccb4\ub97c \ucc38\uc870\ud569\ub2c8\ub2e4.</p> <p>\ucd9c\ub825 \uacb0\uacfc</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; id(a)\n140640774013296\n&gt;&gt;&gt; id(b)\n140640774013296\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; id(a)\n140640774013392\n&gt;&gt;&gt; id(b)\n140640774013488\n</code></pre> <ul> <li> <p>a\uc640 b\uac00 \uac19\uc740 \uc904\uc5d0\uc11c <code>257</code>\ub85c \ud560\ub2f9\ub420 \ub54c, \ud30c\uc774\uc36c \uc778\ud130\ud504\ub9ac\ud130\ub294 \uc0c8\ub85c\uc6b4 \uac1d\uccb4\ub97c \ub9cc\ub4e6\uacfc \ub3d9\uc2dc\uc5d0 \ub450 \ubc88\uc9f8 \ubcc0\uc218\uac00 \ucc38\uc870\ud558\uac8c \ub429\ub2c8\ub2e4. \uc774\uac83\uc744 \ub2e4\ub978 \uc904\uc5d0\uc11c \ud55c\ub2e4\uba74, \uc778\ud130\ud504\ub9ac\ud130\ub294 <code>257</code>\uc774 \uc774\ubbf8 \uc788\ub294\uc9c0 \uc54c\uc9c0 \ubabb\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\uc774 \ud604\uc0c1\uc740 \ucef4\ud30c\uc77c\ub7ec \ucd5c\uc801\ud654\uc774\uace0 \ud2b9\ubcc4\ud788 \uc778\ud130\ub799\ud2f0\ube0c \ud658\uacbd\uc5d0\uc11c\ub9cc \uc801\uc6a9\ub429\ub2c8\ub2e4. \uc778\ud130\ud504\ub9ac\ud130\uc5d0 \ub450 \uc904\uc744 \uc785\ub825\ud558\uac8c \ub418\uba74, \uac01\uac01 \ucef4\ud30c\uc77c\ub418\uba70, \uac01\uac01 \ucd5c\uc801\ud654\ub429\ub2c8\ub2e4. \ub9cc\uc57d \uc774\ub97c <code>.py</code>\ud30c\uc77c\uc5d0\uc11c \uc2dc\ub3c4\ud55c\ub2e4\uba74, \ud55c \ubc88\uc5d0 \ucef4\ud30c\uc77c\ub418\uae30 \ub54c\ubb38\uc5d0 \uc774 \ud604\uc0c1\uc744 \ubcf4\uc9c0 \ubabb\ud569\ub2c8\ub2e4. \uc774 \ucd5c\uc801\ud654\ub294 \uc815\uc218\uc5d0\ub9cc \uad6d\ud55c\ub41c \uac83\uc774 \uc544\ub2c8\ub77c \ubb38\uc790\uc5f4(\"\ubb38\uc790\uc5f4\uc740 \uac00\ub054 \ud5f7\uac08\ub824\uc694\"\ub97c \ud655\uc778\ud574\ubcf4\uc138\uc694.)\uacfc \uc2e4\uc218\uc640 \uac19\uc774 \ubcc0\ud558\uc9c0 \uc54a\ub294 \uc790\ub8cc \uad6c\uc870\uc5d0\ub3c4 \uc801\uc6a9\ub429\ub2c8\ub2e4.</p> </li> </ul> <pre><code>&gt;&gt;&gt; a, b = 257.0, 257.0\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <ul> <li>\uc65c \ud30c\uc774\uc36c 3.7\uc5d0\uc11c\ub294 \uc791\ub3d9\ub418\uc9c0 \uc54a\ub098\uc694? \uac04\ub2e8\ud788 \ub9d0\ud558\uc790\uba74 \ucef4\ud30c\uc77c\ub7ec \ucd5c\uc801\ud654\ub294 \uad6c\ud604\ud558\uae30 \ub098\ub984\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. (\uc989, \ubc84\uc804\uc774\ub098 \uc6b4\uc601\uccb4\uc81c \ub4f1\uc5d0 \ub530\ub77c \ubc14\ub014 \uc218 \uc788\uc5b4\uc694) \uc544\uc9c1 \uc774 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0a8 \uc815\ud655\ud55c \uc774\uc720\ub97c \ucc3e\uc9c0 \ubabb\ud588\uc9c0\ub9cc, \uc774 \uc774\uc288\ub97c \ud655\uc778\ud574\ubcf4\uc138\uc694.</li> </ul>"},{"location":"KO/#_16","title":"\u25b6 \ud574\uc2dc \ube0c\ub77c\uc6b0\ub2c8","text":"<p>1.</p> <pre><code>some_dict = {}\nsome_dict[5.5] = \"JavaScript\"\nsome_dict[5.0] = \"Ruby\"\nsome_dict[5] = \"Python\"\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; some_dict[5.5]\n\"JavaScript\"\n&gt;&gt;&gt; some_dict[5.0] # \"Python\"\uc774 \"Ruby\"\ub97c \uc0ac\ub77c\uc9c0\uac8c \ud588\ub124\uc694.\n\"Python\"\n&gt;&gt;&gt; some_dict[5]\n\"Python\"\n\n&gt;&gt;&gt; complex_five = 5 + 0j\n&gt;&gt;&gt; type(complex_five)\ncomplex\n&gt;&gt;&gt; some_dict[complex_five]\n\"Python\"\n</code></pre> <p>\uadf8\ub798\uc11c, \uc65c \ud30c\uc774\uc36c\uc774 \uc5ec\uae30\uc800\uae30\uc11c \ubc1c\uacac\ub418\ub098\uc694?</p>"},{"location":"KO/#_17","title":"\ud83d\udca1 \uc124\uba85","text":"<ul> <li>\ud30c\uc774\uc36c \ub515\uc154\ub108\ub9ac \ud0a4\uc758 \uc720\uc77c\uc131\uc740 \ud0a4\uac00 \uc11c\ub85c \ub3d9\uc77c\ud55c\uc9c0\uac00 \uc544\ub2c8\ub77c, \ub3d9\ub4f1\ud55c \uac12\uc73c\ub85c \uacb0\uc815\ub429\ub2c8\ub2e4. \uadf8\ub798\uc11c <code>5</code>, <code>5.0</code>, \uadf8\ub9ac\uace0 <code>5 + 0j</code>\uac00 \uc11c\ub85c \ub2e4\ub978 \ud0c0\uc785\uc774\ub354\ub77c\ub3c4 \uac19\uc740 \uac12\uc744 \uac00\uc9c0\uae30 \ub54c\ubb38\uc5d0 \uac19\uc740 \ub515\uc154\ub108\ub9ac\ub098 \uc9d1\ud569\uc548\uc5d0 \uc788\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8 \uc911 \ud558\ub098\ub97c \uc0bd\uc785\ud558\uac8c \ub418\uba74 (<code>KeyError</code>\uc744 \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \uac83\uc774 \uc544\ub2cc) \ub3d9\ub4f1\ud55c \uc6d0\uc18c\ub97c \ubc1c\uacac\ud558\ub294 \uac83\uc744 \uc131\uacf5\ud558\uac8c \ub429\ub2c8\ub2e4.   <pre><code>&gt;&gt;&gt; 5 == 5.0 == 5 + 0j\nTrue\n&gt;&gt;&gt; 5 is not 5.0 is not 5 + 0j\nTrue\n&gt;&gt;&gt; some_dict = {}\n&gt;&gt;&gt; some_dict[5.0] = \"Ruby\"\n&gt;&gt;&gt; 5.0 in some_dict\nTrue\n&gt;&gt;&gt; (5 in some_dict) and (5 + 0j in some_dict)\nTrue\n</code></pre></li> <li>\uc774\ub294 \ud55c \uc6d0\uc18c\uc758 \uac12\uc744 \uc9c0\uc815\ud560 \ub54c\ub3c4 \uc801\uc6a9\ub429\ub2c8\ub2e4. \uadf8\ub798\uc11c <code>some_dict[5] = \"Python\"</code>\uc744 \ud558\uac8c \ub418\uba74, \ud30c\uc774\uc36c\uc740 \ub3d9\ub4f1\ud55c \ud0a4\uc778 <code>5.0 -&gt; \"Ruby\"</code>\ub97c \ucc3e\uac8c \ub418\uace0, \uadf8 \uac12\uc744 \ub36e\uc5b4\uc4f0\uac8c \ub429\ub2c8\ub2e4.    <pre><code>&gt;&gt;&gt; some_dict\n{5.0: 'Ruby'}\n&gt;&gt;&gt; some_dict[5] = \"Python\"\n&gt;&gt;&gt; some_dict\n{5.0: 'Python'}\n</code></pre></li> <li> <p>\uadf8\ub7ec\uba74 \uc6b0\ub9ac\ub294 \uc5b4\ub5bb\uac8c (<code>5.0</code> \ub300\uc2e0) <code>5</code>\uc778 \ud0a4\ub97c \uc5c5\ub370\uc774\ud2b8 \ud560 \uc218 \uc788\uc744\uae4c\uc694? \uc774\ub294 \uac12\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uac83\uc73c\ub85c\ub294 \ud560 \uc218 \uc5c6\uc9c0\ub9cc, \uba3c\uc800 \ud0a4\ub97c \uc9c0\uc6b0\uace0 (<code>del some_dict[5.0]</code>), \ub2e4\uc2dc \uc2e4\uc218 <code>5.0</code> \ub300\uc2e0 \uc815\uc218 <code>5</code>\uc124\uc815\ud558\ub294 (<code>some_dict[5]</code>) \uac83\uc744 \ud1b5\ud574 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub294 \ub4dc\ubb3c\uae34 \ud558\uaca0\ub124\uc694.</p> </li> <li> <p>\ud30c\uc774\uc36c\uc740 <code>5.0</code>\uc744 \ud3ec\ud568\ud558\uace0 \uc788\ub294 \ub515\uc154\ub108\ub9ac\uc5d0\uc11c \uc5b4\ub5bb\uac8c <code>5</code>\ub97c \ucc3e\uc558\uc744\uae4c\uc694? \ud30c\uc774\uc36c\uc740 \ubaa8\ub4e0 \uc6d0\uc18c\ub97c \ubcf4\uc9c0 \uc54a\uace0 \ud574\uc2dc \ud568\uc218\ub97c \uc774\uc6a9\ud574 \uc0c1\uc218 \uc2dc\uac04\uc5d0 \ud574\uacb0\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc774 <code>foo</code>\ub77c\ub294 \ud0a4\ub97c \ub515\uc154\ub108\ub9ac\uc5d0\uc11c \ucc3e\uc744 \ub54c, \uba3c\uc800 <code>hash(foo)</code>\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4. (\uc774\ub294 \uc0c1\uc218\uc2dc\uac04\uc5d0 \uacc4\uc0b0\ub429\ub2c8\ub2e4). \ud30c\uc774\uc36c\uc5d0\uc11c\ub294 \ub3d9\ub4f1\ud55c \uac12\uc740 \uac19\uc740 \ud574\uc2dc\uac12\uc744 \uac00\uc9c0\ubbc0\ub85c (\uad00\ub828 \ubb38\uc11c), <code>5</code>, <code>5.0</code>, \uadf8\ub9ac\uace0 <code>5 + 0j</code>\ub294 \uac19\uc740 \ud574\uc2dc \uac12\uc744 \uac00\uc9c0\uac8c \ub429\ub2c8\ub2e4.    <pre><code>&gt;&gt;&gt; 5 == 5.0 == 5 + 0j\nTrue\n&gt;&gt;&gt; hash(5) == hash(5.0) == hash(5 + 0j)\nTrue\n</code></pre> \uad00\ub828 \uc815\ubcf4: \ubc18\ub300\ub294 \ucc38\uc774 \uc544\ub2d0 \uc218\uac00 \uc788\uc2b5\ub2c8\ub2e4: \ud574\uc2dc \uac12\uc774 \uac19\uc740 \ub450 \uac1d\uccb4\ub294 \ub3d9\ub4f1\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uc774\ub294 \ud574\uc2dc \ucda9\ub3cc\uc774\ub77c\uace0 \uc54c\ub824\uc838 \uc788\uace0 \ud574\uc2f1\uc758 \uc0c1\uc218 \uc2dc\uac04\uc758 \uc131\ub2a5\uc744 \uc800\ud558\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. )</p> </li> </ul>"},{"location":"KO/#_18","title":"\u25b6 \uae4a\uc774 \ub4e4\uc5b4\uac00\uba74 \uc6b0\ub9ac\ub294 \ub2e4 \ub611\uac19\uc544.","text":"<pre><code>class WTF:\n  pass\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; WTF() == WTF() # \ub450 \uc778\uc2a4\ud134\uc2a4\ub294 \uac19\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\nFalse\n&gt;&gt;&gt; WTF() is WTF() # \uba54\ubaa8\ub9ac \uc704\uc5d0\uc11c\ub3c4 \ub2e4\ub974\ub124\uc694\nFalse\n&gt;&gt;&gt; hash(WTF()) == hash(WTF()) # \ud574\uc2dc\ub294 _\ub2f9\uc5f0\ud788_ \uac19\uc544\uc57c \ud569\ub2c8\ub2e4\nTrue\n&gt;&gt;&gt; id(WTF()) == id(WTF())\nTrue\n</code></pre>"},{"location":"KO/#_19","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li><code>id</code>\uac00 \ud638\ucd9c\ub418\uc5c8\uc744 \ub54c, \ud30c\uc774\uc36c\uc5d0\uc11c <code>WTF</code> \uac1d\uccb4\ub97c \ub9cc\ub4e4\uace0 <code>id</code> \ud568\uc218\ub85c \ub118\uaca8\uc90d\ub2c8\ub2e4. <code>id</code> \ud568\uc218\ub294 \uadf8 \uac1d\uccb4\uc758 \uc544\uc774\ub514(<code>id</code>, \uba54\ubaa8\ub9ac\uc0c1\uc758 \uc704\uce58)\ub97c \uac00\uc838\uc624\uace0 \uac1d\uccb4\ub97c \ubc84\ub9bd\ub2c8\ub2e4. \uac1d\uccb4\ub294 \ud30c\uad34\ub429\ub2c8\ub2e4.</li> <li>\ub9cc\uc57d \uc774\uac83\uc744 \ub450 \ubc88 \ud55c\ub2e4\uba74, \ud30c\uc774\uc36c\uc740 \ub450 \ubc88\uc9f8 \uac1d\uccb4\ub3c4 \uac19\uc740 \uba54\ubaa8\ub9ac\uc5d0 \ud560\ub2f9\ud558\uac8c \ub429\ub2c8\ub2e4. (CPython\uc5d0\uc11c\ub294) <code>id</code>\uac00 \uba54\ubaa8\ub9ac\uc758 \uc704\uce58\ub97c \uac1d\uccb4\uc758 \uc544\uc774\ub514\ub85c \uc4f0\uae30 \ub54c\ubb38\uc5d0 \ub450 \uc544\uc774\ub514\ub294 \uac19\uac8c \ub429\ub2c8\ub2e4.</li> <li>\uadf8\ub798\uc11c \uac1d\uccb4\uc758 \uc544\uc774\ub514\ub294 \uac1d\uccb4\uac00 \ud30c\uad34\ub418\uc9c0 \uc54a\ub294 \ud55c \uace0\uc720\ud569\ub2c8\ub2e4. \uac1d\uccb4\uac00 \ud30c\uad34\ub41c \ud6c4 \ub610\ub294 \uc0dd\uc131\ub418\uae30 \uc774\uc804\uc5d0\ub294 \ub2e4\ub978 \uac83\uc774 \uac19\uc740 \uc544\uc774\ub514\ub97c \uac00\uc9c8 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\uadf8\ub7ec\uba74 \uc65c <code>is</code> \uc5f0\uc0b0\uc790\ub294 <code>False</code>\ub77c\uace0 \ucd9c\ub825\ud588\uc744\uae4c\uc694? \uc774 \ucf54\ub4dc\ub97c \ubcf4\uc138\uc694.</li> </ul> <pre><code>class WTF(object):\n  def __init__(self): print(\"I\")\n  def __del__(self): print(\"D\")\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; WTF() is WTF()\nI\nI\nD\nD\nFalse\n&gt;&gt;&gt; id(WTF()) == id(WTF())\nI\nD\nI\nD\nTrue\n</code></pre> <p>\uc5ec\ub7ec\ubd84\ub3c4 \ubcf4\uc168\ub2e4\uc2dc\ud53c \uac1d\uccb4\ub4e4\uc774 \ub9cc\ub4e4\uc5b4\uc9c0\uace0 \ud30c\uad34\ub418\ub294 \uc21c\uc11c\uac00 \ub2e4\ub974\uac8c \ub429\ub2c8\ub2e4.</p>"},{"location":"KO/#_20","title":"\u25b6 \uc9c8\uc11c \uc18d\uc758 \ubb34\uc9c8\uc11c *","text":"<pre><code>from collections import OrderedDict\n\ndictionary = dict()\ndictionary[1] = 'a'; dictionary[2] = 'b';\n\nordered_dict = OrderedDict()\nordered_dict[1] = 'a'; ordered_dict[2] = 'b';\n\nanother_ordered_dict = OrderedDict()\nanother_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';\n\nclass DictWithHash(dict):\n    \"\"\"\n    __hash__ \ub9c8\ubc95\uc744 \uad6c\ud604\ud558\ub294 dict\n    \"\"\"\n    __hash__ = lambda self: 0\n\nclass OrderedDictWithHash(OrderedDict):\n    \"\"\"\n    __hash__ \ub9c8\ubc95\uc744 \uad6c\ud604\ud558\ub294 OrderedDict\n    \"\"\"\n    __hash__ = lambda self: 0\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc</p> <pre><code>&gt;&gt;&gt; dictionary == ordered_dict # \ub9cc\uc57d a == b \uc774\uace0,\nTrue\n&gt;&gt;&gt; dictionary == another_ordered_dict # b == c \uc774\uba74\nTrue\n&gt;&gt;&gt; ordered_dict == another_ordered_dict # \uc65c c == a \uac00 \uc544\ub2d0\uae4c\uc694?\nFalse\n\n# \uc9d1\ud569(set)\uc740 \uc720\uc77c\ud55c \uc6d0\uc18c\ub4e4\ub9cc \uac00\uc9c0\uace0 \uc788\uc73c\ubbc0\ub85c,\n# \uc704\uc758 \ub515\uc154\ub108\ub9ac\ub85c \uc9d1\ud569\uc744 \ub9cc\ub4e4\uace0 \uc5b4\ub5a4 \uc77c\uc774 \uc77c\uc5b4\ub098\ub294\uc9c0 \uc54c\uc544\ubd05\uc2dc\ub2e4.\n\n&gt;&gt;&gt; len({dictionary, ordered_dict, another_ordered_dict})\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'dict'\n\n# \ub515\uc154\ub108\ub9ac\ub294 __hash__\uac00 \uad6c\ud604\ub418\uc5b4\uc788\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uadf8\ub7f0\uac83 \uac19\ub124\uc694.\n# \uadf8\ub7ec\uba74 \uc704\uc5d0\uc11c \ub9cc\ub4e0 \ub798\ud37c(wrapper) \ud074\ub798\uc2a4\ub97c \uc368\ubd05\uc2dc\ub2e4.\n&gt;&gt;&gt; dictionary = DictWithHash()\n&gt;&gt;&gt; dictionary[1] = 'a'; dictionary[2] = 'b';\n&gt;&gt;&gt; ordered_dict = OrderedDictWithHash()\n&gt;&gt;&gt; ordered_dict[1] = 'a'; ordered_dict[2] = 'b';\n&gt;&gt;&gt; another_ordered_dict = OrderedDictWithHash()\n&gt;&gt;&gt; another_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';\n&gt;&gt;&gt; len({dictionary, ordered_dict, another_ordered_dict})\n1\n&gt;&gt;&gt; len({ordered_dict, another_ordered_dict, dictionary}) # \uc21c\uc11c\ub97c \ubc14\uafd4\ubd05\uc2dc\ub2e4.\n2\n</code></pre> <p>\ubb34\uc2a8 \uc77c\uc774 \ubc8c\uc5b4\uc9c0\uace0 \uc788\ub294\uac70\uc8e0?</p>"},{"location":"KO/#_21","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li><code>dictionary</code> \uadf8\ub9ac\uace0 <code>ordered_dict</code>, <code>another_ordered_dict</code>\uac00 \uc790\ub3d9\uc801\uc73c\ub85c \uac19\uc9c0 \uc54a\uc740 \uc774\uc720\ub294 <code>OrderedDict</code> \ud074\ub798\uc2a4\uc5d0\uc11c <code>__eq__</code> \uba54\uc18c\ub4dc\uac00 \uad6c\ud604\ub41c \ubc29\uc2dd \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub3c4\ud050\uba3c\ud2b8\uc5d0\uc11c <p>OrderedDict \uc624\ube0c\uc81d\ud2b8\uc774 \uac19\uc74c\uc744 \ud655\uc778\ud558\ub294 \ubc29\ubc95\uc740 \uc21c\uc11c\uc640 \uad00\ub828\uc774 \uc788\uace0 <code>list(od1.items())==list(od2.items())</code>\ub85c \uad6c\ud604\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. <code>OrderedDict</code> \uc624\ud504\uc81d\ud2b8\uc640 \ub2e4\ub978 \ub9e4\ud551 \uc624\ud504\uc81d\ud2b8\ub4e4\uc758 \uac19\uc74c\uc744 \ud655\uc778\ud558\ub294 \ubc29\ubc95\uc740 \uc21c\uc11c\uc640 \uc0c1\uad00\uc788\uc2b5\ub2c8\ub2e4.</p> </li> <li>\uc704\uc640 \uac19\uc774 \ub3d9\uc791\ud558\ub294 \uc774\uc720\ub294 <code>OrderedDict</code> \uc624\ube0c\uc81d\ud2b8\uac00 \ubc14\ub85c \ubcf4\ud1b5\uc758 \ub515\uc154\ub108\ub9ac\uac00 \uc0ac\uc6a9\ub418\ub294 \uacf3\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\uac8c \ud558\uae30 \uc704\ud574\uc11c \uc785\ub2c8\ub2e4.</li> <li>\uadf8\ub7ec\uba74 \uc65c <code>set</code> \uc624\ube0c\uc81d\ud2b8\uc5d0\uc11c \uc21c\uc11c\ub97c \ubc14\uafbc\uac83\uc774 \uc65c \uae38\uc774\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce5c \uac83\uc77c\uae4c\uc694? \uac19\uc74c\uc744 \ud655\uc778\ud558\ub294 \ud568\uc218\uac00 \uc798 \uad6c\ud604\ub418\uc5b4 \uc788\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc9d1\ud569(set)\uc740 \uc720\uc77c\ud55c \uc6d0\uc18c\ub4e4\uc758 \uc21c\uc11c\ub97c \uace0\ub824\ud558\uc9c0 \uc54a\uc740 \uc790\ub8cc\uad6c\uc870\uc774\ubbc0\ub85c, \uac01 \uc6d0\uc18c\ub97c \uc0bd\uc785\ud558\ub294 \uc21c\uc11c\ub294 \uc0c1\uad00\uc774 \uc5c6\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774 \uacbd\uc6b0\uc5d0\ub294 \uc0c1\uad00\uc774 \uc788\ub124\uc694. \ud55c\ubc88 \uae4a\uc774 \ub4e4\uc5b4\uac00 \ubd05\uc2dc\ub2e4.</li> </ul> <pre><code>&gt;&gt;&gt; some_set = set()\n&gt;&gt;&gt; some_set.add(dictionary) # \uc774\uac83\ub4e4\uc740 \uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c\uc758 \ub9e4\ud551 \uc624\ube0c\uc81d\ud2b8\ub4e4\uc785\ub2c8\ub2e4\n&gt;&gt;&gt; ordered_dict in some_set\nTrue\n&gt;&gt;&gt; some_set.add(ordered_dict)\n&gt;&gt;&gt; len(some_set)\n1\n&gt;&gt;&gt; another_ordered_dict in some_set\nTrue\n&gt;&gt;&gt; some_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(some_set)\n1\n\n&gt;&gt;&gt; another_set = set()\n&gt;&gt;&gt; another_set.add(ordered_dict)\n&gt;&gt;&gt; another_ordered_dict in another_set\nFalse\n&gt;&gt;&gt; another_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(another_set)\n2\n&gt;&gt;&gt; dictionary in another_set\nTrue\n&gt;&gt;&gt; another_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(another_set)\n2\n</code></pre> <p>\uadf8\ub798\uc11c <code>ordered_dict == another_ordered_dict</code>\uc774 <code>False</code>\uc774\uace0 <code>ordered_dict</code>\uc774 <code>another_set</code>\uc548\uc5d0 \ub4e4\uc5b4\uc788\uc5c8\uc73c\ubbc0\ub85c <code>another_ordered_dict in another_set</code>\uc774 <code>False</code>\uc778 \ubaa8\uc21c\uc73c\ub85c \uc778\ud574\uc11c \uc0dd\uae34\uc77c \uc785\ub2c8\ub2e4.</p>"},{"location":"KO/#_22","title":"\u25b6 \uacc4\uc18d \uc2dc\ub3c4\ud574 \ubcf4\uc138\uc694... *","text":"<pre><code>def some_func():\n    try:\n        return 'from_try'\n    finally:\n        return 'from_finally'\n\ndef another_func():\n    for _ in range(3):\n        try:\n            continue\n        finally:\n            print(\"Finally!\")\n\ndef one_more_func(): # \uc54c\uc558\ub2e4!\n    try:\n        for i in range(3):\n            try:\n                1 / i\n            except ZeroDivisionError:\n                # \uc5ec\uae30\uc11c \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uace0 \ubc18\ubcf5\ubb38 \ubc16\uc5d0\uc11c \ub2e4\ub904\ubcf4\ub3c4\ub85d \ud558\uc8e0\n                raise ZeroDivisionError(\"A trivial divide by zero error\")\n            finally:\n                print(\"Iteration\", i)\n                break\n    except ZeroDivisionError as e:\n        print(\"Zero division error ocurred\", e)\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; some_func()\n'from_finally'\n\n&gt;&gt;&gt; another_func()\nFinally!\nFinally!\nFinally!\n\n&gt;&gt;&gt; 1 / 0\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero\n\n&gt;&gt;&gt; one_more_func()\nIteration 0\n</code></pre>"},{"location":"KO/#_23","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li><code>return</code> \ub610\ub294 <code>break</code>, <code>continue</code>\uac00 \"try-finally\" \uc5d0\uc11c\uc758 <code>try</code>\ubb38 \uc548\uc5d0\uc11c \uc2e4\ud589\ub41c\ub2e4\uba74, <code>finally</code> \uad6c\ubb38\ub3c4 \ub05d\ub098\uae30 \uc804\uc5d0 \uc2e4\ud589\ub429\ub2c8\ub2e4.</li> <li>\ud568\uc218\uc758 \ub9ac\ud134\uac12\uc740 \ub9c8\uc9c0\ub9c9 \ub9ac\ud134\ubb38\uc5d0 \uc758\ud574 \uacb0\uc815\ub429\ub2c8\ub2e4. <code>finally</code> \uad6c\ubb38\uc774 \ud56d\uc0c1 \ub9c8\uc9c0\ub9c9\uc5d0 \uc2e4\ud589\ub418\ubbc0\ub85c, <code>finally</code> \uc548\uc5d0 \uc788\ub294 \ub9ac\ud134\ubb38\uc774 \uc2e4\ud589\ub429\ub2c8\ub2e4.</li> <li>\uc5ec\uae30\uc11c \uc8fc\uc758\ud560 \uc810\uc740 \ub9cc\uc57d <code>finally</code> \uad6c\ubb38 \uc548\uc5d0\uc11c <code>return</code>\uc774\ub098 <code>break</code>\uc774 \uc788\uc744 \ub54c \uc784\uc2dc\ub85c \uc800\uc7a5\ub41c \uc608\uc678\uac00 \uc5c6\uc5b4\uc9d1\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#for","title":"\u25b6 \ubb34\uc5c7\uc744 \uc704\ud574\uc11c(for)?","text":"<pre><code>some_string = \"wtf\"\nsome_dict = {}\nfor i, some_dict[i] in enumerate(some_string):\n    i = 10\n</code></pre> <p>\ucd9c\ub825\uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; some_dict # \ub515\uc154\ub108\ub9ac\uac00 \ub098\ud0c0\ub098\ub124\uc694\n{0: 'w', 1: 't', 2: 'f'}\n</code></pre>"},{"location":"KO/#_24","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li><code>for</code> \ubb38\uc740 \ud30c\uc774\uc36c \ubb38\ubc95\uc5d0\uc11c \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4:</li> </ul> <pre><code>for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]\n</code></pre> <p><code>exprlist</code>\ub294 \ud560\ub2f9\ub418\ub294 \ubd80\ubd84\uc785\ub2c8\ub2e4. \uc774\ub294 <code>{exprlist} = {next_value}</code>\uc640 \uac19\ub2e4\ub294 \ub9d0\uc774\uace0 \uac01\uac01\uc758 \uc6d0\uc18c\uc5d0 \ub300\ud574 \uc2e4\ud589\ub429\ub2c8\ub2e4.   \uc544\ub798\uc5d0 \uc7ac\ubbf8\uc788\ub294 \uc608\uc81c\uac00 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>for i in range(4):\n    print(i)\n    i = 10\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>0\n1\n2\n3\n</code></pre> <p>\ubc18\ubcf5\ubb38\uc774 \ud55c \ubc88\ub9cc \ub3cc\uae30\ub97c \uae30\ub300\ud588\ub098\uc694?</p> <p>\ud83d\udca1 \uc124\uba85:</p> <ul> <li> <p>\ubc18\ubcf5\ubb38\uc774 \ud30c\uc774\uc36c\uc5d0\uc11c \ud2b9\ubcc4\ud558\uac8c \uc791\ub3d9\ud558\uae30 \ub54c\ubb38\uc5d0 \ud560\ub2f9\ubb38 <code>i = 10</code>\uc740 \uc808\ub300\ub85c \ubc18\ubcf5\ubb38\uc5d0 \uc601\ud5a5\uc744 \ub07c\uce58\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub9e4\ubc88 \ubc18\ubcf5\ud558\uae30 \uc804\uc5d0 \ubc18\ubcf5\uc790(iterator)\uc5d0 \uc758\ud574 \uc81c\uacf5\ub41c \uac12(\uc704 \uacbd\uc6b0\ub294 <code>range(4)</code>)\ub4e4\uc774 \ubcc0\uc218(\uc704 \uacbd\uc6b0\ub294 <code>i</code>)\uc5d0 \ud560\ub2f9\ub429\ub2c8\ub2e4.</p> </li> <li> <p><code>enumerate(some_string)</code> \ud568\uc218\ub294 \ubc18\ubcf5\ub9c8\ub2e4 \uc0c8\ub85c\uc6b4 \uac12 <code>i</code> (\ud558\ub098\uc529 \uc62c\ub77c\uac00\ub294 \uce74\uc6b4\ud130)\uc640 <code>some_string</code>\uc5d0 \uc788\ub294 \ubb38\uc790 \ud558\ub098\uc529\uc744 yield \ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub515\uc154\ub108\ub9ac <code>some_dict</code>\uc5d0 \ud0a4\uac00 <code>i</code>\uc778 \uac12\uc744 \uadf8 \ubb38\uc790\ub85c \uc9c0\uc815\ud569\ub2c8\ub2e4. \ubc18\ubcf5\ubb38\uc744 \ud480\uc5b4\ubcf4\uba74 \uc544\ub798\ucc98\ub7fc \ub098\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4:   <pre><code>&gt;&gt;&gt; i, some_dict[i] = (0, 'w')\n&gt;&gt;&gt; i, some_dict[i] = (1, 't')\n&gt;&gt;&gt; i, some_dict[i] = (2, 'f')\n&gt;&gt;&gt; some_dict\n</code></pre></p> </li> </ul>"},{"location":"KO/#_25","title":"\u25b6 \uc2e4\ud589\ub418\ub294 \uc2dc\uac04\uc758 \ucc28\uc774","text":"<p>1.</p> <pre><code>array = [1, 8, 15]\n# \uc804\ud615\uc801\uc778 \uc81c\ub108\ub808\uc774\ud130(generator) \uc608\uc81c\uc785\ub2c8\ub2e4\ngen = (x for x in array if array.count(x) &gt; 0)\narray = [2, 8, 22]\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; print(list(gen)) # \ub2e4\ub978 \uac12\ub4e4\uc740 \uc5b4\ub514 \uac14\ub098\uc694?\n[8]\n</code></pre> <p>2.</p> <pre><code>array_1 = [1,2,3,4]\ngen_1 = (x for x in array_1)\narray_1 = [1,2,3,4,5]\n\narray_2 = [1,2,3,4]\ngen_2 = (x for x in array_2)\narray_2[:] = [1,2,3,4,5]\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; print(list(gen_1))\n[1, 2, 3, 4]\n\n&gt;&gt;&gt; print(list(gen_2))\n[1, 2, 3, 4, 5]\n</code></pre> <p>3.</p> <pre><code>array_3 = [1, 2, 3]\narray_4 = [10, 20, 30]\ngen = (i + j for i in array_3 for j in array_4)\n\narray_3 = [4, 5, 6]\narray_4 = [400, 500, 600]\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; print(list(gen))\n[401, 501, 601, 402, 502, 602, 403, 503, 603]\n</code></pre>"},{"location":"KO/#_26","title":"\ud83d\udca1 \uc124\uba85","text":"<ul> <li>\uc81c\ub108\ub808\uc774\ud130\uc5d0\uc11c\ub294 <code>in</code> \ubd80\ubd84\uc740 \uc120\uc5b8\ud560 \ub54c \uc2e4\ud589\ub418\uc9c0\ub9cc \uc870\uac74\ubb38\uc740 \ub7f0\ud0c0\uc784\uc5d0 \uc2e4\ud589\ub429\ub2c8\ub2e4.</li> <li>\uadf8\ub798\uc11c \ub7f0\ud0c0\uc784 \uc774\uc804\uc5d0, <code>array</code>\uac00 <code>[2, 8, 22]</code>\ub85c \uc7ac\ud560\ub2f9 \ub418\uace0 <code>1</code>, <code>8</code>, <code>15</code>\uc911\uc5d0 <code>8</code>\uc774 \uac1c\uc218\uac00 <code>0</code>\ubcf4\ub2e4 \ud06c\ubbc0\ub85c \uc81c\ub108\ub808\uc774\ud130\ub294 \uc624\uc9c1 <code>8</code>\ub9cc yield \ud569\ub2c8\ub2e4.</li> <li>\ub450 \ubc88\uca30 \uc608\uc81c\uc758 <code>gen_1</code>\uacfc <code>gen_2</code>\uc758 \ucd9c\ub825 \uacb0\uacfc\uac00 \ub2e4\ub978 \uc774\uc720\ub294 <code>array_1</code>\uacfc <code>array_2</code>\uac00 \uc7ac\ud560\ub2f9\ub418\ub294 \ubc29\ubc95\uc774 \ub2e4\ub974\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</li> <li>\uccab \ubc88\uc9f8 \uacbd\uc6b0\uc5d0\ub294, <code>array_1</code>\uc774 \uc0c8\ub85c\uc6b4 \uac1d\uccb4\uc778 <code>[1, 2, 3, 4, 5]</code>\uac00 \ud560\ub2f9\ub418\uace0 <code>in</code> \ubd80\ubd84\uc740 \uc120\uc5b8\ud560 \ub54c \uacc4\uc0b0\ub418\uae30 \ub54c\ubb38\uc5d0 \uacc4\uc18d \uc774\uc804 \uac1d\uccb4\uc778 <code>[1, 2, 3, 4]</code>\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\ub450 \ubc88\uc9f8 \uacbd\uc6b0\uc5d0\ub294, <code>array_2</code>\uc5d0 \uc2ac\ub77c\uc774\uc2a4 \uac1d\uccb4\uac00 \ud560\ub2f9\ub420 \ub54c \uc774\uc804\uc758 \uac1d\uccb4\uc778 <code>[1, 2, 3, 4]</code>\ub97c <code>[1, 2, 3, 4, 5]</code>\ub85c \ubcc0\ud654\uc2dc\ud0b5\ub2c8\ub2e4. \ub530\ub77c\uc11c <code>g2</code>\uc640 <code>array_2</code> \ubaa8\ub450 \uac19\uc740 (\uc0c8\ub86d\uac8c <code>[1, 2, 3, 4, 5]</code>\ub85c \uc5c5\ub370\uc774\ud2b8\ub41c) \uac1d\uccb4\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\uc88b\uc544\uc694, \uadf8\ub7f0\ub370 \uc9c0\uae08\uae4c\uc9c0\uc758 \ub85c\uc9c1\uc744 \uc0b4\ud3b4\ubcf4\uba74, \uc138 \ubc88\uc9f8 \uc608\uc81c\uc758 <code>list(g)</code>\uc758 \uac12\uc774 <code>[11, 21, 31, 12, 22, 32, 13, 23, 33]</code> \uac00 \ub418\uc5b4\uc57c \ud558\ub294 \uac83\uc774 \uc544\ub2cc\uac00\uc694? (\uc65c\ub0d0\ud558\uba74 <code>array_3</code>\uacfc <code>array_4</code>\uac00 <code>array_1</code>\ucc98\ub7fc \ud589\ub3d9\ud560 \ud14c\ub2c8\uae4c\uc694). (\uc624\uc9c1) <code>array_4</code>\uc758 \uac12\ub9cc\uc774 \uc5c5\ub370\uc774\ud2b8\ub418\ub294 \uc774\uc720\ub294 PEP-289\uc5d0\uc11c \uc124\uba85\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4</li> </ul> <p>for \uad6c\ubb38\uc758 \uac00\uc7a5 \ubc14\uae65\ucabd \ubd80\ubd84\ub9cc \ubc14\ub85c \uacc4\uc0b0\ub418\uace0, \ub2e4\ub978 \uad6c\ubb38\ub4e4\uc740 \uc81c\ub108\ub808\uc774\ud130\uac00 \uc2e4\ud589\ub420\ub54c\uae4c\uc9c0 \ucc38\uc870\ub418\ub294 \uac83\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.</p>"},{"location":"KO/#is-not-is-not","title":"\u25b6 <code>is not ...</code> \uc740 <code>is (not ...)</code>\uc774 \uc544\ub2c8\ub2e4","text":"<pre><code>&gt;&gt;&gt; 'something' is not None\nTrue\n&gt;&gt;&gt; 'something' is (not None)\nFalse\n</code></pre>"},{"location":"KO/#_27","title":"\ud83d\udca1 \uc124\uba85","text":"<ul> <li><code>is not</code> \uc740 \ub2e8\uc77c \uc774\uc9c4 \uc5f0\uc0b0\uc790\uc774\uba70, \uc774\ub294 <code>is</code>\uc640 <code>not</code>\uc744 \ub530\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uacfc\ub294 \ub2e4\ub978 \uae30\ub2a5\uc744 \ud569\ub2c8\ub2e4.</li> <li><code>is not</code> \uc5f0\uc0b0\uc790\ub294 \uc591\ucabd\uc758 \ubcc0\uc218\uac00 \ub3d9\uc77c\ud55c \uac1d\uccb4\ub97c \uac00\ub9ac\ud0a4\uba74 <code>False</code>\ub97c, \uc544\ub2c8\uba74 <code>True</code>\ub85c \ub098\ud0c0\ub0a9\ub2c8\ub2e4.</li> <li>In the example, <code>(not None)</code> evaluates to <code>True</code> since the value <code>None</code> is <code>False</code> in a boolean context, so the expression becomes <code>'something' is True</code>.</li> </ul>"},{"location":"KO/#x","title":"\u25b6 X\uac00 \uccab \ubc88\uc9f8 \uc2dc\ub3c4\uc5d0\uc11c \uc2b9\ub9ac\ud558\ub294 \ud2f1\ud0dd\ud1a0!","text":"<pre><code># row\ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4\nrow = [\"\"] * 3 #row i['', '', '']\n# board\ub97c \ub9cc\ub4ed\ub2c8\ub2e4\nboard = [row] * 3\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; board\n[['', '', ''], ['', '', ''], ['', '', '']]\n&gt;&gt;&gt; board[0]\n['', '', '']\n&gt;&gt;&gt; board[0][0]\n''\n&gt;&gt;&gt; board[0][0] = \"X\"\n&gt;&gt;&gt; board\n[['X', '', ''], ['X', '', ''], ['X', '', '']]\n</code></pre> <p>\uc6b0\ub9ac\ub294 \uc138 \uac1c\uc758 <code>\"X\"</code>\ub97c \ud560\ub2f9\ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \uadf8\ub7ac\ub098\uc694?</p>"},{"location":"KO/#_28","title":"\ud83d\udca1 \uc124\uba85:","text":"<p>\ub2e4\uc74c \uc2dc\uac01\ud654 \uc790\ub8cc\ub294 <code>row</code> \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud560 \ub54c \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc5b4\ub5a0\ud55c \uc77c\uc774 \uc77c\uc5b4\ub098\ub294\uc9c0 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.</p> <p></p> <p>\uadf8\ub9ac\uace0 \ub2e4\uc74c\uc740 <code>row</code>\ub97c \uacf1\ud558\uc5ec <code>board</code>\ub97c \ucd08\uae30\ud654\ud560 \ub54c, \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc77c\uc5b4\ub098\ub294 \uc77c\uc785\ub2c8\ub2e4. (\uac01\uac01\uc758 \uc6d0\uc18c <code>board[0]</code>, <code>board[1]</code> \uadf8\ub9ac\uace0 <code>board[2]</code>\ub294 <code>row</code>\uac00 \ucc38\uc870\ud55c \ub3d9\uc77c\ud55c \ub9ac\uc2a4\ud2b8\uc758 \ucc38\uc870\uc790\uc785\ub2c8\ub2e4.)</p> <p></p> <p>\uc704\uc640 \uac19\uc740 \ud604\uc0c1\uc740 <code>row</code>\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 <code>board</code>\ub97c \uc0dd\uc131\ud558\uc5ec \ud574\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uc774 \uc774\uc288\uc5d0\uc11c \uc9c8\ubb38\ub418\uc5c8\uc2b5\ub2c8\ub2e4).</p> <pre><code>&gt;&gt;&gt; board = [['']*3 for _ in range(3)]\n&gt;&gt;&gt; board[0][0] = \"X\"\n&gt;&gt;&gt; board\n[['X', '', ''], ['', '', ''], ['', '', '']]\n</code></pre>"},{"location":"KO/#_29","title":"\u25b6 \ub2ec\ub77c\ubd99\ub294 \ucd9c\ub825 \ud568\uc218","text":"<p>1.</p> <pre><code>funcs = []\nresults = []\nfor x in range(7):\n    def some_func():\n        return x\n    funcs.append(some_func)\n    results.append(some_func())  # \ud568\uc218\ub97c \ud638\ucd9c\ud558\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \ub193\uce58\uc9c0 \ub9c8\uc138\uc694.\n\nfuncs_results = [func() for func in funcs]\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; results\n[0, 1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; funcs_results\n[6, 6, 6, 6, 6, 6, 6]\n</code></pre> <p><code>funcs</code>\uc5d0 <code>some_func</code>\ub97c \ucd94\uac00\ud558\uae30 \uc804\uc758 <code>x</code>\uac12\uc740 \ud56d\uc0c1 \ub2ec\ub790\ub294\ub370\ub3c4, \ubaa8\ub4e0 \ud568\uc218\uac00 6\uc744 \ub9ac\ud134\ud569\ub2c8\ub2e4.</p> <p>2.</p> <pre><code>&gt;&gt;&gt; powers_of_x = [lambda x: x**i for i in range(10)]\n&gt;&gt;&gt; [f(2) for f in powers_of_x]\n[512, 512, 512, 512, 512, 512, 512, 512, 512, 512]\n</code></pre>"},{"location":"KO/#_30","title":"\ud83d\udca1 \uc124\uba85","text":"<ul> <li> <p>\ubc18\ubcf5\ubb38 \ub0b4\uc5d0\uc11c \ubc18\ubcf5\ubb38\uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\ub97c \uc815\uc758\ud558\uba74, \ud568\uc218\uc758 \ud074\ub85c\uc800\ub294 \ubcc0\uc218\uc758 \uac12\uc774 \uc544\ub2c8\ub77c \ubcc0\uc218 \uc790\uccb4\uc5d0 \ubc14\uc778\ub529\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \ubaa8\ub4e0 \ud568\uc218\uac00 \uadf8 \ubcc0\uc218\uc5d0 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \ud560\ub2f9\ub41c \uac12\uc744 \uc0ac\uc6a9\ud558\uac8c \ub418\uc8e0.</p> </li> <li> <p>\uc6d0\ud558\ub294 \uacb0\uacfc\ub97c \uc5bb\uace0 \uc2f6\ub2e4\uba74, \ubc18\ubcf5\ubb38\uc758 \ubcc0\uc218\ub97c \ud568\uc218\uc758 \uc778\uc790\ub85c\uc11c \ub118\uaca8\uc8fc\uba74 \ub429\ub2c8\ub2e4. \uc774\uac8c \uc65c \ub418\ub294 \uac78\uae4c\uc694? \uc774\ub807\uac8c \ud558\uba74 \ubcc0\uc218\uac00 \ud568\uc218\uc758 \uc2a4\ucf54\ud504 \ub0b4\uc5d0\uc11c \ub2e4\uc2dc \uc815\uc758\ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> </ul> <pre><code>funcs = []\nfor x in range(7):\n    def some_func(x=x):\n        return x\n    funcs.append(some_func)\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; funcs_results = [func() for func in funcs]\n&gt;&gt;&gt; funcs_results\n[0, 1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"KO/#_31","title":"\u25b6 \ub2ed\uc774 \uba3c\uc800\uc77c\uae4c, \ub2ec\uac40\uc774 \uba3c\uc800\uc77c\uae4c *","text":"<p>1.</p> <pre><code>&gt;&gt;&gt; isinstance(3, int)\nTrue\n&gt;&gt;&gt; isinstance(type, object)\nTrue\n&gt;&gt;&gt; isinstance(object, type)\nTrue\n</code></pre> <p>\uadf8\ub798\uc11c, \"\uad81\uadf9\uc801\uc778\" \uae30\ubcf8 \ud074\ub798\uc2a4\ub294 \ubb58\uae4c\uc694? \ud63c\ub780\uc2a4\ub7ec\uc6b4 \uc810\uc740 \uc774\uac8c \ub05d\uc774 \uc544\ub2d9\ub2c8\ub2e4.</p> <p>2.</p> <pre><code>&gt;&gt;&gt; class A: pass\n&gt;&gt;&gt; isinstance(A, A)\nFalse\n&gt;&gt;&gt; isinstance(type, type)\nTrue\n&gt;&gt;&gt; isinstance(object, object)\nTrue\n</code></pre> <p>3.</p> <pre><code>&gt;&gt;&gt; issubclass(int, object)\nTrue\n&gt;&gt;&gt; issubclass(type, object)\nTrue\n&gt;&gt;&gt; issubclass(object, type)\nFalse\n</code></pre>"},{"location":"KO/#_32","title":"\ud83d\udca1 \uc124\uba85","text":"<ul> <li><code>type</code>\uc740 \ud30c\uc774\uc36c\uc758 \uba54\ud0c0\ud074\ub798\uc2a4\uc785\ub2c8\ub2e4.</li> <li>\ud30c\uc774\uc36c\uc5d0\uc11c \ubaa8\ub4e0 \uac83\uc740 <code>object</code>\uc785\ub2c8\ub2e4. \uc774\ub294 \ud074\ub798\uc2a4\uc640 \uc778\uc2a4\ud134\uc2a4 \ubaa8\ub450\uc5d0\uac8c \ud574\ub2f9\ub429\ub2c8\ub2e4.</li> <li><code>type</code> \ud074\ub798\uc2a4\ub294 <code>object</code> \ud074\ub798\uc2a4\uc758 \uba54\ud0c0\ud074\ub798\uc2a4\uc774\uace0, (<code>type</code>\uc744 \ud3ec\ud568\ud558\ub294) \ubaa8\ub4e0 \ud074\ub798\uc2a4\ub294 \uc9c1\uc811\uc801\uc73c\ub85c\ub4e0 \uac04\uc811\uc801\uc73c\ub85c\ub4e0 <code>object</code>\ub97c \uc0c1\uc18d\ud569\ub2c8\ub2e4.</li> <li><code>object</code>\uc640 <code>type</code> \uc911\uc5d0\uc11c \uc9c4\uc9dc \uae30\ubcf8 \ud074\ub798\uc2a4\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc704\uc758 \ucf54\ub4dc\ub4e4\uc774 \uc57c\uae30\ud558\ub294 \ud63c\ub780\uc740 \uc6b0\ub9ac\uac00 \uc774\ub7f0 \uad00\uacc4\ub4e4(<code>issubclass</code>\uc640 <code>isinstance</code>)\uc744 \ud30c\uc774\uc36c \ud074\ub798\uc2a4\uc758 \uad00\uc810\uc5d0\uc11c \uc0dd\uac01\ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. <code>object</code>\uc640 <code>type</code>\uc758 \uad00\uacc4\ub294 \uc21c\uc218 \ud30c\uc774\uc36c\ub9cc\uc73c\ub85c\ub294 \uc7ac\ud604\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc815\ud655\ud788 \ub9d0\ud558\uc790\uba74, \uc544\ub798\uc758 \uad00\uacc4\ub294 \uc21c\uc218 \ud30c\uc774\uc36c\ub9cc\uc73c\ub85c \uc7ac\ud604\ud558\ub294 \uac83\uc774 \ubd88\uac00\ub2a5\ud569\ub2c8\ub2e4.</li> <li>\ud074\ub798\uc2a4 A\ub294 \ud074\ub798\uc2a4 B\uc758 \uc778\uc2a4\ud134\uc2a4\uc774\uace0, \ud074\ub798\uc2a4 B\ub294 \ud074\ub798\uc2a4 A\uc758 \uc778\uc2a4\ud134\uc2a4\uc785\ub2c8\ub2e4.</li> <li>\ud074\ub798\uc2a4 A\ub294 \uc790\uae30 \uc790\uc2e0\uc758 \uc778\uc2a4\ud134\uc2a4\uc785\ub2c8\ub2e4.</li> <li><code>object</code>\uc640 <code>type</code>\uc758 \uc774\ub7ec\ud55c \uad00\uacc4(\uc11c\ub85c\uac00 \uc11c\ub85c\uc640 \uc790\uae30 \uc2a4\uc2a4\ub85c\uc758 \uc778\uc2a4\ud134\uc2a4\uc778 \uac83)\ub97c \uac00\uc9c8 \uc218 \uc788\ub294 \uac74 \uad6c\ud604 \uc218\uc900\uc5d0\uc11c\uc758 \"\ud3b8\ubc95\"\uc774 \uc0ac\uc6a9\ub418\uc5c8\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_33","title":"\u25b6 \uc11c\ube0c \ud074\ub798\uc2a4\uc758 \uad00\uacc4","text":"<p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; from collections import Hashable\n&gt;&gt;&gt; issubclass(list, object)\nTrue\n&gt;&gt;&gt; issubclass(object, Hashable)\nTrue\n&gt;&gt;&gt; issubclass(list, Hashable)\nFalse\n</code></pre> <p>\uc11c\ube0c \ud074\ub798\uc2a4\uc758 \uad00\uacc4\ub294 \uc0bc\ub2e8\ub17c\ubc95\uc744 \ub530\ub77c\uc57c \ud558\uc9c0 \uc54a\ub098\uc694? (\uc989 <code>A</code>\uac00 <code>B</code>\uc758 \uc11c\ube0c \ud074\ub798\uc2a4\uc774\uace0 <code>B</code>\uac00 <code>C</code>\uc758 \uc11c\ube0c \ud074\ub798\uc2a4\uc774\uba74 <code>A</code>\ub294 <code>C</code>\uc758 \uc11c\ube0c \ud074\ub798\uc2a4 \uc774\uc5ec\uc57c\ub9cc \ud569\ub2c8\ub2e4)</p>"},{"location":"KO/#_34","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ud30c\uc774\uc36c\uc5d0\uc11c\ub294 \uc11c\ube0c \ud074\ub798\uc2a4\uc758 \uad00\uacc4\uac00 \uc0bc\ub2e8\ub17c\ubc95\uc744 \ub530\ub97c \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uc544\ubb34\ub098 \uc790\uc720\ub86d\uac8c \uba54\ud0c0\ud074\ub798\uc2a4\uc5d0 \uc790\uc2e0\ub9cc\uc758 <code>__subclasscheck__</code>\ub97c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li><code>issubclass(cls, Hashable)</code>\uc774 \ud638\ucd9c\ub418\uba74, <code>cls</code>\ub098 \uc774\uc758 \uc870\uc0c1 \ud074\ub798\uc2a4\uc5d0\uc11c \uac70\uc9d3\uc774 \uc544\ub2cc \"<code>__hash__</code>\" \uba54\uc18c\ub4dc\ub97c \ucc3e\uc2b5\ub2c8\ub2e4.</li> <li><code>object</code>\uac00 \ud574\uc2f1\ud560 \uc218 \uc788\uace0 <code>list</code>\ub294 \ud574\uc2f1\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0, \uc0c1\uc18d\ub418\uc5c8\ub2e4\uace0 \ubcf4\uae30 \ud798\ub4ed\ub2c8\ub2e4.</li> <li>\ub354 \uc790\uc138\ud55c \uc815\ubcf4\ub294 \uc5ec\uae30\uc5d0\uc11c \ucc3e\uc544\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_35","title":"\u25b6 \uba54\uc18c\ub4dc\uc758 \uac19\uc74c\uacfc \ub3d9\uc77c\ud568","text":"<p>1.</p> <pre><code>class SomeClass:\n    def method(self):\n        pass\n\n    @classmethod\n    def classm(cls):\n        pass\n\n    @staticmethod\n    def staticm():\n        pass\n</code></pre> <p>*\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; print(SomeClass.method is SomeClass.method)\nTrue\n&gt;&gt;&gt; print(SomeClass.classm is SomeClass.classm)\nFalse\n&gt;&gt;&gt; print(SomeClass.classm == SomeClass.classm)\nTrue\n&gt;&gt;&gt; print(SomeClass.staticm is SomeClass.staticm)\nTrue\n</code></pre> <p><code>classm</code>\uc744 \ub450 \ubc88 \uc811\uadfc\ud588\uc744 \ub54c, \ub3d9\ub4f1\ud55c \uac1d\uccb4\uc774\uc9c0\ub9cc \uac19\uc9c0\ub294 \uc54a\uc740 \uac1d\uccb4\uac00 \ub418\ub124\uc694? <code>SomeClass</code>\uc758 \uc778\uc2a4\ud134\uc2a4\ub294 \uc5b4\ub5bb\uac8c \ub418\ub294\uc9c0 \ud55c \ubc88 \ubcfc\uae4c\uc694?:</p> <p>\uc5ec\uae30\uc11c \ub3d9\ub4f1\ud558\ub2e4\ub294 \uac83\uc740 \uba54\ubaa8\ub9ac \uc0c1 \uac19\uc740 \uc704\uce58\uc5d0 \uc788\ub2e4\ub294 \uac83\uc774\uace0, \uac19\ub2e4\ub294 \uac83\uc740 \ub2e8\uc21c\ud558\uac8c \uac12\uc774 \uac19\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. </p> <p>2.</p> <pre><code>o1 = SomeClass()\no2 = SomeClass()\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; print(o1.method == o2.method)\nFalse\n&gt;&gt;&gt; print(o1.method == o1.method)\nTrue\n&gt;&gt;&gt; print(o1.method is o1.method)\nFalse\n&gt;&gt;&gt; print(o1.classm is o1.classm)\nFalse\n&gt;&gt;&gt; print(o1.classm == o1.classm == o2.classm == SomeClass.classm)\nTrue\n&gt;&gt;&gt; print(o1.staticm is o1.staticm is o2.staticm is SomeClass.staticm)\nTrue\n</code></pre> <p><code>SomeClass</code>\uc758 \uac19\uc740 \uc778\uc2a4\ud134\uc2a4\ub294 <code>classm</code>\uc640 <code>method</code>\ub97c \ub450 \ubc88 \uc811\uadfc\ud588\uc744 \ub54c, \ub3d9\ub4f1\ud558\uc9c0\ub9cc \uac19\uc9c0\ub294 \uc54a\uc740 \uac1d\uccb4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.</p>"},{"location":"KO/#_36","title":"\ud83d\udca1 \uc124\uba85","text":"<ul> <li>\ud568\uc218\ub294 \ub514\uc2a4\ud06c\ub9bd\ud130 \uc785\ub2c8\ub2e4.  \ud568\uc218\uac00 \uc18d\uc131\uc73c\ub85c \uc811\uadfc\ub418\uc5c8\uc744 \ub54c, \ub514\uc2a4\ud06c\ub9bd\ud130\uac00 \ud638\ucd9c\ub418\uace0, \uac1d\uccb4\ub97c \uac00\uc9c0\uace0 \uc18d\uc131\uc73c\ub85c \uac00\uc9c0\uace0 \uc788\ub294 \ud568\uc218\ub97c \"\ubc14\uc778\ub529\" \ud558\ub294 \uba54\uc18c\ub4dc \uac1d\uccb4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.  \ub9cc\uc57d \ud638\ucd9c\ub418\uba74 \uba54\uc18c\ub4dc\ub294 \uadf8 \ud568\uc218\ub97c \ud638\ucd9c\ud558\uace0, \ub0b4\ubd80\uc801\uc73c\ub85c \ubc14\uc778\ub4dc\ub41c \uac1d\uccb4\ub97c \uccab \ubc88\uc9f8 \uc778\uc790\ub85c \ub118\uaca8\uc90d\ub2c8\ub2e4.  (\uc774 \uc6d0\ub9ac\ub85c \uc778\ud574 \uc9c1\uc811\uc801\uc73c\ub85c \ub118\uae30\uc9c0 \uc54a\uace0 <code>self</code>\ub97c \uccab \ubc88\uc9f8 \uc778\uc790\ub85c \ubc1b\uc744 \uc218 \uc788\ub294 \uac83\uc785\ub2c8\ub2e4.)</li> </ul> <pre><code>&gt;&gt;&gt; o1.method\n&lt;bound method SomeClass.method of &lt;__main__.SomeClass object at ...&gt;&gt;\n</code></pre> <ul> <li>\uc18d\uc131\uc5d0 \uc5ec\ub7ec\ubc88 \uc811\uadfc\ud560 \ub54c\ub9c8\ub2e4 \ub9e4\ubc88 \uba54\uc18c\ub4dc \uac1d\uccb4\ub97c \ub9cc\ub4e4\uac8c \ub429\ub2c8\ub2e4!  \uadf8\ub798\uc11c <code>o1.method is o2.method</code>\ub294 \ucc38\uc77c \uc218\uac00 \uc5c6\ub294 \uac83\uc774\uc8e0.  (\uc778\uc2a4\ud134\uc2a4\uc640 \ubc18\ub300\ub418\uac8c) \ud568\uc218\ub97c \ud074\ub798\uc2a4 \uc18d\uc131\uc73c\ub85c \uc811\uadfc\ud558\uac8c \ub418\uba74 \uba54\uc18c\ub4dc\ub97c \uc0dd\uc131\ud558\uc9c0 \uc54a\uac8c \ub429\ub2c8\ub2e4.  \uadf8\ub798\uc11c <code>SomeClass.method is SomeClass.method</code>\ub294 \ud56d\uc0c1 \ucc38\uc785\ub2c8\ub2e4. </li> </ul> <pre><code>&gt;&gt;&gt; SomeClass.method\n&lt;function SomeClass.method at ...&gt;\n</code></pre> <ul> <li><code>classmethod</code>\ub294 \ud568\uc218\ub97c \ud074\ub798\uc2a4 \uba54\uc18c\ub4dc\ub85c \ubcc0\ud658\uc2dc\ud0b5\ub2c8\ub2e4. \ud074\ub798\uc2a4 \uba54\uc18c\ub4dc\ub294 \uc811\uadfc\ud560\ub54c \uac1d\uccb4 \ub300\uc2e0\uc5d0 \uac1d\uccb4\uc758 class (\ud0c0\uc785)\uc744 \ubc14\uc778\ub4dc\ud55c \uba54\uc18c\ub4dc \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\ub294 \ub514\uc2a4\ud06c\ub7fd\ud130 \uc785\ub2c8\ub2e4.</li> </ul> <pre><code>&gt;&gt;&gt; o1.classm\n&lt;bound method SomeClass.classm of &lt;class '__main__.SomeClass'&gt;&gt;\n</code></pre> <ul> <li>\ud568\uc218\uc640\ub294 \ub2ec\ub9ac, <code>classmethods</code>\ub294 \ud074\ub798\uc2a4 \uc18d\uc131\uc73c\ub85c \uc811\uadfc\ud560 \ub54c (\ud0c0\uc785\uc774 \uc544\ub2cc \ud074\ub798\uc2a4\ub97c \ubc14\uc778\ub4dc \ud569\ub2c8\ub2e4) \uc0c8\ub85c\uc6b4 \uba54\uc18c\ub4dc\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.  \uadf8\ub798\uc11c <code>SomeClass.classm is SomeClass.classm</code>\ub294 \uac70\uc9d3\uc785\ub2c8\ub2e4.</li> </ul> <pre><code>&gt;&gt;&gt; SomeClass.classm\n&lt;bound method SomeClass.classm of &lt;class '__main__.SomeClass'&gt;&gt;\n</code></pre> <ul> <li>\uba54\uc18c\ub4dc \uac1d\uccb4\uac00 \uac19\ub2e4\ub294 \uac83\uc740 \ub450 \ud568\uc218\uac00 \uac19\uace0 \ubc14\uc778\ub4dc \ub418\uc5b4 \uc788\ub294 \uac1d\uccb4\uac00 \uac19\uc74c\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \uba54\ubaa8\ub9ac\uc0c1 \uac19\uc740 \uac1d\uccb4\uac00 \uc544\ub2d8\uc5d0\ub3c4 <code>o1.method == o1.method</code>\ub294 \uac19\uc2b5\ub2c8\ub2e4.</li> <li><code>staticmethod</code>\ub294 \ud568\uc218\ub97c \uadf8\ub300\ub85c \ub9ac\ud134\ud558\ub294 \"no-op\" (\uc544\ubb34 \uc77c\ub3c4 \ud558\uc9c0 \uc54a\ub294) \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ud1b5\ud574 \ud568\uc218\ub97c \ubcc0\ud615\uc2dc\ud0b5\ub2c8\ub2e4. \uc5b4\ub5a0\ud55c \uac1d\uccb4\ub3c4 \uc0dd\uc131\ub418\uc9c0 \uc54a\uc73c\uba70, <code>is</code>\ub85c \ube44\uad50\ud558\ub294 \uac83\uc740 \ucc38\uc774 \ub429\ub2c8\ub2e4.</li> </ul> <pre><code>&gt;&gt;&gt; o1.staticm\n&lt;function SomeClass.staticm at ...&gt;\n&gt;&gt;&gt; SomeClass.staticm\n&lt;function SomeClass.staticm at ...&gt;\n</code></pre> <ul> <li>\ud30c\uc774\uc36c\uc5d0\uc11c \uc778\uc2a4\ud134\uc2a4 \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud560 \ub54c\ub9c8\ub2e4 \uc778\uc790\ub4e4\uc744 \ub9e4\ubc88 \ubcc0\uacbd\ud558\uace0 \ub9e8 \uc55e\uc5d0 <code>self</code>\ub97c \ub123\uc5b4\uc8fc\uba74\uc11c \uc0c8\ub85c\uc6b4 \"\uba54\uc18c\ub4dc\" \uac1d\uccb4\ub97c \ub9cc\ub4dc\ub294 \uac83\uc740 \uc18d\ub3c4\uc5d0 \ub098\uc058\uac8c \uc601\ud5a5\uc744 \ub07c\uce58\uac8c \ub429\ub2c8\ub2e4. CPython 3.7\uc740 \uc784\uc2dc \uba54\uc18c\ub4dc \uac1d\uccb4\ub97c \ub9cc\ub4e4\uc9c0 \uc54a\uace0 \ud574\uacb0\ud558\ub294 \uc0c8\ub85c\uc6b4 \uba85\ub839\ucf54\ub4dc\ub97c \ub9cc\ub4e4\uc5b4\uc11c \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud588\uc2b5\ub2c8\ub2e4.. \uc774 \ubc29\ubc95\uc740 \ud568\uc218\uac00 \uc2e4\uc81c\ub85c \ud638\ucd9c \ub420 \ub54c \uc0ac\uc6a9\ub418\ubbc0\ub85c, \uc5ec\uae30 \uc788\ub294 \ucf54\ub4dc\ub4e4\uc5d0 \uc601\ud5a5\uc744 \ub07c\uce58\uc9c0 \uc54a\uace0 \uc5ec\uc804\ud788 \uba54\uc18c\ub4dc\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4 :)</li> </ul>"},{"location":"KO/#_37","title":"\u25b6 \ucc38 \uac70\uc9d3\uc758 \ubc18\ubcf5 *","text":"<pre><code>&gt;&gt;&gt; all([True, True, True])\nTrue\n&gt;&gt;&gt; all([True, True, False])\nFalse\n\n&gt;&gt;&gt; all([])\nTrue\n&gt;&gt;&gt; all([[]])\nFalse\n&gt;&gt;&gt; all([[[]]])\nTrue\n</code></pre> <p>\uc65c \uc774\ub7f0 \ucc38 \uac70\uc9d3\uc758 \ubc18\ubcf5\uc774 \uc77c\uc5b4\ub0a0\uae4c\uc694?</p>"},{"location":"KO/#_38","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li> <p><code>all</code>\ud568\uc218\uc758 \uad6c\ud604\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4</p> </li> <li> <p><code>py   def all(iterable):       for element in iterable:           if not element:               return False       return True</code></p> </li> <li> <p><code>all([])</code>\uc740 \ube44\uc5b4\uc788\uc73c\ubbc0\ub85c <code>True</code>\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.</p> </li> <li><code>all([[]])</code>\uc740 <code>not[]</code>\ub294 True\uc774\uba70 \uc774\ub294 <code>not False</code>\uc640 \uac19\uace0, <code>iterable</code> \uc548\uc5d0 \uc788\ub294 \ub9ac\uc2a4\ud2b8\uac00 \ube44\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0 <code>False</code>\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.</li> <li><code>all([[[]]])</code>\uc640 \ub354 \ub9ce\uc774 \uacb9\uce5c \uacbd\uc6b0\ub294 <code>not [[]]</code>, <code>not [[[]]]</code>... \uc774 <code>not True</code>\uc640 \ub3d9\uc77c \ud558\ubbc0\ub85c \ubaa8\ub450 <code>True</code>\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_39","title":"\u25b6 \ub180\ub77c\uc6b4 \ucf64\ub9c8","text":"<p>\ucd9c\ub825 \uacb0\uacfc (&lt; 3.6):</p> <pre><code>&gt;&gt;&gt; def f(x, y,):\n...     print(x, y)\n...\n&gt;&gt;&gt; def g(x=4, y=5,):\n...     print(x, y)\n...\n&gt;&gt;&gt; def h(x, **kwargs,):\n  File \"&lt;stdin&gt;\", line 1\n    def h(x, **kwargs,):\n                     ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; def h(*args,):\n  File \"&lt;stdin&gt;\", line 1\n    def h(*args,):\n                ^\nSyntaxError: invalid syntax\n</code></pre>"},{"location":"KO/#_40","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ud30c\uc774\uc36c \ud568\uc218\uc758 \uc815\uaddc \ud30c\ub77c\ubbf8\ud130 \ub9ac\uc2a4\ud2b8\uc5d0 \ucf64\ub9c8\ub97c \ub0a8\uae30\ub294 \uac83\uc774 \ud56d\uc0c1 \ud5c8\uc6a9\ub418\ub294 \uac83\uc740 \uc544\ub2d9\ub2c8\ub2e4.</li> <li>\ud30c\uc774\uc36c\uc5d0\uc11c \uc804\ub2ec\uc778\uc790 \ub9ac\uc2a4\ud2b8\ub294 \uc120\ud589 \ucf64\ub9c8(leading commas)\ub4e4\uacfc \ud6c4\ud589 \ucf64\ub9c8(trailing commas)\ub4e4\ub85c \ubd80\ubd84\uc801\uc73c\ub85c \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ucda9\ub3cc\uc774 \ucf64\ub9c8\uac00 \uac00\uc6b4\ub370\uc5d0 \ub07c\uac8c\ub418\ub294 \ud604\uc0c1\uc744 \ub9cc\ub4e4\uac8c \ub418\uace0 \uacb0\uad6d \uc544\ubb34 \uaddc\uce59\uc5d0\ub3c4 \ub9de\uc9c0 \uc54a\uac8c \ub429\ub2c8\ub2e4.</li> <li>\ucc38\uace0: \ud6c4\ud589 \ucf64\ub9c8 \ubb38\uc81c\ub294 \ud30c\uc774\uc36c 3.6\uc5d0\uc11c \uace0\uccd0\uc84c\uc2b5\ub2c8\ub2e4. \uc774 \ud3ec\uc2a4\ud2b8\uc5d0\uc11c\ub294 \ud30c\uc774\uc36c\uc5d0\uc11c\uc758 \ud6c4\ud589 \ucf64\ub9c8\ub4e4\uc758 \ub2e4\uc591\ud55c \uc0ac\uc6a9\ubc95\ub4e4\uc774 \uac04\uacb0\ud558\uac8c \ub17c\uc758\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_41","title":"\u25b6 \ubb38\uc790\uc5f4\uacfc \ubc31\uc2ac\ub798\uc2dc","text":"<p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; print(\"\\\"\")\n\"\n\n&gt;&gt;&gt; print(r\"\\\"\")\n\\\"\n\n&gt;&gt;&gt; print(r\"\\\")\nFile \"&lt;stdin&gt;\", line 1\n    print(r\"\\\")\n              ^\nSyntaxError: EOL while scanning string literal\n\n&gt;&gt;&gt; r'\\'' == \"\\\\'\"\nTrue\n</code></pre>"},{"location":"KO/#_42","title":"\ud83d\udca1 \uc124\uba85","text":"<ul> <li>\ubcf4\ud1b5 \ud30c\uc774\uc36c \ubb38\uc790\uc5f4\uc5d0\uc11c \ubc31\uc2ac\ub798\uc2dc\ub294 \ud2b9\ubcc4\ud55c \uc758\ubbf8\uc758 \ubb38\uc790(\uc791\uc740 \ub530\uc634\ud45c\ub098 \ud070 \ub530\uc634\ud45c, \uadf8\ub9ac\uace0 \ubc31\uc2ac\ub798\uc2dc \uadf8 \uc790\uccb4)\ub97c \uc774\uc2a4\ucf00\uc774\ud504\ud558\ub294\ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.   <pre><code>&gt;&gt;&gt; \"wt\\\"f\"\n'wt\"f'\n</code></pre></li> <li>\uc6d0\uc2dc \ubb38\uc790\uc5f4 \ub9ac\ud130\ub7f4(raw string literal, \uc811\ub450\uc0ac <code>r</code>\ub85c \ub098\ud0c0\ub09c\ub2e4)\uc5d0\uc11c\ub294 \ubc31\uc2ac\ub798\uc2dc\ub4e4\uc774 \uadf8\ub300\ub85c \ucd9c\ub825\ub418\uc9c0\ub9cc \uadf8 \ud2b9\uc131\ub3c4 \uadf8\ub300\ub85c \uc801\uc6a9\ub429\ub2c8\ub2e4.</li> </ul> <pre><code>&gt;&gt;&gt; r'wt\\\"f' == 'wt\\\\\"f'\nTrue\n&gt;&gt;&gt; print(repr(r'wt\\\"f')\n'wt\\\\\"f'\n\n&gt;&gt;&gt; print(\"\\n\")\n\n&gt;&gt;&gt; print(r\"\\\\n\")\n'\\\\n'\n</code></pre> <ul> <li>\uc989, \uc774\ub294 \ud30c\uc11c\uac00 \uc6d0\uc2dc \ubb38\uc790\uc5f4\uc5d0\uc11c \ubc31\uc2ac\ub798\uc2dc\uc640 \ub9cc\ub098\uba74 \uadf8 \ub4a4\uc5d0 \ubb38\uc790\uac00 \ub098\uc624\uae30\ub97c \uc608\uc0c1\ud55c\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\ub7ec\ud55c \uacbd\uc6b0(<code>print(r\"\\\")</code>)\uc5d0\uc11c\ub294 \ubc31\uc2ac\ub798\uc2dc\uac00 \ub4a4\uc758 \ub530\uc634\ud45c\uc5d0\uc11c \uc774\uc2a4\ucf00\uc774\ud504\ud558\uc5ec \ud30c\uc11c\ub294 \ub05d\ub098\ub294 \ub530\uc634\ud45c\ub97c \ucc3e\uc9c0 \ubabb\ud569\ub2c8\ub2e4(\ub530\ub77c\uc11c <code>SyntaxError</code>\uc774 \ubc1c\uc0dd\ud569\ub2c8\ub2e4). \uc774 \uc774\uc720\ub85c \uc6d0\uc2dc \ubb38\uc790\uc5f4\uc758 \ub05d\uc5d0\uc11c \ubc31\uc2ac\ub798\uc2dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_43","title":"\u25b6 \ub9e4\ub4ed\uc774 \uc544\ub2c8\uc57c!","text":"<pre><code>x = True\ny = False\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; not x == y\nTrue\n&gt;&gt;&gt; x == not y\n  File \"&lt;input&gt;\", line 1\n    x == not y\n           ^\nSyntaxError: invalid syntax\n</code></pre>"},{"location":"KO/#_44","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\ub294 \ud45c\ud604\uc2dd\uc774 \uc2e4\ud589\ub418\ub294 \uac83\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uace0 \ud30c\uc774\uc36c\uc5d0\uc11c\ub294 <code>==</code> \uc5f0\uc0b0\uc790\ub294 <code>not</code> \uc5f0\uc0b0\uc790\ubcf4\ub2e4 \uc6b0\uc120\uc21c\uc704\uac00 \ub192\uc2b5\ub2c8\ub2e4.</li> <li>\uadf8\ub798\uc11c <code>not x == y</code>\ub294 <code>not (x == y)</code>\uc640 \uac19\uace0 \uc774\ub294 <code>not (True == False)</code>\uc640 \uac19\uac8c \ub418\ubbc0\ub85c \ucd5c\uc885\uc801\uc73c\ub85c <code>True</code>\uac00 \ub429\ub2c8\ub2e4.</li> <li>\ud558\uc9c0\ub9cc <code>x == not y</code>\ub294 <code>SyntaxError</code>\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uac8c \ub429\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \uc774\ub294 \ubcf4\ud1b5 \uc0dd\uac01\ud558\ub294 <code>x == (not y)</code>\uac00 \uc544\ub2c8\ub77c <code>(x == not) y</code>\ub85c \ud574\uc11d\ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</li> <li>\ud30c\uc11c\ub294 <code>not</code> \ud1a0\ud070\uc774 <code>not in</code> \uc5f0\uc0b0\uc790\uc758 \uc77c\ubd80\ub77c\uace0 \uc608\uc0c1\ud558\uc9c0\ub9cc (\uc65c\ub0d0\ud558\uba74 <code>==</code>\uc640 <code>not in</code> \uc5f0\uc0b0\uc790\uac00 \uac19\uc740 \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\ub97c \uac00\uc9c0\uace0 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4) <code>not</code> \ub4a4\uc5d0 <code>in</code> \ud1a0\ud070\uc744 \ucc3e\uc744 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 <code>SyntaxError</code>\ub97c \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#3","title":"\u25b6 \ubc18\ucabd 3\uc911 \ub530\uc634\ud45c \ubb38\uc790\uc5f4","text":"<p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; print('wtfpython''')\nwtfpython\n&gt;&gt;&gt; print(\"wtfpython\"\"\")\nwtfpython\n&gt;&gt;&gt; # \ub2e4\uc74c \ud45c\ud604\uc2dd\uc740 `SyntaxError`\ub97c \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4.\n&gt;&gt;&gt; # print('''wtfpython')\n&gt;&gt;&gt; # print(\"\"\"wtfpython\")\n  File \"&lt;input&gt;\", line 3\n    print(\"\"\"wtfpython\")\n                        ^\nSyntaxError: EOF while scanning triple-quoted string literal\n</code></pre>"},{"location":"KO/#_45","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ud30c\uc774\uc36c\uc740 \uc554\ubb35\uc801 \ubb38\uc790\uc5f4 \ub9ac\ud130\ub7f4 \ubcd1\ud569 \uc5f0\uc0b0 \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4, \uc608\uc2dc\ub85c,   <pre><code>&gt;&gt;&gt; print(\"wtf\" \"python\")\nwtfpython\n&gt;&gt;&gt; print(\"wtf\" \"\") # \ub610\ub294 \"wtf\"\"\"\nwtf\n</code></pre></li> <li><code>'''</code> \uc640 <code>\"\"\"</code> \ub294 \ud30c\uc774\uc36c\uc5d0\uc11c \ubb38\uc790\uc5f4 \uad6c\ubd84 \uae30\ud638\ub85c \ud30c\uc774\uc36c\uc740 \ud6c4\uc5d0 \ubb38\uc790\uc5f4 \ub05d\ub9fa\uc74c 3\uc911 \ub530\uc634\ud45c\ub97c \ucc3e\uc9c0\ub9cc \ucc3e\uc9c0 \ubabb\ud574 SyntaxError\ub97c \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_46","title":"\u25b6 \ubd88\ub9b0\uc758 \ubb38\uc81c\uc810\uc774 \ubb50\uc57c?","text":"<p>1.</p> <pre><code># \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ud0c0\uc785 \uc18d \ubd88\ub9b0\uc758 \uac1c\uc218\uc640 \uc815\uc218\uc758 \uac1c\uc218\ub97c \uc138\ub294 \uac04\ub2e8\ud55c \uc608\uc81c\uc785\ub2c8\ub2e4.\nmixed_list = [False, 1.0, \"some_string\", 3, True, [], False]\nintegers_found_so_far = 0\nbooleans_found_so_far = 0\n\nfor item in mixed_list:\n    if isinstance(item, int):\n        integers_found_so_far += 1\n    elif isinstance(item, bool):\n        booleans_found_so_far += 1\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; integers_found_so_far\n4\n&gt;&gt;&gt; booleans_found_so_far\n0\n</code></pre> <p>2.</p> <pre><code>&gt;&gt;&gt; some_bool = True\n&gt;&gt;&gt; \"wtf\" * some_bool\n'wtf'\n&gt;&gt;&gt; some_bool = False\n&gt;&gt;&gt; \"wtf\" * some_bool\n''\n</code></pre> <p>3.</p> <pre><code>def tell_truth():\n    True = False\n    if True == False:\n        print(\"I have lost faith in truth!\")\n</code></pre> <p>\ucd9c\ub825 (&lt; 3.x):</p> <pre><code>&gt;&gt;&gt; tell_truth()\nI have lost faith in truth!\n</code></pre>"},{"location":"KO/#_47","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ud30c\uc774\uc36c\uc5d0\uc11c <code>bool</code>\uc740 <code>int</code>\uc758 \uc11c\ube0c\ud074\ub798\uc2a4\uc785\ub2c8\ub2e4.   <pre><code>&gt;&gt;&gt; issubclass(bool, int)\nTrue\n&gt;&gt;&gt; issubclass(int, bool)\nFalse\n</code></pre></li> <li>\ucd94\uac00\ub85c, <code>True</code>\uc640 <code>False</code>\ub294 <code>int</code>\uc758 \uc778\uc2a4\ud134\uc2a4\uc785\ub2c8\ub2e4.</li> </ul> <pre><code>&gt;&gt;&gt; isinstance(True, int)\nTrue\n&gt;&gt;&gt; isinstance(False, int)\nTrue\n</code></pre> <ul> <li><code>True</code>\uc758 \uc815\uc218 \uac12\uc740 <code>1</code>\uc774\uace0 <code>False</code>\uc758 \uc815\uc218 \uac12\uc740 <code>0</code>\uc785\ub2c8\ub2e4.</li> </ul> <pre><code>&gt;&gt;&gt; int(True)\n1\n&gt;&gt;&gt; int(False)\n0\n</code></pre> <ul> <li> <p>StackOverflow \ub2f5\ubcc0\uc744 \ud1b5\ud574 \uc774\ub7ec\ud55c \ud604\uc0c1\uc774 \ubc1c\uc0dd\ud558\ub294 \uc774\uc720\uc5d0 \ub300\ud574\uc11c \uc54c\uc544\ubcf4\uc138\uc694.</p> </li> <li> <p>\ucd08\uae30\uc5d0, \ud30c\uc774\uc36c\uc740 <code>bool</code> \ud0c0\uc785\uc774 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. (\uc0ac\ub78c\ub4e4\uc740 0\uc744 \uac70\uc9d3\uc73c\ub85c \uc4f0\uace0 1\uacfc \uac19\uc740 0\uc774 \uc544\ub2cc \uc218\ub97c \ucc38\uc73c\ub85c \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4) <code>True</code> \uadf8\ub9ac\uace0 <code>False</code>, <code>bool</code> \ud0c0\uc785\uc740 2.x \ubc84\uc804\uc5d0\uc11c \ucd94\uac00\ub418\uc5c8\uc9c0\ub9cc \ud638\ud658\uc131\uc744 \uc704\ud574 <code>True</code>\uc640 <code>False</code>\ub294 \uc0c1\uc218\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 \uc218 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub4e4\uc740 \ub0b4\uc7a5 \ubcc0\uc218\uc774\uace0 \ub2e4\uc2dc \ud560\ub2f9\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud588\uc2b5\ub2c8\ub2e4.</p> </li> <li> <p>\ud30c\uc774\uc36c 3\uc740 \ud638\ud658\uc774 \uc548\ub418\uae30 \ub54c\ubb38\uc5d0, \ubb38\uc81c\uac00 \ud574\uacb0\ub418\uc5c8\uace0 \ub9c8\uc9c0\ub9c9 \ucf54\ub4dc\ub294 \ud30c\uc774\uc36c 3.x \uc5d0\uc11c\ub294 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4!</p> </li> </ul>"},{"location":"KO/#_48","title":"\u25b6 \ud074\ub798\uc2a4 \uc18d\uc131\uacfc \uc778\uc2a4\ud134\uc2a4 \uc18d\uc131","text":"<p>1.</p> <pre><code>class A:\n    x = 1\n\nclass B(A):\n    pass\n\nclass C(A):\n    pass\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; A.x, B.x, C.x\n(1, 1, 1)\n&gt;&gt;&gt; B.x = 2\n&gt;&gt;&gt; A.x, B.x, C.x\n(1, 2, 1)\n&gt;&gt;&gt; A.x = 3\n&gt;&gt;&gt; A.x, B.x, C.x # C.x \ub294 \ubc14\ub00c\uc5c8\uc9c0\ub9cc, B.x \ub294 \ubc14\ub00c\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.\n(3, 2, 3)\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.x, A.x\n(3, 3)\n&gt;&gt;&gt; a.x += 1\n&gt;&gt;&gt; a.x, A.x\n(4, 3)\n</code></pre> <p>2.</p> <pre><code>class SomeClass:\n    some_var = 15\n    some_list = [5]\n    another_list = [5]\n    def __init__(self, x):\n        self.some_var = x + 1\n        self.some_list = self.some_list + [x]\n        self.another_list += [x]\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; some_obj = SomeClass(420)\n&gt;&gt;&gt; some_obj.some_list\n[5, 420]\n&gt;&gt;&gt; some_obj.another_list\n[5, 420]\n&gt;&gt;&gt; another_obj = SomeClass(111)\n&gt;&gt;&gt; another_obj.some_list\n[5, 111]\n&gt;&gt;&gt; another_obj.another_list\n[5, 420, 111]\n&gt;&gt;&gt; another_obj.another_list is SomeClass.another_list\nTrue\n&gt;&gt;&gt; another_obj.another_list is some_obj.another_list\nTrue\n</code></pre>"},{"location":"KO/#_49","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ud074\ub798\uc2a4 \ubcc0\uc218\ub4e4\uacfc \ud074\ub798\uc2a4 \uc778\uc2a4\ud134\uc2a4 \uc548\uc5d0 \uc788\ub294 \ubcc0\uc218\ub4e4\uc740 \ub0b4\ubd80\uc5d0\uc11c \ud074\ub798\uc2a4 \uac1d\uccb4\uc758 \ub515\uc154\ub108\ub9ac\ub4e4\ub85c \ucc98\ub9ac\ub429\ub2c8\ub2e4. \ud604\uc7ac \ud074\ub798\uc2a4\uc758 \ub515\uc154\ub108\ub9ac\uc5d0 \ubcc0\uc218 \uc774\ub984\uc774 \uc5c6\ub294 \uacbd\uc6b0, \ubd80\ubaa8 \ud074\ub798\uc2a4\uc5d0\uc11c \ud574\ub2f9 \uc774\ub984\uc744 \uac80\uc0c9\ud569\ub2c8\ub2e4.</li> <li>'+=' \uc5f0\uc0b0\uc790\ub294 \uc0c8\ub85c\uc6b4 \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uc9c0 \uc54a\uace0 \uadf8 \uc790\ub9ac\uc5d0\uc11c \uac00\ubcc0 \uac1d\uccb4\ub97c \uc218\uc815\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \ud55c \uc778\uc2a4\ud134\uc2a4\uc758 \uc18d\uc131\uc744 \ubc14\uafb8\ub294 \uac83\uc740 \ub2e4\ub978 \uc778\uc2a4\ud134\uc2a4\ub4e4\uacfc \ud074\ub798\uc2a4 \uc18d\uc131\uc5d0\ub3c4 \uc601\ud5a5\uc744 \ubbf8\uce69\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#yielding-none","title":"\u25b6 yielding None","text":"<pre><code>some_iterable = ('a', 'b')\n\ndef some_func(val):\n    return \"something\"\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (&lt;= 3.7.x):</p> <pre><code>&gt;&gt;&gt; [x for x in some_iterable]\n['a', 'b']\n&gt;&gt;&gt; [(yield x) for x in some_iterable]\n&lt;generator object &lt;listcomp&gt; at 0x7f70b0a4ad58&gt;\n&gt;&gt;&gt; list([(yield x) for x in some_iterable])\n['a', 'b']\n&gt;&gt;&gt; list((yield x) for x in some_iterable)\n['a', None, 'b', None]\n&gt;&gt;&gt; list(some_func((yield x)) for x in some_iterable)\n['a', 'something', 'b', 'something']\n</code></pre>"},{"location":"KO/#_50","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\uc774\uac83\uc740 CPython\uc5d0\uc11c \uc81c\ub108\ub808\uc774\ud130\uc640 \ucef4\ud504\ub9ac\ud5e8\uc158\uc5d0\uc11c <code>yield</code>\ub97c \ucc98\ub9ac\ud560 \ub54c \uc0dd\uae30\ub294 \ubc84\uadf8\uc785\ub2c8\ub2e4.</li> <li>\uc18c\uc2a4\uc640 \uc124\uba85\uc740 \uc5ec\uae30\uc11c \ucc3e\uc544\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions</li> <li>\uad00\ub828\ub41c \ubc84\uadf8 \ub9ac\ud3ec\ud2b8: https://bugs.python.org/issue10544</li> <li>\ud30c\uc774\uc36c 3.8 \uc774\uc0c1\uc758 \ubc84\uc804\uc5d0\uc11c\ub294 \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\uc758 \ub0b4\ubd80\uc5d0 <code>yield</code>\ub97c \ud5c8\uc6a9\ud558\uc9c0 \uc54a\uace0 <code>SyntaxError</code>\ub97c \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#yielding-from-return","title":"\u25b6 Yielding from... return! *","text":"<p>1.</p> <pre><code>def some_func(x):\n    if x == 3:\n        return [\"wtf\"]\n    else:\n        yield from range(x)\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (&gt; 3.3):</p> <pre><code>&gt;&gt;&gt; list(some_func(3))\n[]\n</code></pre> <p><code>\"wtf\"</code>\uc774 \uc5b4\ub514\ub85c \uac13\ub098\uc694? <code>yield from</code>\uc758 \ud2b9\uc218\ud55c \ud6a8\uacfc \ub54c\ubb38\uc77c\uae4c\uc694? \ud655\uc778\ud574\ubd05\uc2dc\ub2e4.</p> <p>2.</p> <pre><code>def some_func(x):\n    if x == 3:\n        return [\"wtf\"]\n    else:\n        for i in range(x):\n          yield i\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; list(some_func(3))\n[]\n</code></pre> <p>\uac19\uc740 \uacb0\uacfc\uc785\ub2c8\ub2e4. \uc774\uac83\ub3c4 \ud6a8\uacfc\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.</p>"},{"location":"KO/#_51","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ud30c\uc774\uc36c 3.3 \uc774\ud6c4\uc758 \ubc84\uc804\ubd80\ud130, \ub0b4\ubd80\uc758 \uc81c\ub108\ub808\uc774\ud130\uc640 \ud568\uaed8 <code>return</code>\ubb38\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4 (\uc774\uac83\uc744 \ucc38\uace0\ud558\uc138\uc694 PEP380). \uacf5\uc2dd \ubb38\uc11c\uc5d0\uc11c\ub3c4 \ub9d0\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul> <p>\"... \uc81c\ub108\ub808\uc774\ud130 \ub0b4\ubd80\uc758 <code>return expr</code>\ub294 \uc81c\ub108\ub808\uc774\ud130\uac00 \uc885\ub8cc\ub420 \ub54c <code>StopIteration(expr)</code>\uc744 \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4.\"</p> <ul> <li> <p><code>some_func(3)</code>\uc758 \uacbd\uc6b0, <code>return</code>\ubb38\uc73c\ub85c \uc778\ud574 \ucc98\uc74c\ubd80\ud130 <code>StopIteration</code>\uc774 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. <code>StopIteration</code> \uc608\uc678\ub294 \uc790\ub3d9\uc73c\ub85c <code>list(...)</code> \ub798\ud37c\uc640 <code>for</code> \ub8e8\ud504\uc758 \ub0b4\ubd80\uc5d0 \uc7a1\ud788\uac8c \ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc704\uc758 \ub450 \ucf54\ub4dc\uc758 \uacb0\uacfc\ub294 \ube48 \ub9ac\uc2a4\ud2b8\uac00 \ub429\ub2c8\ub2e4.</p> </li> <li> <p>\uc81c\ub108\ub808\uc774\ud130\uc758 <code>some_func</code>\uc5d0\uc11c <code>[\"wtf\"]</code>\uc744 \uc5bb\uc73c\ub824\uba74 <code>StopIteration</code> \uc608\uc678\ub97c \uc7a1\uc544\uc57c \ud569\ub2c8\ub2e4.</p> </li> </ul> <pre><code>try:\n    next(some_func(3))\nexcept StopIteration as e:\n    some_string = e.value\n</code></pre> <pre><code>&gt;&gt;&gt; some_string\n[\"wtf\"]\n</code></pre>"},{"location":"KO/#nan-","title":"\u25b6 Nan-\uc7ac\uadc0\uc131 *","text":"<p>1.</p> <pre><code>a = float('inf')\nb = float('nan')\nc = float('-iNf')  # \uc774 \ubb38\uc790\uc5f4\uc740 \ub300\uc18c\ubb38\uc790\ub97c \uad6c\ubd84\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\nd = float('nan')\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; a\ninf\n&gt;&gt;&gt; b\nnan\n&gt;&gt;&gt; c\n-inf\n&gt;&gt;&gt; float('some_other_string')\nValueError: could not convert string to float: some_other_string\n&gt;&gt;&gt; a == -c # inf==inf\nTrue\n&gt;&gt;&gt; None == None # None == None\nTrue\n&gt;&gt;&gt; b == d # \ud558\uc9c0\ub9cc nan!=nan \uc785\ub2c8\ub2e4\nFalse\n&gt;&gt;&gt; 50 / a\n0.0\n&gt;&gt;&gt; a / a\nnan\n&gt;&gt;&gt; 23 + b\nnan\n</code></pre> <p>2.</p> <pre><code>&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; y = x / x\n&gt;&gt;&gt; y is y # \uc815\uccb4\uc131\uc740 \uc720\uc9c0\ub429\ub2c8\ub2e4\nTrue\n&gt;&gt;&gt; y == y # y\uc640 \uac19\uc740 \uac12\uc740 \uc544\ub2d9\ub2c8\ub2e4\nFalse\n&gt;&gt;&gt; [y] == [y] # \ud558\uc9c0\ub9cc y\ub97c \ub9ac\uc2a4\ud2b8\ub85c \uac10\uc2f8\uba74 \uac19\uc740 \uac12\uc774 \ub429\ub2c8\ub2e4\nTrue\n</code></pre>"},{"location":"KO/#_52","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li> <p><code>'inf'</code>\uc640 <code>'nan'</code>\uc740 \ub300\uc18c\ubb38\uc790\ub97c \uad6c\ubd84\ud558\uc9c0 \uc54a\ub294 \ud2b9\uc218\ud55c \ubb38\uc790\uc5f4\ub85c, \uba85\uc2dc\uc801\uc73c\ub85c <code>float</code> \ud0c0\uc785\uc73c\ub85c \ud615 \ubcc0\ud658\ud560 \ub54c \uc218\ud559\uc801 \"\ubb34\ud55c\ub300\"\uc640 \"\uc22b\uc790\uac00 \uc544\ub2d8\"\uc744 \ud45c\ud604\ud560 \ub54c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.</p> </li> <li> <p>IEEE \ud45c\uc900 <code>NaN != NaN</code>\uc744 \ub530\ub974\uba74 \ud30c\uc774\uc36c\uc5d0\uc11c \uceec\ub809\uc158 \uc694\uc18c\ub4e4\uc758 \uc7ac\uadc0\uc131 \uac00\uc815\uc774 \uae68\uc9c0\uac8c \ub429\ub2c8\ub2e4. \ub9cc\uc57d <code>x</code>\uac00 <code>list</code>\uc640 \uac19\uc740 \uceec\ub809\uc158\uc758 \uc77c\ubd80\uba74 \ube44\uad50\uc640 \uac19\uc740 \uad6c\ud604\ub4e4\uc740 <code>x == x</code>\ub77c\ub294 \uac00\uc815\uc5d0 \uae30\ubc18\ud569\ub2c8\ub2e4. \uc774\ub7f0 \uac00\uc815 \ub54c\ubb38\uc5d0 \ub450 \uc694\uc18c\ub97c \ube44\uad50\ud560 \ub54c \uc815\uccb4\uc131\uc744 \uba3c\uc800 \ube44\uad50\ud558\uace0 (\uc18d\ub3c4\uac00 \ub354 \ube60\ub974\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4) \uc815\uccb4\uc131\uc774 \uc77c\uce58\ud558\uc9c0 \uc54a\uc744 \ub54c\ub9cc \uac12\uc744 \ube44\uad50\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uc758 \ucf54\ub4dc\uac00 \uc774\uac83\ub4e4\uc744 \ub354 \ud655\uc2e4\ud558\uac8c \ub9cc\ub4e4\uc5b4 \uc904 \uac81\ub2c8\ub2e4,</p> </li> </ul> <pre><code>&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; x == x, [x] == [x]\n(False, True)\n&gt;&gt;&gt; y = float('nan')\n&gt;&gt;&gt; y == y, [y] == [y]\n(False, True)\n&gt;&gt;&gt; x == y, [x] == [y]\n(False, False)\n</code></pre> <p><code>x</code>\uc640 <code>y</code>\uc758 \uc815\uccb4\uc131\uc774 \ub2e4\ub974\uae30 \ub54c\ubb38\uc5d0 \uac12\uc774 \uace0\ub824\ub418\uace0, \ube44\uad50 \uacb0\uacfc <code>False</code>\uac00 \ubc18\ud658\ub429\ub2c8\ub2e4.</p> <ul> <li>\ud765\ubbf8\ub85c\uc6b4 \uc77d\uc744\uac70\ub9ac: Reflexivity, and other pillars of civilization</li> </ul>"},{"location":"KO/#_53","title":"\u25b6 \ubd88\ubcc0\uc744 \ubcc0\ud615\ud558\uae30!","text":"<p>\uc5ec\ub7ec\ubd84\uc774 \ud30c\uc774\uc36c\uc5d0\uc11c \ucc38\uc870\uac00 \uc5b4\ub5bb\uac8c \uc791\ub3d9\ud558\ub294\uc9c0 \uc548\ub2e4\uba74 \uc774\uac74 \ub2f9\uc5f0\ud574 \ubcf4\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>some_tuple = (\"A\", \"tuple\", \"with\", \"values\")\nanother_tuple = ([1, 2], [3, 4], [5, 6])\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; some_tuple[2] = \"change this\"\nTypeError: 'tuple' object does not support item assignment\n&gt;&gt;&gt; another_tuple[2].append(1000) #\uc774\uac74 \uc5d0\ub7ec\ub97c \ub9cc\ub4e4\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\n&gt;&gt;&gt; another_tuple\n([1, 2], [3, 4], [5, 6, 1000])\n&gt;&gt;&gt; another_tuple[2] += [99, 999]\nTypeError: 'tuple' object does not support item assignment\n&gt;&gt;&gt; another_tuple\n([1, 2], [3, 4], [5, 6, 1000, 99, 999])\n</code></pre> <p>\ud558\uc9c0\ub9cc \uc800\ub294 \ud29c\ud50c\uc774 \ubcc0\uacbd \ubd88\uac00\ub2a5\ud558\ub2e4 \uc0dd\uac01\ud588\uc2b5\ub2c8\ub2e4...</p>"},{"location":"KO/#_54","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>https://docs.python.org/ko/3/reference/datamodel.html \uc744 \uc778\uc6a9\ud558\uba74</li> </ul> <p>\ubd88\ubcc0 \uc2dc\ud038\uc2a4</p> <p>\ubd88\ubcc0 \uc2dc\ud000\uc2a4 \ud615\uc758 \uac1d\uccb4\ub294 \uc77c\ub2e8 \ub9cc\ub4e4\uc5b4\uc9c4 \ud6c4\uc5d0\ub294 \ubcc0\uacbd\ub420 \uc218 \uc5c6\ub2e4. (\ub9cc\uc57d \ub2e4\ub978 \uac1d\uccb4\ub85c\uc758 \ucc38\uc870\ub97c \ud3ec\ud568\ud558\uba74, \uadf8 \uac1d\uccb4\ub294 \uac00\ubcc0\uc77c \uc218 \uc788\uace0, \ubcc0\uacbd\ub420 \uc218 \uc788\ub2e4; \ud558\uc9c0\ub9cc, \ubd88\ubcc0 \uac1d\uccb4\ub85c\ubd80\ud130 \ucc38\uc870\ub418\ub294 \uac1d\uccb4\uc758 \uc9d1\ud569 \uc790\uccb4\ub294 \ubcc0\uacbd\ub420 \uc218 \uc5c6\ub2e4.)</p> <ul> <li><code>+=</code> \uc5f0\uc0b0\uc790\ub294 \ub9ac\uc2a4\ud2b8\ub97c \uadf8 \uc790\ub9ac\uc5d0\uc11c \ubcc0\uacbd\ud569\ub2c8\ub2e4. \uadf8 \ud56d\ubaa9 \ud560\ub2f9\uc774 \ub3d9\uc791\ud558\uc9c0 \uc54a\uc9c0\ub9cc, \uc608\uc678 \ubc1c\uc0dd \uc2dc \uadf8 \ud56d\ubaa9\uc740 \uc774\ubbf8 \uadf8 \uc790\ub9ac\uc5d0\uc11c \ubcc0\uacbd\ub418\uc5c8\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_55","title":"\u25b6 \uc678\ubd80 \ubc94\uc704\uc5d0\uc11c \uc0ac\ub77c\uc9c0\ub294 \ubcc0\uc218","text":"<pre><code>e = 7\ntry:\n    raise Exception()\nexcept Exception as e:\n    pass\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (Python 2.x):</p> <pre><code>&gt;&gt;&gt; print(e)\n# \uc544\ubb34\uac83\ub3c4 \ucd9c\ub825\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (Python 3.x):</p> <pre><code>&gt;&gt;&gt; print(e)\nNameError: name 'e' is not defined\n</code></pre>"},{"location":"KO/#_56","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ucd9c\ucc98: https://docs.python.org/ko/3/reference/compound_stmts.html#except</li> </ul> <p>\uc608\uc678\uac00 <code>as target</code>\uc744 \uc0ac\uc6a9\ud574\uc11c \ub300\uc785\ub420 \ub54c, <code>except</code>\uc808 \ub05d\uc5d0\uc11c \uc0ad\uc81c\ub429\ub2c8\ub2e4. \uc774\uac83\uc740 \ub9c8\uce58</p> <pre><code>except E as N:\n    foo\n</code></pre> <p>\uac00 \uc774\ub807\uac8c \ubcc0\ud658\ub418\ub294 \uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4</p> <pre><code>except E as N:\n    try:\n        foo\n    finally:\n        del N\n</code></pre> <p>\uc774\uac83\uc740 except \uc808 \ud6c4\uc5d0 \ucc38\uc870\ud558\ub824\uba74 \uc608\uc678\ub97c \ub2e4\ub978 \uc774\ub984\uc5d0 \ub300\uc785\ud574\uc57c \ud55c\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4. \uc608\uc678\ub97c \uc81c\uac70\ud558\ub294 \uc774\uc720\ub294, \uadf8\uac83\uc5d0 \ucca8\ubd80\ub41c \ud2b8\ub808\uc774\uc2a4\ubc31\uc73c\ub85c \uc778\ud574, \uc2a4\ud0dd \ud504\ub808\uc784\uacfc \ucc38\uc870 \uc21c\ud658\uc744 \ud615\uc131\ud574\uc11c \ub2e4\uc74c \uac00\ube44\uc9c0 \uc218\uac70\uac00 \uc77c\uc5b4\ub098\uae30 \uc804\uae4c\uc9c0 \uadf8 \ud504\ub808\uc784\uc758 \ubaa8\ub4e0 \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc744 \uc7a1\uc544\ub450\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> <ul> <li>\ud574\ub2f9 \uc808\ub4e4\uc740 \ud30c\uc774\uc36c\uc5d0\uc11c \ubc94\uc704\uac00 \uc815\ud574\uc9c0\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \uc608\uc2dc\uc758 \ubaa8\ub4e0 \uac83\uc774 \ub3d9\uc77c\ud55c \ubc94\uc704\uc5d0 \uc874\uc7ac\ud558\uba70 <code>except</code> \uc808\uc758 \uc2e4\ud589\uc73c\ub85c <code>e</code> \ubcc0\uc218\uac00 \uc0ad\uc81c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ubcc4\ub3c4\uc758 \ub0b4\ubd80 \ubc94\uc704\ub97c \uac00\uc9c0\uace0 \uc788\ub294 \ud568\uc218\ub4e4\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\b\uc778 \ub370 \ub2e4\uc74c\uc758 \uc608\uc2dc\uac00 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4:</li> </ul> <pre><code>def f(x):\n    del(x)\n    print(x)\n\nx = 5\ny = [5, 4, 3]\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt;f(x)\nUnboundLocalError: local variable 'x' referenced before assignment\n&gt;&gt;&gt;f(y)\nUnboundLocalError: local variable 'x' referenced before assignment\n&gt;&gt;&gt; x\n5\n&gt;&gt;&gt; y\n[5, 4, 3]\n</code></pre> <ul> <li>\ud30c\uc774\uc36c 2.x\uc5d0\uc11c\ub294 <code>e</code> \ubcc0\uc218\uac00 <code>Exception()</code> \uc778\uc2a4\ud134\uc2a4\uc5d0 \ud560\ub2f9\ub418\ubbc0\ub85c \ucd9c\ub825\ud558\ub824 \ud560 \ub54c \uc544\ubb34\uac83\ub3c4 \ucd9c\ub825\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</li> </ul> <p>\ucd9c\ub825 \uacb0\uacfc (Python 2.x):</p> <pre><code>&gt;&gt;&gt; e\nException()\n&gt;&gt;&gt; print e\n# \uc544\ubb34\uac83\ub3c4 \ucd9c\ub825\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4!\n</code></pre>"},{"location":"KO/#_57","title":"\u25b6 \ubbf8\uc2a4\ud14c\ub9ac\ud55c \ud0a4 \ud0c0\uc785 \ud615 \ubcc0\ud658","text":"<pre><code>class SomeClass(str):\n    pass\n\nsome_dict = {'s': 42}\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; type(list(some_dict.keys())[0])\nstr\n&gt;&gt;&gt; s = SomeClass('s')\n&gt;&gt;&gt; some_dict[s] = 40\n&gt;&gt;&gt; some_dict # \uc608\uc0c1: \ub450\uac1c\uc758 \ub2e4\ub978 key-value \uc30d\n{'s': 40}\n&gt;&gt;&gt; type(list(some_dict.keys())[0])\nstr\n</code></pre>"},{"location":"KO/#_58","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li><code>SomeClass</code>\ub294 <code>str</code> \ud074\ub798\uc2a4\uc758 <code>__hash__</code> \uba54\uc18c\ub4dc\ub97c \uc0c1\uc18d\ubc1b\uae30 \ub54c\ubb38\uc5d0 \uac1d\uccb4 <code>s</code>\uc640 \ubb38\uc790\uc5f4 <code>\"s\"</code>\ub294 \uac19\uc740 \uac12\uc744 \uac16\uac8c \ub429\ub2c8\ub2e4.</li> <li><code>SomeClass</code>\uc740 <code>str</code> \ud074\ub798\uc2a4\uc758 <code>__eq__</code> \uba54\uc18c\ub4dc\ub3c4 \uc0c1\uc18d\ubc1b\uae30 \ub54c\ubb38\uc5d0 <code>SomeClass(\"s\") == \"s\"</code>\uc758 \uacb0\uacfc\ub294 <code>True</code>\uac00 \ub429\ub2c8\ub2e4.</li> <li>\ub450 \uac1d\uccb4\ub294 \uac19\uc740 \uac12\uc73c\ub85c \ud574\uc2f1\ub418\uc5b4 \ub3d9\uc77c\ud558\uae30 \ub54c\ubb38\uc5d0 \ub515\uc154\ub108\ub9ac\uc5d0\uc11c \uac19\uc740 \ud0a4\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4.</li> <li>\uc6d0\ud558\ub294 \ub3d9\uc791\uc744 \uc704\ud574 <code>SomeClass</code>\uc758 <code>__eq__</code> \uba54\uc18c\ub4dc\ub97c \ub2e4\uc2dc \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul> <pre><code>class SomeClass(str):\n  def __eq__(self, other):\n      return (\n          type(self) is SomeClass\n          and type(other) is SomeClass\n          and super().__eq__(other)\n      )\n\n  # \uc218\uc815\ub41c __eq__\ub97c \uc815\uc758\ud560 \ub54c \ud30c\uc774\uc36c\uc740 \uc790\ub3d9\uc73c\ub85c __hash__ \uba54\uc18c\ub4dc\ub97c\n  # \uc0c1\uc18d\ubc1b\ub294 \uac83\uc744 \uc911\ub2e8\ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc815\uc758\ud574\uc904 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n  __hash__ = str.__hash__\n\nsome_dict = {'s':42}\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; s = SomeClass('s')\n&gt;&gt;&gt; some_dict[s] = 40\n&gt;&gt;&gt; some_dict\n{'s': 40, 's': 42}\n&gt;&gt;&gt; keys = list(some_dict.keys())\n&gt;&gt;&gt; type(keys[0]), type(keys[1])\n(__main__.SomeClass, str)\n</code></pre>"},{"location":"KO/#_59","title":"\u25b6 \uc5ec\ub7ec\ubd84\uc774 \ub9de\ucd9c \uc218 \uc788\ub294\uc9c0 \ud55c\ubc88 \ubcfc\uae4c\uc694?","text":"<pre><code>a, b = a[b] = {}, 5\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; a\n{5: ({...}, 5)}\n</code></pre>"},{"location":"KO/#_60","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ud30c\uc774\uc36c \uc5b8\uc5b4 \ub808\ud37c\ub7f0\uc2a4\uc5d0 \ub530\ub974\uba74, \ub300\uc785\ubb38\uc758 \uad6c\uc870\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\ud0dc\ub97c \ubcf4\uc785\ub2c8\ub2e4.   <pre><code>(target_list \"=\")+ (expression_list | yield_expression)\n</code></pre>   \uadf8\ub9ac\uace0</li> </ul> <p>\ub300\uc785\ubb38\uc740 \ud45c\ud604\uc2dd \ubaa9\ub85d (\uc774\uac83\uc774 \ud558\ub098\uc758 \ud45c\ud604\uc2dd\uc77c \uc218\ub3c4, \uc27c\ud45c\ub85c \ubd84\ub9ac\ub41c \ubaa9\ub85d\uc77c \uc218\ub3c4 \uc788\ub294\ub370, \ud6c4\uc790\uc758 \uacbd\uc6b0\ub294 \ud29c\ud50c\uc774 \ub9cc\ub4e4\uc5b4\uc9c4\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\ub77c) \uc758 \uac12\uc744 \uad6c\ud558\uace0, \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c, \ud558\ub098\uc758 \uacb0\uacfc \uac1d\uccb4\ub97c \ud0c0\uae43 \ubaa9\ub85d\uc758 \uac01\uac01\uc5d0 \ub300\uc785\ud55c\ub2e4.</p> <ul> <li> <p><code>(target_list \"=\")+</code>\uc758 <code>+</code>\ub294 \ud558\ub098 \uc774\uc0c1\uc758 \ud0c0\uae43 \ubaa9\ub85d\uc774 \uc788\uc744 \uc218 \uc788\uc74c\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc608\uc81c\uc758 \uacbd\uc6b0 \ud0c0\uae43 \ubaa9\ub85d\uc740 <code>a, b</code>, <code>a[b]</code> \uc785\ub2c8\ub2e4. (\ud45c\ud604\uc2dd \ubaa9\ub85d\uc740 \uc815\ud655\ud558\uac8c \ud558\ub098\uc774\uba70 \uc608\uc81c\uc758 \uacbd\uc6b0 <code>{}, 5</code> \uc785\ub2c8\ub2e4.)</p> </li> <li> <p>\ud45c\ud604\uc2dd \ubaa9\ub85d\uc744 \ud3c9\uac00\ud55c \ud6c4 \ud574\ub2f9 \uac12\uc740 \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \ud0c0\uae43 \ubaa9\ub85d\uc5d0 \ud480\uc5b4\uc9c0\uac8c \ub429\ub2c8\ub2e4. \uc608\uc81c\uc758 \uacbd\uc6b0 \uba3c\uc800 <code>{}, 5</code>\uc758 \ud29c\ud50c\uc774 <code>a, b</code>\ub85c \ud480\ub9ac\uace0 <code>a = {}</code>, <code>b = 5</code>\uac00 \ub429\ub2c8\ub2e4.</p> </li> <li> <p><code>a</code>\ub294 \uc774\uc81c \ubcc0\uacbd \uac00\ub2a5\ud55c \uac1d\uccb4\uc778 <code>{}</code>\uc5d0 \ud560\ub2f9\ub429\ub2c8\ub2e4.</p> </li> <li> <p>\ub450 \ubc88\uc9f8 \ud0c0\uae43 \ubaa9\ub85d\uc740 <code>a[b]</code>\uc785\ub2c8\ub2e4. (\uc5ec\ub7ec\ubd84\uc740 <code>a</code>\uc640 <code>b</code>\uac00 \uad6c\ubb38 \uc774\uc804\uc5d0 \uc815\uc758\ub418\uc9c0 \uc54a\uc544 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560 \uac70\ub77c \uc608\uc0c1\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc6b0\ub9ac\ub294 \ubc29\uae08 <code>a</code>\uc5d0 <code>{}</code>, <code>b</code>\uc5d0 <code>5</code>\ub97c \ub300\uc785\ud55c \uc0ac\uc2e4\uc744 \uae30\uc5b5\ud558\uc138\uc694)</p> </li> <li> <p>\uc774\uc81c \ub515\uc154\ub108\ub9ac\uc5d0 \uc788\ub294 \ud0a4 <code>5</code>\ub97c \ud29c\ud50c <code>({}, 5)</code>\ub85c \uc124\uc815\ud558\uc5ec \uc21c\ud658 \ucc38\uc870\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. (\ucd9c\ub825\uc758 <code>{...}</code>\ub294 <code>a</code>\uac00 \uc774\ubbf8 \ucc38\uc870\ud558\uace0 \uc788\ub294 \uac1d\uccb4\ub97c \uac00\ub9ac\ud0b5\ub2c8\ub2e4.) \uc21c\ud654 \ucc38\uc870\uc758 \ub2e4\ub978 \uac04\ub2e8\ud55c \uc608\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.</p> </li> </ul> <pre><code>&gt;&gt;&gt; some_list = some_list[0] = [0]\n&gt;&gt;&gt; some_list\n[[...]]\n&gt;&gt;&gt; some_list[0]\n[[...]]\n&gt;&gt;&gt; some_list is some_list[0]\nTrue\n&gt;&gt;&gt; some_list[0][0][0][0][0][0] == some_list\nTrue\n</code></pre> <p>\uc6b0\ub9ac\uc758 \uc608\uc81c\uc5d0\uc11c\ub3c4 \uc774\uac83\uacfc \ube44\uc2b7\ud569\ub2c8\ub2e4. (<code>a[b][0]</code>\uc740 <code>a</code>\uc640 \uac19\uc740 \uac1d\uccb4\uc785\ub2c8\ub2e4.)</p> <ul> <li>\uc694\uc57d\ud558\uc790\uba74, \uc608\uc81c\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \ub098\ub20c \uc218 \uc788\uc2b5\ub2c8\ub2e4.   <pre><code>a, b = {}, 5\na[b] = a, b\n</code></pre>   \uadf8\ub9ac\uace0 \uc21c\ud658 \ucc38\uc870\ub294 <code>a[b][0]</code>\uc774 <code>a</code>\uc640 \ub3d9\uc77c\ud55c \uac1d\uccb4\ub77c\ub294 \uc0ac\uc2e4\uc5d0 \uc758\ud574 \uc815\ub2f9\ud654 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.   <pre><code>&gt;&gt;&gt; a[b][0] is a\nTrue\n</code></pre></li> </ul>"},{"location":"KO/#_61","title":"\"\ubbf8\ub044\ub7ec\uc6b4 \ube44\ud0c8\uae38\" \ub2e8\uc6d0","text":""},{"location":"KO/#_62","title":"\u25b6 \ub515\uc154\ub108\ub9ac\uac00 \ubc18\ubcf5 \uc911\uc77c \ub54c \uc218\uc815\ud558\uae30","text":"<pre><code>x = {0: None}\n\nfor i in x:\n    del x[i]\n    x[i+1] = None\n    print(i)\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (Python 2.7- Python 3.5):</p> <pre><code>0\n1\n2\n3\n4\n5\n6\n7\n</code></pre> <p>\uc815\ud655\ud788 8\ubc88 \ub3cc\uace0 \uba48\ucda5\ub2c8\ub2e4.</p>"},{"location":"KO/#_63","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ub515\uc154\ub108\ub9ac\uac00 \ubc18\ubcf5\ub420 \ub54c \ub3d9\uc2dc\uc5d0 \ud3b8\uc9d1\ud560 \uc218 \uc788\ub294 \uac83\uc740 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</li> <li>8\ubc88 \ubc18\ubcf5\ub418\ub294 \uc774\uc720\ub294 \ub354 \ub9ce\uc740 \ud0a4\ub97c \uc18c\uc720\ud558\uae30 \uc704\ud574 \ub515\uc154\ub108\ub9ac\uac00 \ud06c\uae30\ub97c \uc870\uc815\ud558\ub294 \uc9c0\uc810\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. (\uc6b0\ub9ac\ub294 8\uac1c\uc758 \uc0ad\uc81c \ud56d\ubaa9\ub4e4\uc774 \uc788\uc73c\ubbc0\ub85c, \ud06c\uae30\uc758 \uc870\uc815\uc774 \ud544\uc694\ud569\ub2c8\ub2e4) \uc774\ub294 \uc2e4\uc81c \uad6c\ud604\uc758\b \uc138\ubd80\uc0ac\ud56d\uc785\ub2c8\ub2e4.</li> <li>\uc0ad\uc81c\ub41c \ud0a4\ub97c \ucc98\ub9ac\ud558\ub294 \uacfc\uc815\uacfc \ud06c\uae30\uc758 \uc870\uc815\uc774 \uc774\ub8e8\uc5b4\uc9c0\ub294 \uc2dc\uc810\uc740 Python\uc758 \uad6c\ud604\uc5d0 \ub530\ub77c \ub2e4\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\ub530\ub77c\uc11c, \ud30c\uc774\uc36c 2.7 - 3.5 \uc774\uc678\uc758 \ubc84\uc804\uc758 \uacbd\uc6b0, \uc2e4\ud589 \ud69f\uc218\uac00 8\uacfc \ub2e4\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\ud558\uc9c0\ub9cc \ud69f\uc218\uac00 \uc5b4\ub5bb\ub358 \uac04\uc5d0, \uc2e4\ud589\ud560 \ub54c \ub9c8\ub2e4 \ub3d9\uc77c\ud55c \uacb0\uacfc\uc785\ub2c8\ub2e4) \uc5ec\uae30 \ub610\ub294 StackOverflow\uc758 \uc774 \uc2a4\ub808\ub4dc\uc5d0\uc11c \uc774\uc5d0 \uad00\ud55c \ud1a0\ub860\uc744 \ucc3e\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\ud30c\uc774\uc36c 3.7.6 \uc774\uc0c1\uc5d0\uc11c\ub294 \uc774\uac83\uc744 \uc2dc\ub3c4\ud560 \uacbd\uc6b0 <code>RuntimeError: dictionary keys changed during iteration</code> \uc608\uc678\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#del","title":"\u25b6 \uc644\uac15\ud55c <code>del</code> \uc5f0\uc0b0\uc790","text":"<pre><code>class SomeClass:\n    def __del__(self):\n        print(\"Deleted!\")\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc: 1.</p> <pre><code>&gt;&gt;&gt; x = SomeClass()\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; del x # \"Deleted!\"\ub97c \ucd9c\ub825\ud574\uc57c \ud569\ub2c8\ub2e4\n&gt;&gt;&gt; del y\nDeleted!\n</code></pre> <p>\ud734, \ub4dc\ub514\uc5b4 \uc0ad\uc81c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \ucc98\uc74c\uc758 <code>x</code> \uc0ad\uc81c\uc5d0\uc11c <code>__del__</code>\uc774 \ud638\ucd9c\ub418\uc9c0 \uc54a\uc740 \uac83\uc744 \uc0dd\uac01\ud558\uc2e4 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc608\uc81c\ub97c \uc0b4\uc9dd \ube44\ud2c0\uc5b4 \ubd05\uc2dc\ub2e4.</p> <p>2.</p> <pre><code>&gt;&gt;&gt; x = SomeClass()\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; del x\n&gt;&gt;&gt; y # y\uac00 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4\n&lt;__main__.SomeClass instance at 0x7f98a1a67fc8&gt;\n&gt;&gt;&gt; del y # \uc774\uc804\uacfc \uac19\uc774, \"Deleted!\"\ub97c \ucd9c\ub825\ud574\uc57c \ud569\ub2c8\ub2e4\n&gt;&gt;&gt; globals() # \uc624, \uadf8\ub807\uc9c0 \uc54a\ub124\uc694. \uc6b0\ub9ac\uc758 \uc804\uc5ed\ubcc0\uc218\ub97c \ud655\uc778\ud574\ubd05\uc2dc\ub2e4\nDeleted!\n{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'SomeClass': &lt;class __main__.SomeClass at 0x7f98a1a5f668&gt;, '__package__': None, '__name__': '__main__', '__doc__': None}\n</code></pre> <p>\uc88b\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc0ad\uc81c\ub418\uc5c8\uc2b5\ub2c8\ub2e4 :confused:</p>"},{"location":"KO/#_64","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li><code>del x</code>\ub294 \uc9c1\uc811\uc801\uc73c\ub85c <code>x.__del__()</code>\uc744 \ubd80\ub974\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</li> <li><code>del x</code>\uac00 \ud638\ucd9c\ub420 \ub54c, \ud30c\uc774\uc36c\uc740 <code>x</code>\uc5d0 \ub300\ud55c \ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \ud558\ub098\uc529 \uc904\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 <code>x.__del__()</code>\uc740 x\uc758 \ucc38\uc870 \uce74\uc6b4\ud2b8\uac00 0\uc5d0 \ub3c4\ub2ec\ud560 \ub54c \uc2e4\ud589\ub429\ub2c8\ub2e4.</li> <li>\ub450\ubc88\uc9f8 \ucf54\ub4dc\uc758 \ucd9c\ub825\uc5d0\uc11c, <code>y.__del__()</code>\u00a0\ub294 \ud638\ucd9c\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \uc774\uc804\uc758 \uad6c\ubb38\uc5d0 (<code>&gt;&gt;&gt; y</code>) \ub300\ud654\ud615 \uc778\ud130\ud504\ub9ac\ud130\uac00 \uac19\uc740 \uac1d\uccb4\uc5d0 \ub300\ud574 \ub610 \ub2e4\ub978 \ucc38\uc870\ub97c \ub9cc\ub4e4\uace0, \ub530\ub77c\uc11c <code>del y</code>\uac00 \ud638\ucd9c\ub420 \ub54c \ucc38\uc870 \uce74\uc6b4\ud2b8\uac00 0\uc5d0 \ub3c4\ub2ec\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</li> <li><code>globals</code>\uac00 \ud638\ucd9c\ub418\uba74 \uc874\uc7ac\ud558\ub294 \ucc38\uc870\uac00 \ud30c\uad34\ub3fc, \uc774\ub7f0 \uc774\uc720\ub85c \uc6b0\ub9ac\ub294 \"Deleted!\"\uac00 \ucd9c\ub825\ub418\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\ub9c8\uce68\ub0b4!)</li> </ul>"},{"location":"KO/#_65","title":"\u25b6 \ubc94\uc704\ub97c \ubc97\uc5b4\ub09c \ubcc0\uc218","text":"<p>1.</p> <pre><code>a = 1\ndef some_func():\n    return a\n\ndef another_func():\n    a += 1\n    return a\n</code></pre> <p>2.</p> <pre><code>def some_closure_func():\n    a = 1\n    def some_inner_func():\n        return a\n    return some_inner_func()\n\ndef another_closure_func():\n    a = 1\n    def another_inner_func():\n        a += 1\n        return a\n    return another_inner_func()\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; some_func()\n1\n&gt;&gt;&gt; another_func()\nUnboundLocalError: local variable 'a' referenced before assignment\n\n&gt;&gt;&gt; some_closure_func()\n1\n&gt;&gt;&gt; another_closure_func()\nUnboundLocalError: local variable 'a' referenced before assignment\n</code></pre>"},{"location":"KO/#_66","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ubc94\uc704 \ub0b4\uc758 \ubcc0\uc218\uc5d0 \ud560\ub2f9\ud558\uba74, \ud574\ub2f9 \ubc94\uc704\uc758 \ub85c\uceec \ubcc0\uc218\uac00 \ub429\ub2c8\ub2e4. \uadf8\ub798\uc11c <code>a</code>\ub294 <code>another_func</code>\uc758 \ubc94\uc704\uc5d0 \uad6d\ud55c\ub418\uc9c0\ub9cc \uc774\uc804\uacfc \uac19\uc740 \ubc94\uc704\uc5d0\uc11c \ucd08\uae30\ud654 \ub418\uc9c0 \uc54a\uc544 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</li> <li><code>another_func</code>\uc5d0\uc11c \uc678\ubd80 \ubc94\uc704\uc758 <code>a</code>\ub97c \ubcc0\uacbd\ud558\ub824\uba74, <code>global</code> \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc138\uc694.</li> </ul> <pre><code>def another_func()\n    global a\n    a += 1\n    return a\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; another_func()\n2\n</code></pre> <ul> <li>In <code>another_closure_func</code>, <code>a</code> becomes local to the scope of <code>another_inner_func</code>, but it has not been initialized previously in the same scope, which is why it throws an error.</li> <li>To modify the outer scope variable <code>a</code> in <code>another_inner_func</code>, use the <code>nonlocal</code> keyword. The nonlocal statement is used to refer to variables defined in the nearest outer (excluding the global) scope.</li> </ul> <pre><code>def another_func():\n    a = 1\n    def another_inner_func():\n        nonlocal a\n        a += 1\n        return a\n    return another_inner_func()\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; another_func()\n2\n</code></pre> <ul> <li> <p>The keywords <code>global</code> and <code>nonlocal</code> tell the python interpreter to not delcare new variables and look them up in the corresponding outer scopes.</p> </li> <li> <p>\uc9e7\uc9c0\ub9cc \uba4b\uc9c4 \uc774 \uac00\uc774\ub4dc\ub97c \uc77d\uace0 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc640 \ubc94\uc704 \uacb0\uc815\uc774 \ud30c\uc774\uc36c\uc5d0\uc11c \uc791\ub3d9\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\uc138\uc694.</p> </li> </ul>"},{"location":"KO/#_67","title":"\u25b6 \ubc18\ubcf5\ud558\ub294 \ub3d9\uc548 \ub9ac\uc2a4\ud2b8\uc758 \uc544\uc774\ud15c\uc744 \uc0ad\uc81c\ud558\uae30","text":"<pre><code>list_1 = [1, 2, 3, 4]\nlist_2 = [1, 2, 3, 4]\nlist_3 = [1, 2, 3, 4]\nlist_4 = [1, 2, 3, 4]\n\nfor idx, item in enumerate(list_1):\n    del item\n\nfor idx, item in enumerate(list_2):\n    list_2.remove(item)\n\nfor idx, item in enumerate(list_3[:]):\n    list_3.remove(item)\n\nfor idx, item in enumerate(list_4):\n    list_4.pop(idx)\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; list_1\n[1, 2, 3, 4]\n&gt;&gt;&gt; list_2\n[2, 4]\n&gt;&gt;&gt; list_3\n[]\n&gt;&gt;&gt; list_4\n[2, 4]\n</code></pre> <p>\uc65c \ucd9c\ub825 \uacb0\uacfc\uac00 <code>[2, 4]</code>\uac00 \ub098\uc624\ub294\uc9c0 \uc54c \uc218 \uc788\ub098\uc694?</p>"},{"location":"KO/#_68","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ubc18\ubcf5\ud558\uace0 \uc788\ub294 \uac1d\uccb4\ub97c \ubc14\uafb8\ub294 \uac83\uc740 \uc88b\uc740 \uc0dd\uac01\uc774 \uc544\ub2d9\ub2c8\ub2e4. \uc62c\ubc14\ub978 \ubc29\ubc95\uc740 <code>list_3[:]</code>\uacfc \uac19\uc774 \ubcf5\uc0ac\ubcf8\uc744 \ubc18\ubcf5\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.</li> </ul> <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4]\n&gt;&gt;&gt; id(some_list)\n139798789457608\n&gt;&gt;&gt; id(some_list[:]) # \ud30c\uc774\uc36c\uc740 \uc2ac\ub77c\uc774\uc2a4\ub41c \ub9ac\uc2a4\ud2b8\ub97c \uc704\ud574 \uc0c8\ub85c\uc6b4 \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n139798779601192\n</code></pre> <p><code>del</code>, <code>remove</code>, <code>pop</code>\uc758 \ucc28\uc774\uc810</p> <ul> <li><code>del var_name</code>\uc740 \ub85c\uceec \ub610\ub294 \uc804\uc5ed \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c <code>var_name</code>\uc758 \ubc14\uc778\ub529\uc744 \uc0ad\uc81c\ud569\ub2c8\ub2e4. (\uadf8\ub798\uc11c <code>list_1</code>\uc740 \uc601\ud5a5 \ubc1b\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4)</li> <li><code>remove</code>\ub294 \ud2b9\uc815 \uc778\ub371\uc2a4\uac00 \uc544\ub2cc \uccab\ubc88\uc9f8 \uc77c\uce58\ud558\ub294 \uac12\uc744 \uc0ad\uc81c\ud558\ub294 \uacbd\uc6b0 \uac12\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc73c\uba74 <code>ValueError</code>\ub97c \uc77c\uc73c\ud0b5\ub2c8\ub2e4.</li> <li><code>pop</code>\uc740 \ud2b9\uc815 \uc778\ub371\uc2a4\uc5d0\uc11c \uc694\uc18c\ub97c \uc81c\uac70\ud558\uace0 \ubc18\ud658\ud558\uba70, \uc778\ub371\uc2a4\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc73c\uba74 <code>IndexError</code>\ub97c \uc77c\uc73c\ud0b5\ub2c8\ub2e4.</li> </ul> <p>\uc65c <code>[2, 4]</code>\uac00 \ucd9c\ub825\ub418\ub098\uc694?</p> <ul> <li> <p>\ub9ac\uc2a4\ud2b8\uc758 \ubc18\ubcf5\uc740 \uc778\ub371\uc2a4\ubcc4\ub85c \uc774\ub8e8\uc5b4\uc9c0\uba70, <code>list_2</code> \ub610\ub294 <code>list_4</code>\uc5d0\uc11c <code>1</code>\uc744 \uc0ad\uc81c\ud558\uba74, \ub9ac\uc2a4\ud2b8\ub294 <code>[2, 3, 4]</code>\uac00 \ub429\ub2c8\ub2e4. \ub098\uba38\uc9c0 \uc694\uc18c\ub4e4\uc740 \uc778\ub371\uc2a4\uac00 \ub0ae\uc544\uc9c0\uac8c \ub418\uc5b4 <code>2</code>\ub294 \uc778\ub371\uc2a4 0, <code>3</code>\uc740 \uc778\ub371\uc2a4 1\uc774 \ub429\ub2c8\ub2e4. \ub2e4\uc74c\ubc88 \ubc18\ubcf5\uc740 \uc778\ub371\uc2a4 1 (\uc694\uc18c <code>3</code>\uc774 \ub429\ub2c8\ub2e4)\uc744 \ubcf4\uac8c \ub418\uace0, <code>2</code>\ub294 \uac74\ub108\ub6f0\uac8c \ub429\ub2c8\ub2e4. \ub9ac\uc2a4\ud2b8 \uc21c\uc11c\uc758 \ubaa8\ub4e0 \ub300\uc548 \uc694\uc18c\ub4e4\ub3c4 \ube44\uc2b7\ud55c \uc0c1\ud669\uc774 \uc77c\uc5b4\ub0a9\ub2c8\ub2e4.</p> </li> <li> <p>\uc608\uc81c\ub97c \uc124\uba85\ud558\ub294 StackOverflow \uc2a4\ub808\ub4dc \ub97c \ucc38\uace0\ud558\uc600\uc2b5\ub2c8\ub2e4.</p> </li> <li>\ud30c\uc774\uc36c\uc758 \ub515\uc154\ub108\ub9ac\uc5d0 \uad00\ub828\ub41c \ube44\uc2b7\ud55c \uc608\uc81c\ub85c \uc774 StackOverflow \uc2a4\ub808\ub4dc \ub3c4 \ucc38\uace0\ud558\uc138\uc694.</li> </ul>"},{"location":"KO/#zip","title":"\u25b6 \ubc18\ubcf5\uc790\uc758 \uc190\uc2e4\ub418\ub294 zip *","text":"<pre><code>&gt;&gt;&gt; numbers = list(range(7))\n&gt;&gt;&gt; numbers\n[0, 1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; first_three, remaining = numbers[:3], numbers[3:]\n&gt;&gt;&gt; first_three, remaining\n([0, 1, 2], [3, 4, 5, 6])\n&gt;&gt;&gt; numbers_iter = iter(numbers)\n&gt;&gt;&gt; list(zip(numbers_iter, first_three))\n[(0, 0), (1, 1), (2, 2)]\n# \uc9c0\uae08\uae4c\uc9c0\ub294 \uc88b\uc740\ub370, \ub098\uba38\uc9c0\ub3c4 \uc555\ucd95\ud574\ubd05\uc2dc\ub2e4\n&gt;&gt;&gt; list(zip(numbers_iter, remaining))\n[(4, 3), (5, 4), (6, 5)]\n</code></pre> <p><code>numbers</code> \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc694\uc18c <code>3</code>\uc774 \uc5b4\ub514\ub85c \uac14\uc744\uae4c\uc694?</p>"},{"location":"KO/#_69","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ud30c\uc774\uc36c\uc758 \uc774 \ubb38\uc11c\uc5d0\uc11c, zip \ud568\uc218\uc758 \ub300\ub7b5\uc801\uc778 \uad6c\ud604\uc744 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4.   <pre><code>def zip(*iterables):\n    sentinel = object()\n    iterators = [iter(it) for it in iterables]\n    while iterators:\n        result = []\n        for it in iterators:\n            elem = next(it, sentinel)\n            if elem is sentinel: return\n            result.append(elem)\n        yield tuple(result)\n</code></pre></li> <li>\uadf8\ub798\uc11c \uc774 \ud568\uc218\ub294 \uc784\uc758\uc758 \uc218\uc758 \ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4\ub97c \ubaa8\uc544 <code>next</code> \ud568\uc218\ub97c \ud638\ucd9c\ud558\uc5ec \uac01\uac01\uc758 \ud56d\ubaa9\uc744 <code>result</code> \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\ud558\uace0, \ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4 \uc911 \ud558\ub098\uac00 \uace0\uac08\ub420 \ub54c\uc5d0 \uc911\uc9c0\ud569\ub2c8\ub2e4.</li> <li>\uc5ec\uae30\uc11c \uc8fc\uc758\ud574\uc57c \ud560 \uc810\uc740 \ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4\ub4e4\uc774 \uace0\uac08\ub420 \ub54c, <code>result</code> \ub9ac\uc2a4\ud2b8\uc5d0 \ub4e4\uc5b4 \uc788\ub294 \uae30\uc874\uc758 \uc694\uc18c\ub4e4\uc774 \ud3d0\uae30\ub418\ub294 \uac83\uc785\ub2c8\ub2e4. <code>numbers_iter</code> \ub0b4\ubd80\uc758 <code>3</code>\uc5d0 \uadf8\ub7ec\ud55c \uc77c\uc774 \uc77c\uc5b4\ub0ac\uc2b5\ub2c8\ub2e4.</li> <li><code>zip</code>\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc704\uc640 \uac19\uc740 \uc77c\uc744 \ucc98\ub9ac\ud558\ub294 \uc62c\ubc14\ub978 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4,   <pre><code>&gt;&gt;&gt; numbers = list(range(7))\n&gt;&gt;&gt; numbers_iter = iter(numbers)\n&gt;&gt;&gt; list(zip(first_three, numbers_iter))\n[(0, 0), (1, 1), (2, 2)]\n&gt;&gt;&gt; list(zip(remaining, numbers_iter))\n[(3, 3), (4, 4), (5, 5), (6, 6)]\n</code></pre>   zip\uc758 \uccab\ubc88\uc9f8 \uc778\uc790\ub294 \uac00\uc7a5 \uc801\uc740 \uc694\uc18c\ub97c \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_70","title":"\u25b6 \ub8e8\ud504 \ubcc0\uc218\uac00 \uc720\ucd9c\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4!","text":"<p>1.</p> <pre><code>for x in range(7):\n    if x == 6:\n        print(x, ': for x inside loop')\nprint(x, ': x in global')\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>6 : for x inside loop\n6 : x in global\n</code></pre> <p>\ud558\uc9c0\ub9cc <code>x</code>\ub294 \ub8e8\ud504\uc758 \ubc16\uc5d0\uc11c \uc120\uc5b8\ub41c \uc801\uc774 \uc5c6\uc2b5\ub2c8\ub2e4...</p> <p>2.</p> <pre><code># \uc774\ubc88\uc5d4 \uba3c\uc800 x\ub97c \ucd08\uae30\ud654\ud574\ubd05\uc2dc\ub2e4\nx = -1\nfor x in range(7):\n    if x == 6:\n        print(x, ': for x inside loop')\nprint(x, ': x in global')\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>6 : for x inside loop\n6 : x in global\n</code></pre> <p>3.</p> <p>\ucd9c\ub825 \uacb0\uacfc (Python 2.x):</p> <pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; print([x for x in range(5)])\n[0, 1, 2, 3, 4]\n&gt;&gt;&gt; print(x)\n4\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (Python 3.x):</p> <pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; print([x for x in range(5)])\n[0, 1, 2, 3, 4]\n&gt;&gt;&gt; print(x)\n1\n</code></pre>"},{"location":"KO/#_71","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li> <p>\ud30c\uc774\uc36c\uc5d0\uc11c, for \ub8e8\ud504\ub294 \ub8e8\ud504\uc758 \uc2a4\ucf54\ud504\ub97c \uc0ac\uc6a9\ud558\uace0 \uc815\uc758\ub41c \ub8e8\ud504 \ubcc0\uc218\ub294 \ub4a4\ub85c \ub0a8\uaca8\ub461\ub2c8\ub2e4. \uc774\uc804\uc5d0 \uc804\uc5ed \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c for \ub8e8\ud504 \ubcc0\uc218\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc815\uc758\ud55c \uacbd\uc6b0\uc5d0\ub3c4 \uc801\uc6a9\ub429\ub2c8\ub2e4. \uc774 \uacbd\uc6b0, \uae30\uc874\uc5d0 \uc874\uc7ac\ud558\ub294 \ubcc0\uc218\ub97c \ub2e4\uc2dc \ubc14\uc778\ub529\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\ud30c\uc774\uc36c 2.x\uc640 \ud30c\uc774\uc36c 3.x\uc758 \uc778\ud130\ud504\ub9ac\ud130\uc758 \ucd9c\ub825 \uacb0\uacfc\uc758 \ucc28\uc774\ub294 \ub2e4\uc74c\uc758 \ud30c\uc774\uc36c 3.0\uc758 \uc0c8\ub85c\uc6b4 \uae30\ub2a5\ub4e4 \ubcc0\uacbd \ub85c\uadf8\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:</p> </li> </ul> <p>\"\ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\uc740 \uc774\uc81c <code>[... for var in item1, item2, ...]</code> \ubb38\ubc95\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub300\uc2e0 <code>[... for var in (item1, item2, ...)]</code>\uc744 \uc0ac\uc6a9\ud558\uc138\uc694. \ub610\ud55c \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\uc740 \ub2e4\ub978 \uc758\ubbf8\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\ub294\uc810\uc5d0 \uc8fc\ubaa9\ud574\uc57c\ud569\ub2c8\ub2e4: \uadf8\ub4e4\uc740 <code>list()</code> \uc0dd\uc131 \ud45c\ud604\uc2dd \uc0dd\uc131\uc790\uc758 \ubb38\ubc95 \uc124\ud0d5\uc5d0 \uac00\uae5d\uace0, \ud2b9\ud788 \ub8e8\ud504 \uc81c\uc5b4 \ubcc0\uc218\ub4e4\uc740 \ub354 \uc774\uc0c1 \ubc94\uc704 \ubc16\uc73c\ub85c \uc720\ucd9c\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</p>"},{"location":"KO/#_72","title":"\u25b6 \uae30\ubcf8 \uac00\ubcc0\uc778\uc218\ub97c \uc870\uc2ec\ud558\uc138\uc694!","text":"<pre><code>def some_func(default_arg=[]):\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; some_func()\n['some_string']\n&gt;&gt;&gt; some_func()\n['some_string', 'some_string']\n&gt;&gt;&gt; some_func([])\n['some_string']\n&gt;&gt;&gt; some_func()\n['some_string', 'some_string', 'some_string']\n</code></pre>"},{"location":"KO/#_73","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ud30c\uc774\uc36c\uc5d0\uc11c \ud568\uc218\uc758 \uae30\ubcf8 \ubcc0\uacbd \uac00\ub2a5\ud55c \uc778\uc218\ub294 \ud568\uc218\uac00 \ud638\ucd9c\ub420 \ub54c\ub9c8\ub2e4 \uc2e4\uc81c\ub85c \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub300\uc2e0, \ucd5c\uadfc\uc5d0 \ud560\ub2f9\ub41c \uac12\uc774 \uae30\ubcf8\uac12\uc73c\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. <code>some_func</code>\uc5d0 <code>[]</code>\ub97c \uc778\uc218\ub85c \ub118\uaca8\uc904 \ub54c <code>default_arg</code>\uc758 \uae30\ubcf8\uac12\uc774 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc544 \uacb0\uacfc\uac00 \uc608\uc0c1\ub300\ub85c \ub098\uc624\uac8c \ub429\ub2c8\ub2e4.</li> </ul> <pre><code>def some_func(default_arg=[]):\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; some_func.__defaults__ #\uc774\uac74 \ud568\uc218\uc5d0 \ub300\ud55c \uae30\ubcf8 \uc778\uc218\uac12\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4\n([],)\n&gt;&gt;&gt; some_func()\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string'],)\n&gt;&gt;&gt; some_func()\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string', 'some_string'],)\n&gt;&gt;&gt; some_func([])\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string', 'some_string'],)\n</code></pre> <ul> <li>\ubcc0\uacbd \uac00\ub2a5\ud55c \uc778\uc218\ub85c \uc778\ud55c \ubc84\uadf8\ub97c \ud53c\ud558\ub294 \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\uc73c\ub85c\ub294 \uae30\ubcf8\uac12\uc73c\ub85c <code>None</code>\uc744 \uc9c0\uc815\ud55c \ud6c4\uc5d0 \ud574\ub2f9 \uc778\uc218\uc5d0 \uc5b4\ub5a0\ud55c \uac12\uc774 \ub4e4\uc5b4\uc624\ub294\uc9c0 \ud655\uc778\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc608\uc2dc:</li> </ul> <pre><code>def some_func(default_arg=None):\n    if default_arg is None:\n        default_arg = []\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre>"},{"location":"KO/#_74","title":"\u25b6 \uc5ec\ub7ec \uc608\uc678\ub4e4\uc744 \uc7a1\uae30","text":"<pre><code>some_list = [1, 2, 3]\ntry:\n    # ``IndexError``\ub97c \uc77c\uc73c\ud0b5\ub2c8\ub2e4\n    print(some_list[4])\nexcept IndexError, ValueError:\n    print(\"Caught!\")\n\ntry:\n    # ``ValueError``\ub97c \uc77c\uc73c\ud0b5\ub2c8\ub2e4\n    some_list.remove(4)\nexcept IndexError, ValueError:\n    print(\"Caught again!\")\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (Python 2.x):</p> <pre><code>Caught!\n\nValueError: list.remove(x): x not in list\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (Python 3.x):</p> <pre><code>  File \"&lt;input&gt;\", line 3\n    except IndexError, ValueError:\n                     ^\nSyntaxError: invalid syntax\n</code></pre>"},{"location":"KO/#_75","title":"\ud83d\udca1 \uc124\uba85","text":"<ul> <li>\uc608\uc678\ucc98\ub9ac \uad6c\ubb38\uc5d0 \uc5ec\ub7ec \uac1c\uc758 \uc608\uc678\ub97c \ucc98\ub9ac\ud558\ub824\uba74, \ud574\ub2f9 \uc608\uc678\ub4e4\uc744 \ud29c\ud50c\ub85c \ubb36\uc5b4 \uccab \ubc88\uc9f8 \uc778\uc218\ub85c \ub118\uaca8\uc918\uc57c \ud569\ub2c8\ub2e4. \ub450 \ubc88\uc9f8 \uc778\uc218\ub294 \uc120\ud0dd\uc801 \uc774\ub984\uc73c\ub85c, \uc8fc\uc5b4\uc9c4 \uacbd\uc6b0 \uc77c\uc5b4\ub09c \uc608\uc678 \uc778\uc2a4\ud134\uc2a4\uac00 \ubc14\uc778\ub529 \ub429\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4,</li> </ul> <pre><code>some_list = [1, 2, 3]\ntry:\n   # ``ValueError``\ub97c \uc77c\uc73c\ud0b5\ub2c8\ub2e4\n   some_list.remove(4)\nexcept (IndexError, ValueError), e:\n   print(\"Caught again!\")\n   print(e)\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (Python 2.x):</p> <pre><code>Caught again!\nlist.remove(x): x not in list\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (Python 3.x):</p> <pre><code>  File \"&lt;input&gt;\", line 4\n    except (IndexError, ValueError), e:\n                                     ^\nIndentationError: unindent does not match any outer indentation level\n</code></pre> <ul> <li>\uc27c\ud45c\ub85c \uc608\uc678\uc5d0\uc11c \ubcc0\uc218\ub97c \ubd84\ub9ac\ud558\ub294 \ubc29\ubc95\uc740 \uc774\uc81c\ub294 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc73c\uba70 \ud30c\uc774\uc36c 3\uc5d0\uc11c\ub294 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4; \uc774 \uacbd\uc6b0 <code>as</code>\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4,</li> </ul> <pre><code>some_list = [1, 2, 3]\ntry:\n    some_list.remove(4)\n\nexcept (IndexError, ValueError) as e:\n    print(\"Caught again!\")\n    print(e)\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>Caught again!\nlist.remove(x): x not in list\n</code></pre>"},{"location":"KO/#_76","title":"\u25b6 \uac19\uc740 \ud53c\uc5f0\uc0b0\uc790, \ub2e4\ub978 \uc774\uc57c\uae30!","text":"<p>1.</p> <pre><code>a = [1, 2, 3, 4]\nb = a\na = a + [5, 6, 7, 8]\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; a\n[1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; b\n[1, 2, 3, 4]\n</code></pre> <p>2.</p> <pre><code>a = [1, 2, 3, 4]\nb = a\na += [5, 6, 7, 8]\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; a\n[1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; b\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>"},{"location":"KO/#_77","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li> <p><code>a += b</code> \ub294 \ud56d\uc0c1 <code>a = a + b</code>\uc640 \uac19\uac8c \ub3d9\uc791\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud074\ub798\uc2a4\ub294 <code>op=</code> \uc5f0\uc0b0\uc790\ub97c \ub2e4\ub974\uac8c \uad6c\ud604\ud560 \uc218 \uc788\uc73c\uba70, \ub9ac\uc2a4\ud2b8\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.</p> </li> <li> <p><code>a = a + [5,6,7,8]</code> \ud45c\ud604\uc2dd\uc740 \uc0c8\ub85c\uc6b4 \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud558\uc5ec \uc0c8\ub85c\uc6b4 \ub9ac\uc2a4\ud2b8\uc5d0 \ub300\ud55c <code>a</code>\uc758 \ucc38\uc870\ub97c \uc124\uc815\ud558\ubbc0\ub85c, <code>b</code>\ub294 \ubc14\ub00c\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</p> </li> <li> <p><code>a += [5,6,7,8]</code> \ud45c\ud604\uc2dd\uc740 \uc2e4\uc81c\ub85c <code>a</code>\uc640 <code>b</code>\uac00 \uc5ec\uc804\ud788 \ub0b4\ubd80\uc5d0\uc11c \uc218\uc815\ub41c \ubaa9\ub85d\uc744 \uac00\ub9ac\ud0a4\ub3c4\ub85d \ud558\ub294 \"\ud655\uc7a5\" \ud568\uc218\uc5d0 \ub300\uce58\ub429\ub2c8\ub2e4.</p> </li> </ul>"},{"location":"KO/#_78","title":"\u25b6 \uc774\ub984 \ud655\uc778\uc740 \ud074\ub798\uc2a4 \ubc94\uc704\ub97c \ubb34\uc2dc\ud569\ub2c8\ub2e4","text":"<p>1.</p> <pre><code>x = 5\nclass SomeClass:\n    x = 17\n    y = (x for i in range(10))\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; list(SomeClass.y)[0]\n5\n</code></pre> <p>2.</p> <pre><code>x = 5\nclass SomeClass:\n    x = 17\n    y = [x for i in range(10)]\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (Python 2.x):</p> <pre><code>&gt;&gt;&gt; SomeClass.y[0]\n17\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (Python 3.x):</p> <pre><code>&gt;&gt;&gt; SomeClass.y[0]\n5\n</code></pre>"},{"location":"KO/#_79","title":"\ud83d\udca1 \uc124\uba85","text":"<ul> <li>\ud074\ub798\uc2a4 \uc815\uc758 \ub0b4\uc5d0\uc11c \uc911\ucca9\ub41c \ubc94\uc704\ub294 \ud074\ub798\uc2a4 \uc218\uc900\uc5d0\uc11c \ubc14\uc778\ub529 \ub41c \uc774\ub984\uc744 \ubb34\uc2dc\ud569\ub2c8\ub2e4.</li> <li>\uc0dd\uc131 \ud45c\ud604\uc2dd\uc740 \uc790\uccb4\uc801\uc778 \ubc94\uc704\ub97c \uac16\uc2b5\ub2c8\ub2e4.</li> <li>\ud30c\uc774\uc36c 3.x\ubd80\ud130\ub294 \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 \ub610\ud55c \uc790\uccb4\uc801\uc778 \ubc94\uc704\ub97c \uac16\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_80","title":"\u25b6 \ubaa8\ub798\ubc2d\uc5d0\uc11c \ubc14\ub298\ucc3e\uae30 *","text":"<p>\ub2e4\uc74c\uc758 \uc2dc\ub098\ub9ac\uc624 \uc911 \ud558\ub098 \uc774\uc0c1\uc744 \uc811\ud574\ubcf4\uc9c0 \ubabb\ud55c \ud30c\uc774\uc368\ub2c8\uc2a4\ud2b8\ub294 \ud55c \ubc88\ub3c4 \ub9cc\ub098\ubcf8 \uc801\uc774 \uc5c6\uc2b5\ub2c8\ub2e4,</p> <p>1.</p> <pre><code>x, y = (0, 1) if True else None, None\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; x, y  # (0, 1)\uc774 \uc608\uc0c1\ub429\ub2c8\ub2e4\n((0, 1), None)\n</code></pre> <p>2.</p> <pre><code>t = ('one', 'two')\nfor i in t:\n    print(i)\n\nt = ('one')\nfor i in t:\n    print(i)\n\nt = ()\nprint(t)\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>one\ntwo\no\nn\ne\ntuple()\n</code></pre> <p>3.</p> <pre><code>ten_words_list = [\n    \"some\",\n    \"very\",\n    \"big\",\n    \"list\",\n    \"that\"\n    \"consists\",\n    \"of\",\n    \"exactly\",\n    \"ten\",\n    \"words\"\n]\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc</p> <pre><code>&gt;&gt;&gt; len(ten_words_list)\n9\n</code></pre> <p>4. \ucda9\ubd84\ud788 \uac15\ud558\uac8c \uc8fc\uc7a5\ud558\uc9c0 \uc54a\uc74c</p> <pre><code>a = \"python\"\nb = \"javascript\"\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code># \uc2e4\ud328 \uba54\uc138\uc9c0\uac00 \uc788\ub294 assert \uad6c\ubb38.\n&gt;&gt;&gt; assert(a == b, \"Both languages are different\")\n# AssertionError\uac00 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\n</code></pre> <p>5.</p> <pre><code>some_list = [1, 2, 3]\nsome_dict = {\n  \"key_1\": 1,\n  \"key_2\": 2,\n  \"key_3\": 3\n}\n\nsome_list = some_list.append(4)\nsome_dict = some_dict.update({\"key_4\": 4})\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; print(some_list)\nNone\n&gt;&gt;&gt; print(some_dict)\nNone\n</code></pre> <p>6.</p> <pre><code>def some_recursive_func(a):\n    if a[0] == 0:\n        return\n    a[0] -= 1\n    some_recursive_func(a)\n    return a\n\ndef similar_recursive_func(a):\n    if a == 0:\n        return a\n    a -= 1\n    similar_recursive_func(a)\n    return a\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; some_recursive_func([5, 0])\n[0, 0]\n&gt;&gt;&gt; similar_recursive_func(5)\n4\n</code></pre>"},{"location":"KO/#_81","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li> <p>1\ubc88\uc5d0\uc11c, \uc608\uc0c1\ub418\ub294 \ub3d9\uc791\uc5d0 \ub300\ud55c \uc62c\ubc14\ub978 \uad6c\ubb38\uc740 <code>x, y = (0, 1) if True else (None, None)</code>\uc785\ub2c8\ub2e4.</p> </li> <li> <p>2\ubc88\uc5d0\uc11c, \uc608\uc0c1\ub418\ub294 \ub3d9\uc791\uc5d0 \ub300\ud55c \uc62c\ubc14\ub978 \uad6c\ubb38\uc740 <code>t = ('one',)</code> \ub610\ub294 <code>t = 'one',</code> (\ucf64\ub9c8\uac00 \uc5c6\uc74c)\uc785\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uc778\ud130\ud504\ub9ac\ud130\ub294 <code>t</code>\ub97c <code>str</code>\ub85c \uc0dd\uac01\ud574 \ubb38\uc790 \ubcc4\ub85c \ubc18\ubcf5\ud569\ub2c8\ub2e4.</p> </li> <li> <p><code>()</code>\uc740 \ud2b9\ubcc4\ud55c \ud1a0\ud070\uc774\uba70 \ube48 <code>tuple</code>\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.</p> </li> <li> <p>3\ubc88\uc5d0\uc11c, \uc5ec\ub7ec\ubd84\ub4e4\ub3c4 \uc774\ubbf8 \uc54c\uc544 \ucc28\ub837\uac9f\uc9c0\ub9cc, \ub9ac\uc2a4\ud2b8\uc758 5\ubc88\uc9f8 \uc694\uc18c (<code>\"that\"</code>)\uc758 \ub4a4\uc5d0 \ucf64\ub9c8\uac00 \ube60\uc838\uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc554\ubb35\uc801\uc778 \ubb38\uc790\uc5f4 \ub9ac\ud130\ub7f4\uc758 \uc5f0\uacb0\uc5d0 \uc758\ud574,</p> </li> </ul> <pre><code>&gt;&gt;&gt; ten_words_list\n['some', 'very', 'big', 'list', 'thatconsists', 'of', 'exactly', 'ten', 'words']\n</code></pre> <ul> <li>4\ubc88\uc9f8 \ucf54\ub4dc\uc5d0\uc11c <code>AssertionError</code>\uac00 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc740 \uc774\uc720\ub294 <code>a == b</code> \ud45c\ud604\uc2dd\uc774 \uc544\ub2cc \uc804\uccb4 \ud29c\ud50c\uc744 \ube44\uad50\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub2e4\uc74c\uc758 \ucf54\ub4dc\uc5d0\uc11c \uc774\ub97c \ud574\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul> <pre><code>&gt;&gt;&gt; a = \"python\"\n&gt;&gt;&gt; b = \"javascript\"\n&gt;&gt;&gt; assert a == b\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n\n&gt;&gt;&gt; assert (a == b, \"Values are not equal\")\n&lt;stdin&gt;:1: SyntaxWarning: assertion is always true, perhaps remove parentheses?\n\n&gt;&gt;&gt; assert a == b, \"Values are not equal\"\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError: Values aren not equal\n</code></pre> <ul> <li> <p>\ub2e4\uc12f \ubc88\uc9f8 \ucf54\ub4dc\uc5d0\uc11c, <code>list.append</code>, <code>dict.update</code>, <code>list.sort</code>\ub610\ub294 \ub2e4\ub978 \uac83\ub4e4\uacfc \uac19\uc774 \uc544\uc774\ud15c\uc758 \uc21c\uc11c/\ub9e4\ud551 \uac1d\uccb4\uc758 \ud56d\ubaa9\uc744 \uc218\uc815\ud558\ub294 \ub300\ubd80\ubd84\uc758 \uba54\uc18c\ub4dc\uc785\ub2c8\ub2e4. \uadf8 \uc790\ub9ac\uc5d0\uc11c \uac1d\uccb4\ub97c \uc218\uc815\ud55c \ud6c4 <code>None</code>\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. \uc774\ub97c \ub4b7\ubc1b\uce68\ud558\ub294 \uadfc\uac70\ub294 \uadf8 \uc790\ub9ac\uc5d0\uc11c \uc5f0\uc0b0\uc744 \uc2dc\ud589\ud560 \uc218 \uc788\ub294 \uacbd\uc6b0 \uac1d\uccb4\uc758 \uc0ac\ubcf8\uc744 \ub9cc\ub4dc\ub294 \uac83\uc744 \ud53c\ud574 \uc131\ub2a5\uc744 \ud5a5\uc0c1\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4. (\uc774\uac83\uc744 \ucc38\uc870\ud558\uc600\uc2b5\ub2c8\ub2e4)</p> </li> <li> <p>\ub9c8\uc9c0\ub9c9\uc73c\ub85c, <code>list</code>\uc640 \uac19\uc740 \uac00\ubcc0 \uac1d\uccb4\ub97c \uc804\ub2ec\uc740 \ucc38\uc870\ub85c \ud638\ucd9c\ub418\ub294 \ubc18\uba74, <code>int</code>\uc640 \uac19\uc740 \ubd88\ubcc0 \uac1d\uccb4\ub294 \uac12\uc73c\ub85c \ud638\ucd9c\ub429\ub2c8\ub2e4.</p> </li> <li> <p>\uc774\ub7f0 \uc790\uc798\ud55c \uac83\ub4e4\uae4c\uc9c0 \uc54c\uace0 \uc788\uc73c\uba74 \uc7a5\uae30\uc801\uc73c\ub85c \ub514\ubc84\uae45 \uc2dc\uac04\uc744 \uc808\uc57d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> </li> </ul>"},{"location":"KO/#_82","title":"\u25b6 \ub098\ub220\ubd05\uc2dc\ub2e4 *","text":"<pre><code>&gt;&gt;&gt; 'a'.split()\n['a']\n\n# \uac19\uc740 \uacb0\uacfc\uc785\ub2c8\ub2e4\n&gt;&gt;&gt; 'a'.split(' ')\n['a']\n\n# \ud558\uc9c0\ub9cc\n&gt;&gt;&gt; len(''.split())\n0\n\n# \uc774\uac74 \uac19\uc9c0 \uc54a\ub124\uc694\n&gt;&gt;&gt; len(''.split(' '))\n1\n</code></pre>"},{"location":"KO/#_83","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ucc98\uc74c\uc5d0\ub294 split\uc758 \uae30\ubcf8 \uad6c\ubd84\uc790\uac00 \uacf5\ubc31 \ud55c \uce78 <code>' '</code>\uc778 \uac83\ucc98\ub7fc \ubcf4\uc774\uc9c0\ub9cc, \ubb38\uc11c\uc5d0 \ub530\ub974\uba74 <p>sep \uc774 \uc9c0\uc815\ub418\uc9c0 \uc54a\uac70\ub098 None \uc774\uba74, \ub2e4\ub978 \ubd84\ud560 \uc54c\uace0\ub9ac\uc998\uc774 \uc801\uc6a9\ub429\ub2c8\ub2e4: \uc5f0\uc18d\ub41c \uacf5\ubc31 \ubb38\uc790\ub294 \ub2e8\uc77c\ud55c \uad6c\ubd84\uc790\ub85c \uac04\uc8fc\ud558\uace0, \ubb38\uc790\uc5f4\uc774 \uc120\ud589\uc774\ub098 \ud6c4\ud589 \uacf5\ubc31\uc744 \ud3ec\ud568\ud574\ub3c4 \uacb0\uacfc\ub294 \uc2dc\uc791\uacfc \ub05d\uc5d0 \ube48 \ubb38\uc790\uc5f4\uc744 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uacb0\uacfc\uc801\uc73c\ub85c, \ube48 \ubb38\uc790\uc5f4\uc774\ub098 \uacf5\ubc31\ub9cc\uc73c\ub85c \uad6c\uc131\ub41c \ubb38\uc790\uc5f4\uc744 None \uad6c\ubd84\uc790\ub85c \ub098\ub204\uba74 [] \ub97c \ub3cc\ub824\uc90d\ub2c8\ub2e4. sep \uc774 \uc8fc\uc5b4\uc9c0\uba74, \uc5f0\uc18d\ub41c \uad6c\ubd84\uc790\ub294 \ubb36\uc774\uc9c0 \uc54a\uace0 \ube48 \ubb38\uc790\uc5f4\uc744 \uad6c\ubd84\ud558\ub294 \uac83\uc73c\ub85c \uac04\uc8fc\ud569\ub2c8\ub2e4 (\uc608\ub97c \ub4e4\uc5b4, '1,,2'.split(',') \ub294 ['1', '', '2'] \ub97c \ub3cc\ub824\uc90d\ub2c8\ub2e4). sep \uc778\uc790\ub294 \uc5ec\ub7ec \ubb38\uc790\ub85c \uad6c\uc131\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\uc608\ub97c \ub4e4\uc5b4, '1&lt;&gt;2&lt;&gt;3'.split('&lt;&gt;') \ub294 ['1', '2', '3'] \ub97c \ub3cc\ub824\uc90d\ub2c8\ub2e4). \uc9c0\uc815\ub41c \uad6c\ubd84\uc790\ub85c \ube48 \ubb38\uc790\uc5f4\uc744 \ub098\ub204\uba74 [''] \ub97c \ub3cc\ub824\uc90d\ub2c8\ub2e4.</p> </li> <li>\ub2e4\uc74c \ucf54\ub4dc\uc5d0\uc11c \uc55e\ub4a4\uc758 \uacf5\ubc31\uc774 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0 \uc54c\uac8c \ub418\uba74 \uba85\ud655\ud574\uc9c8 \uac81\ub2c8\ub2e4,   <pre><code>&gt;&gt;&gt; ' a '.split(' ')\n['', 'a', '']\n&gt;&gt;&gt; ' a '.split()\n['a']\n&gt;&gt;&gt; ''.split(' ')\n['']\n</code></pre></li> </ul>"},{"location":"KO/#_84","title":"\u25b6 \uc81c\uba4b\ub300\ub85c \uac00\uc838\uc624\uae30 *","text":"<pre><code># File: module.py\n\ndef some_weird_name_func_():\n    print(\"works!\")\n\ndef _another_weird_name_func():\n    print(\"works!\")\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc</p> <pre><code>&gt;&gt;&gt; from module import *\n&gt;&gt;&gt; some_weird_name_func_()\n\"works!\"\n&gt;&gt;&gt; _another_weird_name_func()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name '_another_weird_name_func' is not defined\n</code></pre>"},{"location":"KO/#_85","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\uc640\uc77c\ub4dc\uce74\ub4dc import\ub294 \uc790\uc8fc \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uc640\uc77c\ub4dc\uce74\ub4dc import\uc5d0 \ub300\ud574 \uba85\ud655\ud55c \uccab \ubc88\uc9f8 \uc774\uc720\ub294 \uc5b8\ub354\uc2a4\ucf54\uc5b4\ub85c \uc2dc\uc791\ud558\ub294 \uc774\ub984\uc774 import \ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc774\ub85c \uc778\ud574 \ub7f0\ud0c0\uc784 \uc911\uc5d0 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\ub9cc\uc57d <code>from ... import a, b, c</code> \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, <code>NameError</code>\ub294 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4.   <pre><code>&gt;&gt;&gt; from module import some_weird_name_func_, _another_weird_name_func\n&gt;&gt;&gt; _another_weird_name_func()\nworks!\n</code></pre></li> <li>\ub9cc\uc57d \uc815\ub9d0\ub85c \uc640\uc77c\ub4dc\uce74\ub4dc import\uac00 \uc0ac\uc6a9\ud558\uace0 \uc2f6\ub2e4\uba74, \uc640\uc77c\ub4dc\uce74\ub4dc import\ub97c \ud560 \ub54c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uacf5\uc6a9 \uac1d\uccb4\uac00 \ub4e4\uc5b4 \uc788\ub294 \ub9ac\uc2a4\ud2b8\uc778 <code>__all__</code>\uc744 \ubaa8\ub4c8 \ub0b4\uc5d0 \uc815\uc758\ud574\uc57c \ud569\ub2c8\ub2e4.</li> </ul> <pre><code>__all__ = ['_another_weird_name_func']\n\ndef some_weird_name_func_():\n    print(\"works!\")\n\ndef _another_weird_name_func():\n    print(\"works!\")\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc</p> <pre><code>&gt;&gt;&gt; _another_weird_name_func()\n\"works!\"\n&gt;&gt;&gt; some_weird_name_func_()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'some_weird_name_func_' is not defined\n</code></pre>"},{"location":"KO/#_86","title":"\u25b6 \ub2e4 \uc815\ub82c\ub418\uc5c8\ub098\uc694? *","text":"<pre><code>&gt;&gt;&gt; x = 7, 8, 9\n&gt;&gt;&gt; sorted(x) == x\nFalse\n&gt;&gt;&gt; sorted(x) == sorted(x)\nTrue\n\n&gt;&gt;&gt; y = reversed(x)\n&gt;&gt;&gt; sorted(y) == sorted(y)\nFalse\n</code></pre>"},{"location":"KO/#_87","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li> <p>\ud30c\uc774\uc36c\uc5d0\uc11c <code>sorted</code> \uba54\uc18c\ub4dc\ub294 \ud56d\uc0c1 \ub9ac\uc2a4\ud2b8\ub97c \ubc18\ud658\ud558\uace0, \ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c\uc758 \ube44\uad50\ub294 \ud56d\uc0c1 <code>False</code>\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.</p> </li> <li> <p>```py</p> <p>[] == tuple()   False x = 7, 8, 9 type(x), type(sorted(x))   (tuple, list)   ```</p> </li> <li> <p><code>sorted</code>\uc640 \ub2ec\ub9ac <code>reversed</code> \uba54\uc18c\ub4dc\ub294 \ubc18\ubcf5\uc790\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uc65c \uadf8\ub7f4\uae4c\uc694? \uc65c\ub0d0\ud558\uba74 \uc815\ub82c\uc740 \ubc18\ubcf5\uc790\uac00 \uadf8 \uc790\ub9ac\uc5d0\uc11c \ubcc0\uacbd\ub418\uac70\ub098 \ucd94\uac00\uc801\uc778 \ucee8\ud14c\uc774\ub108(\ub9ac\uc2a4\ud2b8)\ub97c \uc0ac\uc6a9\ud574\uc57c \ud558\uc9c0\ub9cc, \ub4a4\uc9d1\ub294 \uac83\uc740 \ub2e8\uc21c\ud788 \ub05d \uc778\ub371\uc2a4\ubd80\ud130 \ucc98\uc74c\uae4c\uc9c0 \ubc18\ubcf5\ud558\uba74 \ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\ub530\ub77c\uc11c <code>sorted(y) == sorted(y)</code>\ub97c \ube44\uad50\ud558\ub294 \ub3d9\uc548\uc5d0, \ucc98\uc74c\uc758 <code>sorted()</code>\uac00 \ud638\ucd9c\ub418\uba74 <code>y</code>\uc758 \ubc18\ubcf5\uc790\ub97c \uc18c\ubaa8\ud558\uace0, \ub2e4\uc74c\uc758 \ud638\ucd9c\uc5d0\ub294 \ube48 \ub9ac\uc2a4\ud2b8\uac00 \ubc18\ud658\ub429\ub2c8\ub2e4.</p> </li> </ul> <pre><code>&gt;&gt;&gt; x = 7, 8, 9\n&gt;&gt;&gt; y = reversed(x)\n&gt;&gt;&gt; sorted(y), sorted(y)\n([7, 8, 9], [])\n</code></pre>"},{"location":"KO/#_88","title":"\u25b6 \uc790\uc815\uc740 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub098\uc694?","text":"<pre><code>from datetime import datetime\n\nmidnight = datetime(2018, 1, 1, 0, 0)\nmidnight_time = midnight.time()\n\nnoon = datetime(2018, 1, 1, 12, 0)\nnoon_time = noon.time()\n\nif midnight_time:\n    print(\"Time at midnight is\", midnight_time)\n\nif noon_time:\n    print(\"Time at noon is\", noon_time)\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (&lt; 3.5):</p> <pre><code>('Time at noon is', datetime.time(12, 0))\n</code></pre> <p>\uc790\uc815\uc740 \ucd9c\ub825\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</p>"},{"location":"KO/#_89","title":"\ud83d\udca1 \uc124\uba85:","text":"<p>\ud30c\uc774\uc36c 3.5 \uc774\uc804\uc5d0, <code>datetime.time</code> \uac1d\uccb4\uc758 \ubd88\ub9ac\uc5b8 \uac12\uc740 UTC \uae30\uc900\uc73c\ub85c \uc790\uc815\uc744 \ub098\ud0c0\ub0b4\ub294 \uacbd\uc6b0 <code>False</code>\ub85c \uac04\uc8fc\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc774\ub294 <code>if obj:</code> \uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\uc6b0 <code>obj</code>\uac00 null \ub610\ub294 \"\ube44\uc5b4\uc788\uc74c\"\uc778\uc9c0 \ud655\uc778\ud558\ub294 \uacbd\uc6b0 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\uc2b5\ub2c8\ub2e4.</p>"},{"location":"KO/#_90","title":"\"\uc228\uaca8\uc9c4 \ubcf4\ubb3c\ub4e4!\" \ub2e8\uc6d0","text":"<p>\uc774 \ub2e8\uc6d0\uc5d0\ub294 \uc800 \uac19\uc740 \ucd08\ubcf4\uc790\ub4e4\uc774 (\ub354 \uc774\uc0c1\uc740 \uc544\ub2c8\uc9c0\ub9cc) \ub300\ubd80\ubd84 \ubaa8\ub974\uace0 \uc788\ub294 \ud30c\uc774\uc36c\uc5d0 \ub300\ud55c \ub35c \uc54c\ub824\uc9c0\uace0 \ud765\ubbf8\ub85c\uc6b4 \uac83\ub4e4\uc774 \uba87 \uac00\uc9c0 \ud3ec\ud568\ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"KO/#_91","title":"\u25b6 \ud30c\uc774\uc36c, \ub0a0 \ub0a0\uac8c\ud574\uc904 \uc218 \uc788\ub2c8?","text":"<p>\uc790, \uc5ec\uae30 \uc788\uc2b5\ub2c8\ub2e4</p> <pre><code>import antigravity\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc: \uc27f... \uc774\uac74 \uc77c\uae09\ube44\ubc00\uc774\uc57c.</p>"},{"location":"KO/#_92","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li><code>antigravity</code> \ubaa8\ub4c8\uc740 \ud30c\uc774\uc36c \uac1c\ubc1c\uc790\ub4e4\uc774 \ucd94\uac00\ud55c \uba87 \uc548 \ub418\ub294 \uc774\uc2a4\ud130\uc5d0\uadf8\uc785\ub2c8\ub2e4.</li> <li><code>import antigravity</code> \ub294 \ud30c\uc774\uc36c\uc5d0 \ub300\ud55c \uace0\uc804 XKCD \ub9cc\ud654\uc744 \uc6f9 \ube0c\ub77c\uc6b0\uc800\uc5d0 \ub744\uc6cc\uc90d\ub2c8\ub2e4.</li> <li>\ub354 \ub9ce\uc740 \uac83\uc774 \uadf8 \uc548\uc5d0 \uc788\ub294\ub370, \ub610 \ub2e4\ub978 \uc774\uc2a4\ud130\uc5d0\uadf8\uac00 \uc774\uc2a4\ud130\uc5d0\uadf8 \uc548\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \ucf54\ub4dc\ub97c \ubcf4\uac8c \ub41c\ub2e4\uba74, XKCD\uc758 geohashing \uc54c\uace0\ub9ac\uc998\uc744 \uad6c\ud604\ud558\ub294 \ud568\uc218\uac00 \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#goto","title":"\u25b6 <code>goto</code>, \ud558\uc9c0\ub9cc \uc65c?","text":"<pre><code>from goto import goto, label\nfor i in range(9):\n    for j in range(9):\n        for k in range(9):\n            print(\"I am trapped, please rescue!\")\n            if k == 2:\n                goto .breakout # \uae4a\uac8c \uc911\ucca9\ub41c \ub8e8\ud504\uc5d0\uc11c \ud0c8\ucd9c\nlabel .breakout\nprint(\"Freedom!\")\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (Python 2.3):</p> <pre><code>I am trapped, please rescue!\nI am trapped, please rescue!\nFreedom!\n</code></pre>"},{"location":"KO/#_93","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ud30c\uc774\uc36c\uc5d0 <code>goto</code>\uac00 \ucd94\uac00\ub41c \ubc84\uc804\uc740 2004\ub144 4\uc6d4 1\uc77c\uc5d0 \ub9cc\uc6b0\uc808 \uc7a5\ub09c\uc73c\ub85c \ubc1c\ud45c\ub418\uc5c8\uc2b5\ub2c8\ub2e4.</li> <li>\ud604\uc7ac \ubc84\uc804\uc758 \ud30c\uc774\uc36c\uc740 \uc774 \ubaa8\ub4c8\uc744 \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</li> <li>\ube44\ub85d \uc774\uac83\uc774 \uc791\ub3d9\ud558\uc9c0\ub9cc, \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624. \ud30c\uc774\uc36c\uc5d0\ub294 <code>goto</code>\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc774\uc720\uac00 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_94","title":"\u25b6 \ub9c8\uc74c \ub2e8\ub2e8\ud788 \uba39\uc73c\uc138\uc694!","text":"<p>\ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ud30c\uc774\uc36c\uc5d0\uc11c \uc2a4\ucf54\ud504\ub97c \ub098\ud0c0\ub0b4\uae30 \uc704\ud574 \uacf5\ubc31\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uc88b\uc544\ud558\uc9c0 \uc54a\ub294 \uc0ac\ub78c \uc911 \ud55c \uba85\uc774\ub77c\uba74, C-\uc2a4\ud0c0\uc77c\uc758 {}\uc744 \uac00\uc838\uc640 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>from __future__ import braces\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>  File \"some_file.py\", line 1\n    from __future__ import braces\nSyntaxError: not a chance\n</code></pre> <p>\uc911\uad04\ud638? \uc808\ub300 \uc548\ub3fc! \ub9cc\uc57d \uc774\uac8c \uc2e4\ub9dd\uc2a4\ub7fd\ub2e4\uba74 \uc790\ubc14\ub97c \uc0ac\uc6a9\ud558\uc138\uc694. \ub610 \ud558\ub098 \ub180\ub77c\uc6b4 \uac83\uc740 <code>__future__</code>\ubaa8\ub4c8\uc5d0\uc11c \ubc1c\uc0dd\ud55c <code>SyntaxError</code>\uac00 \ucf54\ub4dc\uc758 \uc5b4\ub514\uc5d0 \uc788\ub294\uc9c0 \ucc3e\uc744 \uc218 \uc788\ub098\uc694?</p>"},{"location":"KO/#_95","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li><code>__future__</code> \ubaa8\ub4c8\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ubbf8\ub798\uc758 \ud30c\uc774\uc36c \ubc84\uc804\uc5d0\uc11c \ucd94\uac00\ub420 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ud2b9\uc815\ud55c \ub9e5\ub77d\uc5d0\uc11c \"\ubbf8\ub798\"\ub294 \uc544\uc774\ub7ec\ub2c8\ud569\ub2c8\ub2e4.</li> <li>\uc774\uac83\uc740 \uc774 \ubb38\uc81c\uc5d0 \ub300\ud55c \ucee4\ubba4\ub2c8\ud2f0\uc758 \uac10\uc815\uacfc \uad00\ub828\ub41c \uc774\uc2a4\ud130\uc5d0\uadf8\uc785\ub2c8\ub2e4.</li> <li>\uadf8 \ucf54\ub4dc\ub294 \uc2e4\uc81c\ub85c \uc5ec\uae30 <code>future.c</code> \ud30c\uc77c \uc548\uc5d0 \uc874\uc7ac\ud569\ub2c8\ub2e4.</li> <li>CPython \ucef4\ud30c\uc77c\ub7ec\uac00 future \uad6c\ubb38\uacfc \ub9c8\uc8fc\uce60 \ub54c, \uba3c\uc800 <code>future.c</code>\uc5d0\uc11c \uc801\uc808\ud55c \ucf54\ub4dc\ub97c \uc2e4\ud589\ud55c \ud6c4 \uadf8\uac78 \uc77c\ubc18\uc801\uc778 \uad6c\ubb38\uc73c\ub85c \uac04\uc8fc\ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_96","title":"\u25b6 \ud3c9\uc0dd \uce5c\uadfc\ud55c \uc544\uc800\uc528 \uac19\uc740 \uc5b8\uc5b4\ub97c \ub9cc\ub098\ubd05\uc2dc\ub2e4","text":"<p>\ucd9c\ub825 \uacb0\uacfc (Python 3.x)</p> <pre><code>&gt;&gt;&gt; from __future__ import barry_as_FLUFL\n&gt;&gt;&gt; \"Ruby\" != \"Python\" # \uc774\uac74 \uc758\uc2ec\ud560 \uc5ec\uc9c0\uac00 \uc5c6\uc2b5\ub2c8\ub2e4\n  File \"some_file.py\", line 1\n    \"Ruby\" != \"Python\"\n              ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; \"Ruby\" &lt;&gt; \"Python\"\nTrue\n</code></pre> <p>\ub610 \uc2dc\uc791\uc774\uad70.</p>"},{"location":"KO/#_97","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\uc774\uac83\uc740 2009\ub144 4\uc6d4 1\uc77c\uc5d0 \ucd9c\uc2dc\ub41c PEP-401 \uc640 \uad00\ub828\uc774 \uc788\uc2b5\ub2c8\ub2e4. (\uc774\uc81c \uc5ec\ub7ec\ubd84\uc740 \ubb34\uc5c7\uc744 \uc758\ubbf8\ud558\ub294\uc9c0 \uc54c \uac83\uc785\ub2c8\ub2e4)</li> <li>PEP-401\uc758 \uc77c\ubd80\ub97c \uc778\uc6a9\ud558\uba74</li> </ul> <p>\ud30c\uc774\uc120 3.0\uc758 != \ube44\ud56d\ub4f1 \uc5f0\uc0b0\uc790\ub294 \uc190\uac00\ub77d\uc758 \uace0\ud1b5\uc744 \uc720\ubc1c\ud558\ub294 \ub054\uc9c1\ud55c \uc2e4\uc218\ub77c\ub294 \uac83\uc744 \uc778\uc9c0\ud558\uace0, FLUFL\uc740 \uc720\uc77c\ud55c \ubb38\ubc95\uc73c\ub85c &lt;&gt; \ub2e4\uc774\uc544\ubaac\ub4dc \uc5f0\uc0b0\uc790\ub97c \ubcf5\uad6c\uc2dc\ucf30\uc2b5\ub2c8\ub2e4.</p> <ul> <li>\ubca0\ub9ac \uc544\uc800\uc528\uac00 PEP\uc5d0\uc11c \uacf5\uc720\ud55c \uac83\ub4e4\uc740 \ub354 \ub9ce\uc740\ub370, \uc5ec\uae30 \uc11c \uc77d\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\uc774\uac83\uc740 \ub300\ud654\ud615 \ud658\uacbd\uc5d0\uc11c\ub294 \uc798 \uc791\ub3d9\ud558\uc9c0\ub9cc, \ud30c\uc774\uc36c \ud30c\uc77c\uc744 \ud1b5\ud574\uc11c\ub294 <code>SyntaxError</code>\ub97c \uc77c\uc73c\ud0b5\ub2c8\ub2e4. (\uc774 \uc774\uc288\ub97c \uc77d\uc5b4\ubcf4\uc138\uc694) \ud558\uc9c0\ub9cc, \uc5ec\ub7ec\ubd84\uc774 \uad6c\ubd84\uc744 <code>eval</code>\uc774\ub098 <code>compile</code>\uc73c\ub85c \uac10\uc2fc\ub2e4\uba74 \uc798 \uc791\ub3d9\ud560 \uac83\uc785\ub2c8\ub2e4.   <pre><code>from __future__ import barry_as_FLUFL\nprint(eval('\"Ruby\" &lt;&gt; \"Python\"'))\n</code></pre></li> </ul>"},{"location":"KO/#_98","title":"\u25b6 \ud30c\uc774\uc36c \uc870\ucc28 \uc0ac\ub791\uc774 \ubcf5\uc7a1\ud558\ub2e4\ub294 \uac83\uc744 \uc774\ud574\ud569\ub2c8\ub2e4","text":"<pre><code>import this\n</code></pre> <p>\uc7a0\uae50, this\uac00 \ubb54\uac00\uc694? <code>this</code>\ub294 \uc0ac\ub791\uc785\ub2c8\ub2e4 :heart:</p> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code></pre> <p>\uc774\uac83\uc740 the Zen of Python \uc785\ub2c8\ub2e4!</p> <pre><code>&gt;&gt;&gt; love = this\n&gt;&gt;&gt; this is love\nTrue\n&gt;&gt;&gt; love is True\nFalse\n&gt;&gt;&gt; love is False\nFalse\n&gt;&gt;&gt; love is not True or False\nTrue\n&gt;&gt;&gt; love is not True or False; love is love  # \uc0ac\ub791\uc740 \ubcf5\uc7a1\ud569\ub2c8\ub2e4\nTrue\n</code></pre>"},{"location":"KO/#_99","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ud30c\uc774\uc36c\uc758 <code>this</code> \ubaa8\ub4c8\uc740 The Zen Of Python (pep 20) \uc744 \uc704\ud55c \uc774\uc2a4\ud130\uc5d0\uadf8\uc785\ub2c8\ub2e4.</li> <li>\uadf8\ub9ac\uace0 \uc774\uac8c \uc544\uc8fc \ud765\ubbf8\ub86d\ub2e4\uace0 \uc0dd\uac01\ud558\uba74, this.py\uc758 \uad6c\ud604\uc744 \ud655\uc778\ud574\ubcf4\uc138\uc694. \ud765\ubbf8\ub86d\uac8c\ub3c4, the code for the Zen\uc744 \uc2a4\uc2a4\ub85c \uc704\ubc18\ud569\ub2c8\ub2e4 (\uadf8\ub9ac\uace0 \uc544\ub9c8\ub3c4 \uc720\uc77c\ud558\uac8c \uc774\ub7f0 \uc77c\uc774 \uc788\ub294 \uacf3\uc785\ub2c8\ub2e4).</li> <li><code>love is not True or False; love is love</code>\ub77c\ub294 \ud45c\ud604\uc5d0 \ub300\ud574 \uc544\uc774\ub7ec\ub2c8\ud558\uc9c0\ub9cc, \uc774\uac83\uc740 \uc790\uae30-\uc124\uba85\uc801\uc778 (\uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74, <code>is</code>\uc640 <code>is not</code>\uc5d0 \uad00\ub828\ub41c \uc608\uc2dc\ub97c \ubd10\uc8fc\uc138\uc694) \ud45c\ud604\uc785\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_100","title":"\u25b6 \ub124, \uc874\uc7ac\ud569\ub2c8\ub2e4!","text":"<p>\ubc18\ubcf5\ubb38\uc5d0 \ub300\ud55c <code>else</code> \uc870\uac74\uc758 \uc608\ub85c \ub2e4\uc74c\uacfc \uac19\uc740\uac8c \uc788\uc2b5\ub2c8\ub2e4:</p> <pre><code>  def does_exists_num(l, to_find):\n      for num in l:\n          if num == to_find:\n              print(\"Exists!\")\n              break\n      else:\n          print(\"Does not exist\")\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; does_exists_num(some_list, 4)\nExists!\n&gt;&gt;&gt; does_exists_num(some_list, -1)\nDoes not exist\n</code></pre> <p>\uc608\uc678 \ucc98\ub9ac\uc5d0 \ub300\ud55c <code>else</code> \uc870\uac74\uc758 \uc608\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4,</p> <pre><code>try:\n    pass\nexcept:\n    print(\"Exception occurred!!!\")\nelse:\n    print(\"Try block executed successfully...\")\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>Try block executed successfully...\n</code></pre>"},{"location":"KO/#_101","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ubaa8\ub4e0 \ubc18\ubcf5\uc774 \ub05d\ub09c \ud6c4 \uba85\uc2dc\ub41c <code>break</code>\uac00 \uc5c6\uc744 \ub54c, <code>else</code> \uc870\uac74\uc774 \uc2e4\ud589\ub429\ub2c8\ub2e4. \"nobreak\" \uc870\uac74\uc774\ub77c \uc0dd\uac01\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>try \ube14\ub85d \ub4a4\uc758 <code>else</code> \uc870\uac74\uc740 <code>try</code> \ubb38\uc5d0\uc11c try \ube14\ub85d\uc774 \uc131\uacf5\uc801\uc73c\ub85c \uc644\ub8cc\ub41c \ud6c4 \ub3c4\ub2ec\ud558\ubbc0\ub85c \"\uc644\ub8cc \uc870\uac74\"\uc774\ub77c\uace0\ub3c4 \ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#ellipsis","title":"\u25b6 Ellipsis *","text":"<pre><code>def some_func():\n    Ellipsis\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc</p> <pre><code>&gt;&gt;&gt; some_func()\n# \ucd9c\ub825\ub3c4 \uc5c6\uace0, \uc5d0\ub7ec\ub3c4 \uc5c6\ub2e4\n\n&gt;&gt;&gt; SomeRandomString\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'SomeRandomString' is not defined\n\n&gt;&gt;&gt; Ellipsis\nEllipsis\n</code></pre>"},{"location":"KO/#_102","title":"\ud83d\udca1 \uc124\uba85","text":"<ul> <li>\ud30c\uc774\uc36c\uc5d0\uc11c, <code>Ellipsis</code>\ub294 <code>...</code>\uc5d0 \ud574\ub2f9\ud558\ub294 \uc804\uc5ed \ub0b4\uc7a5 \uac1d\uccb4\uc785\ub2c8\ub2e4.   <pre><code>&gt;&gt;&gt; ...\nEllipsis\n</code></pre></li> <li> <p>Ellipsis \ub294 \uc5ec\ub7ec\uac00\uc9c0 \ubaa9\uc801\uc73c\ub85c \uc0ac\uc6a9\ub420 \uc218 \uc788\ub294\ub370,</p> </li> <li> <p>\uc544\uc9c1 \uc791\uc131\ub418\uc9c0 \uc54a\uc740 \ucf54\ub4dc\uc758 \uc790\ub9ac \ud45c\uc2dc\uc790 (placeholder)\ub85c \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (<code>pass</code> \uad6c\ubb38\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c).</p> </li> <li>\uc2ac\ub77c\uc774\uc2a4 \ubb38\ubc95\uc5d0\uc11c \ub0a8\uc740 \ubc29\ud5a5\uc758 \uc804\uccb4 \uc2ac\ub808\uc774\uc2a4\ub97c \ub098\ud0c0\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; three_dimensional_array = np.arange(8).reshape(2, 2, 2)\narray([\n    [\n        [0, 1],\n        [2, 3]\n    ],\n\n    [\n        [4, 5],\n        [6, 7]\n    ]\n])\n</code></pre> <p>\uc6b0\ub9ac\uc758 <code>three_dimensional_array</code>\ub294 \ubc30\uc5f4\uc758 \ubc30\uc5f4\uc758 \ubc30\uc5f4\uc785\ub2c8\ub2e4. \uac00\uc7a5 \uc548\ucabd \ubc30\uc5f4\uc758 \ub450\ubc88\uc9f8 (1\ubc88 \uc778\ub371\uc2a4) \ub97c \ucd9c\ub825\ud558\uace0 \uc2f6\ub2e4\uace0 \uac00\uc815\ud558\uba74, \uc55e\uc758 \ubaa8\ub4e0 \ucc28\uc6d0\uc744 \uc0dd\ub7b5\ud558\ub294\ub370 Ellipsis\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>&gt;&gt;&gt; three_dimensional_array[:,:,1]\narray([[1, 3],\n   [5, 7]])\n&gt;&gt;&gt; three_dimensional_array[..., 1] # Ellipsis \uc0ac\uc6a9.\narray([[1, 3],\n   [5, 7]])\n</code></pre> <p>\ucc38\uace0: \uc774\uac74 \ubaa8\ub4e0 \ucc28\uc6d0\uc5d0\uc11c \uc791\ub3d9\ud569\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc774 \uccab\ubc88\uc9f8\uc640 \ub9c8\uc9c0\ub9c9 \ucc28\uc6d0\uc5d0\uc11c \uc2ac\ub77c\uc774\uc2a4\ub97c \uc120\ud0dd\ud558\uace0 \uc911\uac04\uc758 \uac12\ub4e4\uc744 \ubb34\uc2dc\ud558\ub824\uba74 \uc774\ub7ec\ud55c \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. (<code>n_dimensional_array[firs_dim_slice, ..., last_dim_slice]</code>)</p> <ul> <li>\ud0c0\uc785 \ud78c\ud2b8 \uc5d0\uc11c\ub294 \ud30c\uc785\uc758 \uc77c\ubd80\ub9cc \ub098\ud0c0\ub0b4\uae30 \uc704\ud574 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. (<code>(Callable[..., int]</code> \ub610\ub294 <code>Tuple[str, ...]</code>))</li> <li>Ellipsis\ub97c \uae30\ubcf8 \ud568\uc218 \uc778\uc218\ub85c (\"\uc778\uc218\uac00 \uc804\ub2ec\ub418\uc9c0 \uc54a\uc74c\", \"\uc544\ubb34 \uac12\ub3c4 \uc804\ub2ec\ub418\uc9c0 \uc54a\uc74c\"\uc758 \uc2dc\ub098\ub9ac\uc624\ub97c \uad6c\ubd84\ud558\uae30 \uc704\ud574) Ellipsis\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#inpinity","title":"\u25b6 Inpinity","text":"<p>\ucca0\uc790\ub294 \uc758\ub3c4\ub41c \uac83\uc785\ub2c8\ub2e4. \uc774\uac83\uc5d0 \ub300\ud55c \uc218\uc815\uc0ac\ud56d\uc744 \ubcf4\ub0b4\uc9c0 \ub9c8\uc138\uc694.</p> <p>\ucd9c\ub825 \uacb0\uacfc (Python 3.x):</p> <pre><code>&gt;&gt;&gt; infinity = float('infinity')\n&gt;&gt;&gt; hash(infinity)\n314159\n&gt;&gt;&gt; hash(float('-inf'))\n-314159\n</code></pre>"},{"location":"KO/#_103","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\ubb34\ud55c\ub300\uc758 \ud574\uc2dc\ub294 10\u2075 x \u03c0 \uc785\ub2c8\ub2e4.</li> <li>\ud765\ubbf8\ub86d\uac8c\ub3c4, \ud30c\uc774\uc36c 3\uc5d0\uc11c <code>float('-inf')</code>\uc758 \ud574\uc2dc\ub294 \"-10\u2075 x \u03c0\" \uc785\ub2c8\ub2e4. \ubc18\uba74\uc5d0 \ud30c\uc774\uc36c 2\uc5d0\uc11c\ub294 \"-10\u2075 x e\" \uc785\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_104","title":"\u25b6 \ub9dd\uccd0\ubd05\uc2dc\ub2e4","text":"<p>1.</p> <pre><code>class Yo(object):\n    def __init__(self):\n        self.__honey = True\n        self.bro = True\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; Yo().bro\nTrue\n&gt;&gt;&gt; Yo().__honey\nAttributeError: 'Yo' object has no attribute '__honey'\n&gt;&gt;&gt; Yo()._Yo__honey\nTrue\n</code></pre> <p>2.</p> <pre><code>class Yo(object):\n    def __init__(self):\n        # \uc774\ubc88\uc5d4 \ub300\uce6d\uc801\uc73c\ub85c \ud574\ubd05\uc2dc\ub2e4\n        self.__honey__ = True\n        self.bro = True\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; Yo().bro\nTrue\n\n&gt;&gt;&gt; Yo()._Yo__honey__\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'Yo' object has no attribute '_Yo__honey__'\n</code></pre> <p>\uc65c <code>Yo()._Yo__honey</code>\uac00 \ub3d9\uc791\ud588\uc744\uae4c\uc694?</p> <p>3.</p> <pre><code>_A__variable = \"Some value\"\n\nclass A(object):\n    def some_func(self):\n        return __variable # \uc544\uc9c1 \uc544\ubb34\uac83\ub3c4 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; A().__variable\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'A' object has no attribute '__variable'\n\n&gt;&gt;&gt; A().some_func()\n'Some value'\n</code></pre>"},{"location":"KO/#_105","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>\uc774\ub984 \ub9dd\uce58\uae30 \ub294 \uc11c\ub85c \ub2e4\ub978 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uac04\uc758 \uc774\ub984\uc774 \ucda9\ub3cc\ub418\ub294 \uac83\uc744 \ud53c\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</li> <li>\ud30c\uc774\uc36c\uc5d0\uc11c, \uc778\ud130\ud504\ub9ac\ud130\ub294 \ud074\ub798\uc2a4 \uba64\ubc84\uc758 \uc774\ub984 \uc911 <code>__</code> (\uc5b8\ub354\uc2a4\ucf54\uc5b4 \ub450\uac1c \ub610\ub294 \"dunder\") \ub85c \uc2dc\uc791\ud558\uace0 \uc55e\uc5d0 <code>_NameOfTheClass</code>\ub85c \ud558\ub098 \uc774\uc0c1\uc758 \uc5b8\ub354\uc2a4\ucf54\uc5b4\ub85c \ub05d\ub098\uc9c0 \uc54a\ub294 \uc774\ub984\uc744 \uc218\uc815 (\ub9dd\uce58\uae30) \ud569\ub2c8\ub2e4.</li> <li>\uccab\ubc88\uc9f8 \ucf54\ub4dc\uc5d0\uc11c <code>__honey</code> \uc18d\uc131\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud574 \uc55e\uc5d0 <code>_Yo</code>\ub97c \ubd99\uc5ec\uc57c \ud588\ub294\ub370, \uc774\ub294 \ub2e4\ub978 \ud074\ub798\uc2a4\uc5d0\uc11c \ub3d9\uc77c\ud55c \uc774\ub984\uc758 \uc18d\uc131\uacfc \ucda9\ub3cc\ub418\ub294 \uac83\uc744 \ub9c9\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\ud558\uc9c0\ub9cc \uc65c \ub450\ubc88\uca30 \ucf54\ub4dc\ub294 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc744\uae4c\uc694? \uc65c\ub0d0\ud558\uba74 \uc774\ub984 \ub9dd\uce58\uae30\uac00 \uc774\ub984 \ub05d\uc758 \uc5b8\ub354\uc2a4\ucf54\uc5b4 \ub450\uac1c\ub97c \uc81c\uac70\ud569\ub2c8\ub2e4.</li> <li>\uc138\ubc88\uc9f8 \ucf54\ub4dc\ub610\ud55c \uc774\ub984 \ub9dd\uce58\uae30\uc758 \uacb0\uacfc\uc785\ub2c8\ub2e4. <code>return __variable</code> \uad6c\ubb38\uc758 <code>__variable</code>\uc774 <code>_A_variable</code>\ub85c \ubc14\ub00c\uc5c8\ub294\ub370, \uc774\ub294 \uc6b0\ub9ac\uac00 \uc2a4\ucf54\ud504\uc758 \ubc16\uc5d0\uc11c \uc120\uc5b8\ud55c \ubcc0\uc218\uc758 \uc774\ub984\uc774\uae30\ub3c4 \ud569\ub2c8\ub2e4.</li> <li>\ub610\ud55c, \ub9dd\uce5c \uc774\ub984\uc774 255\uc790\ubcf4\ub2e4 \uae38\uc5b4\uc9c0\uba74, \uc798\ub9ac\uac8c \ub420\uac81\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_106","title":"\"\uac89\ubaa8\uc2b5\uc740 \uae30\ub9cc\uc801\uc785\ub2c8\ub2e4!\" \ub2e8\uc6d0","text":""},{"location":"KO/#_107","title":"\u25b6 \uc904 \uac74\ub108\ub6f0\uae30?","text":"<p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; value = 11\n&gt;&gt;&gt; valu\u0435 = 32\n&gt;&gt;&gt; value\n11\n</code></pre> <p>\ubb50\ub77c\uace0\uc694?</p> <p>\ucc38\uace0: \uc774\ub97c \uc7ac\ud604\ud558\ub294 \uac00\uc7a5 \uc26c\uc6b4 \ubc29\ubc95\uc740 \uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c \uad6c\ubb38\uc744 \ubcf5\uc0ac\ud574\uc11c \ud30c\uc77c/\uc178\uc5d0 \ubd99\uc5ec\ub123\ub294 \uac83\uc785\ub2c8\ub2e4.</p>"},{"location":"KO/#_108","title":"\ud83d\udca1 \uc124\uba85","text":"<p>\uc77c\ubd80 \ube44-\uc11c\uc591\uc758 \ubb38\uc790\ub4e4\uc740 \uc601\uc5b4\uc758 \uc54c\ud30c\ubcb3\uacfc \ub611\uac19\uc544 \ubcf4\uc774\uc9c0\ub9cc \uc778\ud130\ud504\ub9ac\ud130\uc5d0 \uc758\ud574 \ubcc4\uac1c\uc758 \uac83\uc73c\ub85c \uc5ec\uaca8\uc9d1\ub2c8\ub2e4.</p> <pre><code>&gt;&gt;&gt; ord('\u0435') # \ud0a4\ub9b4 \ubb38\uc790 'e' (Ye)\n1077\n&gt;&gt;&gt; ord('e') # \ub77c\ud2f4 \ubb38\uc790 'e', \uc601\uc5b4\uc5d0 \uc0ac\uc6a9\ub418\uace0 \ud45c\uc900 \ud0a4\ubcf4\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud0c0\uc774\ud551\ud55c \uac83\n101\n&gt;&gt;&gt; '\u0435' == 'e'\nFalse\n\n&gt;&gt;&gt; value = 42 # \ub77c\ud2f4 \ubb38\uc790 e\n&gt;&gt;&gt; valu\u0435 = 23 # \ud0a4\ub9b4 \ubb38\uc790 'e', Python 2.x \uc778\ud130\ud504\ub9ac\ud130\ub294 `SyntaxError`\ub97c \uc77c\uc73c\ud0b5\ub2c8\ub2e4\n&gt;&gt;&gt; value\n42\n</code></pre> <p>\ub0b4\uc7a5\ub41c <code>ord()</code> \ud568\uc218\ub294 \ubb38\uc790\uc758 \uc720\ub2c8\ucf54\ub4dc \ucf54\ub4dc \ud3ec\uc778\ud2b8 \ub97c \ubc18\ud658\ud558\uba70, \ud0a4\ub9b4 \ubb38\uc790 'e'\uc640 \ub77c\ud2f4 \ubb38\uc790 'e'\uc758 \ub2e4\ub978 \ucf54\ub4dc \uc704\uce58\ub294 \uc608\uc81c\uc758 \ub3d9\uc791\uc774 \uc633\uc74c\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.</p>"},{"location":"KO/#_109","title":"\u25b6 \uc21c\uac04\uc774\ub3d9","text":"<pre><code># \uba3c\uc800 `pip install numpy`\ub97c \ud558\uc138\uc694.\nimport numpy as np\n\ndef energy_send(x):\n    # numpy \ubc30\uc5f4\uc744 \ucd08\uae30\ud654\ud569\ub2c8\ub2e4.\n    np.array([float(x)])\n\ndef energy_receive():\n    # \ube48 numpy \ubc30\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    return np.empty((), dtype=np.float).tolist()\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code>&gt;&gt;&gt; energy_send(123.456)\n&gt;&gt;&gt; energy_receive()\n123.456\n</code></pre> <p>\ub178\ubca8\uc0c1\uc740 \uc5b4\ub514\uc788\ub098\uc694?</p>"},{"location":"KO/#_110","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li><code>energy_send</code> \ud568\uc218\uc5d0\uc11c \uc0dd\uc131\ub41c numpy \ubc30\uc5f4\uc740 \ubc18\ud658\ub418\uc9c0 \uc54a\uc544 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uc790\uc720\ub86d\uac8c \uc7ac\ud560\ub2f9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li><code>numpy.empty()</code>\ub294 \ub2e4\uc2dc \ucd08\uae30\ud654\ud558\uc9c0 \uc54a\uace0 \ub2e4\uc74c\uc5d0 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uba54\ubaa8\ub9ac \uc2ac\ub86f\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. \uc774 \uba54\ubaa8\ub9ac \uc704\uce58\ub294 \ub9c9 \ud480\ub824\ub09c \uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4. (\ubcf4\ud1b5 \uadf8\ub7ec\ub098, \ud56d\uc0c1 \uadf8\ub807\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4.)</li> </ul>"},{"location":"KO/#_111","title":"\u25b6 \uc74c, \ubb54\uac00 \uc218\uc0c1\ud55c\ub370...","text":"<pre><code>def square(x):\n    \"\"\"\n    \uc22b\uc790\uc758 \ud569\uc73c\ub85c \uc81c\uacf1\uc744 \uad6c\ud558\ub294 \uac04\ub2e8\ud55c \ud568\uc218.\n    \"\"\"\n    sum_so_far = 0\n    for counter in range(x):\n        sum_so_far = sum_so_far + x\n  return sum_so_far\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc (Python 2.x):</p> <pre><code>&gt;&gt;&gt; square(10)\n10\n</code></pre> <p>100\uc774 \uc544\ub2c8\uc5ec\uc57c \ud558\ub098\uc694?</p> <p>\ucc38\uace0: \uc774\uac78 \uc7ac\ud604\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0 mixed_tabs_and_spaces.py\ub97c \uc178\uc5d0\uc11c \uc2e4\ud589\ud574\ubcf4\uc138\uc694.</p>"},{"location":"KO/#_112","title":"\ud83d\udca1 \uc124\uba85","text":"<ul> <li>\ud0ed\uacfc \uc2a4\ud398\uc774\uc2a4\ub97c \ud63c\uc6a9\ud558\uc9c0 \ub9c8\uc138\uc694! \uc608\uc81c\uc758 \ubc18\ud658 \uc9c1\uc804\uc5d0 \uc788\ub294 \ubb38\uc790\ub294 \"\ud0ed\"\uc774\uba70 \ub2e4\ub978 \uacf3\uc758 \ub4e4\uc5ec\uc4f0\uae30\ub294 \"4 \uc2a4\ud398\uc774\uc2a4\"\ub85c \ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4.</li> <li>\ud30c\uc774\uc36c\uc774 \ud0ed\uc744 \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4:</li> </ul> <p>\ud0ed\uc740 \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c 1~8\uac1c\uc758 \uacf5\ubc31\uc73c\ub85c \uce58\ud658\ub418\uba70 \uce58\ud658\ub41c \ud56d\ubaa9\uc744 \ud3ec\ud568\ud558\uc5ec \ucd1d \ubb38\uc790 \uc218\uac00 8\uc758 \ubc30\uc218\uac00 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.</p> <ul> <li>\uc989, <code>square</code> \ud568\uc218\uc758 \ub9c8\uc9c0\ub9c9 \uc904\uc5d0 \uc788\ub294 \"\ud0ed\"\uc740 8\uac1c\uc758 \uacf5\ubc31\uc73c\ub85c \ubc14\ub00c\uc5b4 \ub8e8\ud504 \uc548\uc73c\ub85c \ub4e4\uc5b4\uac00\uac8c \ub429\ub2c8\ub2e4.</li> <li>\ud30c\uc774\uc36c 3\ub294 \uadf8\ub7f4 \ub54c \uc790\ub3d9\uc73c\ub85c \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \ub9cc\ud07c \uce5c\uc808\ud569\ub2c8\ub2e4.</li> </ul> <p>\ucd9c\ub825 \uacb0\uacfc (Python 3.x):</p> <pre><code>TabError: inconsistent use of tabs and spaces in indentation\n</code></pre>"},{"location":"KO/#_113","title":"\"\uae30\ud0c0 \ub4f1\ub4f1\" \ub2e8\uc6d0","text":""},{"location":"KO/#_114","title":"\u25b6 <code>+=</code> \uac00 \ub354 \ube68\ub77c\uc694","text":"<pre><code># 3\uac1c\uc758 \ubb38\uc790\uc5f4\uc744 \"+\"\uc744 \uc0ac\uc6a9\ud574\uc11c:\n&gt;&gt;&gt; timeit.timeit(\"s1 = s1 + s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100)\n0.25748300552368164\n# 3\uac1c\uc758 \ubb38\uc790\uc5f4\uc744 \"+=\"\uc744 \uc0ac\uc6a9\ud574\uc11c:\n&gt;&gt;&gt; timeit.timeit(\"s1 += s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100)\n0.012188911437988281\n</code></pre>"},{"location":"KO/#_115","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li><code>s1 += s2 + s3</code>\uc5d0\uc11c <code>s1</code>\uacfc \uac19\uc740 \uccab \ubc88\uc9f8 \ubb38\uc790\uc5f4\uc740 \uc804\uccb4 \ubb38\uc790\uc5f4\uc744 \uacc4\uc0b0\ud558\ub294 \ub3d9\uc548\uc5d0 \ud30c\uad34\ub418\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \ub450 \uac1c \uc774\uc0c1\uc758 \uc5f0\uacb0\ub41c \ubb38\uc790\uc5f4\uc5d0 \ub300\ud574\uc11c <code>+=</code>\uac00 <code>+</code> \ubcf4\ub2e4 \ube60\ub985\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_116","title":"\u25b6 \uac70\ub300\ud55c \ubb38\uc790\uc5f4\uc744 \ub9cc\ub4e4\uc5b4\ubd10\uc694!","text":"<pre><code>def add_string_with_plus(iters):\n    s = \"\"\n    for i in range(iters):\n        s += \"xyz\"\n    assert len(s) == 3*iters\n\ndef add_bytes_with_plus(iters):\n    s = b\"\"\n    for i in range(iters):\n        s += b\"xyz\"\n    assert len(s) == 3*iters\n\ndef add_string_with_format(iters):\n    fs = \"{}\"*iters\n    s = fs.format(*([\"xyz\"]*iters))\n    assert len(s) == 3*iters\n\ndef add_string_with_join(iters):\n    l = []\n    for i in range(iters):\n        l.append(\"xyz\")\n    s = \"\".join(l)\n    assert len(s) == 3*iters\n\ndef convert_list_to_string(l, iters):\n    s = \"\".join(l)\n    assert len(s) == 3*iters\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc:</p> <pre><code># \ub354 \uc88b\uc740 \uac00\ub3c5\uc131\uc744 \uc704\ud574 %timeit\uc744 \uc0ac\uc6a9\ud558\uc5ec ipython shell\uc5d0\uc11c \uc2e4\ud589\ud588\uc2b5\ub2c8\ub2e4.\n# \ud30c\uc774\uc36c shell/scriptm= \uc5d0\uc11c timeit \ubaa8\ub4c8\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc740 \ubc29\uc2dd\uc785\ub2c8\ub2e4.\n# timeit.timeit('add_string_with_plus(10000)', number=1000, globals=globals())\n\n&gt;&gt;&gt; NUM_ITERS = 1000\n&gt;&gt;&gt; %timeit -n1000 add_string_with_plus(NUM_ITERS)\n124 \u00b5s \u00b1 4.73 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS)\n211 \u00b5s \u00b1 10.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_format(NUM_ITERS)\n61 \u00b5s \u00b1 2.18 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_join(NUM_ITERS)\n117 \u00b5s \u00b1 3.21 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; l = [\"xyz\"]*NUM_ITERS\n&gt;&gt;&gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS)\n10.1 \u00b5s \u00b1 1.06 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre> <p>\ubc18\ubcf5 \ud69f\uc218\ub97c 10\ubc30\ub85c \ub298\ub838\uc2b5\ub2c8\ub2e4.</p> <pre><code>&gt;&gt;&gt; NUM_ITERS = 10000\n&gt;&gt;&gt; %timeit -n1000 add_string_with_plus(NUM_ITERS) # Linear increase in execution time\n1.26 ms \u00b1 76.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS) # Quadratic increase\n6.82 ms \u00b1 134 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_format(NUM_ITERS) # Linear increase\n645 \u00b5s \u00b1 24.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_join(NUM_ITERS) # Linear increase\n1.17 ms \u00b1 7.25 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; l = [\"xyz\"]*NUM_ITERS\n&gt;&gt;&gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS) # Linear increase\n86.3 \u00b5s \u00b1 2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre>"},{"location":"KO/#_117","title":"\ud83d\udca1 \uc124\uba85","text":"<ul> <li>timeit \ub610\ub294 %timeit\uc5d0 \ub300\ud574 \ub354 \uc77d\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\uac83\ub4e4\uc740 \ucf54\ub4dc\uc758 \uc2e4\ud589 \uc2dc\uac04\uc744 \uce21\uc815\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</li> <li>\uae34 \ubb38\uc790\uc5f4\ub4e4\uc744 \uc0dd\uc131\ud558\ub294\ub370 <code>+</code> \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\uc138\uc694. - \ud30c\uc774\uc36c\uc5d0\uc11c, <code>str</code> \uc740 \ubcc0\ud558\uc9c0 \uc54a\uc544\uc11c \uc88c\uc6b0\uc758 \ubb38\uc790\uc5f4\ub4e4\uc740 \uac01\uac01\uc758 \uc30d\ub4e4\uc5d0 \ub300\ud574 \uc0c8\ub85c\uc6b4 \ubb38\uc790\uc5f4\ub85c \ubcf5\uc0ac\ub429\ub2c8\ub2e4. \ub9cc\uc57d \uae38\uc774 10\uc758 \ubb38\uc790\uc5f4 4\uac1c\ub97c \uc5f0\uacb0\ud55c\ub2e4\uba74, 40\uac1c\uc758 \ubb38\uc790(character)\ub9cc \ubcf5\uc0ac\ud558\uc9c0 \uc54a\uace0 (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90\uac1c\uc758 \ubb38\uc790(character)\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \ubb38\uc790\uc5f4\uc758 \uc218\uc640 \uae38\uc774\uac00 \uc99d\uac00\ud568\uc5d0 \ub530\ub77c \uc0c1\ud669\uc740 \uc774\ucc28\uc801\uc73c\ub85c \uc545\ud654\ud569\ub2c8\ub2e4. (<code>add_bytes_with_plus</code> \ud568\uc218\ub85c \uc2e4\ud589 \uc2dc\uac04\uc744 \ubcf4\uc600\uc2b5\ub2c8\ub2e4.)</li> <li>\uadf8\ub7ec\ubbc0\ub85c, <code>.format.</code> \ub610\ub294 <code>%</code> \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uad8c\uace0\ud569\ub2c8\ub2e4. (\ud558\uc9c0\ub9cc, \ub9e4\uc6b0 \uc9e7\uc740 \ubb38\uc790\uc5f4\ub4e4\uc758 \uacbd\uc6b0 <code>+</code> \ubcf4\ub2e4 \uc57d\uac04 \ub290\ub9bd\ub2c8\ub2e4.)</li> <li>\ub354 \uc88b\uc740 \ubc29\ubc95\uc73c\ub85c, iterable \uac1d\uccb4\uc758 \ud615\ud0dc\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ucf58\ud150\uce20\uac00 \uc788\ub2e4\uba74, \ud6e8\uc52c \ub354 \ube60\ub978 <code>''.join(iterable_object)</code>\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li><code>add_bytes_with_plus</code>\uc640 \ub2ec\ub9ac \uc55e\uc758 \uc608\uc5d0\uc11c \ubcf4\uc5ec\uc900 <code>+=</code> \ucd5c\uc801\ud654\ub85c \uc778\ud574 <code>add_string_with_plus</code>\ub294 \uc2e4\ud589 \uc2dc\uac04\uc774 \uc774\ucc28\uc801\uc73c\ub85c \uc99d\uac00\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. <code>s += \"xyz\"</code> \ub300\uc2e0 <code>s = s + \"x\" + \"y\" + \"z\"</code> \uc774\uc600\ub2e4\uba74 \uc2e4\ud589 \uc2dc\uac04\uc774 \uc774\ucc28\uc801\uc73c\ub85c \uc99d\uac00\ud588\uc744 \uac81\ub2c8\ub2e4.</li> </ul> <pre><code>def add_string_with_plus(iters):\n    s = \"\"\n    for i in range(iters):\n        s = s + \"x\" + \"y\" + \"z\"\n    assert len(s) == 3*iters\n\n&gt;&gt;&gt; %timeit -n100 add_string_with_plus(1000)\n388 \u00b5s \u00b1 22.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n100 add_string_with_plus(10000) # Quadratic increase in execution time\n9 ms \u00b1 298 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n</code></pre> <ul> <li>\uac70\ub300\ud55c \ubb38\uc790\uc5f4\uc744 \uad6c\uc131\ud558\uace0 \ub9cc\ub4dc\ub294 \ub9ce\uc740 \ubc29\ubc95\uc740 Zen of Python \uacfc \uc57d\uac04 \ub300\uc870\uc801\uc785\ub2c8\ub2e4. \uc774\uc5d0 \ub530\ub974\uba74,</li> </ul> <p>\uc5b4\ub5a4 \ubb38\uc81c\ub4e0\uc9c0 \ud574\uacb0\ud560 \ud558\ub098\uc758 - \uac00\uae09\uc801\uc774\uba74 \uc720\uc77c\ud55c - \uba85\ubc31\ud55c \ubc29\ubc95\uc774 \uc874\uc7ac\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"KO/#dict","title":"\u25b6 <code>dict</code> \uac80\uc0c9 \uc18d\ub3c4 \ub290\ub824\uc9c0\uac8c \ud558\uae30 *","text":"<pre><code>some_dict = {str(i): 1 for i in range(1_000_000)}\nanother_dict = {str(i): 1 for i in range(1_000_000)}\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc: <pre><code>&gt;&gt;&gt; %timeit some_dict['5']\n28.6 ns \u00b1 0.115 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n&gt;&gt;&gt; some_dict[1] = 1\n&gt;&gt;&gt; %timeit some_dict['5']\n37.2 ns \u00b1 0.265 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n\n&gt;&gt;&gt; %timeit another_dict['5']\n28.5 ns \u00b1 0.142 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n&gt;&gt;&gt; another_dict[1] # \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \ud0a4\uc5d0 \uc811\uadfc\uc744 \ud574\ubcfc\uae4c\uc694\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nKeyError: 1\n&gt;&gt;&gt; %timeit another_dict['5']\n38.5 ns \u00b1 0.0913 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n</code></pre> \uc65c \uac19\uc740 \uac80\uc0c9\uc758 \uc18d\ub3c4\uac00 \ub290\ub824\uc9c8\uae4c\uc694?</p>"},{"location":"KO/#_118","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>CPython\uc740 \ubaa8\ub4e0 \ud0c0\uc785\uc758 \ud0a4 (<code>str</code>, <code>int</code>, \ubaa8\ub4e0 \uc624\ube0c\uc81d\ud2b8 ...)\uc5d0 \ub300\ud574 \uc77c\ubc18\uc801\uc778 \ub515\uc154\ub108\ub9ac \uac80\uc0c9 \ud568\uc218\uac00 \uc788\uace0 \ud754\ud55c \uacbd\uc6b0\uc778 <code>str</code> \ud0a4\ub85c\ub9cc \uc774\ub8e8\uc5b4\uc838 \uc788\ub294 \ub515\uc154\ub108\ub9ac\uc5d0 \ub300\ud55c \ud568\uc218\uac00 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>(CPython\uc5d0\uc11c \uc774\ub984\uc774 <code>lookdict_unicode</code> \uc18c\uc2a4) \ud568\uc218\ub294 (\uac80\uc0c9\ud558\ub824\ub294 \ud0a4\ub97c \ud3ec\ud568\ud574\uc11c) \ubaa8\ub4e0 \ud0a4\uac00 \ubb38\uc790\uc5f4 \uc778\uac83\uc744 \uc54c\uace0, <code>__eq__</code> \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\ub294 \ub300\uc2e0 \ube60\ub974\uace0 \uac04\ub2e8\ud55c \ubb38\uc790\uc5f4 \ube44\uad50\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.</li> <li><code>dict</code> \uc778\uc2a4\ud134\uc2a4\uac00 \ucc98\uc74c\uc73c\ub85c <code>str</code>\uc774 \uc544\ub2cc \ud0a4\ub85c \uc811\uadfc\ub418\uc5c8\uc744 \ub54c, \ucd94\ud6c4 \uac80\uc0c9\uc740 \uc77c\ubc18\uc801\uc778 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc218\uc815\ub429\ub2c8\ub2e4.</li> <li>\uc774 \uacfc\uc815\uc740 \ud2b9\uc815 <code>dict</code> \uc778\uc2a4\ud134\uc2a4\uc5d0 \ub300\ud574\uc11c \ub418\ub3cc\ub9b4 \uc218 \uc5c6\uc73c\uba70, \ud0a4\uac00 \ub515\uc154\ub108\ub9ac \uc548\uc5d0 \uc5c6\uc5b4\ub3c4 \uc791\ub3d9\ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc2e4\ud328\ud55c \uac80\uc0c9\ub3c4 \uac19\uc740 \ud6a8\uacfc\ub97c \uac00\uc9c0\uac8c \ub41c \uac83\uc785\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#dict_1","title":"\u25b6 <code>dict</code> \uc778\uc2a4\ud134\uc2a4 \ubd80\ud480\ub9ac\uae30 *","text":"<pre><code>import sys\n\nclass SomeClass:\n    def __init__(self):\n        self.some_attr1 = 1\n        self.some_attr2 = 2\n        self.some_attr3 = 3\n        self.some_attr4 = 4\n\n\ndef dict_size(o):\n    return sys.getsizeof(o.__dict__)\n</code></pre> <p>\ucd9c\ub825 \uacb0\uacfc: (\ud30c\uc774\uc36c 3.8, \ub2e4\ub978 \ud30c\uc774\uc36c 3 \ubc84\uc804\uc740 \uc870\uae08 \ub2e4\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4.)</p> <pre><code>&gt;&gt;&gt; o1 = SomeClass()\n&gt;&gt;&gt; o2 = SomeClass()\n&gt;&gt;&gt; dict_size(o1)\n104\n&gt;&gt;&gt; dict_size(o2)\n104\n&gt;&gt;&gt; del o1.some_attr1\n&gt;&gt;&gt; o3 = SomeClass()\n&gt;&gt;&gt; dict_size(o3)\n232\n&gt;&gt;&gt; dict_size(o1)\n232\n</code></pre> <p>\uc0c8\ub85c\uc6b4 \uc778\ud130\ud504\ub9ac\ud130\uc5d0\uc11c \ub2e4\uc2dc \uc2dc\ub3c4\ud574\ubcfc\uae4c\uc694?:</p> <pre><code>&gt;&gt;&gt; o1 = SomeClass()\n&gt;&gt;&gt; o2 = SomeClass()\n&gt;&gt;&gt; dict_size(o1)\n104  # \uc608\uc0c1\ud55c \ub300\ub85c \ub098\uc654\ub124\uc694\n&gt;&gt;&gt; o1.some_attr5 = 5\n&gt;&gt;&gt; o1.some_attr6 = 6\n&gt;&gt;&gt; dict_size(o1)\n360\n&gt;&gt;&gt; dict_size(o2)\n272\n&gt;&gt;&gt; o3 = SomeClass()\n&gt;&gt;&gt; dict_size(o3)\n232\n</code></pre> <p>\ubb34\uc5c7\uc774 \uc774 \ub515\uc154\ub108\ub9ac\ub4e4\uc744 \ubd80\ud480\ub9ac\uac8c \ud588\uc744\uae4c\uc694? \uadf8\ub9ac\uace0 \uc65c \uc0c8\ub86d\uac8c \uc0dd\uc131\ub41c \uac1d\uccb4\ub3c4 \ubd80\ud480\ub824\uc9c8\uae4c\uc694?</p>"},{"location":"KO/#_119","title":"\ud83d\udca1 \uc124\uba85:","text":"<ul> <li>CPython\uc740 \ub2e4\uc591\ud55c \ub515\uc154\ub108\ub9ac\uc5d0\uc11c \uac19\uc740 \"\ud0a4\" \uac1d\uccb4\ub97c \uc7ac\uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \ud2b9\ubcc4\ud788 \ud0a4(\uc778\uc2a4\ud134\uc2a4 \uc18d\uc131)\ub4e4\uc774 \uc8fc\ub85c \ubaa8\ub4e0 \uc778\uc2a4\ud134\uc2a4\uc5d0\uc11c \ube44\uc2b7\ud55c \ub515\uc154\ub108\ub9ac\uc758 \uc778\uc2a4\ud134\uc2a4\uc758 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\uc744 \uc904\uc774\uae30 \uc704\ud574\uc11c PEP 412\uc5d0\uc11c \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4.</li> <li>\uc774 \ucd5c\uc801\ud654\ub294 \uc778\uc2a4\ud134\uc2a4 \ub515\uc154\ub108\ub9ac\uc5d0\ub294 \uc6d0\ud65c\ud788 \uc801\uc6a9\ub418\ub294\ub370, \uba87 \uba87 \uac00\uc815\uc774 \ub9cc\uc871\ub418\uc9c0 \uc54a\uac8c \ub418\uba74 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</li> <li>\ud0a4\ub97c \uacf5\uc720\ud558\ub294 \ub515\uc154\ub108\ub9ac\ub294 \uc0ad\uc81c\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4; \ub9cc\uc57d \uc5b4\ub5a4 \uc778\uc2a4\ud134\uc2a4 \uc18d\uc131\uc774 \uc0ad\uc81c\ub418\uc5c8\uc744 \ub54c, \uadf8 \ub515\uc154\ub108\ub9ac\ub294 \"\ube44\uacf5\uc720\"\uac00 \ub418\uace0, \ud6c4\uc758 \uadf8 \ud074\ub798\uc2a4 \uc778\uc2a4\ud134\uc2a4\ub294 \ud0a4\ub97c \uacf5\uc720\ud558\uc9c0 \uc54a\uac8c \ub429\ub2c8\ub2e4.</li> <li>\ucd94\uac00\ub85c, (\uc0c8\ub85c\uc6b4 \ud0a4\uac00 \uc0bd\uc785\ub418\uc5b4\uc11c) \ub515\uc154\ub108\ub9ac\uc758 \ud0a4\ub4e4\uc758 \ud06c\uae30\uac00 \uc870\uc815\ub418\uc5c8\ub2e4\uba74, \uadf8 \ud0a4\uac00 \uadf8 \ub515\uc154\ub108\ub9ac\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ub418\uc5c8\uc744 \uacbd\uc6b0\uc5d0\ub9cc \uacc4\uc18d \uacf5\uc720\ub41c \uc0c1\ud0dc\ub97c \uc720\uc9c0\ud569\ub2c8\ub2e4 (\uc774\uac83\uc740 <code>__init__</code>\uc5d0\uc11c \uc778\uc2a4\ud134\uc2a4\ub97c \ucc98\uc74c \ub9cc\ub4e4 \ub54c \"\ube44\uacf5\uc720\" \uc0c1\ud0dc\uac00 \ub418\uc9c0 \uc54a\uace0 \ub9ce\uc740 \uc18d\uc131\uc744 \ucd94\uac00\ud560 \uc218 \uc788\uac8c \ud569\ub2c8\ub2e4). \ub9cc\uc57d \ud06c\uae30\uac00 \uc870\uc815\ub420 \ub54c \ub2e4\uc591\ud55c \uc778\uc2a4\ud134\uc2a4\uac00 \uc874\uc7ac\ud558\uba74, \ud0a4\ub97c \ub354 \uc774\uc0c1 \uacf5\uc720\ud558\uc9c0 \uc54a\uac8c \ub418\uace0 \ud6c4\uc758 \uadf8 \ud074\ub798\uc2a4\uc758 \ubaa8\ub4e0 \uc778\uc2a4\ud134\uc2a4\uc5d0 \ub300\ud574\uc11c \uacf5\uc720\ud558\uc9c0 \uc54a\uac8c \ub429\ub2c8\ub2e4: CPython\uc740 \uadf8 \uc778\uc2a4\ud134\uc2a4\uac00 \uac19\uc740 \uc18d\uc131\uc758 \uc9d1\ud569\uc744 \uc0ac\uc6a9\ud558\ub294\uc9c0 \uc54c \uc218 \uc5c6\uac8c \ub418\ubbc0\ub85c, \ud0a4\ub97c \uacf5\uc720\ud558\ub294 \uc2dc\ub3c4\ub97c \ud558\uc9c0 \uc54a\uac8c \ub429\ub2c8\ub2e4.</li> <li>\uc791\uc740 \ud301\uc73c\ub85c, \ub9cc\uc57d \ud504\ub85c\uadf8\ub7a8\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uc904\uc774\uace0 \uc2f6\ub2e4\uba74: \uc778\uc2a4\ud134\uc2a4 \uc18d\uc131\uc744 \uc9c0\uc6b0\uc9c0 \ub9d0\uace0, \uaf2d \ubaa8\ub4e0 \uc18d\uc131\uc744 <code>__init__</code>\uc5d0\uc11c \ucd08\uae30\ud654 \ud558\uc138\uc694!</li> </ul>"},{"location":"KO/#_120","title":"\u25b6 \uc0ac\uc18c\ud55c \uac83\ub4e4 *","text":"<ul> <li><code>join()</code> \uc740 \ub9ac\uc2a4\ud2b8 \uc5f0\uc0b0\uc774 \uc544\ub2cc \ubb38\uc790\uc5f4 \uc5f0\uc0b0\uc785\ub2c8\ub2e4. (\ucc98\uc74c \ubcf4\uae30\uc5d0\ub294 \uc9c1\uad00\uc801\uc774\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.)</li> </ul> <p>\ud83d\udca1 \uc124\uba85: <code>join()</code>\uc774 \ubb38\uc790\uc5f4\uc758 \uba54\uc18c\ub4dc\ub77c\uba74 \ubaa8\ub4e0 iterable \uc790\ub8cc\ud615 (\ub9ac\uc2a4\ud2b8(list), \ud29c\ud50c(tuple), \ubc18\ubcf5\uc790(iterators)) \uc5d0\uc11c \ub3d9\uc791\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \ub9ac\uc2a4\ud2b8\uc758 \uba54\uc18c\ub4dc\ub77c\uba74 \ubaa8\ub4e0 \ud0c0\uc785\uc5d0 \ub300\ud574 \ub530\ub85c \uc815\uc758\ud574\uc57c \ud569\ub2c8\ub2e4. \ub610\ud55c, \uc77c\ubc18\uc801\uc778 <code>list</code> \uac1d\uccb4 API\uc5d0 \ubb38\uc790\uc5f4 \ubc29\uc2dd\uc758 \uba54\uc18c\ub4dc\ub97c \ubd99\uc774\ub294 \uac83\uc740 \ubcc4\ub85c \ub9d0\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</p> <ul> <li> <p>\uc774\uc0c1\ud558\uac8c \ubcf4\uc774\uc9c0\ub9cc \uc758\ubbf8\uc0c1 \uc62c\ubc14\ub978 \uad6c\ubb38\ub4e4:</p> </li> <li> <p><code>[] = ()</code> \uc740 \uc758\ubbf8\uc0c1 \uc62c\ubc14\ub978 \uad6c\ubb38\uc785\ub2c8\ub2e4. (\ube48 <code>tuple</code>\uc744 \ube48 <code>list</code> \uc548\uc73c\ub85c \ud480\uc5b4 \ub123\uc2b5\ub2c8\ub2e4.(unpacking))</p> </li> <li><code>'a'[0][0][0][0][0]</code> \uc740 \ud30c\uc774\uc36c\uc5d0\uc11c \ubb38\uc790\uc5f4\ub4e4\uc774 sequences (iterables \ud558\uace0 \uc778\ub371\uc2a4\ub85c \uc694\uc18c\uc5d0 \uc811\uadfc\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4) \uc774\ubbc0\ub85c \uc758\ubbf8\uc0c1 \uc62c\ubc14\ub978 \uad6c\ubb38\uc785\ub2c8\ub2e4.</li> <li> <p><code>3 --0-- 5 == 8</code>\uacfc <code>--5 == 5</code> \ub458\ub2e4 \uc758\ubbf8\uc0c1 \uc62c\ubc14\ub978 \uad6c\ubb38\uc774\uba70 \uacb0\uad0f\uac12\uc740 <code>True</code>\uc785\ub2c8\ub2e4.</p> </li> <li> <p><code>a</code>\uc744 \uc22b\uc790\ub77c\uace0 \uace0\ub824\ud560 \ub54c, <code>++a</code>\uc640 <code>--a</code> \ub458 \ub2e4 \ud30c\uc774\uc36c\uc5d0\uc11c \uc62c\ubc14\ub978 \uad6c\ubb38\uc774\uc9c0\ub9cc C, C++, \ub610\ub294 Java \uac19\uc740 \uc5b8\uc5b4\uc5d0\uc11c \uc720\uc0ac\ud55c \uad6c\ubb38\uacfc\ub294 \uac19\uc740 \uacb0\uacfc\ub97c \ubcf4\uc774\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</p> </li> </ul> <pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; a\n5\n&gt;&gt;&gt; ++a\n5\n&gt;&gt;&gt; --a\n5\n</code></pre> <p>\ud83d\udca1 \uc124\uba85:</p> <ul> <li>\ud30c\uc774\uc36c \ubb38\ubc95\uc5d0\ub294 <code>++</code> \uc5f0\uc0b0\uc790\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \ub450 \uac1c\uc758 <code>+</code> \uc5f0\uc0b0\uc790\uc785\ub2c8\ub2e4.</li> <li><code>++a</code> \ub294 <code>+(+a)</code>\ub85c \ubd84\uc11d\ub418\uc5b4 <code>a</code>\uac00 \ub429\ub2c8\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c <code>--a</code> \ub3c4 \uc62c\ubc14\ub978 \uad6c\ubb38\uc785\ub2c8\ub2e4.</li> <li> <p>\uc774 StackOverflow \uc2a4\ub808\ub4dc\uc5d0\uc11c \ud30c\uc774\uc36c\uc5d0\uc11c \uc99d\uac00 \ubc0f \uac10\uc18c \uc5f0\uc0b0\uc790\uac00 \uc5c6\ub294 \uc774\uc720\uc5d0 \ub300\ud55c \ud1a0\ub860\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> </li> <li> <p>\ud30c\uc774\uc36c\uc758 Walrus \uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574 \uc54c\uace0 \uc788\uc744 \uac81\ub2c8\ub2e4. \uadf8\ub7f0\ub370 space-invader \uc5f0\uc0b0\uc790 \uc5d0 \ub300\ud574 \ub4e4\uc5b4\ubcf4\uc168\ub098\uc694?   <pre><code>&gt;&gt;&gt; a = 42\n&gt;&gt;&gt; a -=- 1\n&gt;&gt;&gt; a\n43\n</code></pre>   \ub2e4\ub978 \uc99d\uac00 \uc5f0\uc0b0\uc790\uc640 \ud568\uaed8, \ub300\uccb4 \uc99d\uac00 \uc5f0\uc0b0\uc790\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.   <pre><code>&gt;&gt;&gt; a +=+ 1\n&gt;&gt;&gt; a\n&gt;&gt;&gt; 44\n</code></pre> \ud83d\udca1 \uc124\uba85: \uc774 \uc7a5\ub09c\uc740 Raymond Hettinger's tweet \uc5d0\uc11c \uc654\uc2b5\ub2c8\ub2e4. space-invader \uc5f0\uc0b0\uc790\ub294 \uc2e4\uc81c\ub85c <code>a -= (-1)</code> \uc758 \uc798\ubabb\ub41c \ud615\uc2dd\uc785\ub2c8\ub2e4. <code>a = a - (- 1)</code>\uc640 \uac19\uc2b5\ub2c8\ub2e4. <code>a += (+ 1)</code>\ub3c4 \ube44\uc2b7\ud55c \ubc29\uc2dd\uc73c\ub85c \uc801\uc6a9\ub429\ub2c8\ub2e4.</p> </li> <li>\ud30c\uc774\uc36c\uc740 \ubb38\uc11c\ud654\ub418\uc9c0 \uc54a\uc740 converse implication \uc5f0\uc0b0\uc790\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul> <pre><code>&gt;&gt;&gt; False ** False == True\nTrue\n&gt;&gt;&gt; False ** True == False\nTrue\n&gt;&gt;&gt; True ** False == True\nTrue\n&gt;&gt;&gt; True ** True == True\nTrue\n</code></pre> <p>\ud83d\udca1 \uc124\uba85: \ub9cc\uc57d <code>False</code> \uc640 <code>True</code> \uc744 0\uacfc 1\ub85c \ub300\uccb4\ud558\uace0 \uacc4\uc0b0\uc744 \ud574\ubcf4\uba74, \uc9c4\ub9ac\ud45c\ub294 converse implication \uc5f0\uc0b0\uc790\uc640 \uac19\uc2b5\ub2c8\ub2e4. (Source)</p> <ul> <li>\uc6b0\ub9ac\ub294 \uacc4\uc18d \uc5f0\uc0b0\uc790\ub4e4\uc744 \ub9d0\ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \ud589\ub82c \uacf1\uc148\uc744 \uc704\ud55c <code>@</code> \uc5f0\uc0b0\uc790\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. (\uac71\uc815\ud558\uc9c0 \ub9c8\uc138\uc694, \uc774\ubc88\uc5d4 \uc9c4\uc9dc\uc785\ub2c8\ub2e4).</li> </ul> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.array([2, 2, 2]) @ np.array([7, 8, 8])\n46\n</code></pre> <p>\ud83d\udca1 \uc124\uba85: \ud30c\uc774\uc36c 3.5\ubd80\ud130 <code>@</code> \uc5f0\uc0b0\uc790\ub97c \ucd94\uac00\ud574 \uacfc\ud559\uacc4\ub97c \uc5fc\ub450\uc5d0 \ub450\uc5c8\uc2b5\ub2c8\ub2e4. \uc5b4\ub5a4 \uac1d\uccb4\ub4e0 <code>__matmul__</code> \uc758 \ub9c8\ubc95 \uba54\uc18c\ub4dc\ub97c \uc624\ubc84\ub85c\ub4dc\ud574 \uc774 \uc5f0\uc0b0\uc790\uc758 \ud589\ub3d9\uc744 \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <ul> <li>\ud30c\uc774\uc36c 3.8 \uc774\uc0c1\uc5d0\uc11c\ub294 <code>f'{some_var=}</code> \uc640 \uac19\uc740 \uc77c\ubc18\uc801\uc778 f-string \uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\uc5ec \ube60\ub978 \ub514\ubc84\uae45\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4,</li> </ul> <pre><code>&gt;&gt;&gt; some_string = \"wtfpython\"\n&gt;&gt;&gt; f'{some_string=}'\n\"some_string='wtfpython'\"\n</code></pre> <ul> <li>\ud30c\uc774\uc36c\uc740 \ud568\uc218\ub4e4\uc758 \uc9c0\uc5ed \ubcc0\uc218 \uc800\uc7a5\uc18c\uc5d0 2\ubc14\uc774\ud2b8\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774\ub860\uc801\uc73c\ub85c, \uc774\uac83\uc740 \ud568\uc218\uc5d0\uc11c 65536\uac1c\uc758 \ubcc0\uc218\ub9cc \uc815\uc758\ub420 \uc218 \uc788\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud30c\uc774\uc36c\uc5d0\ub294 2^16\uac1c \uc774\uc0c1\uc758 \ubcc0\uc218 \uc774\ub984\ub4e4\uc744 \uc800\uc7a5\ud558\ub294 \ub370 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc720\uc6a9\ud55c \ud574\uacb0\ucc45\uc774 \ub0b4\uc7a5\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ucf54\ub4dc\ub294 65536\uac1c \uc774\uc0c1\uc758 \uc9c0\uc5ed \ubcc0\uc218\uac00 \uc815\uc758\ub418\uc5c8\uc744 \ub54c \uc2a4\ud0dd\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc0c1\ud669\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. (\uc8fc\uc758: \uc774 \ucf54\ub4dc\ub294 \uc57d 2^18\uc904\uc758 \ud14d\uc2a4\ud2b8\ub97c \ucd9c\ub825\ud558\ubbc0\ub85c, \uc900\ube44\ud558\uc2ed\uc2dc\uc624!):</li> </ul> <pre><code>import dis\nexec(\"\"\"\ndef f():\n   \"\"\" + \"\"\"\n   \"\"\".join([\"X\" + str(x) + \"=\" + str(x) for x in range(65539)]))\n\nf()\n\nprint(dis.dis(f))\n</code></pre> <ul> <li> <p>\uc5ec\ub7ec \ud30c\uc774\uc36c \uc2a4\ub808\ub4dc\ub4e4\uc774 \ub3d9\uc2dc\uc5d0 \ud30c\uc774\uc36c \ucf54\ub4dc \ub97c \uc2e4\ud589\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. (\uc608, \uc81c\ub300\ub85c \ub4e4\uc73c\uc168\uc2b5\ub2c8\ub2e4!) \uc5ec\ub7ec \uac1c\uc758 \uc2a4\ub808\ub4dc\ub97c \uc0dd\uc131\ud558\uc5ec \ud30c\uc774\uc36c \ucf54\ub4dc\ub97c \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\ud558\ub3c4\ub85d \ud558\ub294 \uac83\uc774 \uc9c1\uad00\uc801\uc73c\ub85c \ubcf4\uc77c \uc218 \uc788\uc9c0\ub9cc \ud30c\uc774\uc36c\uc758 Global Interpreter Lock \ub54c\ubb38\uc5d0 \ub2f9\uc2e0\uc774 \ub9cc\ub4e4\uace0 \uc2e4\ud589\uc2dc\ud0a4\ub294 \uc2a4\ub808\ub4dc\ub4e4\uc740 \uac19\uc740 \ucf54\uc5b4\ub97c \ucc28\ub840\ub300\ub85c \ub3d9\uc791\ud558\uac8c \ud558\ub294 \uac83\ubfd0\uc785\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc758 \uc4f0\ub808\ub4dc\ub294 IO-bound \uc791\uc5c5\uc5d0 \uc801\ud569\ud558\uc9c0\ub9cc, CPU-bound \uc791\uc5c5\uc5d0\uc11c \ubcd1\ub82c\ud654\ub97c \ub2ec\uc131\ud558\ub824\uba74 multiprocessing \ubaa8\ub4c8\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> </li> <li> <p>\ub54c\ub54c\ub85c, <code>print</code> \uba54\uc18c\ub4dc\ub294 \uac12\uc744 \ubc14\ub85c \ucd9c\ub825\ud558\uc9c0 \ubabb\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4,</p> </li> </ul> <pre><code># File some_file.py\nimport time\n\nprint(\"wtfpython\", end=\"_\")\ntime.sleep(3)\n</code></pre> <p>\ucd9c\ub825 \ubc84\ud37c\uac00 <code>\\n</code> \uc5d0 \ub3c4\ub2ec\ud55c \ud6c4 \ub610\ub294 \ud504\ub85c\uadf8\ub7a8\uc758 \uc2e4\ud589\uc774 \ub05d\ub0a0 \ub54c \ucd9c\ub825 \ubc84\ud37c\uac00 \ud50c\ub7ec\uc2dc \ub418\uae30 \ub54c\ubb38\uc5d0 <code>end</code> \uc778\uc790\ub85c \uc778\ud558\uc5ec 3\ucd08 \ub4a4\uc5d0 <code>wtfpython</code> \uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4. <code>flush=True</code> \uc778\uc790\ub97c \uc804\ub2ec\ud558\uc5ec \ubc84\ud37c\ub97c \uac15\uc81c\ub85c \ud50c\ub7ec\uc2dc \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.</p> <ul> <li>\ubc94\uc704\ub97c \ubc97\uc5b4\ub09c \ub9ac\uc2a4\ud2b8 \uc2ac\ub77c\uc774\uc2f1\uc740 \uc5d0\ub7ec\ub97c \ub358\uc9c0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</li> </ul> <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; some_list[111:]\n[]\n</code></pre> <ul> <li>iterable \uc744 \uc2ac\ub77c\uc774\uc2f1 \ud558\uba74 \ud56d\uc0c1 \uc0c8\ub85c\uc6b4 \uac1d\uccb4\uac00 \uc0dd\uc131\ub418\ub294 \uac83\uc740 \uc544\ub2d9\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4,</li> </ul> <pre><code>&gt;&gt;&gt; some_str = \"wtfpython\"\n&gt;&gt;&gt; some_list = ['w', 't', 'f', 'p', 'y', 't', 'h', 'o', 'n']\n&gt;&gt;&gt; some_list is some_list[:] # False expected because a new object is created.\nFalse\n&gt;&gt;&gt; some_str is some_str[:] # True because strings are immutable, so making a new object is of not much use.\nTrue\n</code></pre> <ul> <li> <p>\ud30c\uc774\uc36c 3 \uc5d0\uc11c <code>int('\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669')</code> \ub294 <code>123456789</code> \uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc5d0\uc11c, \uc2ed\uc9c4\uc218 \ubb38\uc790\ub4e4\uc5d0\ub294 \uc22b\uc790 \ubb38\uc790\ub4e4\uacfc \uc2ed\uc9c4\ubc95 \uc22b\uc790\ub4e4\uc744 \ud615\uc131\ud558\ub294\ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub294 \ubaa8\ub4e0 \ubb38\uc790\uac00 \ud3ec\ud568\ub429\ub2c8\ub2e4, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. \uc774 \ub3d9\uc791\uacfc \uad00\ub828\ub41c interesting story \uc785\ub2c8\ub2e4.</p> </li> <li> <p>\ud30c\uc774\uc36c 3 \uc774\uc0c1\uc5d0\uc11c\ub294 \ub354 \ub098\uc740 \uac00\ub3c5\uc131\uc744 \uc704\ud574 \ubc11\uc904\ub85c \uc22b\uc790 \ub9ac\ud130\ub7f4\uc744 \ubd84\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> </li> </ul> <pre><code>&gt;&gt;&gt; six_million = 6_000_000\n&gt;&gt;&gt; six_million\n6000000\n&gt;&gt;&gt; hex_address = 0xF00D_CAFE\n&gt;&gt;&gt; hex_address\n4027435774\n</code></pre> <ul> <li><code>'abc'.count('') == 4</code>. \ub2e4\uc74c\uc740 \ub354 \uba85\ud655\ud558\uac8c \ub9cc\ub4e4\uc5b4 \uc8fc\ub294 <code>count</code> \uba54\uc18c\ub4dc\uc758 \ube44\uc2b7\ud55c \uad6c\ud604\uc785\ub2c8\ub2e4.   <pre><code>def count(s, sub):\n    result = 0\n    for i in range(len(s) + 1 - len(sub)):\n        result += (s[i:i + len(sub)] == sub)\n    return result\n</code></pre>   \uc774 \ub3d9\uc791\uc740 \uc6d0\ub798 \ubb38\uc790\uc5f4\uc5d0\uc11c \uae38\uc774\uac00 0\uc778 \uc2ac\ub77c\uc774\uc2a4\ub4e4\uc5d0 \ube48 substring(<code>''</code>)\uc774 \uc77c\uce58\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</li> </ul>"},{"location":"KO/#_121","title":"\uae30\uc5ec\ud558\uae30","text":"<p>wtfpython\uc5d0 \uae30\uc5ec\ud560 \uc218 \uc788\ub294 \uba87 \uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc5b4\uc694,</p> <ul> <li>\uc0c8\ub85c\uc6b4 \uc608\uc81c\ub4e4 \ucd94\ucc9c</li> <li>\ubc88\uc5ed \ub3d5\uae30 (issues labeled translation \uc744 \ubcf4\uc138\uc694.)</li> <li>\uc624\ub798\ub41c \uc815\ubcf4, \uc624\ud0c0, \uc11c\uc2dd \uc624\ub958 \ub4f1\uc758 \uc791\uc740 \uc218\uc815\ub4e4</li> <li>\ucc28\uc774\uc810\ub4e4 \uc2dd\ubcc4 (\ubd88\ucda9\ubd84\ud55c \uc124\uba85, \uc911\ubcf5\ub41c \uc608\uc81c \ub4f1\ub4f1.)</li> <li>\uc774 \ud504\ub85c\uc81d\ud2b8\ub97c \ub354\uc6b1 \uc7ac\ubbf8\uc788\uace0 \uc720\uc6a9\ud558\uac8c \ub9cc\ub4e4\uae30 \uc704\ud55c \ucc3d\uc758\uc801\uc778 \uc81c\uc548\ub4e4</li> </ul> <p>\ub354 \ub9ce\uc740 \uc815\ubcf4\ub294 CONTRIBUTING.md\uc744\ub294\ubcf4\uc138\uc694. \uc790\uc720\ub86d\uac8c \uc0c8\ub85c\uc6b4 issue\ub97c \ub9cc\ub4e4\uc5b4 \ud1a0\ub860\ud574\ubcf4\uc138\uc694.</p> <p>\ucd94\uc2e0: \uc5ed\ub9c1\ud06c \uc694\uccad\uc73c\ub85c \uc5f0\ub77d\ud558\uc9c0 \ub9c8\uc138\uc694. \ud504\ub85c\uc81d\ud2b8\uc640 \uad00\ub828\uc774 \ub192\uc9c0 \uc54a\uc73c\uba74 \ub9c1\ud06c\ub97c \ucd94\uac00\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</p>"},{"location":"KO/#_122","title":"\uac10\uc0ac\uc758 \ub9d0","text":"<p>\uc774 \ud56d\ubaa9\ub4e4\uc758 \uc544\uc774\ub514\uc5b4\uc640 \ub514\uc790\uc778\uc740 Denys Dovhan's \uc758 \uba4b\uc9c4 \ud504\ub85c\uc81d\ud2b8 wtfjs \uc5d0\uc11c \uc601\uac10\uc744 \ubc1b\uc558\uc2b5\ub2c8\ub2e4. Pythonista\ub4e4\uc758 \uc555\ub3c4\uc801\uc778 \uc9c0\uc9c0\ub294 \uadf8\uac83\uc758 \ud604\uc7ac\uc758 \ubaa8\uc2b5\uc744 \uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.</p>"},{"location":"KO/#_123","title":"\uba87 \uac1c\uc758 \uba4b\uc9c4 \ub9c1\ud06c\ub4e4!","text":"<ul> <li>https://www.youtube.com/watch?v=sH4XF6pKKmk</li> <li>https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python</li> <li>https://sopython.com/wiki/Common_Gotchas_In_Python</li> <li>https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines</li> <li>https://stackoverflow.com/questions/1011431/common-pitfalls-in-python</li> <li>https://www.python.org/doc/humor/</li> <li>https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator</li> <li>https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65</li> <li>https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;type=Issues</li> <li>WFTPython discussion threads on Hacker News and Reddit.</li> </ul>"},{"location":"KO/#license","title":"\ud83c\udf93 License","text":"<p>\u00a9 Satwik Kansal</p>"},{"location":"KO/#_124","title":"\uce5c\uad6c\ub4e4\uc744 \ub180\ub77c\uac8c \ud574\ubcf4\uc138\uc694!","text":"<p>\ub9cc\uc57d wtfpython\uc774 \ub9c8\uc74c\uc5d0 \ub4dc\uc168\ub2e4\uba74, \uce5c\uad6c\ub4e4\uc5d0\uac8c \ube60\ub974\uac8c \uacf5\uc720\ud558\uae30 \uc704\ud55c \ud035 \ub9c1\ud06c\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc5b4\uc694.</p> <p>Twitter | Linkedin | Facebook</p>"},{"location":"KO/#need-a-pdf-version","title":"Need a pdf version?","text":"<p>I've received a few requests for the pdf (and epub) version of wtfpython. You can add your details here to get them as soon as they are finished.</p> <p>That's all folks! For upcoming content like this, you can add your email here.</p>"},{"location":"RU/","title":"Russian","text":"What the f*ck Python! \ud83d\ude31 <p>\u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 Python \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0438 \"\u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e\" \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f.</p> <p>\u0414\u0440\u0443\u0433\u0438\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044b: English Original | Russian \u0420\u0443\u0441\u0441\u043a\u0438\u0439 | Chinese \u4e2d\u6587 | Vietnamese Ti\u1ebfng Vi\u1ec7t | Spanish Espa\u00f1ol | Korean \ud55c\uad6d\uc5b4 | Add translation</p> <p>\u0415\u0449\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c: Interactive | CLI</p> <p>Python, \u0431\u0443\u0434\u0443\u0447\u0438 \u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f \u0441 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u043e\u043c, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u0430. \u041d\u043e \u0438\u043d\u043e\u0433\u0434\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430 Python \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043d\u0435\u043e\u0447\u0435\u0432\u0438\u0434\u043d\u044b\u043c\u0438 \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u0437\u0433\u043b\u044f\u0434.</p> <p>\u0412\u043e\u0442 \u0437\u0430\u0431\u0430\u0432\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442, \u043f\u044b\u0442\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c, \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0438\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u043d\u0438\u043f\u043f\u0435\u0442\u043e\u0432 \u0438 \u043c\u0435\u043d\u0435\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 Python.</p> <p>\u0425\u043e\u0442\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u043d\u0438\u0436\u0435, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f WTF \u0432 \u043f\u0440\u044f\u043c\u043e\u043c \u0441\u043c\u044b\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430, \u043d\u043e \u043e\u043d\u0438 \u0440\u0430\u0441\u043a\u0440\u043e\u044e\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 Python, \u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b \u043c\u043e\u0433\u043b\u0438 \u043d\u0435 \u0437\u043d\u0430\u0442\u044c. \u042f \u0441\u0447\u0438\u0442\u0430\u044e, \u0447\u0442\u043e \u044d\u0442\u043e \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u044f\u0437\u044b\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0438 \u044f \u0432\u0435\u0440\u044e, \u0447\u0442\u043e \u0432\u0430\u043c \u044d\u0442\u043e \u0442\u043e\u0436\u0435 \u043f\u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u043c!</p> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u043e\u043f\u044b\u0442\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442 \u043d\u0430 Python, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u044d\u0442\u043e \u043a\u0430\u043a \u0432\u044b\u0437\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0438\u0437 \u043d\u0438\u0445 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0441 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0438. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432\u044b \u0443\u0436\u0435 \u0441\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u043b\u0438\u0441\u044c \u0441 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0438\u0437 \u043d\u0438\u0445 \u0440\u0430\u043d\u044c\u0448\u0435, \u0438 \u044f \u0441\u043c\u043e\u0433\u0443 \u043e\u0436\u0438\u0432\u0438\u0442\u044c \u0432\u0430\u0448\u0438 \u0441\u0442\u0430\u0440\u044b\u0435 \u0434\u043e\u0431\u0440\u044b\u0435 \u0432\u043e\u0441\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f! :sweat_smile:</p> <p>PS: \u0415\u0441\u043b\u0438 \u0432\u044b \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b\u0439 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0437\u043d\u0430\u0442\u044c \u043e \u043d\u043e\u0432\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u0445 \u0437\u0434\u0435\u0441\u044c (\u043f\u0440\u0438\u043c\u0435\u0440\u044b, \u043e\u0442\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0435 \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u043e\u0439 - \u044d\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u044b, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0440\u0435\u0434\u0430\u043a\u0446\u0438\u0438). </p> <p>\u041d\u0443 \u0447\u0442\u043e\u0436, \u043d\u0430\u0447\u043d\u0435\u043c...</p>"},{"location":"RU/#table-of-contents","title":"Table of Contents","text":"<ul> <li>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432<ul> <li>\u25b6 \u041a\u0430\u043a\u043e\u0435-\u0442\u043e \u043c\u043e\u0434\u043d\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435</li> </ul> </li> <li>\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435</li> <li>\ud83d\udc40 \u041f\u0440\u0438\u043c\u0435\u0440\u044b</li> <li>\u0420\u0430\u0437\u0434\u0435\u043b: \u041d\u0430\u043f\u0440\u044f\u0433\u0438 \u043c\u043e\u0437\u0433\u0438!<ul> <li>\u25b6 \u041f\u0435\u0440\u0432\u043e-\u043d\u0430\u043f\u0435\u0440\u0432\u043e! *</li> <li>\u25b6 \u0418\u043d\u043e\u0433\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0445\u0438\u0442\u0440\u044b\u043c\u0438</li> <li>\u25b6 \u041e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u0435\u0435 \u0441 \u0446\u0435\u043f\u043e\u0447\u043a\u0430\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439</li> <li>\u25b6 \u041a\u0430\u043a \u043d\u0435 \u043d\u0430\u0434\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>is</code></li> <li>\u25b6 \u041c\u0438\u0441\u0442\u0438\u043a\u0430 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f</li> <li>\u25b6 \u0412 \u0433\u043b\u0443\u0431\u0438\u043d\u0435 \u0434\u0443\u0448\u0438 \u043c\u044b \u0432\u0441\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b</li> <li>\u25b6 \u0411\u0435\u0441\u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 *</li> <li>\u25b6 \u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0439 \u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f... *</li> <li>\u25b6 \u0414\u043b\u044f \u0447\u0435\u0433\u043e?</li> <li>\u25b6 \u0420\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0446\u0435\u043d\u043a\u0438</li> <li>\u25b6 <code>is not ...</code> \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f <code>is(not ...)</code></li> <li>\u25b6 \u041a\u0440\u0435\u0441\u0442\u0438\u043a\u0438-\u043d\u043e\u043b\u0438\u043a\u0438, \u0433\u0434\u0435 X \u043f\u043e\u0431\u0435\u0436\u0434\u0430\u0435\u0442 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0435!</li> <li>\u25b6 \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0428\u0440\u0435\u0434\u0438\u043d\u0433\u0435\u0440\u0430</li> <li>\u25b6 The chicken-egg problem *</li> <li>\u25b6 \u041e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u0432</li> <li>\u25b6 \u041c\u0435\u0442\u043e\u0434\u044b \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430 \u0438 \u0442\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u0430</li> <li>\u25b6 All-true-ation *</li> <li>\u25b6 \u0423\u0434\u0438\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0437\u0430\u043f\u044f\u0442\u0430\u044f</li> <li>\u25b6 \u0421\u0442\u0440\u043e\u043a\u0438 \u0438 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0435 \u0441\u043b\u0435\u0448\u0438</li> <li>\u25b6 not knot!</li> <li>\u25b6 \u0421\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u043e\u0439 \u0442\u0440\u043e\u0439\u043d\u044b\u0445 \u043a\u0430\u0432\u044b\u0447\u0435\u043a</li> <li>\u25b6 What's wrong with booleans?</li> <li>\u25b6 \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430</li> <li>\u25b6 yielding None</li> <li>\u25b6 Yielding \u0438\u0437... \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430! *</li> <li>\u25b6 NaN-\u0440\u0435\u0444\u043b\u0435\u043a\u0441\u0438\u0432\u043d\u043e\u0441\u0442\u044c *</li> <li>\u25b6 \u041c\u0443\u0442\u0430\u0446\u0438\u044f \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u043e\u0433\u043e!</li> <li>\u25b6 \u0418\u0441\u0447\u0435\u0437\u0430\u044e\u0449\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0438\u0437 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438</li> <li>\u25b6 \u0417\u0430\u0433\u0430\u0434\u043e\u0447\u043d\u043e\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 \u043a\u043b\u044e\u0447\u0430</li> <li>\u25b6 \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0438 \u0432\u044b \u0443\u0433\u0430\u0434\u0430\u0442\u044c \u044d\u0442\u043e?</li> <li>\u25b6 Exceeds the limit for integer string conversion</li> </ul> </li> <li>\u0420\u0430\u0437\u0434\u0435\u043b: \u0421\u043a\u043e\u043b\u044c\u0437\u043a\u0438\u0435 \u0441\u043a\u043b\u043e\u043d\u044b<ul> <li>\u25b6 \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043d\u0435\u043c\u0443</li> <li>\u25b6 \u0423\u043f\u0440\u044f\u043c\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f <code>del</code></li> <li>\u25b6 \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0432\u043d\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438</li> <li>\u25b6 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438</li> <li>\u25b6 zip \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0441 \u043f\u043e\u0442\u0435\u0440\u044f\u043c\u0438 *</li> <li>\u25b6 Loop variables leak out!</li> <li>\u25b6 \u041e\u0441\u0442\u0435\u0440\u0435\u0433\u0430\u0439\u0442\u0435\u0441\u044c \u043c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e!</li> <li>\u25b6 Catching the Exceptions</li> <li>\u25b6 Same operands, different story!</li> <li>\u25b6 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d, \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u044e\u0449\u0435\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430</li> <li>\u25b6 \u041e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u043a \u0443 \u0431\u0430\u043d\u043a\u0438\u0440\u0430 *</li> <li>\u25b6 Needles in a Haystack *</li> <li>\u25b6 Splitsies *</li> <li>\u25b6 \u0414\u0438\u043a\u0438\u0439 \u0438\u043c\u043f\u043e\u0440\u0442 *</li> <li>\u25b6 \u0412\u0441\u0435 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e? *</li> <li>\u25b6 \u041f\u043e\u043b\u0443\u043d\u043e\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442?</li> </ul> </li> <li>\u0420\u0430\u0437\u0434\u0435\u043b: \u0421\u043a\u0440\u044b\u0442\u044b\u0435 \u0441\u043e\u043a\u0440\u043e\u0432\u0438\u0449\u0430!<ul> <li>\u25b6 \u041e'\u043a\u0435\u0439 \u041f\u0438\u0442\u043e\u043d, \u0442\u044b \u043c\u043e\u0436\u0435\u0448\u044c \u0437\u0430\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043c\u0435\u043d\u044f \u043b\u0435\u0442\u0430\u0442\u044c?</li> <li>\u25b6 <code>goto</code>, \u043d\u043e \u043f\u043e\u0447\u0435\u043c\u0443?</li> <li>\u25b6 \u0414\u0435\u0440\u0436\u0438\u0442\u0435\u0441\u044c!</li> <li>\u25b6 \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043c\u0441\u044f \u0441 \u0434\u0440\u0443\u0436\u0435\u043b\u044e\u0431\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u0432\u044b\u043c \u0434\u044f\u0434\u0435\u0439 \u043d\u0430 \u0432\u0441\u044e \u0436\u0438\u0437\u043d\u044c</li> <li>\u25b6 \u0414\u0430\u0436\u0435 Python \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442, \u0447\u0442\u043e \u043b\u044e\u0431\u043e\u0432\u044c - \u044d\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u043e</li> <li>\u25b6 \u0414\u0430, \u044d\u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442!</li> <li>\u25b6 \u041c\u043d\u043e\u0433\u043e\u0442\u043e\u0447\u0438\u0435 *</li> <li>\u25b6 Inpinity</li> <li>\u25b6 Let's mangle</li> </ul> </li> <li>\u0420\u0430\u0437\u0434\u0435\u043b: \u0412\u043d\u0435\u0448\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u043c\u0430\u043d\u0447\u0438\u0432\u0430!<ul> <li>\u25b6 \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438?</li> <li>\u25b6 \u0422\u0435\u043b\u0435\u043f\u043e\u0440\u0442\u0430\u0446\u0438\u044f</li> <li>\u25b6 \u041d\u0443, \u0447\u0442\u043e-\u0442\u043e \u0442\u0443\u0442 \u043d\u0435\u0447\u0438\u0441\u0442\u043e...</li> </ul> </li> <li>\u0420\u0430\u0437\u0434\u0435\u043b: \u0420\u0430\u0437\u043d\u043e\u0435<ul> <li>\u25b6 <code>+=</code> \u0431\u044b\u0441\u0442\u0440\u0435\u0435</li> <li>\u25b6 \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u0438\u0433\u0430\u043d\u0442\u0441\u043a\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443!</li> <li>\u25b6 \u0417\u0430\u043c\u0435\u0434\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0438\u0441\u043a\u0430 <code>dict</code> *</li> <li>\u25b6 \u0420\u0430\u0437\u0434\u0443\u0432\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 *</li> <li>\u25b6 Minor Ones *</li> </ul> </li> <li>Contributing</li> <li>\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u043d\u043e\u0441\u0442\u0438</li> <li>\ud83c\udf93 \u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f</li> <li>\u0423\u0434\u0438\u0432\u0438\u0442\u0435 \u0438 \u0441\u0432\u043e\u0438\u0445 \u0434\u0440\u0443\u0437\u0435\u0439!</li> <li>\u0411\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432?</li> </ul>"},{"location":"RU/#_1","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432","text":"<p>\u0412\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u043c\u0435\u044e\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443:</p> <p>\u0412\u0430\u0436\u043d\u043e: \u0412\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0435 Python 3.5.2, \u0438 \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u0435\u0440\u0441\u0438\u0439 Python, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u044f\u0432\u043d\u043e \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u0432\u043e\u0434\u043e\u043c.</p>"},{"location":"RU/#-","title":"\u25b6 \u041a\u0430\u043a\u043e\u0439-\u0442\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a","text":"<pre><code># \u041a\u043e\u0434 \u0441 \u043f\u0440\u0438\u043a\u043e\u043b\u0434\u0435\u0441\u0430\u043c\u0438.\n# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u043c\u0430\u0433\u0438\u0438...\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434 (Python \u0432\u0435\u0440\u0441\u0438\u044f(\u0438)):</p> <p><pre><code>&gt;&gt;&gt; triggering_statement\n\u041d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b\n</code></pre> (\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e): \u041e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442</p>"},{"location":"RU/#_2","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0438 \u043f\u043e\u0447\u0435\u043c\u0443 \u044d\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442. <pre><code># \u041a\u043e\u0434\n# \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0440\u0430\u0437\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u044f (\u0435\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e)\n</code></pre> \u0412\u044b\u0432\u043e\u0434 (Python \u0432\u0435\u0440\u0441\u0438\u044f(\u0438)):</li> </ul> <pre><code>&gt;&gt;&gt; trigger # \u043a\u0430\u043a\u043e\u0439-\u043d\u0438\u0431\u0443\u0434\u044c \u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u043b\u0435\u0433\u043a\u043e \u0440\u0430\u0441\u043a\u0440\u044b\u0442\u044c \u043c\u0430\u0433\u0438\u044e\n# \u043e\u0431\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434\n</code></pre>"},{"location":"RU/#_3","title":"\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0425\u043e\u0440\u043e\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u043b\u044c\u0437\u0443 \u043e\u0442 \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432, \u043d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, - \u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0445 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u043f\u0440\u0438\u0447\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430: - \u0412\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u0432\u044b \u043e\u043f\u044b\u0442\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442 \u043d\u0430 Python, \u0442\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u0443\u0433\u0430\u0434\u0430\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0435\u0442 \u0434\u0430\u043b\u044c\u0448\u0435. - \u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u0432\u044b\u0432\u043e\u0434\u0430 \u0438,   + \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435, \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u043b\u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0432\u0430\u0448\u0438\u043c\u0438 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f\u043c\u0438.   + \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u0442\u043e\u0447\u043d\u0443\u044e \u043f\u0440\u0438\u0447\u0438\u043d\u0443, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0430\u043a\u0438\u043c.     - \u0415\u0441\u043b\u0438 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 (\u0447\u0442\u043e \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e), \u0441\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u0432\u0434\u043e\u0445 \u0438 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435 (\u0430 \u0435\u0441\u043b\u0438 \u0432\u044b \u0432\u0441\u0435 \u0435\u0449\u0435 \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0440\u0438\u043a\u043d\u0438\u0442\u0435! \u0438 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0437\u0434\u0435\u0441\u044c).     - \u0415\u0441\u043b\u0438 \"\u0434\u0430\", \u043f\u043e\u0445\u043b\u043e\u043f\u0430\u0439\u0442\u0435 \u0441\u0435\u0431\u044f \u043f\u043e \u0441\u043f\u0438\u043d\u0435 \u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\u0435 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u043f\u0440\u0438\u043c\u0435\u0440\u0443.</p> <p>PS: \u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0447\u0438\u0442\u0430\u0442\u044c WTFPython \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f pypi package, <pre><code>$ pip install wtfpython -U\n$ wtfpython\n</code></pre></p>"},{"location":"RU/#_4","title":"\ud83d\udc40 \u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":""},{"location":"RU/#_5","title":"\u0421\u0435\u043a\u0446\u0438\u044f: \u041d\u0430\u043f\u0440\u044f\u0433\u0438 \u043c\u043e\u0437\u0433\u0438!","text":""},{"location":"RU/#_6","title":"\u25b6 \u0412\u0430\u0436\u043d\u043e\u0435 \u043e \u0433\u043b\u0430\u0432\u043d\u043e\u043c!","text":"<p>\u041f\u043e \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \"\u043c\u043e\u0440\u0436\u043e\u0432\u044b\u0439 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\"(walrus) (<code>:=</code>) \u0432 Python 3.8 \u0441\u0442\u0430\u043b \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0435\u0433\u043e,</p> <p>1.</p> <pre><code># Python version 3.8+\n\n&gt;&gt;&gt; a = \"wtf_walrus\"\n&gt;&gt;&gt; a\n'wtf_walrus'\n\n&gt;&gt;&gt; a := \"wtf_walrus\"\nFile \"&lt;stdin&gt;\", line 1\n    a := \"wtf_walrus\"\n      ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; (a := \"wtf_walrus\") # This works though\n'wtf_walrus'\n&gt;&gt;&gt; a\n'wtf_walrus'\n</code></pre> <p>2 .</p> <pre><code># Python version 3.8+\n\n&gt;&gt;&gt; a = 6, 9\n&gt;&gt;&gt; a\n(6, 9)\n\n&gt;&gt;&gt; (a := 6, 9)\n(6, 9)\n&gt;&gt;&gt; a\n6\n\n&gt;&gt;&gt; a, b = 6, 9 # Typical unpacking\n&gt;&gt;&gt; a, b\n(6, 9)\n&gt;&gt;&gt; (a, b = 16, 19) # Oops\n  File \"&lt;stdin&gt;\", line 1\n    (a, b = 16, 19)\n          ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; (a, b := 16, 19) # This prints out a weird 3-tuple\n(6, 16, 19)\n\n&gt;&gt;&gt; a # a is still unchanged?\n6\n\n&gt;&gt;&gt; b\n16\n</code></pre>"},{"location":"RU/#_7","title":"\ud83d\udca1 \u041e\u0431\u044c\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0440\u0430\u0437\u0431\u043e\u0440 \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \"\u043c\u043e\u0440\u0436\u043e\u0432\u044b\u0439 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\" (walrus)</p> <p>\"\u041c\u043e\u0440\u0436\u043e\u0432\u044b\u0439 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\" (<code>:=</code>) \u0431\u044b\u043b\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u0430 \u0432 Python 3.8, \u043e\u043d\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u0430 \u0432 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\u0445, \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u0432 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0438.</p> <pre><code>def some_func():\n        # Assume some expensive computation here\n        # time.sleep(1000)\n        return 5\n\n# So instead of,\nif some_func():\n        print(some_func()) # Which is bad practice since computation is happening twice\n\n# or\na = some_func()\nif a:\n    print(a)\n\n# Now you can concisely write\nif a := some_func():\n        print(a)\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434 (&gt; 3.8):</p> <pre><code>5\n5\n5\n</code></pre> <p>\u042d\u0442\u043e \u0441\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043b\u043e \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u043a\u043e\u0434\u0430 \u0438 \u043d\u0435\u044f\u0432\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u043b\u043e \u0432\u044b\u0437\u043e\u0432 <code>some_func</code> \u0434\u0432\u0430\u0436\u0434\u044b.</p> <ul> <li> <p>\u041d\u0435\u043f\u0430\u0440\u0435\u043d\u0442\u0435\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \"\u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f\" (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0440\u0436\u043e\u0432\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430), \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043e \u043d\u0430 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0443\u0440\u043e\u0432\u043d\u0435, \u043e\u0442\u0441\u044e\u0434\u0430 <code>SyntaxError</code> \u0432 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0438 <code>a := \"wtf_walrus\"</code> \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430. \u0420\u0430\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0430\u0440\u0435\u043d\u0442\u0435\u0437 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0430, \u043a\u0430\u043a \u0438 \u043e\u0436\u0438\u0434\u0430\u043b\u043e\u0441\u044c, \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043b\u0430 <code>a</code>.  </p> </li> <li> <p>\u041a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e, \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043a\u043e\u0431\u043a\u0430\u043c\u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>=</code>, \u043d\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f. \u041e\u0442\u0441\u044e\u0434\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u0432 <code>(a, b = 6, 9)</code>. </p> </li> <li> <p>\u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 \u043c\u043e\u0440\u0436\u043e\u0432\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0434 <code>NAME:= expr</code>, \u0433\u0434\u0435 <code>NAME</code> - \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u0430 <code>expr</code> - \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435. \u0421\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0430 \u0438 \u0440\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u043a\u0430 \u0438\u0442\u0435\u0440\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, </p> </li> <li> <p><code>(a := 6, 9)</code> is equivalent to <code>((a := 6), 9)</code> and ultimately <code>(a, 9)</code> (where <code>a</code>'s value is 6')</p> <pre><code>&gt;&gt;&gt; (a := 6, 9) == ((a := 6), 9)\nTrue\n&gt;&gt;&gt; x = (a := 696, 9)\n&gt;&gt;&gt; x\n(696, 9)\n&gt;&gt;&gt; x[0] is a # Both reference same memory location\nTrue\n</code></pre> </li> <li> <p>Similarly, <code>(a, b := 16, 19)</code> is equivalent to <code>(a, (b := 16), 19)</code> which is nothing but a 3-tuple. </p> </li> </ul>"},{"location":"RU/#_8","title":"\u25b6 \u0421\u0442\u0440\u043e\u043a\u0438 \u0438\u043d\u043e\u0433\u0434\u0430 \u0432\u0435\u0434\u0443\u0442 \u0441\u0435\u0431\u044f \u043d\u0435\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u043e","text":"<p>1.</p> <pre><code>&gt;&gt;&gt; a = \"some_string\"\n&gt;&gt;&gt; id(a)\n140420665652016\n&gt;&gt;&gt; id(\"some\" + \"_\" + \"string\") # Notice that both the ids are same.\n140420665652016\n</code></pre> <p>2. <pre><code>&gt;&gt;&gt; a = \"wtf\"\n&gt;&gt;&gt; b = \"wtf\"\n&gt;&gt;&gt; a is b\nTrue\n\n&gt;&gt;&gt; a = \"wtf!\"\n&gt;&gt;&gt; b = \"wtf!\"\n&gt;&gt;&gt; a is b\nFalse\n</code></pre></p> <p>3.</p> <pre><code>&gt;&gt;&gt; a, b = \"wtf!\", \"wtf!\"\n&gt;&gt;&gt; a is b # \u0412\u0441\u0435 \u0432\u0435\u0440\u0441\u0438\u0438, \u043a\u0440\u043e\u043c\u0435 3.7.x\nTrue\n\n&gt;&gt;&gt; a = \"wtf!\"; b = \"wtf!\"\n&gt;&gt;&gt; a is b # \u042d\u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0435\u0442 True \u0438\u043b\u0438 False \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e, \u0433\u0434\u0435 \u0432\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0435 (python shell / ipython / as a script)\nFalse\n</code></pre> <pre><code># This time in file some_file.py\na = \"wtf!\"\nb = \"wtf!\"\nprint(a is b)\n\n# \u0432\u044b\u0432\u043e\u0434\u0438\u0442 True \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u043c\u043e\u0434\u0443\u043b\u044f!\n</code></pre> <p>4.</p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (&lt; Python3.7 )</p> <pre><code>&gt;&gt;&gt; 'a' * 20 is 'aaaaaaaaaaaaaaaaaaaa'\nTrue\n&gt;&gt;&gt; 'a' * 21 is 'aaaaaaaaaaaaaaaaaaaaa'\nFalse\n</code></pre> <p>\u041b\u043e\u0433\u0438\u0447\u043d\u043e, \u043f\u0440\u0430\u0432\u0434\u0430?</p>"},{"location":"RU/#_9","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>\u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0438 \u0432\u0442\u043e\u0440\u043e\u043c \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430\u0445 \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0435\u0439 CPython (\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0442\u0440\u043e\u043a), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0432\u043c\u0435\u0441\u0442\u043e \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442.</li> <li>\u041f\u043e\u0441\u043b\u0435 \"\u0438\u043d\u0442\u0435\u0440\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" \u043c\u043d\u043e\u0433\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0441\u0441\u044b\u043b\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 (\u0442\u0435\u043c \u0441\u0430\u043c\u044b\u043c \u044d\u043a\u043e\u043d\u043e\u043c\u044f \u043f\u0430\u043c\u044f\u0442\u044c).</li> <li>\u0412 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0432\u044b\u0448\u0435 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430\u0445 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435\u044f\u0432\u043d\u043e \u0438\u043d\u0442\u0435\u0440\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u044b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c, \u043a\u043e\u0433\u0434\u0430 \u043d\u0435\u044f\u0432\u043d\u043e \u0438\u043d\u0442\u0435\u0440\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443, \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0431\u0443\u0434\u0435\u0442 \u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043d\u0442\u0435\u0440\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0438\u043b\u0438 \u043d\u0435\u0442:</li> <li>\u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043b\u0438\u043d\u044b 0 \u0438 \u0434\u043b\u0438\u043d\u044b 1 \u0438\u043d\u0442\u0435\u0440\u043d\u0438\u0440\u0443\u044e\u0442\u0441\u044f.</li> <li>\u0421\u0442\u0440\u043e\u043a\u0438 \u0438\u043d\u0442\u0435\u0440\u043d\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 (<code>'wtf'' \u0431\u0443\u0434\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0430, \u043d\u043e</code>''.join(['w'', 't'', 'f'])` \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0430)</li> <li>\u0421\u0442\u0440\u043e\u043a\u0438, \u043d\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u0437 \u0431\u0443\u043a\u0432 ASCII, \u0446\u0438\u0444\u0440 \u0438\u043b\u0438 \u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u044f, \u043d\u0435 \u0438\u043d\u0442\u0435\u0440\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e\u0442\u0441\u044f. \u042d\u0442\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442, \u043f\u043e\u0447\u0435\u043c\u0443 <code>'wtf!'</code> \u043d\u0435 \u0438\u043d\u0442\u0435\u0440\u043d\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0438\u0437-\u0437\u0430 <code>!</code>. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0432 CPython \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0437\u0434\u0435\u0441\u044c </li> <li>\u041a\u043e\u0433\u0434\u0430 <code>a</code> \u0438 <code>b</code> \u0438\u043c\u0435\u044e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>\"wtf!\"</code> \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440 Python \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u0430 \u0437\u0430\u0442\u0435\u043c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0432\u0442\u043e\u0440\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e. \u0415\u0441\u043b\u0438 \u0432\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u044d\u0442\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445, \u043e\u043d \u043d\u0435 \"\u0437\u043d\u0430\u0435\u0442\", \u0447\u0442\u043e \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 <code>\"wtf!\"</code> \u043a\u0430\u043a \u043e\u0431\u044a\u0435\u043a\u0442 (\u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e <code>\"wtf!\"</code> \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u044f\u0432\u043d\u043e \u0438\u043d\u0442\u0435\u0440\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0444\u0430\u043a\u0442\u0430\u043c\u0438, \u0443\u043f\u043e\u043c\u044f\u043d\u0443\u0442\u044b\u043c\u0438 \u0432\u044b\u0448\u0435). \u042d\u0442\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438. \u042d\u0442\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a \u0432\u0435\u0440\u0441\u0438\u044f\u043c CPython 3.7.x (\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435 \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0437\u0434\u0435\u0441\u044c issue).</li> <li>\u0415\u0434\u0438\u043d\u0438\u0446\u0430 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u0435, \u0442\u0430\u043a\u043e\u0439 \u043a\u0430\u043a IPython, \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u043e\u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0432\u0441\u0435\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f. <code>a, b = \"wtf!\", \"wtf!\"</code> - \u044d\u0442\u043e \u043e\u0434\u043d\u043e \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a <code>a = \"wtf!\"; b = \"wtf!\"</code> - \u044d\u0442\u043e \u0434\u0432\u0430 \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u042d\u0442\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442, \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b \u0432 <code>a = \"wtf!\"; b = \"wtf!\"</code>, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442, \u043f\u043e\u0447\u0435\u043c\u0443 \u043e\u043d\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0432 <code>some_file.py</code>.</li> <li>\u0420\u0435\u0437\u043a\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u0432\u044b\u0432\u043e\u0434\u0435 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0433\u043e \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 peephole optimization \u0442\u0435\u0445\u043d\u0438\u043a\u043e\u0439, \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u0439 \u043a\u0430\u043a Constant folding. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 <code>'a'*20</code> \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 <code>'aaaaaaaaaaaaaaaaaaaa'</code> \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438, \u0447\u0442\u043e\u0431\u044b \u0441\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043a\u0442\u043e\u0432 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0421\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0441\u0442\u0440\u043e\u043a \u0434\u043b\u0438\u043d\u043e\u0439 \u043c\u0435\u043d\u0435\u0435 21. (\u041f\u043e\u0447\u0435\u043c\u0443? \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u0441\u0435\u0431\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 <code>.pyc</code>, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f <code>'a'*10**10</code>). \u0412\u043e\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e.</li> <li>\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0412 Python 3.7 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0431\u044b\u043b\u043e \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0435\u043d\u043e \u0438\u0437 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0430 peephole \u0432 \u043d\u043e\u0432\u044b\u0439 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440 AST \u0441 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u0432 \u043b\u043e\u0433\u0438\u043a\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 Python 3.7. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c. </li> </ul>"},{"location":"RU/#be-careful-with-chained-operations","title":"\u25b6 Be careful with chained operations","text":"<pre><code>&gt;&gt;&gt; (False == False) in [False] # makes sense\nFalse\n&gt;&gt;&gt; False == (False in [False]) # makes sense\nFalse\n&gt;&gt;&gt; False == False in [False] # now what?\nTrue\n\n&gt;&gt;&gt; True is False == False\nFalse\n&gt;&gt;&gt; False is False is False\nTrue\n\n&gt;&gt;&gt; 1 &gt; 0 &lt; 1\nTrue\n&gt;&gt;&gt; (1 &gt; 0) &lt; 1\nFalse\n&gt;&gt;&gt; 1 &gt; (0 &lt; 1)\nFalse\n</code></pre>"},{"location":"RU/#_10","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<p>As per https://docs.python.org/3/reference/expressions.html#comparisons</p> <p>\u0424\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e, \u0435\u0441\u043b\u0438 a, b, c, ..., y, z - \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0430 op1, op2, ..., opN - \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f, \u0442\u043e a op1 b op2 c ... y opN z \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e a op1 b \u0438 b op2 c \u0438 ... y opN z, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043a\u0430\u0436\u0434\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430.</p> <p>\u0425\u043e\u0442\u044f \u0442\u0430\u043a\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u0432\u0430\u043c \u0433\u043b\u0443\u043f\u044b\u043c \u0432 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0432\u044b\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445, \u043e\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0444\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u0434\u043b\u044f \u0442\u0430\u043a\u0438\u0445 \u0432\u0435\u0449\u0435\u0439, \u043a\u0430\u043a <code>a == b == c</code> \u0438 <code>0 &lt;= x &lt;= 100</code>.</p> <ul> <li><code>False is False is False</code> \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e <code>(False is False) \u0438 (False is False)</code>.</li> <li><code>True is False == False</code> \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e <code>(True is False) and (False == False)</code> \u0438 \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u0435\u0440\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0432\u044b\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u043d\u0438\u044f (<code>True is False``) \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432</code>False<code>, \u0442\u043e \u0432\u0441\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 `False</code>.</li> <li><code>1 &gt; 0 &lt; 1</code> \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e <code>(1 &gt; 0) \u0438 (0 &lt; 1)</code>, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 <code>True</code>.</li> <li>\u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 <code>(1 &gt; 0) &lt; 1</code> \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e <code>True &lt; 1</code> \u0438   <pre><code>&gt;&gt;&gt; int(True)\n1\n&gt;&gt;&gt; True + 1 # \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430, \u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0430\n2\n</code></pre>   \u0412 \u0438\u0442\u043e\u0433\u0435, <code>1 &lt; 1</code> \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0438 \u0434\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 <code>False</code></li> </ul>"},{"location":"RU/#is","title":"\u25b6 \u041a\u0430\u043a \u043d\u0435 \u043d\u0430\u0434\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>is</code>","text":"<p>\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u043e\u0447\u0435\u043d\u044c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0432\u043e \u0432\u0441\u0435\u043c \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0435.</p> <p>1.</p> <pre><code>&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; a is b\nTrue\n\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; a is b\nFalse\n</code></pre> <p>2.</p> <pre><code>&gt;&gt;&gt; a = []\n&gt;&gt;&gt; b = []\n&gt;&gt;&gt; a is b\nFalse\n\n&gt;&gt;&gt; a = tuple()\n&gt;&gt;&gt; b = tuple()\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <p>3. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434 (Python 3.7.x specifically)</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; a is b\nFalse\n</code></pre>"},{"location":"RU/#_11","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<p>\u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 <code>is</code> \u0438 <code>==</code>.</p> <ul> <li>\u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>is</code> \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u043b\u0438 \u043e\u0431\u0430 \u043e\u043f\u0435\u0440\u0430\u043d\u0434\u0430 \u043d\u0430 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u043e\u0431\u044a\u0435\u043a\u0442 (\u0442.\u0435. \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u043b\u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043e\u043f\u0435\u0440\u0430\u043d\u0434\u043e\u0432 \u0438\u043b\u0438 \u043d\u0435\u0442).</li> <li>\u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>==</code> \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0431\u043e\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u043d\u0434\u043e\u0432 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b \u043b\u0438 \u043e\u043d\u0438.</li> <li>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>is</code> \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430 \u0441\u0441\u044b\u043b\u043e\u043a, \u0430 <code>==</code> - \u0434\u043b\u044f \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u041f\u0440\u0438\u043c\u0435\u0440, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u044f\u0441\u043d\u0438\u0442\u044c \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e,   <pre><code>&gt;&gt;&gt; class A: pass\n&gt;&gt;&gt; A() is A() # These are two empty objects at two different memory locations.\nFalse\n</code></pre></li> </ul> <p><code>256</code> - \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u0430 <code>257</code> - \u043d\u0435\u0442.</p> <p>\u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 python \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u044b \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 <code>-5</code> \u0434\u043e <code>256</code>. \u042d\u0442\u0438 \u0447\u0438\u0441\u043b\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u043c\u0435\u0442\u044c \u0438\u0445 \u043d\u0430\u0433\u043e\u0442\u043e\u0432\u0435.</p> <p>\u0426\u0438\u0442\u0438\u0440\u0443\u044e \u043f\u043e https://docs.python.org/3/c-api/long.html</p> <p>\u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0445\u0440\u0430\u043d\u0438\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 -5 \u0434\u043e 256, \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0435 int \u0432 \u044d\u0442\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435, \u0432\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 1. \u042f \u043f\u043e\u0434\u043e\u0437\u0440\u0435\u0432\u0430\u044e, \u0447\u0442\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 Python \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e. :-)</p> <pre><code>&gt;&gt;&gt; id(256)\n10922528\n&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; id(a)\n10922528\n&gt;&gt;&gt; id(b)\n10922528\n&gt;&gt;&gt; id(257)\n140084850247312\n&gt;&gt;&gt; x = 257\n&gt;&gt;&gt; y = 257\n&gt;&gt;&gt; id(x)\n140084850247440\n&gt;&gt;&gt; id(y)\n140084850247344\n</code></pre> <p>\u0417\u0434\u0435\u0441\u044c \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0443 \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u043c\u043e\u0437\u0433\u043e\u0432 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 <code>y = 257</code> \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u043c\u044b \u0443\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c <code>257,</code> \u0438 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438.</p> <p>\u041f\u043e\u0434\u043e\u0431\u043d\u0430\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u0430 \u0438 \u043a \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c, \u0442\u0430\u043a\u0438\u043c \u043a\u0430\u043a \u043f\u0443\u0441\u0442\u044b\u0435 \u043a\u043e\u0440\u0442\u0435\u0436\u0438. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0441\u043f\u0438\u0441\u043a\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u043c\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 <code>[] is []</code> \u0432\u0435\u0440\u043d\u0435\u0442 <code>False</code>, \u0430 <code>() is ()</code> \u0432\u0435\u0440\u043d\u0435\u0442 <code>True</code>. \u042d\u0442\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442 \u043d\u0430\u0448 \u0432\u0442\u043e\u0440\u043e\u0439 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442. \u041f\u0435\u0440\u0435\u0439\u0434\u0435\u043c \u043a \u0442\u0440\u0435\u0442\u044c\u0435\u043c\u0443, </p> <p>*\u0418 <code>a</code>, \u0438 <code>b</code> \u0441\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c \u0436\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0432 \u043e\u0434\u043d\u043e\u0439 \u0438 \u0442\u043e\u0439 \u0436\u0435 \u0441\u0442\u0440\u043e\u043a\u0435.</p> <p>\u0412\u044b\u0432\u043e\u0434</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; id(a)\n140640774013296\n&gt;&gt;&gt; id(b)\n140640774013296\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; id(a)\n140640774013392\n&gt;&gt;&gt; id(b)\n140640774013488\n</code></pre> <ul> <li> <p>\u041a\u043e\u0433\u0434\u0430 a \u0438 b \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432 <code>257</code> \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440 Python \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u0430 \u0437\u0430\u0442\u0435\u043c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0432\u0442\u043e\u0440\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e. \u0415\u0441\u043b\u0438 \u0432\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u044d\u0442\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445, \u043e\u043d \u043d\u0435 \"\u0437\u043d\u0430\u0435\u0442\", \u0447\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442 <code>257</code> \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.</p> </li> <li> <p>\u042d\u0442\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440\u0430 \u0438 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u0435. \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0432\u0432\u043e\u0434\u0438\u0442\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0436\u0438\u0432\u043e\u043c \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0435, \u043e\u043d\u0438 \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u0431\u044b \u0432\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0438 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432 \u0444\u0430\u0439\u043b\u0435 `.py', \u0432\u044b \u0431\u044b \u043d\u0435 \u0443\u0432\u0438\u0434\u0435\u043b\u0438 \u0442\u0430\u043a\u043e\u0433\u043e \u0436\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0444\u0430\u0439\u043b \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432\u0435\u0441\u044c \u0441\u0440\u0430\u0437\u0443. \u042d\u0442\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0446\u0435\u043b\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u043e\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0438 (\u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u0440 \"\u0421\u0442\u0440\u043e\u043a\u0438 - \u044d\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u043e\") \u0438 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0438\u0435 \u0447\u0438\u0441\u043b\u0430,</p> </li> </ul> <pre><code>&gt;&gt;&gt; a, b = 257.0, 257.0\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <ul> <li>\u041f\u043e\u0447\u0435\u043c\u0443 \u044d\u0442\u043e \u043d\u0435 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e \u0432 Python 3.7? \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u0430\u044f \u043f\u0440\u0438\u0447\u0438\u043d\u0430 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0442\u0430\u043a\u0438\u0435 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440\u0430 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 (\u0442.\u0435. \u043c\u043e\u0433\u0443\u0442 \u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u0435\u0440\u0441\u0438\u0438, \u041e\u0421 \u0438 \u0442.\u0434.). \u042f \u0432\u0441\u0435 \u0435\u0449\u0435 \u0432\u044b\u044f\u0441\u043d\u044f\u044e, \u043a\u0430\u043a\u043e\u0435 \u0438\u043c\u0435\u043d\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u044b\u0437\u0432\u0430\u043b\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u044d\u0442\u043e\u0442 issue \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439.</li> </ul>"},{"location":"RU/#hash-brownies","title":"\u25b6 Hash brownies","text":"<p>1. <pre><code>some_dict = {}\nsome_dict[5.5] = \"JavaScript\"\nsome_dict[5.0] = \"Ruby\"\nsome_dict[5] = \"Python\"\n</code></pre></p> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>&gt;&gt;&gt; some_dict[5.5]\n\"JavaScript\"\n&gt;&gt;&gt; some_dict[5.0] # \"Python\" destroyed the existence of \"Ruby\"?\n\"Python\"\n&gt;&gt;&gt; some_dict[5] \n\"Python\"\n\n&gt;&gt;&gt; complex_five = 5 + 0j\n&gt;&gt;&gt; type(complex_five)\ncomplex\n&gt;&gt;&gt; some_dict[complex_five]\n\"Python\"\n</code></pre> <p>\u0422\u0430\u043a \u043f\u043e\u0447\u0435\u043c\u0443 \u0436\u0435 Python \u043f\u043e\u0432\u0441\u044e\u0434\u0443?</p>"},{"location":"RU/#_12","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435.","text":"<ul> <li>\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u044e\u0447\u0435\u0439 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 Python \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c\u044e, \u0430 \u043d\u0435 \u0442\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u043e\u043c. \u041f\u043e\u044d\u0442\u043e\u043c\u0443, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 <code>5</code>, <code>5.0</code> \u0438 <code>5 + 0j</code> \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u043d\u0438 \u0440\u0430\u0432\u043d\u044b, \u043e\u043d\u0438 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 <code>\u0434\u0438\u043a\u0442\u0435</code> (\u0438\u043b\u0438 <code>\u043d\u0430\u0431\u043e\u0440\u0435</code>). \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u044b \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u0435 \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u043d\u0438\u0445, \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u043b\u044e\u0431\u043e\u043c\u0443 \u0434\u0440\u0443\u0433\u043e\u043c\u0443, \u043d\u043e \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443 \u0431\u0443\u0434\u0435\u0442 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c (\u0430 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u043e\u0448\u0438\u0431\u043a\u043e\u0439 <code>KeyError</code>):   <pre><code>&gt;&gt;&gt; 5 == 5.0 == 5 + 0j\nTrue\n&gt;&gt;&gt; 5 is not 5.0 is not 5 + 0j\nTrue\n&gt;&gt;&gt; some_dict = {}\n&gt;&gt;&gt; some_dict[5.0] = \"Ruby\"\n&gt;&gt;&gt; 5.0 in some_dict\nTrue\n&gt;&gt;&gt; (5 in some_dict) and (5 + 0j in some_dict)\nTrue\n</code></pre></li> <li>\u042d\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u043e \u0438 \u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u041f\u043e\u044d\u0442\u043e\u043c\u0443, \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 <code>some_dict[5] = \"Python\"</code>, Python \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u044b\u043c \u043a\u043b\u044e\u0447\u043e\u043c <code>5.0 -&gt; \"Ruby\"</code>, \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043c\u0435\u0441\u0442\u043e, \u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432 \u043f\u043e\u043a\u043e\u0435.   <pre><code>&gt;&gt;&gt; some_dict\n{5.0: 'Ruby'}\n&gt;&gt;&gt; some_dict[5] = \"Python\"\n&gt;&gt;&gt; some_dict\n{5.0: 'Python'}\n</code></pre></li> <li> <p>\u0418\u0442\u0430\u043a, \u043a\u0430\u043a \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043b\u044e\u0447 \u0434\u043e <code>5</code> (\u0432\u043c\u0435\u0441\u0442\u043e <code>5.0</code>)? \u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043c\u0435\u0441\u0442\u0435, \u043d\u043e \u0447\u0442\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0442\u0430\u043a \u044d\u0442\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043b\u044e\u0447 (<code>del some_dict[5.0]</code>), \u0430 \u0437\u0430\u0442\u0435\u043c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0435\u0433\u043e (<code>some_dict[5]</code>), \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e <code>5</code> \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u044e\u0447\u0430 \u0432\u043c\u0435\u0441\u0442\u043e \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0433\u043e <code>5.0</code>, \u0445\u043e\u0442\u044f \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0432 \u0440\u0435\u0434\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445.</p> </li> <li> <p>\u041a\u0430\u043a Python \u043d\u0430\u0448\u0435\u043b <code>5</code> \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u043c <code>5.0</code>? Python \u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u043e \u0437\u0430 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0445\u044d\u0448-\u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u041a\u043e\u0433\u0434\u0430 Python \u0438\u0449\u0435\u0442 \u043a\u043b\u044e\u0447 <code>foo</code> \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435, \u043e\u043d \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 <code>hash(foo)</code> (\u0447\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438). \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 Python \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e, \u0438\u043c\u0435\u043b\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0445\u044d\u0448-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 (docs \u0437\u0434\u0435\u0441\u044c), <code>5</code>, <code>5.0</code> \u0438 <code>5 + 0j</code> \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0445\u044d\u0448-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.   <pre><code>&gt;&gt;&gt; 5 == 5.0 == 5 + 0j\nTrue\n&gt;&gt;&gt; hash(5) == hash(5.0) == hash(5 + 0j)\nTrue\n</code></pre> \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u041e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0435\u0440\u043d\u043e: \u041e\u0431\u044a\u0435\u043a\u0442\u044b \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u0445\u044d\u0448-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0441\u0430\u043c\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0440\u0430\u0432\u043d\u044b\u043c\u0438. (\u042d\u0442\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u0443\u044e \u0445\u044d\u0448-\u043a\u043e\u043b\u043b\u0438\u0437\u0438\u044e \u0438 \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043e\u0431\u044b\u0447\u043d\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435).</p> </li> </ul>"},{"location":"RU/#_13","title":"\u25b6 \u0412 \u0433\u043b\u0443\u0431\u0438\u043d\u0435 \u0434\u0443\u0448\u0438 \u043c\u044b \u0432\u0441\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b.","text":"<pre><code>class WTF:\n  pass\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434: <pre><code>&gt;&gt;&gt; WTF() == WTF() # two different instances can't be equal\nFalse\n&gt;&gt;&gt; WTF() is WTF() # identities are also different\nFalse\n&gt;&gt;&gt; hash(WTF()) == hash(WTF()) # hashes _should_ be different as well\nTrue\n&gt;&gt;&gt; id(WTF()) == id(WTF())\nTrue\n</code></pre></p>"},{"location":"RU/#_14","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>\u041f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 <code>id</code> Python \u0441\u043e\u0437\u0434\u0430\u043b \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 <code>WTF</code> \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043b \u0435\u0433\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>id</code>. \u0424\u0443\u043d\u043a\u0446\u0438\u044f <code>id</code> \u0437\u0430\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u0432\u043e\u0439 <code>id</code> (\u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438) \u0438 \u0432\u044b\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442. \u041e\u0431\u044a\u0435\u043a\u0442 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0430\u0435\u0442\u0441\u044f.</li> <li>\u041a\u043e\u0433\u0434\u0430 \u043c\u044b \u0434\u0435\u043b\u0430\u0435\u043c \u044d\u0442\u043e \u0434\u0432\u0430\u0436\u0434\u044b \u043f\u043e\u0434\u0440\u044f\u0434, Python \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u0442 \u0442\u0443 \u0436\u0435 \u0441\u0430\u043c\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 (\u0432 CPython) <code>id</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0443\u0447\u0430\u0441\u0442\u043e\u043a \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0434\u0432\u0443\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432.</li> <li>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, id \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0436\u0438\u0437\u043d\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041f\u043e\u0441\u043b\u0435 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438\u043b\u0438 \u0434\u043e \u0435\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u0447\u0442\u043e-\u0442\u043e \u0434\u0440\u0443\u0433\u043e\u0435 \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0442\u0430\u043a\u043e\u0439 \u0436\u0435 id.</li> <li>\u041d\u043e \u043f\u043e\u0447\u0435\u043c\u0443 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>is</code> \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>False</code>? \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u044d\u0442\u043e\u0433\u043e \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430.   <pre><code>class WTF(object):\n  def __init__(self): print(\"I\")\n  def __del__(self): print(\"D\")\n</code></pre></li> </ul> <p>\u0412\u044b\u0432\u043e\u0434: <pre><code>&gt;&gt;&gt; WTF() is WTF()\nI\nI\nD\nD\nFalse\n&gt;&gt;&gt; id(WTF()) == id(WTF())\nI\nD\nI\nD\nTrue\n</code></pre>   \u041a\u0430\u043a \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u043f\u043e\u0440\u044f\u0434\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0430\u044e\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</p>"},{"location":"RU/#_15","title":"\u25b6 \u041d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u0435 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 *","text":"<pre><code>from collections import OrderedDict\n\ndictionary = dict()\ndictionary[1] = 'a'; dictionary[2] = 'b';\n\nordered_dict = OrderedDict()\nordered_dict[1] = 'a'; ordered_dict[2] = 'b';\n\nanother_ordered_dict = OrderedDict()\nanother_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';\n\nclass DictWithHash(dict):\n    \"\"\"\n    A dict that also implements __hash__ magic.\n    \"\"\"\n    __hash__ = lambda self: 0\n\nclass OrderedDictWithHash(OrderedDict):\n    \"\"\"\n    An OrderedDict that also implements __hash__ magic.\n    \"\"\"\n    __hash__ = lambda self: 0\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434 <pre><code>&gt;&gt;&gt; dictionary == ordered_dict # If a == b\nTrue\n&gt;&gt;&gt; dictionary == another_ordered_dict # and b == c\nTrue\n&gt;&gt;&gt; ordered_dict == another_ordered_dict # then why isn't c == a ??\nFalse\n\n# \u041c\u044b \u0432\u0441\u0435 \u0437\u043d\u0430\u0435\u043c, \u0447\u0442\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432,\n# \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0438\u0437 \u044d\u0442\u0438\u0445 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f...\n\n&gt;&gt;&gt; len({dictionary, ordered_dict, another_ordered_dict})\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'dict'\n\n# \u0418\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e __hash__, \u043d\u0443 \u0447\u0442\u043e\u0436 \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\n# \u043d\u0430\u0448\u0438 \u043a\u043b\u0430\u0441\u0441\u044b-\u043e\u0431\u0435\u0440\u0442\u043a\u0438.\n&gt;&gt;&gt; dictionary = DictWithHash()\n&gt;&gt;&gt; dictionary[1] = 'a'; dictionary[2] = 'b';\n&gt;&gt;&gt; ordered_dict = OrderedDictWithHash()\n&gt;&gt;&gt; ordered_dict[1] = 'a'; ordered_dict[2] = 'b';\n&gt;&gt;&gt; another_ordered_dict = OrderedDictWithHash()\n&gt;&gt;&gt; another_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';\n&gt;&gt;&gt; len({dictionary, ordered_dict, another_ordered_dict})\n1\n&gt;&gt;&gt; len({ordered_dict, another_ordered_dict, dictionary}) # changing the order\n2\n</code></pre></p> <p>\u0427\u0442\u043e \u0437\u0434\u0435\u0441\u044c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442?</p>"},{"location":"RU/#_16","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li> <p>\u041f\u0440\u0438\u0447\u0438\u043d\u0430, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u0438\u0432\u043d\u043e\u0435 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e \u043c\u0435\u0436\u0434\u0443 <code>dictionary</code>, <code>ordered_dict</code> \u0438 <code>another_ordered_dict</code>, \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u043a\u0430\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043c\u0435\u0442\u043e\u0434 <code>__eq__</code> \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 <code>OrderedDict</code>. \u0418\u0437 docs</p> <p>\u0422\u0435\u0441\u0442\u044b \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430 \u043c\u0435\u0436\u0434\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 OrderedDict \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b \u043a \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043a\u0430\u043a <code>list(od1.items())==list(od2.items())</code>. \u0422\u0435\u0441\u0442\u044b \u043d\u0430 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e \u043c\u0435\u0436\u0434\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 <code>OrderedDict</code> \u0438 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 Mapping \u043d\u0435\u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b \u043a \u043f\u043e\u0440\u044f\u0434\u043a\u0443, \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u0438. - \u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b <code>OrderedDict</code> \u0432\u0435\u0437\u0434\u0435, \u0433\u0434\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c. - \u0418\u0442\u0430\u043a, \u043f\u043e\u0447\u0435\u043c\u0443 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0434\u043b\u0438\u043d\u0443 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>set</code>? \u041e\u0442\u0432\u0435\u0442 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u0438\u043d\u0442\u0440\u0430\u043d\u0437\u0438\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \"\u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u043c\u0438\" \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u043c\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041d\u043e \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u043d \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c\u0441\u044f \u0432 \u044d\u0442\u043e\u043c, <pre><code>&gt;&gt;&gt; some_set = set()\n&gt;&gt;&gt; some_set.add(dictionary) # these are the mapping objects from the snippets above\n&gt;&gt;&gt; ordered_dict in some_set\nTrue\n&gt;&gt;&gt; some_set.add(ordered_dict)\n&gt;&gt;&gt; len(some_set)\n1\n&gt;&gt;&gt; another_ordered_dict in some_set\nTrue\n&gt;&gt;&gt; some_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(some_set)\n1\n\n&gt;&gt;&gt; another_set = set()\n&gt;&gt;&gt; another_set.add(ordered_dict)\n&gt;&gt;&gt; another_ordered_dict in another_set\nFalse\n&gt;&gt;&gt; another_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(another_set)\n2\n&gt;&gt;&gt; dictionary in another_set\nTrue\n&gt;&gt;&gt; another_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(another_set)\n2\n</code></pre> \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043d\u0435\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e <code>another_ordered_dict \u0432 another_set</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f <code>False</code>, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e <code>ordered_dict</code> \u0443\u0436\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0432 <code>another_set</code> \u0438, \u043a\u0430\u043a \u0431\u044b\u043b\u043e \u0437\u0430\u043c\u0435\u0447\u0435\u043d\u043e \u0440\u0430\u043d\u0435\u0435, <code>ordered_dict == another_ordered_dict</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f <code>False</code>.</p> </li> </ul>"},{"location":"RU/#keep-trying","title":"\u25b6 Keep trying... *","text":"<pre><code>def some_func():\n    try:\n        return 'from_try'\n    finally:\n        return 'from_finally'\n\ndef another_func(): \n    for _ in range(3):\n        try:\n            continue\n        finally:\n            print(\"Finally!\")\n\ndef one_more_func(): # A gotcha!\n    try:\n        for i in range(3):\n            try:\n                1 / i\n            except ZeroDivisionError:\n                # Let's throw it here and handle it outside for loop\n                raise ZeroDivisionError(\"A trivial divide by zero error\")\n            finally:\n                print(\"Iteration\", i)\n                break\n    except ZeroDivisionError as e:\n        print(\"Zero division error occurred\", e)\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <pre><code>&gt;&gt;&gt; some_func()\n'from_finally'\n\n&gt;&gt;&gt; another_func()\nFinally!\nFinally!\nFinally!\n\n&gt;&gt;&gt; 1 / 0\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero\n\n&gt;&gt;&gt; one_more_func()\nIteration 0\n</code></pre>"},{"location":"RU/#_17","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>\u041a\u043e\u0433\u0434\u0430 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>return</code>, <code>break</code> \u0438\u043b\u0438 <code>continue</code> \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 <code>try</code> \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \"try...finally\", \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0443\u043d\u043a\u0442 <code>finally</code>.</li> <li>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u043c <code>return</code>. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 <code>finally</code> \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0441\u0435\u0433\u0434\u0430, \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>return</code>, \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0439 \u0432 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0438 <code>finally</code>, \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c.</li> <li>\u041e\u0433\u043e\u0432\u043e\u0440\u043a\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0432 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0438 finally \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>return</code> \u0438\u043b\u0438 <code>break</code>, \u0442\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u043e\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f.</li> </ul>"},{"location":"RU/#_18","title":"\u25b6 \u0414\u043b\u044f \u0447\u0435\u0433\u043e?","text":"<pre><code>some_string = \"wtf\"\nsome_dict = {}\nfor i, some_dict[i] in enumerate(some_string):\n    i = 10\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434: <pre><code>&gt;&gt;&gt; some_dict # An indexed dict appears.\n{0: 'w', 1: 't', 2: 'f'}\n</code></pre></p>"},{"location":"RU/#_19","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>\u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>for</code> \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0433\u0440\u0430\u043c\u043c\u0430\u0442\u0438\u043a\u0435 Python \u043a\u0430\u043a:   <pre><code>for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]\n</code></pre>   \u0413\u0434\u0435 <code>exprlist</code> - \u0446\u0435\u043b\u044c \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442 <code>{exprlist} = {next_value}</code> \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u0438\u0442\u0435\u0440\u0430\u0431\u043b\u0435.   \u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440, \u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u044d\u0442\u043e:   <pre><code>for i in range(4):\n    print(i)\n    i = 10\n</code></pre></li> </ul> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>0\n1\n2\n3\n</code></pre></p> <p>\u041e\u0436\u0438\u0434\u0430\u043b\u0438 \u043b\u0438 \u0432\u044b, \u0447\u0442\u043e \u0446\u0438\u043a\u043b \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437?</p> <p>\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:.</p> <ul> <li> <p>\u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f <code>i = 10</code> \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u0446\u0438\u043a\u043b\u0430 \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0446\u0438\u043a\u043b\u044b for \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432 Python. \u041f\u0435\u0440\u0435\u0434 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0439 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u043c (\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 <code>range(4)</code>), \u0440\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 (\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 <code>i</code>).</p> </li> <li> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f <code>enumerate(some_string)</code> \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u044b\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>i</code> (\u0441\u0447\u0435\u0442\u0447\u0438\u043a, \u0438\u0434\u0443\u0449\u0438\u0439 \u0432\u0432\u0435\u0440\u0445) \u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u0438\u0437 <code>some_string</code>. \u0417\u0430\u0442\u0435\u043c \u043e\u043d\u0430 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 (\u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u043d\u044b\u0439) \u043a\u043b\u044e\u0447 <code>i</code> \u0441\u043b\u043e\u0432\u0430\u0440\u044f <code>some_dict</code> \u043d\u0430 \u044d\u0442\u043e\u0442 \u0441\u0438\u043c\u0432\u043e\u043b. \u0420\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0446\u0438\u043a\u043b\u0430 \u043c\u043e\u0436\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:   <pre><code>&gt;&gt;&gt; i, some_dict[i] = (0, 'w')\n&gt;&gt;&gt; i, some_dict[i] = (1, 't')\n&gt;&gt;&gt; i, some_dict[i] = (2, 'f')\n&gt;&gt;&gt; some_dict\n</code></pre></p> </li> </ul>"},{"location":"RU/#_20","title":"\u25b6 \u041d\u0435\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0446\u0435\u043d\u043a\u0438","text":"<p>1. <pre><code>array = [1, 8, 15]\n# A typical generator expression\ngen = (x for x in array if array.count(x) &gt; 0)\narray = [2, 8, 22]\n</code></pre></p> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>&gt;&gt;&gt; print(list(gen)) # Where did the other values go?\n[8]\n</code></pre> <p>2.</p> <pre><code>array_1 = [1,2,3,4]\ngen_1 = (x for x in array_1)\narray_1 = [1,2,3,4,5]\n\narray_2 = [1,2,3,4]\ngen_2 = (x for x in array_2)\narray_2[:] = [1,2,3,4,5]\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434: <pre><code>&gt;&gt;&gt; print(list(gen_1))\n[1, 2, 3, 4]\n\n&gt;&gt;&gt; print(list(gen_2))\n[1, 2, 3, 4, 5]\n</code></pre></p> <p>3.</p> <pre><code>array_3 = [1, 2, 3]\narray_4 = [10, 20, 30]\ngen = (i + j for i in array_3 for j in array_4)\n\narray_3 = [4, 5, 6]\narray_4 = [400, 500, 600]\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434: <pre><code>&gt;&gt;&gt; print(list(gen))\n[401, 501, 601, 402, 502, 602, 403, 503, 603]\n</code></pre></p>"},{"location":"RU/#_21","title":"\ud83d\udca1 \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<ul> <li>\u0412 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0438 generator \u0443\u0441\u043b\u043e\u0432\u0438\u0435 <code>in</code> \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f, \u043d\u043e \u0443\u0441\u043b\u043e\u0432\u043d\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</li> <li>\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c <code>array</code> \u043f\u0435\u0440\u0435\u043d\u0430\u0437\u043d\u0430\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a <code>[2, 8, 22]</code>, \u0430 \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0438\u0437 <code>1</code>, <code>8</code> \u0438 <code>15</code> \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0447\u0435\u0442\u0447\u0438\u043a <code>8</code> \u0431\u043e\u043b\u044c\u0448\u0435 <code>0</code>, \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0432\u044b\u0434\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e <code>8</code>.</li> <li>\u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0432 \u0432\u044b\u0432\u043e\u0434\u0435 <code>g1</code> \u0438 <code>g2</code> \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u0441 \u0442\u0435\u043c, \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c <code>array_1</code> \u0438 <code>array_2</code> \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.</li> <li>\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 <code>array_1</code> \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a \u043d\u043e\u0432\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 <code>[1,2,3,4,5]</code>, \u0430 \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 <code>in</code> \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f, \u043e\u043d\u043e \u043f\u043e-\u043f\u0440\u0435\u0436\u043d\u0435\u043c\u0443 \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0442\u0430\u0440\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>[1,2,3,4]</code> (\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0430\u0435\u0442\u0441\u044f).</li> <li>\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0437\u0430 <code>array_2</code> \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0442\u043e\u0442 \u0436\u0435 \u0441\u0442\u0430\u0440\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>[1,2,3,4]</code> \u0434\u043e <code>[1,2,3,4,5]</code>. \u0421\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0438 <code>g2</code>, \u0438 <code>array_2</code> \u043f\u043e-\u043f\u0440\u0435\u0436\u043d\u0435\u043c\u0443 \u0438\u043c\u0435\u044e\u0442 \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u043e\u0431\u044a\u0435\u043a\u0442 (\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0442\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d \u0434\u043e <code>[1,2,3,4,5]</code>).</li> <li> <p>\u0425\u043e\u0440\u043e\u0448\u043e, \u0441\u043b\u0435\u0434\u0443\u044f \u043b\u043e\u0433\u0438\u043a\u0435, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u043e\u0439 \u0434\u043e \u0441\u0438\u0445 \u043f\u043e\u0440, \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>list(gen)</code> \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0435 \u0431\u044b\u0442\u044c <code>[11, 21, 31, 12, 22, 32, 13, 23, 33]</code>? (\u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e <code>array_3</code> \u0438 <code>array_4</code> \u0431\u0443\u0434\u0443\u0442 \u0432\u0435\u0441\u0442\u0438 \u0441\u0435\u0431\u044f \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a <code>array_1</code>). \u041f\u0440\u0438\u0447\u0438\u043d\u0430, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 (\u0442\u043e\u043b\u044c\u043a\u043e) \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f <code>array_4</code> \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u044e\u0442\u0441\u044f, \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442\u0441\u044f \u0432 PEP-289</p> <p>\u0422\u043e\u043b\u044c\u043a\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0435 for-\u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0442\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0434\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430.</p> </li> </ul>"},{"location":"RU/#is-not-is-not-is-not","title":"\u25b6 <code>is not ...</code> is not <code>is (not ...)</code>","text":"<pre><code>&gt;&gt;&gt; 'something' is not None\nTrue\n&gt;&gt;&gt; 'something' is (not None)\nFalse\n</code></pre>"},{"location":"RU/#_22","title":"\ud83d\udca1 \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<ul> <li><code>is not</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0435\u0434\u0438\u043d\u044b\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u043c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u043c, \u0438 \u0435\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f <code>is</code> \u0438 <code>not</code>.</li> <li><code>is not</code> \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>False</code>, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043e \u043e\u0431\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043d\u0430 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u043e\u0431\u044a\u0435\u043a\u0442, \u0438 <code>True</code> \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435. </li> <li>\u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 <code>(not None)</code> \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 <code>True</code>, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>None</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f <code>False</code> \u0432 \u0431\u0443\u043b\u0435\u0432\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f <code>'something' is True</code>.</li> </ul>"},{"location":"RU/#-x","title":"\u25b6 \u041a\u0440\u0435\u0441\u0442\u0438\u043a\u0438-\u043d\u043e\u043b\u0438\u043a\u0438, \u0433\u0434\u0435 X \u043f\u043e\u0431\u0435\u0436\u0434\u0430\u0435\u0442 \u0441 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0438!","text":"<pre><code># Let's initialize a row\nrow = [\"\"] * 3 #row i['', '', '']\n# Let's make a board\nboard = [row] * 3\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <pre><code>&gt;&gt;&gt; board\n[['', '', ''], ['', '', ''], ['', '', '']]\n&gt;&gt;&gt; board[0]\n['', '', '']\n&gt;&gt;&gt; board[0][0]\n''\n&gt;&gt;&gt; board[0][0] = \"X\"\n&gt;&gt;&gt; board\n[['X', '', ''], ['X', '', ''], ['X', '', '']]\n</code></pre> <p>\u041c\u044b \u0436\u0435 \u043d\u0435 \u043d\u0430\u0437\u043d\u0430\u0447\u0438\u043b\u0438 \u0442\u0440\u0438 <code>\u0425</code>?</p>"},{"location":"RU/#_23","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<p>\u041a\u043e\u0433\u0434\u0430 \u043c\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e <code>row</code>, \u044d\u0442\u0430 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442, \u0447\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438</p> <p></p> <p>\u0410 \u043a\u043e\u0433\u0434\u0430 <code>board</code> \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0435\u043c \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f <code>row</code>, \u0432\u043e\u0442 \u0447\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 (\u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 <code>board[0]</code>, <code>board[1]</code> \u0438 <code>board[2]</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0441\u044b\u043b\u043a\u043e\u0439 \u043d\u0430 \u0442\u043e\u0442 \u0436\u0435 \u0441\u043f\u0438\u0441\u043e\u043a, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f <code>row</code>)</p> <p></p> <p>\u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u044d\u0442\u043e\u0433\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f, \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e <code>row</code> \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 <code>board</code>. (\u0412\u043e\u043f\u0440\u043e\u0441 \u0437\u0430\u0434\u0430\u043d \u0432 \u044d\u0442\u043e\u043c \u0432\u044b\u043f\u0443\u0441\u043a\u0435).</p> <pre><code>&gt;&gt;&gt; board = [['']*3 for _ in range(3)]\n&gt;&gt;&gt; board[0][0] = \"X\"\n&gt;&gt;&gt; board\n[['X', '', ''], ['', '', ''], ['', '', '']]\n</code></pre>"},{"location":"RU/#_24","title":"\u25b6 \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0428\u0440\u0435\u0434\u0438\u043d\u0433\u0435\u0440\u0430 *","text":"<pre><code>funcs = []\nresults = []\nfor x in range(7):\n    def some_func():\n        return x\n    funcs.append(some_func)\n    results.append(some_func())  # note the function call here\n\nfuncs_results = [func() for func in funcs]\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434 (Python version): <pre><code>&gt;&gt;&gt; results\n[0, 1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; funcs_results\n[6, 6, 6, 6, 6, 6, 6]\n</code></pre></p> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f <code>x</code> \u0431\u044b\u043b\u0438 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f <code>some_func</code> \u043a <code>funcs</code>, \u043d\u043e \u0432\u0441\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 6, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d\u0438 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0430.</p> <p>2.</p> <pre><code>&gt;&gt;&gt; powers_of_x = [lambda x: x**i for i in range(10)]\n&gt;&gt;&gt; [f(2) for f in powers_of_x]\n[512, 512, 512, 512, 512, 512, 512, 512, 512, 512]\n</code></pre>"},{"location":"RU/#_25","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>\u041f\u0440\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0446\u0438\u043a\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0446\u0438\u043a\u043b\u0430 \u0432 \u0441\u0432\u043e\u0435\u043c \u0442\u0435\u043b\u0435, \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0446\u0438\u043a\u043b\u0430 \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u0430 \u043d\u0435 \u043a \u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u0449\u0435\u0442 <code>x</code> \u0432 \u043e\u043a\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435, \u0430 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>x</code> \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u0441\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u043d\u043e\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439. \u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u0438\u0434\u0435\u0442\u044c, \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>x</code> \u0438\u0437 \u043e\u043a\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 (\u0442.\u0435. \u043d\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f): <pre><code>&gt;&gt;&gt; import inspect\n&gt;&gt;&gt; inspect.getclosurevars(funcs[0])\nClosureVars(nonlocals={}, globals={'x': 6}, builtins={}, unbound=set())\n</code></pre> Since <code>x</code> is a global value, we can change the value that the <code>funcs</code> will lookup and return by updating <code>x</code>:</li> </ul> <pre><code>&gt;&gt;&gt; x = 42\n&gt;&gt;&gt; [func() for func in funcs]\n[42, 42, 42, 42, 42, 42, 42]\n</code></pre> <ul> <li>\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0446\u0438\u043a\u043b\u0430 \u043a\u0430\u043a \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e. \u041f\u043e\u0447\u0435\u043c\u0443 \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442? \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u044d\u0442\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u041e\u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u043a \u043e\u043a\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u0439 (\u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0439) \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u0430 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>x</code> \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</li> </ul> <pre><code>funcs = []\nfor x in range(7):\n    def some_func(x=x):\n        return x\n    funcs.append(some_func)\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>&gt;&gt;&gt; funcs_results = [func() for func in funcs]\n&gt;&gt;&gt; funcs_results\n[0, 1, 2, 3, 4, 5, 6]\n</code></pre> <p><code>x</code> \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0438 \u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438</p> <pre><code>&gt;&gt;&gt; inspect.getclosurevars(funcs[0])\nClosureVars(nonlocals={}, globals={}, builtins={}, unbound=set())\n</code></pre>"},{"location":"RU/#_26","title":"\u25b6 \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u043a\u0443\u0440\u0438\u0446\u044b \u0438 \u044f\u0439\u0446\u0430 *","text":"<p>1. <pre><code>&gt;&gt;&gt; isinstance(3, int)\nTrue\n&gt;&gt;&gt; isinstance(type, object)\nTrue\n&gt;&gt;&gt; isinstance(object, type)\nTrue\n</code></pre></p> <p>\u0422\u0430\u043a \u043a\u0430\u043a\u043e\u0439 \u0436\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \"\u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\"? \u041a\u0441\u0442\u0430\u0442\u0438, \u044d\u0442\u043e \u0435\u0449\u0435 \u043d\u0435 \u0432\u0441\u0435,</p> <p>2. </p> <pre><code>&gt;&gt;&gt; class A: pass\n&gt;&gt;&gt; isinstance(A, A)\nFalse\n&gt;&gt;&gt; isinstance(type, type)\nTrue\n&gt;&gt;&gt; isinstance(object, object)\nTrue\n</code></pre> <p>3.</p> <pre><code>&gt;&gt;&gt; issubclass(int, object)\nTrue\n&gt;&gt;&gt; issubclass(type, object)\nTrue\n&gt;&gt;&gt; issubclass(object, type)\nFalse\n</code></pre>"},{"location":"RU/#_27","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<ul> <li><code>\u0442\u0438\u043f</code> - \u044d\u0442\u043e \u043c\u0435\u0442\u0430\u043a\u043b\u0430\u0441\u0441 \u0432 Python.</li> <li>\u0412\u0441\u0435 \u0432 Python \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f <code>\u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c</code>, \u0447\u0442\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043a\u0430\u043a \u043a\u043b\u0430\u0441\u0441\u044b, \u0442\u0430\u043a \u0438 \u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u044b (\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b).</li> <li>\u041a\u043b\u0430\u0441\u0441 <code>type</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u0430\u043a\u043b\u0430\u0441\u0441\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0430 <code>object</code>, \u0438 \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f <code>type</code>) \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043f\u0440\u044f\u043c\u043e \u0438\u043b\u0438 \u043a\u043e\u0441\u0432\u0435\u043d\u043d\u043e \u043e\u0442 <code>object</code>.</li> <li>\u041c\u0435\u0436\u0434\u0443 <code>object</code> \u0438 <code>type</code> \u043d\u0435\u0442 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430. \u041f\u0443\u0442\u0430\u043d\u0438\u0446\u0430 \u0432 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0432\u044b\u0448\u0435 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430\u0445 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043c\u044b \u0434\u0443\u043c\u0430\u0435\u043c \u043e\u0431 \u044d\u0442\u0438\u0445 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f\u0445 (<code>issubclass</code> \u0438 <code>isinstance</code>) \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 Python. \u041e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 <code>object</code> \u0438 <code>type</code> \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u044b \u0432 \u0447\u0438\u0441\u0442\u043e\u043c Python. \u0422\u043e\u0447\u043d\u0435\u0435 \u0433\u043e\u0432\u043e\u0440\u044f, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u044b \u0432 \u0447\u0438\u0441\u0442\u043e\u043c Python,<ul> <li>\u043a\u043b\u0430\u0441\u0441 A \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0430 B, \u0430 \u043a\u043b\u0430\u0441\u0441 B \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0430 A.</li> <li>\u043a\u043b\u0430\u0441\u0441 A \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f.</li> </ul> </li> <li>\u042d\u0442\u0438 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 <code>object</code> \u0438 <code>type</code> (\u043e\u0431\u0430 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c\u0438 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u0430\u043c\u0438\u0445 \u0441\u0435\u0431\u044f) \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 Python \u0438\u0437-\u0437\u0430 \"\u043e\u0431\u043c\u0430\u043d\u0430\" \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.</li> </ul>"},{"location":"RU/#_28","title":"\u25b6 \u041e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438","text":"<p>\u0412\u044b\u0432\u043e\u0434: <pre><code>&gt;&gt;&gt; from collections import Hashable\n&gt;&gt;&gt; issubclass(list, object)\nTrue\n&gt;&gt;&gt; issubclass(object, Hashable)\nTrue\n&gt;&gt;&gt; issubclass(list, Hashable)\nFalse\n</code></pre></p> <p>\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u0438\u0432\u043d\u044b\u043c\u0438, \u0432\u0435\u0440\u043d\u043e? (\u0442.\u0435. \u0435\u0441\u043b\u0438 <code>A</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u043c <code>B</code>, \u0430 <code>B</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u043c <code>C</code>, \u0442\u043e <code>A</code> \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u043c <code>C</code>)</p>"},{"location":"RU/#_29","title":"\ud83d\udca1 \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>\u041e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u0432 Python. \u041b\u044e\u0431\u043e\u0439 \u043c\u043e\u0436\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0439 <code>__subclasscheck__</code> \u0432 \u043c\u0435\u0442\u0430\u043a\u043b\u0430\u0441\u0441\u0435.</li> <li>\u041a\u043e\u0433\u0434\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f <code>issubclass(cls, Hashable)</code>, \u043e\u043d \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0449\u0435\u0442 \u043d\u0435-\u0444\u0430\u043b\u044c\u0448\u0438\u0432\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \"<code>__hash__</code>\" \u0432 <code>cls</code> \u0438\u043b\u0438 \u0432\u043e \u0432\u0441\u0435\u043c, \u043e\u0442 \u0447\u0435\u0433\u043e \u043e\u043d \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f.</li> <li>\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 <code>object</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0445\u044d\u0448\u0438\u0440\u0443\u0435\u043c\u044b\u043c, \u0430 <code>list</code> - \u043d\u0435\u0445\u044d\u0448\u0438\u0440\u0443\u0435\u043c\u044b\u043c, \u044d\u0442\u043e \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438.</li> <li>\u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 [\u0437\u0434\u0435\u0441\u044c] (https://www.naftaliharris.com/blog/python-subclass-intransitivity/).</li> </ul>"},{"location":"RU/#methods-equality-and-identity","title":"\u25b6 Methods equality and identity","text":"<p>1. <pre><code>class SomeClass:\n    def method(self):\n        pass\n\n    @classmethod\n    def classm(cls):\n        pass\n\n    @staticmethod\n    def staticm():\n        pass\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; print(SomeClass.method is SomeClass.method)\nTrue\n&gt;&gt;&gt; print(SomeClass.classm is SomeClass.classm)\nFalse\n&gt;&gt;&gt; print(SomeClass.classm == SomeClass.classm)\nTrue\n&gt;&gt;&gt; print(SomeClass.staticm is SomeClass.staticm)\nTrue\n</code></pre></p> <p>\u041e\u0431\u0440\u0430\u0449\u0430\u044f\u0441\u044c \u043a <code>classm</code> \u0434\u0432\u0430\u0436\u0434\u044b, \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043d\u043e \u043d\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439? \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0441 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c\u0438 <code>SomeClass</code>:</p> <p>2. <pre><code>o1 = SomeClass()\no2 = SomeClass()\n</code></pre></p> <p>\u0412\u044b\u0432\u043e\u0434: <pre><code>&gt;&gt;&gt; print(o1.method == o2.method)\nFalse\n&gt;&gt;&gt; print(o1.method == o1.method)\nTrue\n&gt;&gt;&gt; print(o1.method is o1.method)\nFalse\n&gt;&gt;&gt; print(o1.classm is o1.classm)\nFalse\n&gt;&gt;&gt; print(o1.classm == o1.classm == o2.classm == SomeClass.classm)\nTrue\n&gt;&gt;&gt; print(o1.staticm is o1.staticm is o2.staticm is SomeClass.staticm)\nTrue\n</code></pre></p> <p>\u0414\u0432\u043e\u0439\u043d\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a <code>\u043a\u043b\u0430\u0441\u0441\u0443</code> \u0438\u043b\u0438 <code>\u043c\u0435\u0442\u043e\u0434\u0443</code> \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435, \u043d\u043e \u043d\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 <code>\u043a\u0430\u043a\u043e\u0433\u043e-\u043b\u0438\u0431\u043e \u043a\u043b\u0430\u0441\u0441\u0430</code>.</p>"},{"location":"RU/#_30","title":"\ud83d\udca1 \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435.","text":"<ul> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440\u0430\u043c\u0438. \u0412\u0441\u044f\u043a\u0438\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 \u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u043a \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u044f \u043e\u0431\u044a\u0435\u043a\u0442 \u043c\u0435\u0442\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \"\u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442\" \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0441 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c, \u0432\u043b\u0430\u0434\u0435\u044e\u0449\u0438\u043c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c. \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c. \u041f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u043c\u0435\u0442\u043e\u0434 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043d\u0435\u044f\u0432\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044f \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 (\u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0430\u043a \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c <code>self</code> \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u043d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0435\u0433\u043e \u044f\u0432\u043d\u043e). <pre><code>&gt;&gt;&gt; o1.method\n&lt;bound method SomeClass.method of &lt;__main__.SomeClass object at ...&gt;&gt;\n</code></pre></li> <li>\u041f\u0440\u0438 \u043c\u043d\u043e\u0433\u043e\u043a\u0440\u0430\u0442\u043d\u043e\u043c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0443 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442 \u043c\u0435\u0442\u043e\u0434\u0430! \u041f\u043e\u044d\u0442\u043e\u043c\u0443 <code>o1.method is o1.method</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u0438\u043d\u043e\u0439. \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c \u043a\u0430\u043a \u043a \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c \u043a\u043b\u0430\u0441\u0441\u0430 (\u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430) \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434\u043e\u0432, \u043e\u0434\u043d\u0430\u043a\u043e; \u043f\u043e\u044d\u0442\u043e\u043c\u0443 <code>SomeClass.method is SomeClass.method</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u043c. <pre><code>&gt;&gt;&gt; SomeClass.method\n&lt;function SomeClass.method at ...&gt;\n</code></pre></li> <li><code>classmethod</code> \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u043c\u0435\u0442\u043e\u0434\u044b \u043a\u043b\u0430\u0441\u0441\u0430. \u041c\u0435\u0442\u043e\u0434\u044b \u043a\u043b\u0430\u0441\u0441\u0430 - \u044d\u0442\u043e \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u043d\u0438\u043c \u0441\u043e\u0437\u0434\u0430\u044e\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u043c\u0435\u0442\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043b\u0430\u0441\u0441 (\u0442\u0438\u043f) \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u0430 \u043d\u0435 \u0441\u0430\u043c \u043e\u0431\u044a\u0435\u043a\u0442. <pre><code>&gt;&gt;&gt; o1.classm\n&lt;bound method SomeClass.classm of &lt;class '__main__.SomeClass'&gt;&gt;\n</code></pre></li> <li>\u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, <code>classmethod</code> \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u0438 \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u043d\u0435\u043c\u0443 \u043a\u0430\u043a \u043a \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0443 \u043a\u043b\u0430\u0441\u0441\u0430 (\u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u043d\u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043a \u043a\u043b\u0430\u0441\u0441\u0443, \u0430 \u043d\u0435 \u043a \u0435\u0433\u043e \u0442\u0438\u043f\u0443). \u041f\u043e\u044d\u0442\u043e\u043c\u0443 <code>SomeClass.classm is SomeClass.classm</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u044b\u043c. <pre><code>&gt;&gt;&gt; SomeClass.classm\n&lt;bound method SomeClass.classm of &lt;class '__main__.SomeClass'&gt;&gt;\n</code></pre></li> <li>\u041e\u0431\u044a\u0435\u043a\u0442 \u043c\u0435\u0442\u043e\u0434\u0430 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u0440\u0430\u0432\u043d\u044b\u043c, \u0435\u0441\u043b\u0438 \u043e\u0431\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0440\u0430\u0432\u043d\u044b, \u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 <code>o1.method == o1.method</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u043c, \u0445\u043e\u0442\u044f \u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c \u0436\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c \u0432 \u043f\u0430\u043c\u044f\u0442\u0438.</li> <li><code>staticmethod</code> \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440 \"no-op\", \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a\u0430\u043a \u0435\u0441\u0442\u044c. \u041d\u0438\u043a\u0430\u043a\u043e\u0439 \u043c\u0435\u0442\u043e\u0434 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441 <code>is</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u043c. <pre><code>&gt;&gt;&gt; o1.staticm\n&lt;function SomeClass.staticm at ...&gt;\n&gt;&gt;&gt; SomeClass.staticm\n&lt;function SomeClass.staticm at ...&gt;\n</code></pre></li> <li>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \"\u043c\u0435\u0442\u043e\u0434\" \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 Python \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434\u044b \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430, \u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c <code>self</code>, \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. CPython 3.7 \u0440\u0435\u0448\u0438\u043b \u044d\u0442\u0443 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443, \u0432\u0432\u0435\u0434\u044f \u043d\u043e\u0432\u044b\u0435 \u043e\u043f\u043a\u043e\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u0432\u044b\u0437\u043e\u0432\u043e\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0431\u0435\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u043e\u0432. \u042d\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0432\u044b\u0437\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0430, \u0442\u0430\u043a \u0447\u0442\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0435 \u0437\u0434\u0435\u0441\u044c \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043d\u0435 \u0437\u0430\u0442\u0440\u043e\u043d\u0443\u0442\u044b \u0438 \u043f\u043e-\u043f\u0440\u0435\u0436\u043d\u0435\u043c\u0443 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u044e\u0442 \u043c\u0435\u0442\u043e\u0434\u044b :)</li> </ul>"},{"location":"RU/#all-true-ation","title":"\u25b6 All-true-ation *","text":"<pre><code>&gt;&gt;&gt; all([True, True, True])\nTrue\n&gt;&gt;&gt; all([True, True, False])\nFalse\n\n&gt;&gt;&gt; all([])\nTrue\n&gt;&gt;&gt; all([[]])\nFalse\n&gt;&gt;&gt; all([[[]]])\nTrue\n</code></pre> <p>\u041f\u043e\u0447\u0435\u043c\u0443 \u044d\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 True-False?</p>"},{"location":"RU/#_31","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>all</code> \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u0430</p> </li> <li> <p><code>py   def all(iterable):       for element in iterable:           if not element:               return False       return True</code></p> </li> <li> <p><code>all([])</code> \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>True</code>, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0438\u0442\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u0443\u0441\u0442. </p> </li> <li><code>all([[]])</code> \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>False</code>, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u043c\u0435\u0435\u0442 \u043e\u0434\u0438\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442, <code>[]</code>, \u0430 \u0432 python \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u043e\u0436\u043d\u044b\u043c.</li> <li><code>all([[[[]]])</code> \u0438 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0432\u0441\u0435\u0433\u0434\u0430 <code>True</code>. \u042d\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 (<code>[[...]]</code>) \u0443\u0436\u0435 \u043d\u0435 \u043f\u0443\u0441\u0442, \u0430 \u0441\u043f\u0438\u0441\u043a\u0438 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u043c\u0438.</li> </ul>"},{"location":"RU/#_32","title":"\u25b6 \u041d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u0430\u044f \u0437\u0430\u043f\u044f\u0442\u0430\u044f","text":"<p>\u0412\u044b\u0432\u043e\u0434 (&lt; 3.6):</p> <pre><code>&gt;&gt;&gt; def f(x, y,):\n...     print(x, y)\n...\n&gt;&gt;&gt; def g(x=4, y=5,):\n...     print(x, y)\n...\n&gt;&gt;&gt; def h(x, **kwargs,):\n  File \"&lt;stdin&gt;\", line 1\n    def h(x, **kwargs,):\n                     ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; def h(*args,):\n  File \"&lt;stdin&gt;\", line 1\n    def h(*args,):\n                ^\nSyntaxError: invalid syntax\n</code></pre>"},{"location":"RU/#_33","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>\u0417\u0430\u043f\u044f\u0442\u0430\u044f \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0444\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 Python \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0437\u0430\u043a\u043e\u043d\u043d\u0430.</li> <li>\u0412 Python \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u0435\u0434\u0443\u0449\u0438\u0445 \u0437\u0430\u043f\u044f\u0442\u044b\u0445, \u0430 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0445\u043e\u0434\u043d\u044b\u0445 \u0437\u0430\u043f\u044f\u0442\u044b\u0445. \u042d\u0442\u043e\u0442 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\u043c, \u043a\u043e\u0433\u0434\u0430 \u0437\u0430\u043f\u044f\u0442\u0430\u044f \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0435, \u0438 \u043d\u0438 \u043e\u0434\u043d\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0435\u0435 \u043d\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442.</li> <li>\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 \u0437\u0430\u043f\u044f\u0442\u044b\u043c\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 Python 3.6. \u0417\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u0432 \u044d\u0442\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u043a\u0440\u0430\u0442\u043a\u043e \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u044e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u044f\u0442\u044b\u0445 \u0432 Python.</li> </ul>"},{"location":"RU/#_34","title":"\u25b6 \u0421\u0442\u0440\u043e\u043a\u0438 \u0438 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0435 \u0441\u043b\u044d\u0448\u0438","text":"<p>\u0412\u044b\u0432\u043e\u0434: <pre><code>&gt;&gt;&gt; print(\"\\\"\")\n\"\n\n&gt;&gt;&gt; print(r\"\\\"\")\n\\\"\n\n&gt;&gt;&gt; print(r\"\\\")\nFile \"&lt;stdin&gt;\", line 1\n    print(r\"\\\")\n              ^\nSyntaxError: EOL while scanning string literal\n\n&gt;&gt;&gt; r'\\'' == \"\\\\'\"\nTrue\n</code></pre></p>"},{"location":"RU/#_35","title":"\ud83d\udca1 \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<ul> <li>\u0412 \u043e\u0431\u044b\u0447\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 python \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u043a\u043e\u0441\u0430\u044f \u0447\u0435\u0440\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0434\u0438\u043d\u0430\u0440\u043d\u0430\u044f \u043a\u0430\u0432\u044b\u0447\u043a\u0430, \u0434\u0432\u043e\u0439\u043d\u0430\u044f \u043a\u0430\u0432\u044b\u0447\u043a\u0430 \u0438 \u0441\u0430\u043c\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u043a\u043e\u0441\u0430\u044f \u0447\u0435\u0440\u0442\u0430).     <pre><code>&gt;&gt;&gt; \"wt\\\"f\"\n'wt\"f'\n</code></pre></li> <li>\u0412 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u043c \u043b\u0438\u0442\u0435\u0440\u0430\u043b\u0435 (\u043d\u0430 \u0447\u0442\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u0435\u0444\u0438\u043a\u0441 <code>r</code>) \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0435 \u043a\u043e\u0441\u044b\u0435 \u0447\u0435\u0440\u0442\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u0435\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435\u043c \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430.     <pre><code>&gt;&gt;&gt; r'wt\\\"f' == 'wt\\\\\"f'\nTrue\n&gt;&gt;&gt; print(repr(r'wt\\\"f')\n'wt\\\\\"f'\n\n&gt;&gt;&gt; print(\"\\n\")\n\n&gt;&gt;&gt; print(r\"\\\\n\")\n'\\\\n'\n</code></pre></li> <li>\u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043a\u043e\u0433\u0434\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u043a\u043e\u0441\u0443\u044e \u0447\u0435\u0440\u0442\u0443 \u0432 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u043d \u043e\u0436\u0438\u0434\u0430\u0435\u0442, \u0447\u0442\u043e \u0437\u0430 \u043d\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0438\u043c\u0432\u043e\u043b. \u0410 \u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 (<code>print(r\"\\\")</code>) \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u043a\u043e\u0441\u0430\u044f \u0447\u0435\u0440\u0442\u0430 \u0432\u044b\u0440\u0432\u0430\u043b\u0430\u0441\u044c \u0438\u0437 \u043a\u043e\u043d\u0446\u0435\u0432\u043e\u0439 \u043a\u0430\u0432\u044b\u0447\u043a\u0438, \u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u043f\u0430\u0440\u0441\u0435\u0440 \u0431\u0435\u0437 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u044e\u0449\u0435\u0439 \u043a\u0430\u0432\u044b\u0447\u043a\u0438 (\u043e\u0442\u0441\u044e\u0434\u0430 <code>SyntaxError</code>). \u0412\u043e\u0442 \u043f\u043e\u0447\u0435\u043c\u0443 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.</li> </ul>"},{"location":"RU/#not-knot","title":"\u25b6 not knot!","text":"<pre><code>x = True\ny = False\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; not x == y\nTrue\n&gt;&gt;&gt; x == not y\n  File \"&lt;input&gt;\", line 1\n    x == not y\n           ^\nSyntaxError: invalid syntax\n</code></pre></p>"},{"location":"RU/#_36","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>\u0421\u0442\u0430\u0440\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0442\u043e, \u043a\u0430\u043a \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435, \u0438 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>==</code> \u0438\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442, \u0447\u0435\u043c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>not</code> \u0432 Python.</li> <li>\u041f\u043e\u044d\u0442\u043e\u043c\u0443 <code>not x == y</code> \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e <code>not (x == y)</code>, \u0447\u0442\u043e \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e <code>not (True == False)</code>, \u0432 \u0438\u0442\u043e\u0433\u0435 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u044e\u0449\u0435\u043c\u0443\u0441\u044f \u0432 <code>True</code>.</li> <li>\u041d\u043e <code>x == not y</code> \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 <code>SyntaxError</code>, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u044b\u043c <code>(x == not) y</code>, \u0430 \u043d\u0435 <code>x == (not y)</code>, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u0437\u0433\u043b\u044f\u0434.</li> <li>\u041f\u0430\u0440\u0441\u0435\u0440 \u043e\u0436\u0438\u0434\u0430\u043b, \u0447\u0442\u043e \u043b\u0435\u043a\u0441\u0435\u043c\u0430 <code>not</code> \u0431\u0443\u0434\u0435\u0442 \u0447\u0430\u0441\u0442\u044c\u044e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 <code>not in</code> (\u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u0431\u0430 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 <code>==</code> \u0438 <code>not in</code> \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442), \u043d\u043e \u043f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043e\u043d \u043d\u0435 \u0441\u043c\u043e\u0433 \u043d\u0430\u0439\u0442\u0438 \u043b\u0435\u043a\u0441\u0435\u043c\u0443 <code>in</code>, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0437\u0430 \u043b\u0435\u043a\u0441\u0435\u043c\u043e\u0439 <code>not</code>, \u043e\u043d \u0432\u044b\u0434\u0430\u0435\u0442 <code>SyntaxError</code>.</li> </ul>"},{"location":"RU/#_37","title":"\u25b6 \u041f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a \u0432 \u0442\u0440\u043e\u0439\u043d\u044b\u0445 \u043a\u0430\u0432\u044b\u0447\u043a\u0430\u0445","text":"<p>\u0412\u044b\u0432\u043e\u0434: <pre><code>&gt;&gt;&gt; print('wtfpython''')\nwtfpython\n&gt;&gt;&gt; print(\"wtfpython\"\"\")\nwtfpython\n&gt;&gt;&gt; # The following statements raise `SyntaxError`\n&gt;&gt;&gt; # print('''wtfpython')\n&gt;&gt;&gt; # print(\"\"\"wtfpython\")\n  File \"&lt;input&gt;\", line 3\n    print(\"\"\"wtfpython\")\n                        ^\nSyntaxError: EOF while scanning triple-quoted string literal\n</code></pre></p>"},{"location":"RU/#_38","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>Python \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043d\u0435\u044f\u0432\u043d\u0443\u044e \u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u043b\u0438\u0442\u0435\u0440\u0430\u043b\u043e\u0432, \u041f\u0440\u0438\u043c\u0435\u0440,   <pre><code>&gt;&gt;&gt; print(\"wtf\" \"python\")\nwtfpython\n&gt;&gt;&gt; print(\"wtf\" \"\") # or \"wtf\"\"\"\nwtf\n</code></pre></li> <li><code>'''</code> and <code>\"\"\"</code> \u0442\u0430\u043a\u0436\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u0441\u0442\u0440\u043e\u043a \u0432 Python, \u0447\u0442\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 SyntaxError, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440 Python \u043e\u0436\u0438\u0434\u0430\u043b \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u044e\u0449\u0443\u044e \u0442\u0440\u043e\u0439\u043d\u0443\u044e \u043a\u0430\u0432\u044b\u0447\u043a\u0443 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f \u043f\u0440\u0438 \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u043b\u0438\u0442\u0435\u0440\u0430\u043b\u0430 \u0441 \u0442\u0440\u043e\u0439\u043d\u043e\u0439 \u043a\u0430\u0432\u044b\u0447\u043a\u043e\u0439.</li> </ul>"},{"location":"RU/#_39","title":"\u25b6 \u0427\u0442\u043e \u043d\u0435 \u0442\u0430\u043a \u0441 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438?","text":"<p>1.</p> <pre><code># A simple example to count the number of booleans and\n# integers in an iterable of mixed data types.\nmixed_list = [False, 1.0, \"some_string\", 3, True, [], False]\nintegers_found_so_far = 0\nbooleans_found_so_far = 0\n\nfor item in mixed_list:\n    if isinstance(item, int):\n        integers_found_so_far += 1\n    elif isinstance(item, bool):\n        booleans_found_so_far += 1\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; integers_found_so_far\n4\n&gt;&gt;&gt; booleans_found_so_far\n0\n</code></pre></p> <p>2. <pre><code>&gt;&gt;&gt; some_bool = True\n&gt;&gt;&gt; \"wtf\" * some_bool\n'wtf'\n&gt;&gt;&gt; some_bool = False\n&gt;&gt;&gt; \"wtf\" * some_bool\n''\n</code></pre></p> <p>3.</p> <pre><code>def tell_truth():\n    True = False\n    if True == False:\n        print(\"I have lost faith in truth!\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (&lt; 3.x):</p> <pre><code>&gt;&gt;&gt; tell_truth()\nI have lost faith in truth!\n</code></pre>"},{"location":"RU/#_40","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li> <p><code>bool</code> \u044d\u0442\u043e \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441 \u043a\u043b\u0430\u0441\u0441\u0430 <code>int</code> \u0432 Python</p> <pre><code>&gt;&gt;&gt; issubclass(bool, int)\nTrue\n&gt;&gt;&gt; issubclass(int, bool)\nFalse\n</code></pre> </li> <li> <p>\u0418 <code>True</code> \u0438 \u0442\u0430\u043a \u0436\u0435 <code>False</code> \u044d\u0442\u043e \u0438\u043d\u0441\u0442\u0430\u043d\u0441\u044b \u043a\u043b\u0430\u0441\u0441\u0430 <code>int</code> <pre><code>&gt;&gt;&gt; isinstance(True, int)\nTrue\n&gt;&gt;&gt; isinstance(False, int)\nTrue\n</code></pre></p> </li> <li> <p>\u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>True</code> \u0440\u0430\u0432\u043d\u043e <code>1</code>, \u0430 <code>False</code> \u0440\u0430\u0432\u043d\u043e <code>0</code>.   <pre><code>&gt;&gt;&gt; int(True)\n1\n&gt;&gt;&gt; int(False)\n0\n</code></pre></p> </li> <li> <p>\u0421\u043c\u043e\u0442\u0440\u0438 StackOverflow answer \u0442\u0430\u043c \u0435\u0441\u0442\u044c \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435.</p> </li> <li> <p>\u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0432 Python \u043d\u0435 \u0431\u044b\u043b\u043e \u0442\u0438\u043f\u0430 <code>bool</code> (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 0 \u0434\u043b\u044f false \u0438 \u043d\u0435\u043d\u0443\u043b\u0435\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 1 \u0434\u043b\u044f true).  \u0412 \u0432\u0435\u0440\u0441\u0438\u044f\u0445 2.x \u0431\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b <code>True</code>, <code>False</code> \u0438 \u0442\u0438\u043f <code>bool</code>, \u043d\u043e \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 <code>True</code> \u0438 <code>False</code> \u043d\u0435\u043b\u044c\u0437\u044f \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430\u043c\u0438. \u041e\u043d\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0431\u044b\u043b\u0438 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438, \u0438 \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u0435\u0440\u0435\u043d\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u044c.</p> </li> <li> <p>Python 3 \u0431\u044b\u043b \u043d\u0435\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c\u0438 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438, \u044d\u0442\u0443 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u043d\u0430\u043a\u043e\u043d\u0435\u0446-\u0442\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b\u0438, \u0438 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Python 3.x!</p> </li> </ul>"},{"location":"RU/#_41","title":"\u25b6 \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430","text":"<p>1. <pre><code>class A:\n    x = 1\n\nclass B(A):\n    pass\n\nclass C(A):\n    pass\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; A.x, B.x, C.x\n(1, 1, 1)\n&gt;&gt;&gt; B.x = 2\n&gt;&gt;&gt; A.x, B.x, C.x\n(1, 2, 1)\n&gt;&gt;&gt; A.x = 3\n&gt;&gt;&gt; A.x, B.x, C.x # C.x changed, but B.x didn't\n(3, 2, 3)\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.x, A.x\n(3, 3)\n&gt;&gt;&gt; a.x += 1\n&gt;&gt;&gt; a.x, A.x\n(4, 3)\n</code></pre></p> <p>2. <pre><code>class SomeClass:\n    some_var = 15\n    some_list = [5]\n    another_list = [5]\n    def __init__(self, x):\n        self.some_var = x + 1\n        self.some_list = self.some_list + [x]\n        self.another_list += [x]\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <pre><code>&gt;&gt;&gt; some_obj = SomeClass(420)\n&gt;&gt;&gt; some_obj.some_list\n[5, 420]\n&gt;&gt;&gt; some_obj.another_list\n[5, 420]\n&gt;&gt;&gt; another_obj = SomeClass(111)\n&gt;&gt;&gt; another_obj.some_list\n[5, 111]\n&gt;&gt;&gt; another_obj.another_list\n[5, 420, 111]\n&gt;&gt;&gt; another_obj.another_list is SomeClass.another_list\nTrue\n&gt;&gt;&gt; another_obj.another_list is some_obj.another_list\nTrue\n</code></pre>"},{"location":"RU/#_42","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u0441\u043b\u043e\u0432\u0430\u0440\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043a\u043b\u0430\u0441\u0441\u0430. \u0415\u0441\u043b\u0438 \u0438\u043c\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430, \u043e\u043d\u043e \u0438\u0449\u0435\u0442\u0441\u044f \u0432 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u0430\u0445.</li> <li>\u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 += \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0430 \u043c\u0435\u0441\u0442\u0435, \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u044f \u043d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 \u0442\u0430\u043a\u0436\u0435.</li> </ul>"},{"location":"RU/#none-yielding-none","title":"\u25b6 \u0412\u043e\u0437\u0432\u0440\u0430\u0442 None \u0438\u0437 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (yielding None)","text":"<pre><code>some_iterable = ('a', 'b')\n\ndef some_func(val):\n    return \"something\"\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (&lt;= 3.7.x):</p> <pre><code>&gt;&gt;&gt; [x for x in some_iterable]\n['a', 'b']\n&gt;&gt;&gt; [(yield x) for x in some_iterable]\n&lt;generator object &lt;listcomp&gt; at 0x7f70b0a4ad58&gt;\n&gt;&gt;&gt; list([(yield x) for x in some_iterable])\n['a', 'b']\n&gt;&gt;&gt; list((yield x) for x in some_iterable)\n['a', None, 'b', None]\n&gt;&gt;&gt; list(some_func((yield x)) for x in some_iterable)\n['a', 'something', 'b', 'something']\n</code></pre>"},{"location":"RU/#_43","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>\u042d\u0442\u043e \u0431\u0430\u0433 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 yield \u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u0445 \u0438 \u0441\u043f\u0438\u0441\u043e\u0447\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445 CPython.</li> <li>\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0437\u0434\u0435\u0441\u044c: https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions</li> <li>\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u043e\u0442\u0447\u0435\u0442 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435: https://bugs.python.org/issue10544</li> <li>\u0412 Python 3.8+ yield \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u043f\u0438\u0441\u043e\u0447\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0438 \u0432\u044b\u0434\u0430\u0435\u0442 SyntaxError.</li> </ul>"},{"location":"RU/#yielding-from-return","title":"\u25b6 Yielding from... return! *","text":"<p>1.</p> <pre><code>def some_func(x):\n    if x == 3:\n        return [\"wtf\"]\n    else:\n        yield from range(x)\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (&gt; 3.3):</p> <pre><code>&gt;&gt;&gt; list(some_func(3))\n[]\n</code></pre> <p>\u041a\u0443\u0434\u0430 \u0438\u0441\u0447\u0435\u0437\u043b\u043e \"wtf\"? \u042d\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u043a\u0430\u043a\u0438\u043c-\u0442\u043e \u043e\u0441\u043e\u0431\u044b\u043c \u044d\u0444\u0444\u0435\u043a\u0442\u043e\u043c yield from? \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u044d\u0442\u043e. \u0422\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u044d\u0442\u043e \u0442\u043e\u0436\u0435 \u043d\u0435 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e.</p> <p>2.</p> <pre><code>def some_func(x):\n    if x == 3:\n        return [\"wtf\"]\n    else:\n        for i in range(x):\n          yield i\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <pre><code>&gt;&gt;&gt; list(some_func(3))\n[]\n</code></pre> <p>\u0422\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u044d\u0442\u043e \u0442\u043e\u0436\u0435 \u043d\u0435 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e. \u0427\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442?</p>"},{"location":"RU/#_44","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>\u0421 Python 3.3 \u0441\u0442\u0430\u043b\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 return \u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u0445 \u0441 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0441\u043c. PEP380). \u0412 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u0441\u044f, \u0447\u0442\u043e</li> </ul> <p>\"... return expr \u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 StopIteration(expr) \u043f\u0440\u0438 \u0432\u044b\u0445\u043e\u0434\u0435 \u0438\u0437 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430.\"</p> <ul> <li> <p>\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 some_func(3) StopIteration \u0432\u043e\u0437\u0431\u0443\u0436\u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0438\u0437-\u0437\u0430 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 return. \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 StopIteration \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0431\u0435\u0440\u0442\u043a\u0438 list(...) \u0438 \u0446\u0438\u043a\u043b\u0430 for. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0432\u0430 \u0432\u044b\u0448\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430 \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442 \u043a \u043f\u0443\u0441\u0442\u043e\u043c\u0443 \u0441\u043f\u0438\u0441\u043a\u0443.</p> </li> <li> <p>\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c [\"wtf\"] \u0438\u0437 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 some_func, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u0438\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 StopIteration.</p> </li> </ul> <pre><code>try:\n    next(some_func(3))\nexcept StopIteration as e:\n    some_string = e.value\n</code></pre> <pre><code>&gt;&gt;&gt; some_string\n[\"wtf\"]\n</code></pre>"},{"location":"RU/#nan-reflexivity","title":"\u25b6 Nan-reflexivity *","text":"<p>1.</p> <pre><code>a = float('inf')\nb = float('nan')\nc = float('-iNf')  # These strings are case-insensitive\nd = float('nan')\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <pre><code>&gt;&gt;&gt; a\ninf\n&gt;&gt;&gt; b\nnan\n&gt;&gt;&gt; c\n-inf\n&gt;&gt;&gt; float('some_other_string')\nValueError: could not convert string to float: some_other_string\n&gt;&gt;&gt; a == -c # inf==inf\nTrue\n&gt;&gt;&gt; None == None # None == None\nTrue\n&gt;&gt;&gt; b == d # but nan!=nan\nFalse\n&gt;&gt;&gt; 50 / a\n0.0\n&gt;&gt;&gt; a / a\nnan\n&gt;&gt;&gt; 23 + b\nnan\n</code></pre> <p>2.</p> <pre><code>&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; y = x / x\n&gt;&gt;&gt; y is y # identity holds\nTrue\n&gt;&gt;&gt; y == y # equality fails of y\nFalse\n&gt;&gt;&gt; [y] == [y] # but the equality succeeds for the list containing y\nTrue\n</code></pre>"},{"location":"RU/#_45","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li> <p><code>'inf'</code> \u0438 <code>'nan'</code> - \u044d\u0442\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 (\u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438 \u044f\u0432\u043d\u043e\u043c \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0438 \u043a \u0442\u0438\u043f\u0443 float \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \"\u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0438\" \u0438 \"\u043d\u0435 \u0447\u0438\u0441\u043b\u043e\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.</p> </li> <li> <p>\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u043c IEEE <code>NaN! = NaN</code>, \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e \u0440\u0435\u0444\u043b\u0435\u043a\u0441\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0432 Python, \u0442\u043e \u0435\u0441\u0442\u044c \u0435\u0441\u043b\u0438 x \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438, \u0442\u0430\u043a\u043e\u0439 \u043a\u0430\u043a <code>list</code>, \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b \u043d\u0430 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438, \u0447\u0442\u043e <code>x == x</code>. \u0418\u0437-\u0437\u0430 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b (\u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435),   \u043a\u043e\u0433\u0434\u0430 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043d\u0435\u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u0441\u0434\u0435\u043b\u0430\u0435\u0442 \u0432\u0435\u0449\u0438 \u0431\u043e\u043b\u0435\u0435 \u044f\u0441\u043d\u044b\u043c\u0438:</p> </li> </ul> <pre><code>&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; x == x, [x] == [x]\n(False, True)\n&gt;&gt;&gt; y = float('nan')\n&gt;&gt;&gt; y == y, [y] == [y]\n(False, True)\n&gt;&gt;&gt; x == y, [x] == [y]\n(False, False)\n</code></pre> <p>\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b <code>x</code> \u0438 <code>y</code> \u0440\u0430\u0437\u043d\u044b\u0435, \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f; \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043d\u0430 \u044d\u0442\u043e\u0442 \u0440\u0430\u0437 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>False</code>.</p> <ul> <li>\u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0435 \u0447\u0442\u0435\u043d\u0438\u0435: \u0420\u0435\u0444\u043b\u0435\u043a\u0441\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u044b \u0446\u0438\u0432\u0438\u043b\u0438\u0437\u0430\u0446\u0438\u0438</li> </ul>"},{"location":"RU/#_46","title":"\u25b6 \u041c\u0443\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043c\u0443\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0435!","text":"<p>\u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u044b\u043c, \u0435\u0441\u043b\u0438 \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435, \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441\u0441\u044b\u043b\u043a\u0438 \u0432 Python. \u041d\u043e \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0437\u043d\u0430\u0435\u0442\u0435, \u0442\u043e \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u0434\u0438\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e.</p> <pre><code>some_tuple = (\"A\", \"tuple\", \"with\", \"values\")\nanother_tuple = ([1, 2], [3, 4], [5, 6])\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; some_tuple[2] = \"change this\"\nTypeError: 'tuple' object does not support item assignment\n&gt;&gt;&gt; another_tuple[2].append(1000) #This throws no error\n&gt;&gt;&gt; another_tuple\n([1, 2], [3, 4], [5, 6, 1000])\n&gt;&gt;&gt; another_tuple[2] += [99, 999]\nTypeError: 'tuple' object does not support item assignment\n&gt;&gt;&gt; another_tuple\n([1, 2], [3, 4], [5, 6, 1000, 99, 999])\n</code></pre></p> <p>\u041d\u043e \u044f \u0434\u0443\u043c\u0430\u043b, \u0447\u0442\u043e \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b... \u0427\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442?</p>"},{"location":"RU/#_47","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li> <p>\u0426\u0438\u0442\u0430\u0442\u0430 \u0438\u0437 https://docs.python.org/3/reference/datamodel.html</p> <p>\u041d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438   \u041e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f. (\u0415\u0441\u043b\u0438 \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u044d\u0442\u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u043c\u0438 \u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u044b; \u043e\u0434\u043d\u0430\u043a\u043e \u043d\u0430\u0431\u043e\u0440 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f.)</p> </li> <li> <p>\u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 <code>+=</code> \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430 \u043c\u0435\u0441\u0442\u0435. \u041f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u043d\u043e \u043a\u043e\u0433\u0434\u0430 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0443\u0436\u0435 \u0431\u044b\u043b \u0438\u0437\u043c\u0435\u043d\u0435\u043d \u043d\u0430 \u043c\u0435\u0441\u0442\u0435.</p> </li> <li>\u0422\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c Python FAQ.</li> </ul>"},{"location":"RU/#_48","title":"\u25b6 \u0418\u0441\u0447\u0435\u0437\u043d\u043e\u0432\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438\u0437 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438","text":"<pre><code>e = 7\ntry:\n    raise Exception()\nexcept Exception as e:\n    pass\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 2.x): <pre><code>&gt;&gt;&gt; print(e)\n# prints nothing\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 3.x): <pre><code>&gt;&gt;&gt; print(e)\nNameError: name 'e' is not defined\n</code></pre></p>"},{"location":"RU/#_49","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>Source: https://docs.python.org/3/reference/compound_stmts.html#except</li> </ul> <p>When an exception has been assigned using <code>as</code> target, it is cleared at the end of the <code>except</code> clause. This is as if</p> <pre><code>except E as N:\n    foo\n</code></pre> <p>was translated into</p> <pre><code>except E as N:\n    try:\n        foo\n    finally:\n        del N\n</code></pre> <p>This means the exception must be assigned to a different name to be able to refer to it after the except clause. Exceptions are cleared because, with the traceback attached to them, they form a reference cycle with the stack frame, keeping all locals in that frame alive until the next garbage collection occurs.</p> <ul> <li> <p>The clauses are not scoped in Python. Everything in the example is present in the same scope, and the variable <code>e</code> got removed due to the execution of the <code>except</code> clause. The same is not the case with functions that have their separate inner-scopes. The example below illustrates this:</p> <pre><code>def f(x):\n    del(x)\n    print(x)\n\nx = 5\ny = [5, 4, 3]\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; f(x)\nUnboundLocalError: local variable 'x' referenced before assignment\n&gt;&gt;&gt; f(y)\nUnboundLocalError: local variable 'x' referenced before assignment\n&gt;&gt;&gt; x\n5\n&gt;&gt;&gt; y\n[5, 4, 3]\n</code></pre></p> </li> <li> <p>In Python 2.x, the variable name <code>e</code> gets assigned to <code>Exception()</code> instance, so when you try to print, it prints nothing.</p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 2.x): <pre><code>&gt;&gt;&gt; e\nException()\n&gt;&gt;&gt; print e\n# Nothing is printed!\n</code></pre></p> </li> </ul>"},{"location":"RU/#the-mysterious-key-type-conversion","title":"\u25b6 The mysterious key type conversion","text":"<pre><code>class SomeClass(str):\n    pass\n\nsome_dict = {'s': 42}\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; type(list(some_dict.keys())[0])\nstr\n&gt;&gt;&gt; s = SomeClass('s')\n&gt;&gt;&gt; some_dict[s] = 40\n&gt;&gt;&gt; some_dict # expected: Two different keys-value pairs\n{'s': 40}\n&gt;&gt;&gt; type(list(some_dict.keys())[0])\nstr\n</code></pre></p>"},{"location":"RU/#_50","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>Both the object <code>s</code> and the string <code>\"s\"</code> hash to the same value because <code>SomeClass</code> inherits the <code>__hash__</code> method of <code>str</code> class.</li> <li><code>SomeClass(\"s\") == \"s\"</code> evaluates to <code>True</code> because <code>SomeClass</code> also inherits <code>__eq__</code> method from <code>str</code> class.</li> <li>Since both the objects hash to the same value and are equal, they are represented by the same key in the dictionary.</li> <li>For the desired behavior, we can redefine the <code>__eq__</code> method in <code>SomeClass</code> <pre><code>class SomeClass(str):\n  def __eq__(self, other):\n      return (\n          type(self) is SomeClass\n          and type(other) is SomeClass\n          and super().__eq__(other)\n      )\n\n  # When we define a custom __eq__, Python stops automatically inheriting the\n  # __hash__ method, so we need to define it as well\n  __hash__ = str.__hash__\n\nsome_dict = {'s':42}\n</code></pre></li> </ul> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; s = SomeClass('s')\n&gt;&gt;&gt; some_dict[s] = 40\n&gt;&gt;&gt; some_dict\n{'s': 40, 's': 42}\n&gt;&gt;&gt; keys = list(some_dict.keys())\n&gt;&gt;&gt; type(keys[0]), type(keys[1])\n(__main__.SomeClass, str)\n</code></pre></p>"},{"location":"RU/#_51","title":"\u25b6 \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0438 \u0432\u044b \u0443\u0433\u0430\u0434\u0430\u0442\u044c \u0447\u0442\u043e \u0437\u0434\u0435\u0441\u044c?","text":"<pre><code>a, b = a[b] = {}, 5\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; a\n{5: ({...}, 5)}\n</code></pre></p>"},{"location":"RU/#_52","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>According to Python language reference, assignment statements have the form   <pre><code>(target_list \"=\")+ (expression_list | yield_expression)\n</code></pre>   and</li> </ul> <p>An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.</p> <ul> <li> <p>The <code>+</code> in <code>(target_list \"=\")+</code> means there can be one or more target lists. In this case, target lists are <code>a, b</code> and <code>a[b]</code> (note the expression list is exactly one, which in our case is <code>{}, 5</code>).</p> </li> <li> <p>After the expression list is evaluated, its value is unpacked to the target lists from left to right. So, in our case, first the <code>{}, 5</code> tuple is unpacked to <code>a, b</code> and we now have <code>a = {}</code> and <code>b = 5</code>.</p> </li> <li> <p><code>a</code> is now assigned to <code>{}</code>, which is a mutable object.</p> </li> <li> <p>The second target list is <code>a[b]</code> (you may expect this to throw an error because both <code>a</code> and <code>b</code> have not been defined in the statements before. But remember, we just assigned <code>a</code> to <code>{}</code> and <code>b</code> to <code>5</code>).</p> </li> <li> <p>Now, we are setting the key <code>5</code> in the dictionary to the tuple <code>({}, 5)</code> creating a circular reference (the <code>{...}</code> in the output refers to the same object that <code>a</code> is already referencing). Another simpler example of circular reference could be   <pre><code>&gt;&gt;&gt; some_list = some_list[0] = [0]\n&gt;&gt;&gt; some_list\n[[...]]\n&gt;&gt;&gt; some_list[0]\n[[...]]\n&gt;&gt;&gt; some_list is some_list[0]\nTrue\n&gt;&gt;&gt; some_list[0][0][0][0][0][0] == some_list\nTrue\n</code></pre>   Similar is the case in our example (<code>a[b][0]</code> is the same object as <code>a</code>)</p> </li> <li> <p>So to sum it up, you can break the example down to   <pre><code>a, b = {}, 5\na[b] = a, b\n</code></pre>   And the circular reference can be justified by the fact that <code>a[b][0]</code> is the same object as <code>a</code> <pre><code>&gt;&gt;&gt; a[b][0] is a\nTrue\n</code></pre></p> </li> </ul>"},{"location":"RU/#exceeds-the-limit-for-integer-string-conversion","title":"\u25b6 Exceeds the limit for integer string conversion","text":"<p><pre><code>&gt;&gt;&gt; # Python 3.10.6\n&gt;&gt;&gt; int(\"2\" * 5432)\n&gt;&gt;&gt; # Python 3.10.8\n&gt;&gt;&gt; int(\"2\" * 5432)\n</code></pre> \u0412\u044b\u0432\u043e\u0434: <pre><code>&gt;&gt;&gt; # Python 3.10.6\n222222222222222222222222222222222222222222222222222222222222222...\n&gt;&gt;&gt; # Python 3.10.8 and Python 3.11\nTraceback (most recent call last):\n   ...\nValueError: Exceeds the limit (4300) for integer string conversion:\n   value has 5432 digits; use sys.set_int_max_str_digits()\n   to increase the limit.\n</code></pre></p>"},{"location":"RU/#_53","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<p>\u042d\u0442\u043e\u0442 \u0432\u044b\u0437\u043e\u0432 <code>int()</code> \u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 Python 3.10.6 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 ValueError \u0432 Python 3.10.8, 3.11. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e Python \u0432\u0441\u0435 \u0435\u0449\u0435 \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u0446\u0435\u043b\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438. \u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u0446\u0435\u043b\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0438 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438. \u041a \u0441\u0447\u0430\u0441\u0442\u044c\u044e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0435\u043b \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0446\u0438\u0444\u0440, \u0435\u0441\u043b\u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0435, \u0447\u0442\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0435\u0432\u044b\u0441\u0438\u0442 \u0435\u0433\u043e. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432: - -X int_max_str_digits command-line flag - set_int_max_str_digits() function from the sys module - PYTHONINTMAXSTRDIGITS environment variable</p> <p>\u0421\u043c\u043e\u0442\u0440\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043b\u0438\u043c\u0438\u0442\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0435\u0441\u043b\u0438 \u0432\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0435, \u0447\u0442\u043e \u0432\u0430\u0448 \u043a\u043e\u0434 \u043f\u0440\u0435\u0432\u044b\u0441\u0438\u0442 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</p>"},{"location":"RU/#section-slippery-slopes","title":"Section: Slippery Slopes","text":""},{"location":"RU/#modifying-a-dictionary-while-iterating-over-it","title":"\u25b6 Modifying a dictionary while iterating over it","text":"<pre><code>x = {0: None}\n\nfor i in x:\n    del x[i]\n    x[i+1] = None\n    print(i)\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 2.7- Python 3.5):</p> <pre><code>0\n1\n2\n3\n4\n5\n6\n7\n</code></pre> <p>Yes, it runs for exactly eight times and stops.</p>"},{"location":"RU/#_54","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>Iteration over a dictionary that you edit at the same time is not supported.</li> <li>It runs eight times because that's the point at which the dictionary resizes to hold more keys (we have eight deletion entries, so a resize is needed). This is actually an implementation detail.</li> <li>How deleted keys are handled and when the resize occurs might be different for different Python implementations.</li> <li>So for Python versions other than Python 2.7 - Python 3.5, the count might be different from 8 (but whatever the count is, it's going to be the same every time you run it). You can find some discussion around this here or in this StackOverflow thread.</li> <li>Python 3.7.6 onwards, you'll see <code>RuntimeError: dictionary keys changed during iteration</code> exception if you try to do this.</li> </ul>"},{"location":"RU/#stubborn-del-operation","title":"\u25b6 Stubborn <code>del</code> operation","text":"<pre><code>class SomeClass:\n    def __del__(self):\n        print(\"Deleted!\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 1. <pre><code>&gt;&gt;&gt; x = SomeClass()\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; del x # this should print \"Deleted!\"\n&gt;&gt;&gt; del y\nDeleted!\n</code></pre></p> <p>Phew, deleted at last. You might have guessed what saved <code>__del__</code> from being called in our first attempt to delete <code>x</code>. Let's add more twists to the example.</p> <p>2. <pre><code>&gt;&gt;&gt; x = SomeClass()\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; del x\n&gt;&gt;&gt; y # check if y exists\n&lt;__main__.SomeClass instance at 0x7f98a1a67fc8&gt;\n&gt;&gt;&gt; del y # Like previously, this should print \"Deleted!\"\n&gt;&gt;&gt; globals() # oh, it didn't. Let's check all our global variables and confirm\nDeleted!\n{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'SomeClass': &lt;class __main__.SomeClass at 0x7f98a1a5f668&gt;, '__package__': None, '__name__': '__main__', '__doc__': None}\n</code></pre></p> <p>Okay, now it's deleted :confused:</p>"},{"location":"RU/#_55","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li><code>del x</code> doesn\u2019t directly call <code>x.__del__()</code>.</li> <li>When <code>del x</code> is encountered, Python deletes the name <code>x</code> from current scope and decrements by 1 the reference count of the object <code>x</code> referenced. <code>__del__()</code> is called only when the object's reference count reaches zero.</li> <li>In the second output snippet, <code>__del__()</code> was not called because the previous statement (<code>&gt;&gt;&gt; y</code>) in the interactive interpreter created another reference to the same object (specifically, the <code>_</code> magic variable which references the result value of the last non <code>None</code> expression on the REPL), thus preventing the reference count from reaching zero when <code>del y</code> was encountered.</li> <li>Calling <code>globals</code> (or really, executing anything that will have a non <code>None</code> result) caused <code>_</code> to reference the new result, dropping the existing reference. Now the reference count reached 0 and we can see \"Deleted!\" being printed (finally!).</li> </ul>"},{"location":"RU/#the-out-of-scope-variable","title":"\u25b6 The out of scope variable","text":"<p>1. <pre><code>a = 1\ndef some_func():\n    return a\n\ndef another_func():\n    a += 1\n    return a\n</code></pre></p> <p>2. <pre><code>def some_closure_func():\n    a = 1\n    def some_inner_func():\n        return a\n    return some_inner_func()\n\ndef another_closure_func():\n    a = 1\n    def another_inner_func():\n        a += 1\n        return a\n    return another_inner_func()\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; some_func()\n1\n&gt;&gt;&gt; another_func()\nUnboundLocalError: local variable 'a' referenced before assignment\n\n&gt;&gt;&gt; some_closure_func()\n1\n&gt;&gt;&gt; another_closure_func()\nUnboundLocalError: local variable 'a' referenced before assignment\n</code></pre></p>"},{"location":"RU/#_56","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>When you make an assignment to a variable in scope, it becomes local to that scope. So <code>a</code> becomes local to the scope of <code>another_func</code>, but it has not been initialized previously in the same scope, which throws an error.</li> <li>To modify the outer scope variable <code>a</code> in <code>another_func</code>, we have to use the <code>global</code> keyword.   <pre><code>def another_func()\n    global a\n    a += 1\n    return a\n</code></pre></li> </ul> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; another_func()\n2\n</code></pre> * In <code>another_closure_func</code>, <code>a</code> becomes local to the scope of <code>another_inner_func</code>, but it has not been initialized previously in the same scope, which is why it throws an error.  * To modify the outer scope variable <code>a</code> in <code>another_inner_func</code>, use the <code>nonlocal</code> keyword. The nonlocal statement is used to refer to variables defined in the nearest outer (excluding the global) scope.   <pre><code>def another_func():\n    a = 1\n    def another_inner_func():\n        nonlocal a\n        a += 1\n        return a\n    return another_inner_func()\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; another_func()\n2\n</code></pre> * The keywords <code>global</code> and <code>nonlocal</code> tell the python interpreter to not declare new variables and look them up in the corresponding outer scopes. * Read this short but an awesome guide to learn more about how namespaces and scope resolution works in Python.</p>"},{"location":"RU/#deleting-a-list-item-while-iterating","title":"\u25b6 Deleting a list item while iterating","text":"<pre><code>list_1 = [1, 2, 3, 4]\nlist_2 = [1, 2, 3, 4]\nlist_3 = [1, 2, 3, 4]\nlist_4 = [1, 2, 3, 4]\n\nfor idx, item in enumerate(list_1):\n    del item\n\nfor idx, item in enumerate(list_2):\n    list_2.remove(item)\n\nfor idx, item in enumerate(list_3[:]):\n    list_3.remove(item)\n\nfor idx, item in enumerate(list_4):\n    list_4.pop(idx)\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; list_1\n[1, 2, 3, 4]\n&gt;&gt;&gt; list_2\n[2, 4]\n&gt;&gt;&gt; list_3\n[]\n&gt;&gt;&gt; list_4\n[2, 4]\n</code></pre></p> <p>Can you guess why the output is <code>[2, 4]</code>?</p>"},{"location":"RU/#_57","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li> <p>It's never a good idea to change the object you're iterating over. The correct way to do so is to iterate over a copy of the object instead, and <code>list_3[:]</code> does just that.</p> <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4]\n&gt;&gt;&gt; id(some_list)\n139798789457608\n&gt;&gt;&gt; id(some_list[:]) # Notice that python creates new object for sliced list.\n139798779601192\n</code></pre> </li> </ul> <p>Difference between <code>del</code>, <code>remove</code>, and <code>pop</code>: * <code>del var_name</code> just removes the binding of the <code>var_name</code> from the local or global namespace (That's why the <code>list_1</code> is unaffected). * <code>remove</code> removes the first matching value, not a specific index, raises <code>ValueError</code> if the value is not found. * <code>pop</code> removes the element at a specific index and returns it, raises <code>IndexError</code> if an invalid index is specified.</p> <p>Why the output is <code>[2, 4]</code>? - The list iteration is done index by index, and when we remove <code>1</code> from <code>list_2</code> or <code>list_4</code>, the contents of the lists are now <code>[2, 3, 4]</code>. The remaining elements are shifted down, i.e., <code>2</code> is at index 0, and <code>3</code> is at index 1. Since the next iteration is going to look at index 1 (which is the <code>3</code>), the <code>2</code> gets skipped entirely. A similar thing will happen with every alternate element in the list sequence.</p> <ul> <li>Refer to this StackOverflow thread explaining the example</li> <li>See also this nice StackOverflow thread for a similar example related to dictionaries in Python.</li> </ul>"},{"location":"RU/#lossy-zip-of-iterators","title":"\u25b6 Lossy zip of iterators *","text":"<p><pre><code>&gt;&gt;&gt; numbers = list(range(7))\n&gt;&gt;&gt; numbers\n[0, 1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; first_three, remaining = numbers[:3], numbers[3:]\n&gt;&gt;&gt; first_three, remaining\n([0, 1, 2], [3, 4, 5, 6])\n&gt;&gt;&gt; numbers_iter = iter(numbers)\n&gt;&gt;&gt; list(zip(numbers_iter, first_three)) \n[(0, 0), (1, 1), (2, 2)]\n# so far so good, let's zip the remaining\n&gt;&gt;&gt; list(zip(numbers_iter, remaining))\n[(4, 3), (5, 4), (6, 5)]\n</code></pre> Where did element <code>3</code> go from the <code>numbers</code> list?</p>"},{"location":"RU/#_58","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>From Python docs, here's an approximate implementation of zip function,     <pre><code>def zip(*iterables):\n    sentinel = object()\n    iterators = [iter(it) for it in iterables]\n    while iterators:\n        result = []\n        for it in iterators:\n            elem = next(it, sentinel)\n            if elem is sentinel: return\n            result.append(elem)\n        yield tuple(result)\n</code></pre></li> <li>So the function takes in arbitrary number of iterable objects, adds each of their items to the <code>result</code> list by calling the <code>next</code> function on them, and stops whenever any of the iterable is exhausted. </li> <li>The caveat here is when any iterable is exhausted, the existing elements in the <code>result</code> list are discarded. That's what happened with <code>3</code> in the <code>numbers_iter</code>.</li> <li>The correct way to do the above using <code>zip</code> would be,     <pre><code>&gt;&gt;&gt; numbers = list(range(7))\n&gt;&gt;&gt; numbers_iter = iter(numbers)\n&gt;&gt;&gt; list(zip(first_three, numbers_iter))\n[(0, 0), (1, 1), (2, 2)]\n&gt;&gt;&gt; list(zip(remaining, numbers_iter))\n[(3, 3), (4, 4), (5, 5), (6, 6)]\n</code></pre>     The first argument of zip should be the one with fewest elements.</li> </ul>"},{"location":"RU/#loop-variables-leaking-out","title":"\u25b6 Loop variables leaking out!","text":"<p>1. <pre><code>for x in range(7):\n    if x == 6:\n        print(x, ': for x inside loop')\nprint(x, ': x in global')\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>6 : for x inside loop\n6 : x in global\n</code></pre></p> <p>But <code>x</code> was never defined outside the scope of for loop...</p> <p>2. <pre><code># This time let's initialize x first\nx = -1\nfor x in range(7):\n    if x == 6:\n        print(x, ': for x inside loop')\nprint(x, ': x in global')\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>6 : for x inside loop\n6 : x in global\n</code></pre></p> <p>3.</p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 2.x): <pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; print([x for x in range(5)])\n[0, 1, 2, 3, 4]\n&gt;&gt;&gt; print(x)\n4\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 3.x): <pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; print([x for x in range(5)])\n[0, 1, 2, 3, 4]\n&gt;&gt;&gt; print(x)\n1\n</code></pre></p>"},{"location":"RU/#_59","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li> <p>In Python, for-loops use the scope they exist in and leave their defined loop-variable behind. This also applies if we explicitly defined the for-loop variable in the global namespace before. In this case, it will rebind the existing variable.</p> </li> <li> <p>The differences in the output of Python 2.x and Python 3.x interpreters for list comprehension example can be explained by following change documented in What\u2019s New In Python 3.0 changelog:</p> <p>\"List comprehensions no longer support the syntactic form <code>[... for var in item1, item2, ...]</code>. Use <code>[... for var in (item1, item2, ...)]</code> instead. Also, note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a <code>list()</code> constructor, and in particular, the loop control variables are no longer leaked into the surrounding scope.\"</p> </li> </ul>"},{"location":"RU/#beware-of-default-mutable-arguments","title":"\u25b6 Beware of default mutable arguments!","text":"<pre><code>def some_func(default_arg=[]):\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; some_func()\n['some_string']\n&gt;&gt;&gt; some_func()\n['some_string', 'some_string']\n&gt;&gt;&gt; some_func([])\n['some_string']\n&gt;&gt;&gt; some_func()\n['some_string', 'some_string', 'some_string']\n</code></pre></p>"},{"location":"RU/#_60","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li> <p>The default mutable arguments of functions in Python aren't really initialized every time you call the function. Instead, the recently assigned value to them is used as the default value. When we explicitly passed <code>[]</code> to <code>some_func</code> as the argument, the default value of the <code>default_arg</code> variable was not used, so the function returned as expected.</p> <pre><code>def some_func(default_arg=[]):\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; some_func.__defaults__ #This will show the default argument values for the function\n([],)\n&gt;&gt;&gt; some_func()\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string'],)\n&gt;&gt;&gt; some_func()\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string', 'some_string'],)\n&gt;&gt;&gt; some_func([])\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string', 'some_string'],)\n</code></pre></p> </li> <li> <p>A common practice to avoid bugs due to mutable arguments is to assign <code>None</code> as the default value and later check if any value is passed to the function corresponding to that argument. Example:</p> <pre><code>def some_func(default_arg=None):\n    if default_arg is None:\n        default_arg = []\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> </li> </ul>"},{"location":"RU/#catching-the-exceptions","title":"\u25b6 Catching the Exceptions","text":"<pre><code>some_list = [1, 2, 3]\ntry:\n    # This should raise an ``IndexError``\n    print(some_list[4])\nexcept IndexError, ValueError:\n    print(\"Caught!\")\n\ntry:\n    # This should raise a ``ValueError``\n    some_list.remove(4)\nexcept IndexError, ValueError:\n    print(\"Caught again!\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 2.x): <pre><code>Caught!\n\nValueError: list.remove(x): x not in list\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 3.x): <pre><code>  File \"&lt;input&gt;\", line 3\n    except IndexError, ValueError:\n                     ^\nSyntaxError: invalid syntax\n</code></pre></p>"},{"location":"RU/#_61","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<ul> <li> <p>To add multiple Exceptions to the except clause, you need to pass them as parenthesized tuple as the first argument. The second argument is an optional name, which when supplied will bind the Exception instance that has been raised. Example,   <pre><code>some_list = [1, 2, 3]\ntry:\n   # This should raise a ``ValueError``\n   some_list.remove(4)\nexcept (IndexError, ValueError), e:\n   print(\"Caught again!\")\n   print(e)\n</code></pre> \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 2.x): <pre><code>Caught again!\nlist.remove(x): x not in list\n</code></pre> \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 3.x): <pre><code>  File \"&lt;input&gt;\", line 4\n    except (IndexError, ValueError), e:\n                                     ^\nIndentationError: unindent does not match any outer indentation level\n</code></pre></p> </li> <li> <p>Separating the exception from the variable with a comma is deprecated and does not work in Python 3; the correct way is to use <code>as</code>. Example,   <pre><code>some_list = [1, 2, 3]\ntry:\n    some_list.remove(4)\n\nexcept (IndexError, ValueError) as e:\n    print(\"Caught again!\")\n    print(e)\n</code></pre> \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>Caught again!\nlist.remove(x): x not in list\n</code></pre></p> </li> </ul>"},{"location":"RU/#same-operands-different-story","title":"\u25b6 Same operands, different story!","text":"<p>1. <pre><code>a = [1, 2, 3, 4]\nb = a\na = a + [5, 6, 7, 8]\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; a\n[1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; b\n[1, 2, 3, 4]\n</code></pre></p> <p>2. <pre><code>a = [1, 2, 3, 4]\nb = a\na += [5, 6, 7, 8]\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; a\n[1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; b\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre></p>"},{"location":"RU/#_62","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li> <p><code>a += b</code> doesn't always behave the same way as <code>a = a + b</code>.  Classes may implement the <code>op=</code> operators differently, and lists do this.</p> </li> <li> <p>The expression <code>a = a + [5,6,7,8]</code> generates a new list and sets <code>a</code>'s reference to that new list, leaving <code>b</code> unchanged.</p> </li> <li> <p>The expression <code>a += [5,6,7,8]</code> is actually mapped to an \"extend\" function that operates on the list such that <code>a</code> and <code>b</code> still point to the same list that has been modified in-place.</p> </li> </ul>"},{"location":"RU/#name-resolution-ignoring-class-scope","title":"\u25b6 Name resolution ignoring class scope","text":"<p>1. <pre><code>x = 5\nclass SomeClass:\n    x = 17\n    y = (x for i in range(10))\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; list(SomeClass.y)[0]\n5\n</code></pre></p> <p>2. <pre><code>x = 5\nclass SomeClass:\n    x = 17\n    y = [x for i in range(10)]\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 2.x): <pre><code>&gt;&gt;&gt; SomeClass.y[0]\n17\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 3.x): <pre><code>&gt;&gt;&gt; SomeClass.y[0]\n5\n</code></pre></p>"},{"location":"RU/#_63","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<ul> <li>Scopes nested inside class definition ignore names bound at the class level.</li> <li>A generator expression has its own scope.</li> <li>Starting from Python 3.X, list comprehensions also have their own scope.</li> </ul>"},{"location":"RU/#rounding-like-a-banker","title":"\u25b6 Rounding like a banker *","text":"<p>Let's implement a naive function to get the middle element of a list: <pre><code>def get_middle(some_list):\n    mid_index = round(len(some_list) / 2)\n    return some_list[mid_index - 1]\n</code></pre></p> <p>Python 3.x: <pre><code>&gt;&gt;&gt; get_middle([1])  # looks good\n1\n&gt;&gt;&gt; get_middle([1,2,3])  # looks good\n2\n&gt;&gt;&gt; get_middle([1,2,3,4,5])  # huh?\n2\n&gt;&gt;&gt; len([1,2,3,4,5]) / 2  # good\n2.5\n&gt;&gt;&gt; round(len([1,2,3,4,5]) / 2)  # why?\n2\n</code></pre> It seems as though Python rounded 2.5 to 2.</p>"},{"location":"RU/#_64","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>This is not a float precision error, in fact, this behavior is intentional. Since Python 3.0, <code>round()</code> uses banker's rounding where .5 fractions are rounded to the nearest even number:</li> </ul> <pre><code>&gt;&gt;&gt; round(0.5)\n0\n&gt;&gt;&gt; round(1.5)\n2\n&gt;&gt;&gt; round(2.5)\n2\n&gt;&gt;&gt; import numpy  # numpy does the same\n&gt;&gt;&gt; numpy.round(0.5)\n0.0\n&gt;&gt;&gt; numpy.round(1.5)\n2.0\n&gt;&gt;&gt; numpy.round(2.5)\n2.0\n</code></pre> <ul> <li>This is the recommended way to round .5 fractions as described in IEEE 754. However, the other way (round away from zero) is taught in school most of the time, so banker's rounding is likely not that well known. Furthermore, some of the most popular programming languages (for example: JavaScript, Java, C/C++, Ruby, Rust) do not use banker's rounding either. Therefore, this is still quite special to Python and may result in confusion when rounding fractions. </li> <li>See the round() docs or this stackoverflow thread for more information.</li> <li>Note that <code>get_middle([1])</code> only returned 1 because the index was <code>round(0.5) - 1 = 0 - 1 = -1</code>, returning the last element in the list.</li> </ul>"},{"location":"RU/#needles-in-a-haystack","title":"\u25b6 Needles in a Haystack *","text":"<p>I haven't met even a single experience Pythonist till date who has not come across one or more of the following scenarios,</p> <p>1.</p> <pre><code>x, y = (0, 1) if True else None, None\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <pre><code>&gt;&gt;&gt; x, y  # expected (0, 1)\n((0, 1), None)\n</code></pre> <p>2.</p> <pre><code>t = ('one', 'two')\nfor i in t:\n    print(i)\n\nt = ('one')\nfor i in t:\n    print(i)\n\nt = ()\nprint(t)\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <pre><code>one\ntwo\no\nn\ne\ntuple()\n</code></pre> <p>3.</p> <pre><code>ten_words_list = [\n    \"some\",\n    \"very\",\n    \"big\",\n    \"list\",\n    \"that\"\n    \"consists\",\n    \"of\",\n    \"exactly\",\n    \"ten\",\n    \"words\"\n]\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442</p> <pre><code>&gt;&gt;&gt; len(ten_words_list)\n9\n</code></pre> <p>4. Not asserting strongly enough</p> <pre><code>a = \"python\"\nb = \"javascript\"\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <pre><code># An assert statement with an assertion failure message.\n&gt;&gt;&gt; assert(a == b, \"Both languages are different\")\n# No AssertionError is raised\n</code></pre> <p>5.</p> <pre><code>some_list = [1, 2, 3]\nsome_dict = {\n  \"key_1\": 1,\n  \"key_2\": 2,\n  \"key_3\": 3\n}\n\nsome_list = some_list.append(4) \nsome_dict = some_dict.update({\"key_4\": 4})\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <pre><code>&gt;&gt;&gt; print(some_list)\nNone\n&gt;&gt;&gt; print(some_dict)\nNone\n</code></pre> <p>6.</p> <pre><code>def some_recursive_func(a):\n    if a[0] == 0:\n        return\n    a[0] -= 1\n    some_recursive_func(a)\n    return a\n\ndef similar_recursive_func(a):\n    if a == 0:\n        return a\n    a -= 1\n    similar_recursive_func(a)\n    return a\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <pre><code>&gt;&gt;&gt; some_recursive_func([5, 0])\n[0, 0]\n&gt;&gt;&gt; similar_recursive_func(5)\n4\n</code></pre>"},{"location":"RU/#_65","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li> <p>For 1, the correct statement for expected behavior is <code>x, y = (0, 1) if True else (None, None)</code>.</p> </li> <li> <p>For 2, the correct statement for expected behavior is <code>t = ('one',)</code> or <code>t = 'one',</code> (missing comma) otherwise the interpreter considers <code>t</code> to be a <code>str</code> and iterates over it character by character.</p> </li> <li> <p><code>()</code> is a special token and denotes empty <code>tuple</code>.</p> </li> <li> <p>In 3, as you might have already figured out, there's a missing comma after 5th element (<code>\"that\"</code>) in the list. So by implicit string literal concatenation,</p> </li> </ul> <pre><code>&gt;&gt;&gt; ten_words_list\n['some', 'very', 'big', 'list', 'thatconsists', 'of', 'exactly', 'ten', 'words']\n</code></pre> <ul> <li>No <code>AssertionError</code> was raised in 4th snippet because instead of asserting the individual expression <code>a == b</code>, we're asserting entire tuple. The following snippet will clear things up,</li> </ul> <pre><code>&gt;&gt;&gt; a = \"python\"\n&gt;&gt;&gt; b = \"javascript\"\n&gt;&gt;&gt; assert a == b\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n\n&gt;&gt;&gt; assert (a == b, \"Values are not equal\")\n&lt;stdin&gt;:1: SyntaxWarning: assertion is always true, perhaps remove parentheses?\n\n&gt;&gt;&gt; assert a == b, \"Values are not equal\"\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError: Values are not equal\n</code></pre> <ul> <li> <p>As for the fifth snippet, most methods that modify the items of sequence/mapping objects like <code>list.append</code>, <code>dict.update</code>, <code>list.sort</code>, etc. modify the objects in-place and return <code>None</code>. The rationale behind this is to improve performance by avoiding making a copy of the object if the operation can be done in-place (Referred from here).</p> </li> <li> <p>Last one should be fairly obvious, mutable object (like <code>list</code>) can be altered in the function, and the reassignment of an immutable (<code>a -= 1</code>) is not an alteration of the value.</p> </li> <li> <p>Being aware of these nitpicks can save you hours of debugging effort in the long run. </p> </li> </ul>"},{"location":"RU/#splitsies","title":"\u25b6 Splitsies *","text":"<pre><code>&gt;&gt;&gt; 'a'.split()\n['a']\n\n# is same as\n&gt;&gt;&gt; 'a'.split(' ')\n['a']\n\n# but\n&gt;&gt;&gt; len(''.split())\n0\n\n# isn't the same as\n&gt;&gt;&gt; len(''.split(' '))\n1\n</code></pre>"},{"location":"RU/#_66","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>It might appear at first that the default separator for split is a single space <code>' '</code>, but as per the docs     &gt;  If sep is not specified or is <code>None</code>, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns <code>[]</code>.     &gt; If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, <code>'1,,2'.split(',')</code> returns <code>['1', '', '2']</code>). Splitting an empty string with a specified separator returns <code>['']</code>.</li> <li>Noticing how the leading and trailing whitespaces are handled in the following snippet will make things clear,     <pre><code>&gt;&gt;&gt; ' a '.split(' ')\n['', 'a', '']\n&gt;&gt;&gt; ' a '.split()\n['a']\n&gt;&gt;&gt; ''.split(' ')\n['']\n</code></pre></li> </ul>"},{"location":"RU/#wild-imports","title":"\u25b6 Wild imports *","text":"<pre><code># File: module.py\n\ndef some_weird_name_func_():\n    print(\"works!\")\n\ndef _another_weird_name_func():\n    print(\"works!\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442</p> <pre><code>&gt;&gt;&gt; from module import *\n&gt;&gt;&gt; some_weird_name_func_()\n\"works!\"\n&gt;&gt;&gt; _another_weird_name_func()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name '_another_weird_name_func' is not defined\n</code></pre>"},{"location":"RU/#_67","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>It is often advisable to not use wildcard imports. The first obvious reason for this is, in wildcard imports, the names with a leading underscore don't get imported. This may lead to errors during runtime.</li> <li>Had we used <code>from ... import a, b, c</code> syntax, the above <code>NameError</code> wouldn't have occurred.     <pre><code>&gt;&gt;&gt; from module import some_weird_name_func_, _another_weird_name_func\n&gt;&gt;&gt; _another_weird_name_func()\nworks!\n</code></pre></li> <li> <p>If you really want to use wildcard imports, then you'd have to define the list <code>__all__</code> in your module that will contain a list of public objects that'll be available when we do wildcard imports.     <pre><code>__all__ = ['_another_weird_name_func']\n\ndef some_weird_name_func_():\n    print(\"works!\")\n\ndef _another_weird_name_func():\n    print(\"works!\")\n</code></pre> \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442</p> <pre><code>&gt;&gt;&gt; _another_weird_name_func()\n\"works!\"\n&gt;&gt;&gt; some_weird_name_func_()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'some_weird_name_func_' is not defined\n</code></pre> </li> </ul>"},{"location":"RU/#all-sorted","title":"\u25b6 All sorted? *","text":"<pre><code>&gt;&gt;&gt; x = 7, 8, 9\n&gt;&gt;&gt; sorted(x) == x\nFalse\n&gt;&gt;&gt; sorted(x) == sorted(x)\nTrue\n\n&gt;&gt;&gt; y = reversed(x)\n&gt;&gt;&gt; sorted(y) == sorted(y)\nFalse\n</code></pre>"},{"location":"RU/#_68","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li> <p>The <code>sorted</code> method always returns a list, and comparing lists and tuples always returns <code>False</code> in Python. </p> </li> <li> <p>```py</p> <p>[] == tuple()   False x = 7, 8, 9 type(x), type(sorted(x))   (tuple, list)   ```</p> </li> <li> <p>Unlike <code>sorted</code>, the <code>reversed</code> method returns an iterator. Why? Because sorting requires the iterator to be either modified in-place or use an extra container (a list), whereas reversing can simply work by iterating from the last index to the first.</p> </li> <li> <p>So during comparison <code>sorted(y) == sorted(y)</code>, the first call to <code>sorted()</code> will consume the iterator <code>y</code>, and the next call will just return an empty list.</p> </li> </ul> <pre><code>&gt;&gt;&gt; x = 7, 8, 9\n&gt;&gt;&gt; y = reversed(x)\n&gt;&gt;&gt; sorted(y), sorted(y)\n([7, 8, 9], [])\n</code></pre>"},{"location":"RU/#midnight-time-doesnt-exist","title":"\u25b6 Midnight time doesn't exist?","text":"<pre><code>from datetime import datetime\n\nmidnight = datetime(2018, 1, 1, 0, 0)\nmidnight_time = midnight.time()\n\nnoon = datetime(2018, 1, 1, 12, 0)\nnoon_time = noon.time()\n\nif midnight_time:\n    print(\"Time at midnight is\", midnight_time)\n\nif noon_time:\n    print(\"Time at noon is\", noon_time)\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (&lt; 3.5):</p> <p><pre><code>('Time at noon is', datetime.time(12, 0))\n</code></pre> The midnight time is not printed.</p>"},{"location":"RU/#_69","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<p>Before Python 3.5, the boolean value for <code>datetime.time</code> object was considered to be <code>False</code> if it represented midnight in UTC. It is error-prone when using the <code>if obj:</code> syntax to check if the <code>obj</code> is null or some equivalent of \"empty.\"</p>"},{"location":"RU/#-_1","title":"---","text":""},{"location":"RU/#section-the-hidden-treasures","title":"Section: The Hidden treasures!","text":"<p>This section contains a few lesser-known and interesting things about Python that most beginners like me are unaware of (well, not anymore).</p>"},{"location":"RU/#okay-python-can-you-make-me-fly","title":"\u25b6 Okay Python, Can you make me fly?","text":"<p>Well, here you go</p> <pre><code>import antigravity\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: Sshh... It's a super-secret.</p>"},{"location":"RU/#_70","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li><code>antigravity</code> module is one of the few easter eggs released by Python developers.</li> <li><code>import antigravity</code> opens up a web browser pointing to the classic XKCD comic about Python.</li> <li>Well, there's more to it. There's another easter egg inside the easter egg. If you look at the code, there's a function defined that purports to implement the XKCD's geohashing algorithm.</li> </ul>"},{"location":"RU/#goto-but-why","title":"\u25b6 <code>goto</code>, but why?","text":"<pre><code>from goto import goto, label\nfor i in range(9):\n    for j in range(9):\n        for k in range(9):\n            print(\"I am trapped, please rescue!\")\n            if k == 2:\n                goto .breakout # breaking out from a deeply nested loop\nlabel .breakout\nprint(\"Freedom!\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 2.3): <pre><code>I am trapped, please rescue!\nI am trapped, please rescue!\nFreedom!\n</code></pre></p>"},{"location":"RU/#_71","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>A working version of <code>goto</code> in Python was announced as an April Fool's joke on 1st April 2004.</li> <li>Current versions of Python do not have this module.</li> <li>Although it works, but please don't use it. Here's the reason to why <code>goto</code> is not present in Python.</li> </ul>"},{"location":"RU/#_72","title":"\u25b6 \u0414\u0435\u0440\u0436\u0438\u0442\u0435\u0441\u044c!","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u0441\u044c \u043a \u0442\u0435\u043c \u043b\u044e\u0434\u044f\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0432 Python \u0434\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u0432, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c C-\u0441\u0442\u0438\u043b\u044c {} \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0432 \u044d\u0442\u043e,</p> <pre><code>from __future__ import braces\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>  File \"some_file.py\", line 1\n    from __future__ import braces\nSyntaxError: not a chance\n</code></pre></p> <p>\u0421\u043a\u043e\u0431\u043e\u0447\u043a\u0438? \u041d\u0438 \u0437\u0430 \u0447\u0442\u043e! \u0415\u0441\u043b\u0438 \u044d\u0442\u043e \u0440\u0430\u0437\u043e\u0447\u0430\u0440\u043e\u0432\u044b\u0432\u0430\u043b\u043e \u0432\u0430\u0441, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 PHP :). \u0425\u043e\u0440\u043e\u0448\u043e, \u0435\u0449\u0435 \u043e\u0434\u043d\u0430 \u0443\u0434\u0438\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0449\u044c, \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0438 \u0432\u044b \u043d\u0430\u0439\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 <code>SyntaxError</code> \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 <code>__future__</code> code?</p>"},{"location":"RU/#_73","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>The <code>__future__</code> module is normally used to provide features from future versions of Python. The \"future\" in this specific context is however, ironic.</li> <li>This is an easter egg concerned with the community's feelings on this issue.</li> <li>The code is actually present here in <code>future.c</code> file.</li> <li>When the CPython compiler encounters a future statement, it first runs the appropriate code in <code>future.c</code> before treating it as a normal import statement.</li> </ul>"},{"location":"RU/#_74","title":"\u25b6 \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0434\u0440\u0443\u0436\u0435\u043b\u044e\u0431\u043d\u044b\u043c \u0414\u044f\u0434\u0435\u0439 \u0411\u0430\u0440\u0440\u0438","text":"<p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 3.x) <pre><code>&gt;&gt;&gt; from __future__ import barry_as_FLUFL\n&gt;&gt;&gt; \"Ruby\" != \"Python\" # there's no doubt about it\n  File \"some_file.py\", line 1\n    \"Ruby\" != \"Python\"\n              ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; \"Ruby\" &lt;&gt; \"Python\"\nTrue\n</code></pre></p> <p>\u0412\u043e\u0442 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e.</p>"},{"location":"RU/#_75","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>\u042d\u0442\u043e \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a PEP-401 released on April 1, 2009 (now you know, what it means).</li> <li>\u0426\u0438\u0442\u0438\u0440\u0443\u044f \u0438\u0437 PEP-401</li> </ul> <p>Recognized that the != inequality operator in Python 3.0 was a horrible, finger-pain inducing mistake, the FLUFL reinstates the &lt;&gt; diamond operator as the sole spelling.   \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0447\u0438\u0442\u0430\u044e\u0442, \u0447\u0442\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 \u043d\u0435\u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430 != \u0432 Python 3.0 \u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 (\u0445\u043e\u0442\u044f \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u044f\u0437\u044b\u043a\u0430\u0445 \u044d\u0442\u043e \u0432\u043f\u043e\u043b\u043d\u0435 \u043f\u0440\u0438\u0432\u044b\u0447\u043d\u0430\u044f \u0438 \u0443\u0437\u043d\u0430\u0432\u0430\u0435\u043c\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f) \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u043b \u0431\u043e\u043b\u044c, FLUFL \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u043d\u0435\u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430 \u0432 \u0432\u0438\u0434\u0435 \u0440\u043e\u043c\u0431\u0430 &lt;&gt;. - \u0423 \u0414\u044f\u0434\u0438 \u0411\u0430\u0440\u0440\u0438 \u0431\u044b\u043b\u043e \u0435\u0449\u0435 \u043c\u043d\u043e\u0433\u043e \u0447\u0435\u0433\u043e \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0432 PEP; \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0445 \u0437\u0434\u0435\u0441\u044c. - \u042d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u0435, \u043d\u043e \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0447\u0435\u0440\u0435\u0437 \u0444\u0430\u0439\u043b python \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 <code>SyntaxError</code> (\u0441\u043c\u043e\u0442\u0440\u0438 \u044d\u0442\u043e\u0442 \u0438\u0448\u044c\u044e). \u041e\u0434\u043d\u0430\u043a\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 \u0432\u043d\u0443\u0442\u0440\u0438 <code>eval</code> \u0438\u043b\u0438 <code>compile</code>, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c (\u043d\u043e \u0437\u0430\u0447\u0435\u043c?)     <pre><code>from __future__ import barry_as_FLUFL\nprint(eval('\"Ruby\" &lt;&gt; \"Python\"'))\n</code></pre></p>"},{"location":"RU/#python-","title":"\u25b6 \u0414\u0430\u0436\u0435 Python \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442, \u0447\u0442\u043e \u043b\u044e\u0431\u043e\u0432\u044c - \u044d\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u043e.","text":"<pre><code>import this\n</code></pre> <p>\u041f\u043e\u0434\u043e\u0436\u0434\u0438\u0442\u0435, \u0447\u0442\u043e \u044d\u0442\u043e (this) \u0442\u0430\u043a\u043e\u0435? \u042d\u0442\u043e \u043b\u044e\u0431\u043e\u0432\u044c! :heart:</p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>\u0414\u0437\u0435\u043d Python, \u043e\u0442 \u0422\u0438\u043c\u0430 \u041f\u0435\u0442\u0435\u0440\u0441\u0430\n\n\u041a\u0440\u0430\u0441\u0438\u0432\u043e\u0435 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0443\u0440\u043e\u0434\u043b\u0438\u0432\u043e\u0435.\n\u042f\u0432\u043d\u043e\u0435 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u043d\u0435\u044f\u0432\u043d\u043e\u0435.\n\u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0441\u043b\u043e\u0436\u043d\u043e\u0435.\n\u0421\u043b\u043e\u0436\u043d\u043e\u0435 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0437\u0430\u043f\u0443\u0442\u0430\u043d\u043d\u043e\u0435.\n\u041f\u043b\u043e\u0441\u043a\u043e\u0435 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0435.\n\u0420\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u043e\u0435 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u043f\u043b\u043e\u0442\u043d\u043e\u0435.\n\u0427\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\u041e\u0441\u043e\u0431\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438 \u043d\u0435 \u043d\u0430\u0441\u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0441\u043e\u0431\u044b\u0435, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0440\u0443\u0448\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u0430.\n\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u0432\u0430\u0436\u043d\u0435\u0435 \u0431\u0435\u0437\u0443\u043f\u0440\u0435\u0447\u043d\u043e\u0441\u0442\u0438.\n\u041e\u0448\u0438\u0431\u043a\u0438 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u043c\u0430\u043b\u0447\u0438\u0432\u0430\u0442\u044c\u0441\u044f.\n\u0415\u0441\u043b\u0438 \u043e\u043d\u0438 \u043d\u0435 \u0437\u0430\u043c\u0430\u043b\u0447\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u044f\u0432\u043d\u043e.\n\u0412\u0441\u0442\u0440\u0435\u0442\u0438\u0432 \u0434\u0432\u0443\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043e\u0442\u0431\u0440\u043e\u0441\u044c \u0438\u0441\u043a\u0443\u0448\u0435\u043d\u0438\u0435 \u0443\u0433\u0430\u0434\u0430\u0442\u044c.\n\u0414\u043e\u043b\u0436\u0435\u043d \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438, \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e.\n\u0425\u043e\u0442\u044f \u043e\u043d \u043f\u043e\u043d\u0430\u0447\u0430\u043b\u0443 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438 \u043d\u0435 \u043e\u0447\u0435\u0432\u0438\u0434\u0435\u043d, \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0433\u043e\u043b\u043b\u0430\u043d\u0434\u0435\u0446 [^1].\n\u0421\u0435\u0439\u0447\u0430\u0441 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u043d\u0438\u043a\u043e\u0433\u0434\u0430.\n\u0425\u043e\u0442\u044f \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0439\u0447\u0430\u0441.\n\u0415\u0441\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u043b\u043e\u0436\u043d\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u2014 \u0438\u0434\u0435\u044f \u043f\u043b\u043e\u0445\u0430.\n\u0415\u0441\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043b\u0435\u0433\u043a\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u2014 \u0438\u0434\u0435\u044f, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0445\u043e\u0440\u043e\u0448\u0430.\n\u041f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430 \u0438\u043c\u0451\u043d \u2014 \u043e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u0448\u0442\u0443\u043a\u0430! \u0411\u0443\u0434\u0435\u043c \u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0445 \u0431\u043e\u043b\u044c\u0448\u0435!\n</code></pre></p> <p>\u042d\u0442\u043e \u0414\u0437\u0435\u043d Python!</p> <pre><code>&gt;&gt;&gt; love = this\n&gt;&gt;&gt; this is love\nTrue\n&gt;&gt;&gt; love is True\nFalse\n&gt;&gt;&gt; love is False\nFalse\n&gt;&gt;&gt; love is not True or False\nTrue\n&gt;&gt;&gt; love is not True or False; love is love  # Love is complicated\nTrue\n</code></pre>"},{"location":"RU/#_76","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li><code>this</code> module in Python is an easter egg for The Zen Of Python (PEP 20).</li> <li>And if you think that's already interesting enough, check out the implementation of this.py. Interestingly, the code for the Zen violates itself (and that's probably the only place where this happens).</li> <li> <p>Regarding the statement <code>love is not True or False; love is love</code>, ironic but it's self-explanatory (if not, please see the examples related to <code>is</code> and <code>is not</code> operators).</p> </li> <li> <p>\u041c\u043e\u0434\u0443\u043b\u044c <code>this</code> \u0432 Python - \u044d\u0442\u043e \u043f\u0430\u0441\u0445\u0430\u043b\u044c\u043d\u043e\u0435 \u044f\u0439\u0446\u043e \u0434\u043b\u044f The Zen Of Python (PEP 20).</p> </li> <li>\u0418 \u0435\u0441\u043b\u0438 \u0432\u044b \u0434\u0443\u043c\u0430\u0435\u0442\u0435, \u0447\u0442\u043e \u044d\u0442\u043e \u0443\u0436\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e this.py. \u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e, \u0447\u0442\u043e \u043a\u043e\u0434 \u0434\u043b\u044f \u0434\u0437\u0435\u043d\u0430 \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 \u0441\u0430\u043c \u0441\u0435\u0431\u044f (\u0438 \u044d\u0442\u043e, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e, \u0433\u0434\u0435 \u044d\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442, \u043d\u043e \u044d\u0442\u043e \u043d\u0435 \u0442\u043e\u0447\u043d\u043e).</li> <li>\u0427\u0442\u043e \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f <code>\u043b\u044e\u0431\u043e\u0432\u044c \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u0438\u043d\u043e\u0439 \u0438\u043b\u0438 \u043b\u043e\u0436\u044c\u044e; \u043b\u044e\u0431\u043e\u0432\u044c - \u044d\u0442\u043e \u043b\u044e\u0431\u043e\u0432\u044c</code>, \u0438\u0440\u043e\u043d\u0438\u0447\u043d\u043e, \u043d\u043e \u044d\u0442\u043e \u0441\u0430\u043c\u043e\u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e (\u0435\u0441\u043b\u0438 \u043d\u0435\u0442, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 <code>is</code> \u0438 <code>is not</code>).</li> </ul>"},{"location":"RU/#yes-it-exists","title":"\u25b6 Yes, it exists!","text":"<p>The <code>else</code> clause for loops. One typical example might be:</p> <pre><code>  def does_exists_num(l, to_find):\n      for num in l:\n          if num == to_find:\n              print(\"Exists!\")\n              break\n      else:\n          print(\"Does not exist\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; does_exists_num(some_list, 4)\nExists!\n&gt;&gt;&gt; does_exists_num(some_list, -1)\nDoes not exist\n</code></pre></p> <p>The <code>else</code> clause in exception handling. An example,</p> <pre><code>try:\n    pass\nexcept:\n    print(\"Exception occurred!!!\")\nelse:\n    print(\"Try block executed successfully...\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>Try block executed successfully...\n</code></pre></p>"},{"location":"RU/#_77","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>The <code>else</code> clause after a loop is executed only when there's no explicit <code>break</code> after all the iterations. You can think of it as a \"nobreak\" clause.</li> <li><code>else</code> clause after a try block is also called \"completion clause\" as reaching the <code>else</code> clause in a <code>try</code> statement means that the try block actually completed successfully.</li> </ul>"},{"location":"RU/#ellipsis","title":"\u25b6 Ellipsis *","text":"<pre><code>def some_func():\n    Ellipsis\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 <pre><code>&gt;&gt;&gt; some_func()\n# No output, No Error\n\n&gt;&gt;&gt; SomeRandomString\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'SomeRandomString' is not defined\n\n&gt;&gt;&gt; Ellipsis\nEllipsis\n</code></pre></p>"},{"location":"RU/#_78","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<ul> <li>In Python, <code>Ellipsis</code> is a globally available built-in object which is equivalent to <code>...</code>.     <pre><code>&gt;&gt;&gt; ...\nEllipsis\n</code></pre></li> <li>Ellipsis can be used for several purposes,<ul> <li>As a placeholder for code that hasn't been written yet (just like <code>pass</code> statement)</li> <li>In slicing syntax to represent the full slices in remaining direction <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; three_dimensional_array = np.arange(8).reshape(2, 2, 2)\narray([\n    [\n        [0, 1],\n        [2, 3]\n    ],\n\n    [\n        [4, 5],\n        [6, 7]\n    ]\n])\n</code></pre> So our <code>three_dimensional_array</code> is an array of array of arrays. Let's say we want to print the second element (index <code>1</code>) of all the innermost arrays, we can use Ellipsis to bypass all the preceding dimensions <pre><code>&gt;&gt;&gt; three_dimensional_array[:,:,1]\narray([[1, 3],\n   [5, 7]])\n&gt;&gt;&gt; three_dimensional_array[..., 1] # using Ellipsis.\narray([[1, 3],\n   [5, 7]])\n</code></pre> Note: this will work for any number of dimensions. You can even select slice in first and last dimension and ignore the middle ones this way (<code>n_dimensional_array[firs_dim_slice, ..., last_dim_slice]</code>)</li> <li>In type hinting to indicate only a part of the type (like <code>(Callable[..., int]</code> or <code>Tuple[str, ...]</code>))</li> <li>You may also use Ellipsis as a default function argument (in the cases when you want to differentiate between the \"no argument passed\" and \"None value passed\" scenarios).</li> </ul> </li> </ul>"},{"location":"RU/#inpinity","title":"\u25b6 Inpinity","text":"<p>The spelling is intended. Please, don't submit a patch for this.</p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 3.x): <pre><code>&gt;&gt;&gt; infinity = float('infinity')\n&gt;&gt;&gt; hash(infinity)\n314159\n&gt;&gt;&gt; hash(float('-inf'))\n-314159\n</code></pre></p>"},{"location":"RU/#_79","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>Hash of infinity is 10\u2075 x \u03c0.</li> <li>Interestingly, the hash of <code>float('-inf')</code> is \"-10\u2075 x \u03c0\" in Python 3, whereas \"-10\u2075 x e\" in Python 2.</li> </ul>"},{"location":"RU/#lets-mangle","title":"\u25b6 Let's mangle","text":"<p>1. <pre><code>class Yo(object):\n    def __init__(self):\n        self.__honey = True\n        self.bro = True\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; Yo().bro\nTrue\n&gt;&gt;&gt; Yo().__honey\nAttributeError: 'Yo' object has no attribute '__honey'\n&gt;&gt;&gt; Yo()._Yo__honey\nTrue\n</code></pre></p> <p>2. <pre><code>class Yo(object):\n    def __init__(self):\n        # Let's try something symmetrical this time\n        self.__honey__ = True\n        self.bro = True\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; Yo().bro\nTrue\n\n&gt;&gt;&gt; Yo()._Yo__honey__\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'Yo' object has no attribute '_Yo__honey__'\n</code></pre></p> <p>Why did <code>Yo()._Yo__honey</code> work?</p> <p>3.</p> <pre><code>_A__variable = \"Some value\"\n\nclass A(object):\n    def some_func(self):\n        return __variable # not initialized anywhere yet\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; A().__variable\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'A' object has no attribute '__variable'\n\n&gt;&gt;&gt; A().some_func()\n'Some value'\n</code></pre></p>"},{"location":"RU/#_80","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>Name Mangling is used to avoid naming collisions between different namespaces.</li> <li>In Python, the interpreter modifies (mangles) the class member names starting with <code>__</code> (double underscore a.k.a \"dunder\") and not ending with more than one trailing underscore by adding <code>_NameOfTheClass</code> in front.</li> <li>So, to access <code>__honey</code> attribute in the first snippet, we had to append <code>_Yo</code> to the front, which would prevent conflicts with the same name attribute defined in any other class.</li> <li>But then why didn't it work in the second snippet? Because name mangling excludes the names ending with double underscores.</li> <li>The third snippet was also a consequence of name mangling. The name <code>__variable</code> in the statement <code>return __variable</code> was mangled to <code>_A__variable</code>, which also happens to be the name of the variable we declared in the outer scope.</li> <li>Also, if the mangled name is longer than 255 characters, truncation will happen.</li> </ul>"},{"location":"RU/#-_2","title":"---","text":""},{"location":"RU/#section-appearances-are-deceptive","title":"Section: Appearances are deceptive!","text":""},{"location":"RU/#skipping-lines","title":"\u25b6 Skipping lines?","text":"<p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; value = 11\n&gt;&gt;&gt; valu\u0435 = 32\n&gt;&gt;&gt; value\n11\n</code></pre></p> <p>Wut?</p> <p>Note: The easiest way to reproduce this is to simply copy the statements from the above snippet and paste them into your file/shell.</p>"},{"location":"RU/#_81","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<p>Some non-Western characters look identical to letters in the English alphabet but are considered distinct by the interpreter.</p> <pre><code>&gt;&gt;&gt; ord('\u0435') # cyrillic 'e' (Ye)\n1077\n&gt;&gt;&gt; ord('e') # latin 'e', as used in English and typed using standard keyboard\n101\n&gt;&gt;&gt; '\u0435' == 'e'\nFalse\n\n&gt;&gt;&gt; value = 42 # latin e\n&gt;&gt;&gt; valu\u0435 = 23 # cyrillic 'e', Python 2.x interpreter would raise a `SyntaxError` here\n&gt;&gt;&gt; value\n42\n</code></pre> <p>The built-in <code>ord()</code> function returns a character's Unicode code point, and different code positions of Cyrillic 'e' and Latin 'e' justify the behavior of the above example.</p>"},{"location":"RU/#teleportation","title":"\u25b6 Teleportation","text":"<pre><code># `pip install numpy` first.\nimport numpy as np\n\ndef energy_send(x):\n    # Initializing a numpy array\n    np.array([float(x)])\n\ndef energy_receive():\n    # Return an empty numpy array\n    return np.empty((), dtype=np.float).tolist()\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; energy_send(123.456)\n&gt;&gt;&gt; energy_receive()\n123.456\n</code></pre></p> <p>Where's the Nobel Prize?</p>"},{"location":"RU/#_82","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>Notice that the numpy array created in the <code>energy_send</code> function is not returned, so that memory space is free to reallocate.</li> <li><code>numpy.empty()</code> returns the next free memory slot without reinitializing it. This memory spot just happens to be the same one that was just freed (usually, but not always).</li> </ul>"},{"location":"RU/#well-something-is-fishy","title":"\u25b6 Well, something is fishy...","text":"<pre><code>def square(x):\n    \"\"\"\n    A simple function to calculate the square of a number by addition.\n    \"\"\"\n    sum_so_far = 0\n    for counter in range(x):\n        sum_so_far = sum_so_far + x\n  return sum_so_far\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 2.x):</p> <pre><code>&gt;&gt;&gt; square(10)\n10\n</code></pre> <p>Shouldn't that be 100?</p> <p>Note: If you're not able to reproduce this, try running the file mixed_tabs_and_spaces.py via the shell.</p>"},{"location":"RU/#_83","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<ul> <li>Don't mix tabs and spaces! The character just preceding return is a \"tab\",  and the code is indented by multiple of \"4 spaces\" elsewhere in the example.</li> <li>This is how Python handles tabs:</li> </ul> <p>First, tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight &lt;...&gt; * So the \"tab\" at the last line of <code>square</code> function is replaced with eight spaces, and it gets into the loop. * Python 3 is kind enough to throw an error for such cases automatically.</p> <pre><code>**\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (Python 3.x):**\n```py\nTabError: inconsistent use of tabs and spaces in indentation\n```\n</code></pre>"},{"location":"RU/#-_3","title":"---","text":""},{"location":"RU/#section-miscellaneous","title":"Section: Miscellaneous","text":""},{"location":"RU/#is-faster","title":"\u25b6 <code>+=</code> is faster","text":"<pre><code># using \"+\", three strings:\n&gt;&gt;&gt; timeit.timeit(\"s1 = s1 + s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100)\n0.25748300552368164\n# using \"+=\", three strings:\n&gt;&gt;&gt; timeit.timeit(\"s1 += s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100)\n0.012188911437988281\n</code></pre>"},{"location":"RU/#_84","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li><code>+=</code> is faster than <code>+</code> for concatenating more than two strings because the first string (example, <code>s1</code> for <code>s1 += s2 + s3</code>) is not destroyed while calculating the complete string.</li> </ul>"},{"location":"RU/#lets-make-a-giant-string","title":"\u25b6 Let's make a giant string!","text":"<pre><code>def add_string_with_plus(iters):\n    s = \"\"\n    for i in range(iters):\n        s += \"xyz\"\n    assert len(s) == 3*iters\n\ndef add_bytes_with_plus(iters):\n    s = b\"\"\n    for i in range(iters):\n        s += b\"xyz\"\n    assert len(s) == 3*iters\n\ndef add_string_with_format(iters):\n    fs = \"{}\"*iters\n    s = fs.format(*([\"xyz\"]*iters))\n    assert len(s) == 3*iters\n\ndef add_string_with_join(iters):\n    l = []\n    for i in range(iters):\n        l.append(\"xyz\")\n    s = \"\".join(l)\n    assert len(s) == 3*iters\n\ndef convert_list_to_string(l, iters):\n    s = \"\".join(l)\n    assert len(s) == 3*iters\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <pre><code># Executed in ipython shell using %timeit for better readability of results.\n# You can also use the timeit module in normal python shell/scriptm=, example usage below\n# timeit.timeit('add_string_with_plus(10000)', number=1000, globals=globals())\n\n&gt;&gt;&gt; NUM_ITERS = 1000\n&gt;&gt;&gt; %timeit -n1000 add_string_with_plus(NUM_ITERS)\n124 \u00b5s \u00b1 4.73 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS)\n211 \u00b5s \u00b1 10.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_format(NUM_ITERS)\n61 \u00b5s \u00b1 2.18 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_join(NUM_ITERS)\n117 \u00b5s \u00b1 3.21 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; l = [\"xyz\"]*NUM_ITERS\n&gt;&gt;&gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS)\n10.1 \u00b5s \u00b1 1.06 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre> <p>Let's increase the number of iterations by a factor of 10.</p> <pre><code>&gt;&gt;&gt; NUM_ITERS = 10000\n&gt;&gt;&gt; %timeit -n1000 add_string_with_plus(NUM_ITERS) # Linear increase in execution time\n1.26 ms \u00b1 76.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS) # Quadratic increase\n6.82 ms \u00b1 134 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_format(NUM_ITERS) # Linear increase\n645 \u00b5s \u00b1 24.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_join(NUM_ITERS) # Linear increase\n1.17 ms \u00b1 7.25 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; l = [\"xyz\"]*NUM_ITERS\n&gt;&gt;&gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS) # Linear increase\n86.3 \u00b5s \u00b1 2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre>"},{"location":"RU/#_85","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<ul> <li>You can read more about timeit or %timeit on these links. They are used to measure the execution time of code pieces.</li> <li>Don't use <code>+</code> for generating long strings \u2014 In Python, <code>str</code> is immutable, so the left and right strings have to be copied into the new string for every pair of concatenations. If you concatenate four strings of length 10, you'll be copying (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90 characters instead of just 40 characters. Things get quadratically worse as the number and size of the string increases (justified with the execution times of <code>add_bytes_with_plus</code> function)</li> <li>Therefore, it's advised to use <code>.format.</code> or <code>%</code> syntax (however, they are slightly slower than <code>+</code> for very short strings).</li> <li>Or better, if already you've contents available in the form of an iterable object, then use <code>''.join(iterable_object)</code> which is much faster.</li> <li>Unlike <code>add_bytes_with_plus</code> because of the <code>+=</code> optimizations discussed in the previous example, <code>add_string_with_plus</code> didn't show a quadratic increase in execution time. Had the statement been <code>s = s + \"x\" + \"y\" + \"z\"</code> instead of <code>s += \"xyz\"</code>, the increase would have been quadratic.   <pre><code>def add_string_with_plus(iters):\n    s = \"\"\n    for i in range(iters):\n        s = s + \"x\" + \"y\" + \"z\"\n    assert len(s) == 3*iters\n\n&gt;&gt;&gt; %timeit -n100 add_string_with_plus(1000)\n388 \u00b5s \u00b1 22.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n100 add_string_with_plus(10000) # Quadratic increase in execution time\n9 ms \u00b1 298 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n</code></pre></li> <li> <p>So many ways to format and create a giant string are somewhat in contrast to the Zen of Python, according to which,</p> <p>There should be one-- and preferably only one --obvious way to do it.</p> </li> </ul>"},{"location":"RU/#slowing-down-dict-lookups","title":"\u25b6 Slowing down <code>dict</code> lookups *","text":"<pre><code>some_dict = {str(i): 1 for i in range(1_000_000)}\nanother_dict = {str(i): 1 for i in range(1_000_000)}\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <pre><code>&gt;&gt;&gt; %timeit some_dict['5']\n28.6 ns \u00b1 0.115 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n&gt;&gt;&gt; some_dict[1] = 1\n&gt;&gt;&gt; %timeit some_dict['5']\n37.2 ns \u00b1 0.265 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n\n&gt;&gt;&gt; %timeit another_dict['5']\n28.5 ns \u00b1 0.142 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n&gt;&gt;&gt; another_dict[1]  # Trying to access a key that doesn't exist\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nKeyError: 1\n&gt;&gt;&gt; %timeit another_dict['5']\n38.5 ns \u00b1 0.0913 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n</code></pre> Why are same lookups becoming slower?</p>"},{"location":"RU/#_86","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>CPython has a generic dictionary lookup function that handles all types of keys (<code>str</code>, <code>int</code>, any object ...), and a specialized one for the common case of dictionaries composed of <code>str</code>-only keys.</li> <li>The specialized function (named <code>lookdict_unicode</code> in CPython's source) knows all existing keys (including the looked-up key) are strings, and uses the faster &amp; simpler string comparison to compare keys, instead of calling the <code>__eq__</code> method.</li> <li>The first time a <code>dict</code> instance is accessed with a non-<code>str</code> key, it's modified so future lookups use the generic function.</li> <li>This process is not reversible for the particular <code>dict</code> instance, and the key doesn't even have to exist in the dictionary. That's why attempting a failed lookup has the same effect.</li> </ul>"},{"location":"RU/#bloating-instance-dicts","title":"\u25b6 Bloating instance <code>dict</code>s *","text":"<pre><code>import sys\n\nclass SomeClass:\n    def __init__(self):\n        self.some_attr1 = 1\n        self.some_attr2 = 2\n        self.some_attr3 = 3\n        self.some_attr4 = 4\n\n\ndef dict_size(o):\n    return sys.getsizeof(o.__dict__)\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: (Python 3.8, other Python 3 versions may vary a little) <pre><code>&gt;&gt;&gt; o1 = SomeClass()\n&gt;&gt;&gt; o2 = SomeClass()\n&gt;&gt;&gt; dict_size(o1)\n104\n&gt;&gt;&gt; dict_size(o2)\n104\n&gt;&gt;&gt; del o1.some_attr1\n&gt;&gt;&gt; o3 = SomeClass()\n&gt;&gt;&gt; dict_size(o3)\n232\n&gt;&gt;&gt; dict_size(o1)\n232\n</code></pre></p> <p>Let's try again... In a new interpreter:</p> <pre><code>&gt;&gt;&gt; o1 = SomeClass()\n&gt;&gt;&gt; o2 = SomeClass()\n&gt;&gt;&gt; dict_size(o1)\n104  # as expected\n&gt;&gt;&gt; o1.some_attr5 = 5\n&gt;&gt;&gt; o1.some_attr6 = 6\n&gt;&gt;&gt; dict_size(o1)\n360\n&gt;&gt;&gt; dict_size(o2)\n272\n&gt;&gt;&gt; o3 = SomeClass()\n&gt;&gt;&gt; dict_size(o3)\n232\n</code></pre> <p>What makes those dictionaries become bloated? And why are newly created objects bloated as well?</p>"},{"location":"RU/#_87","title":"\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:","text":"<ul> <li>CPython is able to reuse the same \"keys\" object in multiple dictionaries. This was added in PEP 412 with the motivation to reduce memory usage, specifically in dictionaries of instances - where keys (instance attributes) tend to be common to all instances.</li> <li>This optimization is entirely seamless for instance dictionaries, but it is disabled if certain assumptions are broken.</li> <li>Key-sharing dictionaries do not support deletion; if an instance attribute is deleted, the dictionary is \"unshared\", and key-sharing is disabled for all future instances of the same class.</li> <li>Additionaly, if the dictionary keys have been resized (because new keys are inserted), they are kept shared only if they are used by a exactly single dictionary (this allows adding many attributes in the <code>__init__</code> of the very first created instance, without causing an \"unshare\"). If multiple instances exist when a resize happens, key-sharing is disabled for all future instances of the same class: CPython can't tell if your instances are using the same set of attributes anymore, and decides to bail out on attempting to share their keys.</li> <li>A small tip, if you aim to lower your program's memory footprint: don't delete instance attributes, and make sure to initialize all attributes in your <code>__init__</code>!</li> </ul>"},{"location":"RU/#minor-ones","title":"\u25b6 Minor Ones *","text":"<ul> <li><code>join()</code> is a string operation instead of list operation. (sort of counter-intuitive at first usage)</li> </ul> <p>\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435: If <code>join()</code> is a method on a string, then it can operate on any iterable (list, tuple, iterators). If it were a method on a list, it'd have to be implemented separately by every type. Also, it doesn't make much sense to put a string-specific method on a generic <code>list</code> object API.</p> <ul> <li>Few weird looking but semantically correct statements:</li> <li><code>[] = ()</code> is a semantically correct statement (unpacking an empty <code>tuple</code> into an empty <code>list</code>)</li> <li><code>'a'[0][0][0][0][0]</code> is also a semantically correct statement as strings are sequences(iterables supporting element access using integer indices) in Python.</li> <li> <p><code>3 --0-- 5 == 8</code> and <code>--5 == 5</code> are both semantically correct statements and evaluate to <code>True</code>.</p> </li> <li> <p>Given that <code>a</code> is a number, <code>++a</code> and <code>--a</code> are both valid Python statements but don't behave the same way as compared with similar statements in languages like C, C++, or Java.   <pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; a\n5\n&gt;&gt;&gt; ++a\n5\n&gt;&gt;&gt; --a\n5\n</code></pre></p> </li> </ul> <p>\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435:   + There is no <code>++</code> operator in Python grammar. It is actually two <code>+</code> operators.   + <code>++a</code> parses as <code>+(+a)</code> which translates to <code>a</code>. Similarly, the output of the statement <code>--a</code> can be justified.   + This StackOverflow thread discusses the rationale behind the absence of increment and decrement operators in Python.</p> <ul> <li> <p>You must be aware of the Walrus operator in Python. But have you ever heard about the space-invader operator?   <pre><code>&gt;&gt;&gt; a = 42\n&gt;&gt;&gt; a -=- 1\n&gt;&gt;&gt; a\n43\n</code></pre>   It is used as an alternative incrementation operator, together with another one   <pre><code>&gt;&gt;&gt; a +=+ 1\n&gt;&gt;&gt; a\n&gt;&gt;&gt; 44\n</code></pre> \ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435: This prank comes from Raymond Hettinger's tweet. The space invader operator is actually just a malformatted <code>a -= (-1)</code>. Which is equivalent to <code>a = a - (- 1)</code>. Similar for the <code>a += (+ 1)</code> case.</p> </li> <li> <p>Python has an undocumented converse implication operator. </p> <pre><code>&gt;&gt;&gt; False ** False == True\nTrue\n&gt;&gt;&gt; False ** True == False\nTrue\n&gt;&gt;&gt; True ** False == True\nTrue\n&gt;&gt;&gt; True ** True == True\nTrue\n</code></pre> <p>\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435: If you replace <code>False</code> and <code>True</code> by 0 and 1 and do the maths, the truth table is equivalent to a converse implication operator. (Source)</p> </li> <li> <p>Since we are talking operators, there's also <code>@</code> operator for matrix multiplication (don't worry, this time it's for real).</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.array([2, 2, 2]) @ np.array([7, 8, 8])\n46\n</code></pre> <p>\ud83d\udca1 \u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435: The <code>@</code> operator was added in Python 3.5 keeping the scientific community in mind. Any object can overload <code>__matmul__</code> magic method to define behavior for this operator.</p> </li> <li> <p>From Python 3.8 onwards you can use a typical f-string syntax like <code>f'{some_var=}</code> for quick debugging. Example,     <pre><code>&gt;&gt;&gt; some_string = \"wtfpython\"\n&gt;&gt;&gt; f'{some_string=}'\n\"some_string='wtfpython'\"\n</code></pre></p> </li> <li> <p>Python uses 2 bytes for local variable storage in functions. In theory, this means that only 65536 variables can be defined in a function. However, python has a handy solution built in that can be used to store more than 2^16 variable names. The following code demonstrates what happens in the stack when more than 65536 local variables are defined (Warning: This code prints around 2^18 lines of text, so be prepared!):</p> <p>```py  import dis exec(\"\"\" def f():     \"\"\" + \"\"\"     \"\"\".join([\"X\" + str(x) + \"=\" + str(x) for x in range(65539)]))</p> <p>f()</p> <p>print(dis.dis(f)) ```</p> </li> <li> <p>Multiple Python threads won't run your Python code concurrently (yes, you heard it right!). It may seem intuitive to spawn several threads and let them execute your Python code concurrently, but, because of the Global Interpreter Lock in Python, all you're doing is making your threads execute on the same core turn by turn. Python threads are good for IO-bound tasks, but to achieve actual parallelization in Python for CPU-bound tasks, you might want to use the Python multiprocessing module.</p> </li> <li> <p>Sometimes, the <code>print</code> method might not print values immediately. For example,</p> <pre><code># File some_file.py\nimport time\n\nprint(\"wtfpython\", end=\"_\")\ntime.sleep(3)\n</code></pre> <p>This will print the <code>wtfpython</code> after 3 seconds due to the <code>end</code> argument because the output buffer is flushed either after encountering <code>\\n</code> or when the program finishes execution. We can force the buffer to flush by passing <code>flush=True</code> argument.</p> </li> <li> <p>List slicing with out of the bounds indices throws no errors   <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; some_list[111:]\n[]\n</code></pre></p> </li> <li> <p>Slicing an iterable not always creates a new object. For example,     <pre><code>&gt;&gt;&gt; some_str = \"wtfpython\"\n&gt;&gt;&gt; some_list = ['w', 't', 'f', 'p', 'y', 't', 'h', 'o', 'n']\n&gt;&gt;&gt; some_list is some_list[:] # False expected because a new object is created.\nFalse\n&gt;&gt;&gt; some_str is some_str[:] # True because strings are immutable, so making a new object is of not much use.\nTrue\n</code></pre></p> </li> <li> <p><code>int('\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669')</code> returns <code>123456789</code> in Python 3. In Python, Decimal characters include digit characters, and all characters that can be used to form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. Here's an interesting story related to this behavior of Python.</p> </li> <li> <p>You can separate numeric literals with underscores (for better readability) from Python 3 onwards.</p> <pre><code>&gt;&gt;&gt; six_million = 6_000_000\n&gt;&gt;&gt; six_million\n6000000\n&gt;&gt;&gt; hex_address = 0xF00D_CAFE\n&gt;&gt;&gt; hex_address\n4027435774\n</code></pre> </li> <li> <p><code>'abc'.count('') == 4</code>. Here's an approximate implementation of <code>count</code> method, which would make the things more clear   <pre><code>def count(s, sub):\n    result = 0\n    for i in range(len(s) + 1 - len(sub)):\n        result += (s[i:i + len(sub)] == sub)\n    return result\n</code></pre>   The behavior is due to the matching of empty substring(<code>''</code>) with slices of length 0 in the original string.</p> </li> </ul>"},{"location":"RU/#-_4","title":"---","text":""},{"location":"RU/#contributing","title":"Contributing","text":"<p>A few ways in which you can contribute to wtfpython,</p> <ul> <li>Suggesting new examples</li> <li>Helping with translation (See issues labeled translation)</li> <li>Minor corrections like pointing out outdated snippets, typos, formatting errors, etc.</li> <li>Identifying gaps (things like inadequate explanation, redundant examples, etc.)</li> <li>Any creative suggestions to make this project more fun and useful</li> </ul> <p>Please see CONTRIBUTING.md for more details. Feel free to create a new issue to discuss things.</p> <p>PS: Please don't reach out with backlinking requests, no links will be added unless they're highly relevant to the project.</p>"},{"location":"RU/#acknowledgements","title":"Acknowledgements","text":"<p>The idea and design for this collection were initially inspired by Denys Dovhan's awesome project wtfjs. The overwhelming support by Pythonistas gave it the shape it is in right now.</p>"},{"location":"RU/#some-nice-links","title":"Some nice Links!","text":"<ul> <li>https://www.youtube.com/watch?v=sH4XF6pKKmk</li> <li>https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python</li> <li>https://sopython.com/wiki/Common_Gotchas_In_Python</li> <li>https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines</li> <li>https://stackoverflow.com/questions/1011431/common-pitfalls-in-python</li> <li>https://www.python.org/doc/humor/</li> <li>https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator</li> <li>https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65</li> <li>https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;type=Issues</li> <li>WFTPython discussion threads on Hacker News and Reddit.</li> </ul>"},{"location":"RU/#license","title":"\ud83c\udf93 License","text":"<p>\u00a9 Satwik Kansal</p>"},{"location":"RU/#surprise-your-friends-as-well","title":"Surprise your friends as well!","text":"<p>If you like wtfpython, you can use these quick links to share it with your friends,</p> <p>Twitter | Linkedin | Facebook </p>"},{"location":"RU/#need-a-pdf-version","title":"Need a pdf version?","text":"<p>I've received a few requests for the pdf (and epub) version of wtfpython. You can add your details here to get them as soon as they are finished.</p> <p>That's all folks! For upcoming content like this, you can add your email here.</p>"},{"location":"USA/","title":"\ud83d\udc0d Original","text":"What the f*ck Python! \ud83d\ude31 <p>Exploring and understanding Python through surprising snippets.</p> <p>Translations: Chinese \u4e2d\u6587 | Vietnamese Ti\u1ebfng Vi\u1ec7t | Spanish Espa\u00f1ol | Korean \ud55c\uad6d\uc5b4 | Russian \u0420\u0443\u0441\u0441\u043a\u0438\u0439 | German Deutsch | Add translation</p> <p>Other modes: Interactive Website | Interactive Notebook | CLI</p> <p>Python, being a beautifully designed high-level and interpreter-based programming language, provides us with many features for the programmer's comfort. But sometimes, the outcomes of a Python snippet may not seem obvious at first sight.</p> <p>Here's a fun project attempting to explain what exactly is happening under the hood for some counter-intuitive snippets and lesser-known features in Python.</p> <p>While some of the examples you see below may not be WTFs in the truest sense, but they'll reveal some of the interesting parts of Python that you might be unaware of. I find it a nice way to learn the internals of a programming language, and I believe that you'll find it interesting too!</p> <p>If you're an experienced Python programmer, you can take it as a challenge to get most of them right in the first attempt. You may have already experienced some of them before, and I might be able to revive sweet old memories of yours! :sweat_smile:</p> <p>PS: If you're a returning reader, you can learn about the new modifications here (the examples marked with asterisk are the ones added in the latest major revision). </p> <p>So, here we go...</p>"},{"location":"USA/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Structure of the Examples<ul> <li>\u25b6 Some fancy Title</li> </ul> </li> <li>Usage</li> <li>\ud83d\udc40 Examples</li> <li>Section: Strain your brain!<ul> <li>\u25b6 First things first! *</li> <li>\u25b6 Strings can be tricky sometimes</li> <li>\u25b6 Be careful with chained operations</li> <li>\u25b6 How not to use <code>is</code> operator</li> <li>\u25b6 Hash brownies</li> <li>\u25b6 Deep down, we're all the same.</li> <li>\u25b6 Disorder within order *</li> <li>\u25b6 Keep trying... *</li> <li>\u25b6 For what?</li> <li>\u25b6 Evaluation time discrepancy</li> <li>\u25b6 <code>is not ...</code> is not <code>is (not ...)</code></li> <li>\u25b6 A tic-tac-toe where X wins in the first attempt!</li> <li>\u25b6 Schr\u00f6dinger's variable</li> <li>\u25b6 The chicken-egg problem *</li> <li>\u25b6 Subclass relationships</li> <li>\u25b6 Methods equality and identity</li> <li>\u25b6 All-true-ation *</li> <li>\u25b6 The surprising comma</li> <li>\u25b6 Strings and the backslashes</li> <li>\u25b6 not knot!</li> <li>\u25b6 Half triple-quoted strings</li> <li>\u25b6 What's wrong with booleans?</li> <li>\u25b6 Class attributes and instance attributes</li> <li>\u25b6 yielding None</li> <li>\u25b6 Yielding from... return! *</li> <li>\u25b6 Nan-reflexivity *</li> <li>\u25b6 Mutating the immutable!</li> <li>\u25b6 The disappearing variable from outer scope</li> <li>\u25b6 The mysterious key type conversion</li> <li>\u25b6 Let's see if you can guess this?</li> <li>\u25b6 Exceeds the limit for integer string conversion</li> </ul> </li> <li>Section: Slippery Slopes<ul> <li>\u25b6 Modifying a dictionary while iterating over it</li> <li>\u25b6 Stubborn <code>del</code> operation</li> <li>\u25b6 The out of scope variable</li> <li>\u25b6 Deleting a list item while iterating</li> <li>\u25b6 Lossy zip of iterators *</li> <li>\u25b6 Loop variables leaking out!</li> <li>\u25b6 Beware of default mutable arguments!</li> <li>\u25b6 Catching the Exceptions</li> <li>\u25b6 Same operands, different story!</li> <li>\u25b6 Name resolution ignoring class scope</li> <li>\u25b6 Rounding like a banker *</li> <li>\u25b6 Needles in a Haystack *</li> <li>\u25b6 Splitsies *</li> <li>\u25b6 Wild imports *</li> <li>\u25b6 All sorted? *</li> <li>\u25b6 Midnight time doesn't exist?</li> </ul> </li> <li>Section: The Hidden treasures!<ul> <li>\u25b6 Okay Python, Can you make me fly?</li> <li>\u25b6 <code>goto</code>, but why?</li> <li>\u25b6 Brace yourself!</li> <li>\u25b6 Let's meet Friendly Language Uncle For Life</li> <li>\u25b6 Even Python understands that love is complicated</li> <li>\u25b6 Yes, it exists!</li> <li>\u25b6 Ellipsis *</li> <li>\u25b6 Inpinity</li> <li>\u25b6 Let's mangle</li> </ul> </li> <li>Section: Appearances are deceptive!<ul> <li>\u25b6 Skipping lines?</li> <li>\u25b6 Teleportation</li> <li>\u25b6 Well, something is fishy...</li> </ul> </li> <li>Section: Miscellaneous<ul> <li>\u25b6 <code>+=</code> is faster</li> <li>\u25b6 Let's make a giant string!</li> <li>\u25b6 Slowing down <code>dict</code> lookups *</li> <li>\u25b6 Bloating instance <code>dict</code>s *</li> <li>\u25b6 Minor Ones *</li> </ul> </li> <li>Contributing</li> <li>Acknowledgements</li> <li>\ud83c\udf93 License</li> <li>Surprise your friends as well!</li> <li>More content like this?</li> </ul>"},{"location":"USA/#structure-of-the-examples","title":"Structure of the Examples","text":"<p>All the examples are structured like below:</p> <p>Note: All the examples are tested on Python 3.5.2 interactive interpreter, and they should work for all the Python versions unless explicitly specified before the output.</p>"},{"location":"USA/#some-fancy-title","title":"\u25b6 Some fancy Title","text":"<pre><code># Set up the code.\n# Preparation for the magic...\n</code></pre> <p>Output (Python version(s)):</p> <p><pre><code>&gt;&gt;&gt; triggering_statement\nSome unexpected output\n</code></pre> (Optional): One line describing the unexpected output.</p>"},{"location":"USA/#explanation","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>Brief explanation of what's happening and why is it happening. <pre><code># Set up code\n# More examples for further clarification (if necessary)\n</code></pre> Output (Python version(s)):</li> </ul> <pre><code>&gt;&gt;&gt; trigger # some example that makes it easy to unveil the magic\n# some justified output\n</code></pre>"},{"location":"USA/#usage","title":"Usage","text":"<p>A nice way to get the most out of these examples, in my opinion, is to read them in sequential order, and for every example: - Carefully read the initial code for setting up the example. If you're an experienced Python programmer, you'll successfully anticipate what's going to happen next most of the time. - Read the output snippets and,   + Check if the outputs are the same as you'd expect.   + Make sure if you know the exact reason behind the output being the way it is.     - If the answer is no (which is perfectly okay), take a deep breath, and read the explanation (and if you still don't understand, shout out! and create an issue here).     - If yes, give a gentle pat on your back, and you may skip to the next example.</p> <p>PS: You can also read WTFPython at the command line using the pypi package, <pre><code>$ pip install wtfpython -U\n$ wtfpython\n</code></pre></p>"},{"location":"USA/#examples","title":"\ud83d\udc40 Examples","text":""},{"location":"USA/#section-strain-your-brain","title":"Section: Strain your brain!","text":""},{"location":"USA/#first-things-first","title":"\u25b6 First things first! *","text":"<p>For some reason, the Python 3.8's \"Walrus\" operator (<code>:=</code>) has become quite popular. Let's check it out,</p> <p>1.</p> <pre><code># Python version 3.8+\n\n&gt;&gt;&gt; a = \"wtf_walrus\"\n&gt;&gt;&gt; a\n'wtf_walrus'\n\n&gt;&gt;&gt; a := \"wtf_walrus\"\nFile \"&lt;stdin&gt;\", line 1\n    a := \"wtf_walrus\"\n      ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; (a := \"wtf_walrus\") # This works though\n'wtf_walrus'\n&gt;&gt;&gt; a\n'wtf_walrus'\n</code></pre> <p>2 .</p> <pre><code># Python version 3.8+\n\n&gt;&gt;&gt; a = 6, 9\n&gt;&gt;&gt; a\n(6, 9)\n\n&gt;&gt;&gt; (a := 6, 9)\n(6, 9)\n&gt;&gt;&gt; a\n6\n\n&gt;&gt;&gt; a, b = 6, 9 # Typical unpacking\n&gt;&gt;&gt; a, b\n(6, 9)\n&gt;&gt;&gt; (a, b = 16, 19) # Oops\n  File \"&lt;stdin&gt;\", line 1\n    (a, b = 16, 19)\n          ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; (a, b := 16, 19) # This prints out a weird 3-tuple\n(6, 16, 19)\n\n&gt;&gt;&gt; a # a is still unchanged?\n6\n\n&gt;&gt;&gt; b\n16\n</code></pre>"},{"location":"USA/#explanation_1","title":"\ud83d\udca1 Explanation","text":"<p>Quick walrus operator refresher</p> <p>The Walrus operator (<code>:=</code>) was introduced in Python 3.8, it can be useful in situations where you'd want to assign values to variables within an expression.</p> <pre><code>def some_func():\n        # Assume some expensive computation here\n        # time.sleep(1000)\n        return 5\n\n# So instead of,\nif some_func():\n        print(some_func()) # Which is bad practice since computation is happening twice\n\n# or\na = some_func()\nif a:\n    print(a)\n\n# Now you can concisely write\nif a := some_func():\n        print(a)\n</code></pre> <p>Output (&gt; 3.8):</p> <pre><code>5\n5\n5\n</code></pre> <p>This saved one line of code, and implicitly prevented invoking <code>some_func</code> twice.</p> <ul> <li> <p>Unparenthesized \"assignment expression\" (use of walrus operator), is restricted at the top level, hence the <code>SyntaxError</code> in the <code>a := \"wtf_walrus\"</code> statement of the first snippet. Parenthesizing it worked as expected and assigned <code>a</code>.  </p> </li> <li> <p>As usual, parenthesizing of an expression containing <code>=</code> operator is not allowed. Hence the syntax error in <code>(a, b = 6, 9)</code>. </p> </li> <li> <p>The syntax of the Walrus operator is of the form <code>NAME:= expr</code>, where <code>NAME</code> is a valid identifier, and <code>expr</code> is a valid expression. Hence, iterable packing and unpacking are not supported which means, </p> </li> <li> <p><code>(a := 6, 9)</code> is equivalent to <code>((a := 6), 9)</code> and ultimately <code>(a, 9)</code> (where <code>a</code>'s value is 6')</p> <pre><code>&gt;&gt;&gt; (a := 6, 9) == ((a := 6), 9)\nTrue\n&gt;&gt;&gt; x = (a := 696, 9)\n&gt;&gt;&gt; x\n(696, 9)\n&gt;&gt;&gt; x[0] is a # Both reference same memory location\nTrue\n</code></pre> </li> <li> <p>Similarly, <code>(a, b := 16, 19)</code> is equivalent to <code>(a, (b := 16), 19)</code> which is nothing but a 3-tuple. </p> </li> </ul>"},{"location":"USA/#strings-can-be-tricky-sometimes","title":"\u25b6 Strings can be tricky sometimes","text":"<p>1.</p> <pre><code>&gt;&gt;&gt; a = \"some_string\"\n&gt;&gt;&gt; id(a)\n140420665652016\n&gt;&gt;&gt; id(\"some\" + \"_\" + \"string\") # Notice that both the ids are same.\n140420665652016\n</code></pre> <p>2. <pre><code>&gt;&gt;&gt; a = \"wtf\"\n&gt;&gt;&gt; b = \"wtf\"\n&gt;&gt;&gt; a is b\nTrue\n\n&gt;&gt;&gt; a = \"wtf!\"\n&gt;&gt;&gt; b = \"wtf!\"\n&gt;&gt;&gt; a is b\nFalse\n</code></pre></p> <p>3.</p> <pre><code>&gt;&gt;&gt; a, b = \"wtf!\", \"wtf!\"\n&gt;&gt;&gt; a is b # All versions except 3.7.x\nTrue\n\n&gt;&gt;&gt; a = \"wtf!\"; b = \"wtf!\"\n&gt;&gt;&gt; a is b # This will print True or False depending on where you're invoking it (python shell / ipython / as a script)\nFalse\n</code></pre> <pre><code># This time in file some_file.py\na = \"wtf!\"\nb = \"wtf!\"\nprint(a is b)\n\n# prints True when the module is invoked!\n</code></pre> <p>4.</p> <p>Output (&lt; Python3.7 )</p> <pre><code>&gt;&gt;&gt; 'a' * 20 is 'aaaaaaaaaaaaaaaaaaaa'\nTrue\n&gt;&gt;&gt; 'a' * 21 is 'aaaaaaaaaaaaaaaaaaaaa'\nFalse\n</code></pre> <p>Makes sense, right?</p>"},{"location":"USA/#explanation_2","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>The behavior in first and second snippets is due to a CPython optimization (called string interning) that tries to use existing immutable objects in some cases rather than creating a new object every time.</li> <li>After being \"interned,\" many variables may reference the same string object in memory (saving memory thereby).</li> <li>In the snippets above, strings are implicitly interned. The decision of when to implicitly intern a string is implementation-dependent. There are some rules that can be used to guess if a string will be interned or not:</li> <li>All length 0 and length 1 strings are interned.</li> <li>Strings are interned at compile time (<code>'wtf'</code> will be interned but <code>''.join(['w', 't', 'f'])</code> will not be interned)</li> <li>Strings that are not composed of ASCII letters, digits or underscores, are not interned. This explains why <code>'wtf!'</code> was not interned due to <code>!</code>. CPython implementation of this rule can be found here </li> <li>When <code>a</code> and <code>b</code> are set to <code>\"wtf!\"</code> in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn't \"know\" that there's already <code>\"wtf!\"</code> as an object (because <code>\"wtf!\"</code> is not implicitly interned as per the facts mentioned above). It's a compile-time optimization. This optimization doesn't apply to 3.7.x versions of CPython (check this issue for more discussion).</li> <li>A compile unit in an interactive environment like IPython consists of a single statement, whereas it consists of the entire module in case of modules. <code>a, b = \"wtf!\", \"wtf!\"</code> is single statement, whereas <code>a = \"wtf!\"; b = \"wtf!\"</code> are two statements in a single line. This explains why the identities are different in <code>a = \"wtf!\"; b = \"wtf!\"</code>, and also explain why they are same when invoked in <code>some_file.py</code></li> <li>The abrupt change in the output of the fourth snippet is due to a peephole optimization technique known as Constant folding. This means the expression <code>'a'*20</code> is replaced by <code>'aaaaaaaaaaaaaaaaaaaa'</code> during compilation to save a  few clock cycles during runtime. Constant folding only occurs for strings having a length of less than 21. (Why? Imagine the size of <code>.pyc</code> file generated as a result of the expression <code>'a'*10**10</code>). Here's the implementation source for the same.</li> <li>Note: In Python 3.7, Constant folding was moved out from peephole optimizer to the new AST optimizer with some change in logic as well, so the fourth snippet doesn't work for Python 3.7. You can read more about the change here. </li> </ul>"},{"location":"USA/#be-careful-with-chained-operations","title":"\u25b6 Be careful with chained operations","text":"<pre><code>&gt;&gt;&gt; (False == False) in [False] # makes sense\nFalse\n&gt;&gt;&gt; False == (False in [False]) # makes sense\nFalse\n&gt;&gt;&gt; False == False in [False] # now what?\nTrue\n\n&gt;&gt;&gt; True is False == False\nFalse\n&gt;&gt;&gt; False is False is False\nTrue\n\n&gt;&gt;&gt; 1 &gt; 0 &lt; 1\nTrue\n&gt;&gt;&gt; (1 &gt; 0) &lt; 1\nFalse\n&gt;&gt;&gt; 1 &gt; (0 &lt; 1)\nFalse\n</code></pre>"},{"location":"USA/#explanation_3","title":"\ud83d\udca1 Explanation:","text":"<p>As per https://docs.python.org/3/reference/expressions.html#comparisons</p> <p>Formally, if a, b, c, ..., y, z are expressions and op1, op2, ..., opN are comparison operators, then a op1 b op2 c ... y opN z is equivalent to a op1 b and b op2 c and ... y opN z, except that each expression is evaluated at most once.</p> <p>While such behavior might seem silly to you in the above examples, it's fantastic with stuff like <code>a == b == c</code> and <code>0 &lt;= x &lt;= 100</code>.</p> <ul> <li><code>False is False is False</code> is equivalent to <code>(False is False) and (False is False)</code></li> <li><code>True is False == False</code> is equivalent to <code>(True is False) and (False == False)</code> and since the first part of the statement (<code>True is False</code>) evaluates to <code>False</code>, the overall expression evaluates to <code>False</code>.</li> <li><code>1 &gt; 0 &lt; 1</code> is equivalent to <code>(1 &gt; 0) and (0 &lt; 1)</code> which evaluates to <code>True</code>.</li> <li>The expression <code>(1 &gt; 0) &lt; 1</code> is equivalent to <code>True &lt; 1</code> and   <pre><code>&gt;&gt;&gt; int(True)\n1\n&gt;&gt;&gt; True + 1 #not relevant for this example, but just for fun\n2\n</code></pre>   So, <code>1 &lt; 1</code> evaluates to <code>False</code></li> </ul>"},{"location":"USA/#how-not-to-use-is-operator","title":"\u25b6 How not to use <code>is</code> operator","text":"<p>The following is a very famous example present all over the internet.</p> <p>1.</p> <pre><code>&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; a is b\nTrue\n\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; a is b\nFalse\n</code></pre> <p>2.</p> <pre><code>&gt;&gt;&gt; a = []\n&gt;&gt;&gt; b = []\n&gt;&gt;&gt; a is b\nFalse\n\n&gt;&gt;&gt; a = tuple()\n&gt;&gt;&gt; b = tuple()\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <p>3. Output</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <p>Output (Python 3.7.x specifically)</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; a is b\nFalse\n</code></pre>"},{"location":"USA/#explanation_4","title":"\ud83d\udca1 Explanation:","text":"<p>The difference between <code>is</code> and <code>==</code></p> <ul> <li><code>is</code> operator checks if both the operands refer to the same object (i.e., it checks if the identity of the operands matches or not).</li> <li><code>==</code> operator compares the values of both the operands and checks if they are the same.</li> <li>So <code>is</code> is for reference equality and <code>==</code> is for value equality. An example to clear things up,   <pre><code>&gt;&gt;&gt; class A: pass\n&gt;&gt;&gt; A() is A() # These are two empty objects at two different memory locations.\nFalse\n</code></pre></li> </ul> <p><code>256</code> is an existing object but <code>257</code> isn't</p> <p>When you start up python the numbers from <code>-5</code> to <code>256</code> will be allocated. These numbers are used a lot, so it makes sense just to have them ready.</p> <p>Quoting from https://docs.python.org/3/c-api/long.html</p> <p>The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you just get back a reference to the existing object. So it should be possible to change the value of 1. I suspect the behavior of Python, in this case, is undefined. :-)</p> <pre><code>&gt;&gt;&gt; id(256)\n10922528\n&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; id(a)\n10922528\n&gt;&gt;&gt; id(b)\n10922528\n&gt;&gt;&gt; id(257)\n140084850247312\n&gt;&gt;&gt; x = 257\n&gt;&gt;&gt; y = 257\n&gt;&gt;&gt; id(x)\n140084850247440\n&gt;&gt;&gt; id(y)\n140084850247344\n</code></pre> <p>Here the interpreter isn't smart enough while executing <code>y = 257</code> to recognize that we've already created an integer of the value <code>257,</code> and so it goes on to create another object in the memory.</p> <p>Similar optimization applies to other immutable objects like empty tuples as well. Since lists are mutable, that's why <code>[] is []</code> will return <code>False</code> and <code>() is ()</code> will return <code>True</code>. This explains our second snippet. Let's move on to the third one, </p> <p>Both <code>a</code> and <code>b</code> refer to the same object when initialized with same value in the same line.</p> <p>Output</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; id(a)\n140640774013296\n&gt;&gt;&gt; id(b)\n140640774013296\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; id(a)\n140640774013392\n&gt;&gt;&gt; id(b)\n140640774013488\n</code></pre> <ul> <li> <p>When a and b are set to <code>257</code> in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn't \"know\" that there's already <code>257</code> as an object.</p> </li> <li> <p>It's a compiler optimization and specifically applies to the interactive environment. When you enter two lines in a live interpreter, they're compiled separately, therefore optimized separately. If you were to try this example in a <code>.py</code> file, you would not see the same behavior, because the file is compiled all at once. This optimization is not limited to integers, it works for other immutable data types like strings (check the \"Strings are tricky example\") and floats as well,</p> </li> </ul> <pre><code>&gt;&gt;&gt; a, b = 257.0, 257.0\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <ul> <li>Why didn't this work for Python 3.7? The abstract reason is because such compiler optimizations are implementation specific (i.e. may change with version, OS, etc). I'm still figuring out what exact implementation change cause the issue, you can check out this issue for updates.</li> </ul>"},{"location":"USA/#hash-brownies","title":"\u25b6 Hash brownies","text":"<p>1. <pre><code>some_dict = {}\nsome_dict[5.5] = \"JavaScript\"\nsome_dict[5.0] = \"Ruby\"\nsome_dict[5] = \"Python\"\n</code></pre></p> <p>Output:</p> <pre><code>&gt;&gt;&gt; some_dict[5.5]\n\"JavaScript\"\n&gt;&gt;&gt; some_dict[5.0] # \"Python\" destroyed the existence of \"Ruby\"?\n\"Python\"\n&gt;&gt;&gt; some_dict[5] \n\"Python\"\n\n&gt;&gt;&gt; complex_five = 5 + 0j\n&gt;&gt;&gt; type(complex_five)\ncomplex\n&gt;&gt;&gt; some_dict[complex_five]\n\"Python\"\n</code></pre> <p>So, why is Python all over the place?</p>"},{"location":"USA/#explanation_5","title":"\ud83d\udca1 Explanation","text":"<ul> <li>Uniqueness of keys in a Python dictionary is by equivalence, not identity. So even though <code>5</code>, <code>5.0</code>, and <code>5 + 0j</code> are distinct objects of different types, since they're equal, they can't both be in the same <code>dict</code> (or <code>set</code>). As soon as you insert any one of them, attempting to look up any distinct but equivalent key will succeed with the original mapped value (rather than failing with a <code>KeyError</code>):   <pre><code>&gt;&gt;&gt; 5 == 5.0 == 5 + 0j\nTrue\n&gt;&gt;&gt; 5 is not 5.0 is not 5 + 0j\nTrue\n&gt;&gt;&gt; some_dict = {}\n&gt;&gt;&gt; some_dict[5.0] = \"Ruby\"\n&gt;&gt;&gt; 5.0 in some_dict\nTrue\n&gt;&gt;&gt; (5 in some_dict) and (5 + 0j in some_dict)\nTrue\n</code></pre></li> <li>This applies when setting an item as well. So when you do <code>some_dict[5] = \"Python\"</code>, Python finds the existing item with equivalent key <code>5.0 -&gt; \"Ruby\"</code>, overwrites its value in place, and leaves the original key alone.   <pre><code>&gt;&gt;&gt; some_dict\n{5.0: 'Ruby'}\n&gt;&gt;&gt; some_dict[5] = \"Python\"\n&gt;&gt;&gt; some_dict\n{5.0: 'Python'}\n</code></pre></li> <li> <p>So how can we update the key to <code>5</code> (instead of <code>5.0</code>)? We can't actually do this update in place, but what we can do is first delete the key (<code>del some_dict[5.0]</code>), and then set it (<code>some_dict[5]</code>) to get the integer <code>5</code> as the key instead of floating <code>5.0</code>, though this should be needed in rare cases.</p> </li> <li> <p>How did Python find <code>5</code> in a dictionary containing <code>5.0</code>? Python does this in constant time without having to scan through every item by using hash functions. When Python looks up a key <code>foo</code> in a dict, it first computes <code>hash(foo)</code> (which runs in constant-time). Since in Python it is required that objects that compare equal also have the same hash value (docs here), <code>5</code>, <code>5.0</code>, and <code>5 + 0j</code> have the same hash value.   <pre><code>&gt;&gt;&gt; 5 == 5.0 == 5 + 0j\nTrue\n&gt;&gt;&gt; hash(5) == hash(5.0) == hash(5 + 0j)\nTrue\n</code></pre> Note: The inverse is not necessarily true: Objects with equal hash values may themselves be unequal. (This causes what's known as a hash collision, and degrades the constant-time performance that hashing usually provides.)</p> </li> </ul>"},{"location":"USA/#deep-down-were-all-the-same","title":"\u25b6 Deep down, we're all the same.","text":"<pre><code>class WTF:\n  pass\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; WTF() == WTF() # two different instances can't be equal\nFalse\n&gt;&gt;&gt; WTF() is WTF() # identities are also different\nFalse\n&gt;&gt;&gt; hash(WTF()) == hash(WTF()) # hashes _should_ be different as well\nTrue\n&gt;&gt;&gt; id(WTF()) == id(WTF())\nTrue\n</code></pre></p>"},{"location":"USA/#explanation_6","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>When <code>id</code> was called, Python created a <code>WTF</code> class object and passed it to the <code>id</code> function. The <code>id</code> function takes its <code>id</code> (its memory location), and throws away the object. The object is destroyed.</li> <li>When we do this twice in succession, Python allocates the same memory location to this second object as well. Since (in CPython) <code>id</code> uses the memory location as the object id, the id of the two objects is the same.</li> <li>So, the object's id is unique only for the lifetime of the object. After the object is destroyed, or before it is created, something else can have the same id.</li> <li>But why did the <code>is</code> operator evaluate to <code>False</code>? Let's see with this snippet.   <pre><code>class WTF(object):\n  def __init__(self): print(\"I\")\n  def __del__(self): print(\"D\")\n</code></pre></li> </ul> <p>Output: <pre><code>&gt;&gt;&gt; WTF() is WTF()\nI\nI\nD\nD\nFalse\n&gt;&gt;&gt; id(WTF()) == id(WTF())\nI\nD\nI\nD\nTrue\n</code></pre>   As you may observe, the order in which the objects are destroyed is what made all the difference here.</p>"},{"location":"USA/#disorder-within-order","title":"\u25b6 Disorder within order *","text":"<pre><code>from collections import OrderedDict\n\ndictionary = dict()\ndictionary[1] = 'a'; dictionary[2] = 'b';\n\nordered_dict = OrderedDict()\nordered_dict[1] = 'a'; ordered_dict[2] = 'b';\n\nanother_ordered_dict = OrderedDict()\nanother_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';\n\nclass DictWithHash(dict):\n    \"\"\"\n    A dict that also implements __hash__ magic.\n    \"\"\"\n    __hash__ = lambda self: 0\n\nclass OrderedDictWithHash(OrderedDict):\n    \"\"\"\n    An OrderedDict that also implements __hash__ magic.\n    \"\"\"\n    __hash__ = lambda self: 0\n</code></pre> <p>Output <pre><code>&gt;&gt;&gt; dictionary == ordered_dict # If a == b\nTrue\n&gt;&gt;&gt; dictionary == another_ordered_dict # and b == c\nTrue\n&gt;&gt;&gt; ordered_dict == another_ordered_dict # then why isn't c == a ??\nFalse\n\n# We all know that a set consists of only unique elements,\n# let's try making a set of these dictionaries and see what happens...\n\n&gt;&gt;&gt; len({dictionary, ordered_dict, another_ordered_dict})\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'dict'\n\n# Makes sense since dict don't have __hash__ implemented, let's use\n# our wrapper classes.\n&gt;&gt;&gt; dictionary = DictWithHash()\n&gt;&gt;&gt; dictionary[1] = 'a'; dictionary[2] = 'b';\n&gt;&gt;&gt; ordered_dict = OrderedDictWithHash()\n&gt;&gt;&gt; ordered_dict[1] = 'a'; ordered_dict[2] = 'b';\n&gt;&gt;&gt; another_ordered_dict = OrderedDictWithHash()\n&gt;&gt;&gt; another_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';\n&gt;&gt;&gt; len({dictionary, ordered_dict, another_ordered_dict})\n1\n&gt;&gt;&gt; len({ordered_dict, another_ordered_dict, dictionary}) # changing the order\n2\n</code></pre></p> <p>What is going on here?</p>"},{"location":"USA/#explanation_7","title":"\ud83d\udca1 Explanation:","text":"<ul> <li> <p>The reason why intransitive equality didn't hold among <code>dictionary</code>, <code>ordered_dict</code> and <code>another_ordered_dict</code> is because of the way <code>__eq__</code> method is implemented in <code>OrderedDict</code> class. From the docs</p> <p>Equality tests between OrderedDict objects are order-sensitive and are implemented as <code>list(od1.items())==list(od2.items())</code>. Equality tests between <code>OrderedDict</code> objects and other Mapping objects are order-insensitive like regular dictionaries. - The reason for this equality in behavior is that it allows <code>OrderedDict</code> objects to be directly substituted anywhere a regular dictionary is used. - Okay, so why did changing the order affect the length of the generated <code>set</code> object? The answer is the lack of intransitive equality only. Since sets are \"unordered\" collections of unique elements, the order in which elements are inserted shouldn't matter. But in this case, it does matter. Let's break it down a bit, <pre><code>&gt;&gt;&gt; some_set = set()\n&gt;&gt;&gt; some_set.add(dictionary) # these are the mapping objects from the snippets above\n&gt;&gt;&gt; ordered_dict in some_set\nTrue\n&gt;&gt;&gt; some_set.add(ordered_dict)\n&gt;&gt;&gt; len(some_set)\n1\n&gt;&gt;&gt; another_ordered_dict in some_set\nTrue\n&gt;&gt;&gt; some_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(some_set)\n1\n\n&gt;&gt;&gt; another_set = set()\n&gt;&gt;&gt; another_set.add(ordered_dict)\n&gt;&gt;&gt; another_ordered_dict in another_set\nFalse\n&gt;&gt;&gt; another_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(another_set)\n2\n&gt;&gt;&gt; dictionary in another_set\nTrue\n&gt;&gt;&gt; another_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(another_set)\n2\n</code></pre> So the inconsistency is due to <code>another_ordered_dict in another_set</code> being <code>False</code> because <code>ordered_dict</code> was already present in <code>another_set</code> and as observed before, <code>ordered_dict == another_ordered_dict</code> is <code>False</code>.</p> </li> </ul>"},{"location":"USA/#keep-trying","title":"\u25b6 Keep trying... *","text":"<pre><code>def some_func():\n    try:\n        return 'from_try'\n    finally:\n        return 'from_finally'\n\ndef another_func(): \n    for _ in range(3):\n        try:\n            continue\n        finally:\n            print(\"Finally!\")\n\ndef one_more_func(): # A gotcha!\n    try:\n        for i in range(3):\n            try:\n                1 / i\n            except ZeroDivisionError:\n                # Let's throw it here and handle it outside for loop\n                raise ZeroDivisionError(\"A trivial divide by zero error\")\n            finally:\n                print(\"Iteration\", i)\n                break\n    except ZeroDivisionError as e:\n        print(\"Zero division error occurred\", e)\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; some_func()\n'from_finally'\n\n&gt;&gt;&gt; another_func()\nFinally!\nFinally!\nFinally!\n\n&gt;&gt;&gt; 1 / 0\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero\n\n&gt;&gt;&gt; one_more_func()\nIteration 0\n</code></pre>"},{"location":"USA/#explanation_8","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>When a <code>return</code>, <code>break</code> or <code>continue</code> statement is executed in the <code>try</code> suite of a \"try\u2026finally\" statement, the <code>finally</code> clause is also executed on the way out.</li> <li>The return value of a function is determined by the last <code>return</code> statement executed. Since the <code>finally</code> clause always executes, a <code>return</code> statement executed in the <code>finally</code> clause will always be the last one executed.</li> <li>The caveat here is, if the finally clause executes a <code>return</code> or <code>break</code> statement, the temporarily saved exception is discarded.</li> </ul>"},{"location":"USA/#for-what","title":"\u25b6 For what?","text":"<pre><code>some_string = \"wtf\"\nsome_dict = {}\nfor i, some_dict[i] in enumerate(some_string):\n    i = 10\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; some_dict # An indexed dict appears.\n{0: 'w', 1: 't', 2: 'f'}\n</code></pre></p>"},{"location":"USA/#explanation_9","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>A <code>for</code> statement is defined in the Python grammar as:   <pre><code>for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]\n</code></pre>   Where <code>exprlist</code> is the assignment target. This means that the equivalent of <code>{exprlist} = {next_value}</code> is executed for each item in the iterable.   An interesting example that illustrates this:   <pre><code>for i in range(4):\n    print(i)\n    i = 10\n</code></pre></li> </ul> <p>Output: <pre><code>0\n1\n2\n3\n</code></pre></p> <p>Did you expect the loop to run just once?</p> <p>\ud83d\udca1 Explanation:</p> <ul> <li> <p>The assignment statement <code>i = 10</code> never affects the iterations of the loop because of the way for loops work in Python. Before the beginning of every iteration, the next item provided by the iterator (<code>range(4)</code> in this case) is unpacked and assigned the target list variables (<code>i</code> in this case).</p> </li> <li> <p>The <code>enumerate(some_string)</code> function yields a new value <code>i</code> (a counter going up) and a character from the <code>some_string</code> in each iteration. It then sets the (just assigned) <code>i</code> key of the dictionary <code>some_dict</code> to that character. The unrolling of the loop can be simplified as:   <pre><code>&gt;&gt;&gt; i, some_dict[i] = (0, 'w')\n&gt;&gt;&gt; i, some_dict[i] = (1, 't')\n&gt;&gt;&gt; i, some_dict[i] = (2, 'f')\n&gt;&gt;&gt; some_dict\n</code></pre></p> </li> </ul>"},{"location":"USA/#evaluation-time-discrepancy","title":"\u25b6 Evaluation time discrepancy","text":"<p>1. <pre><code>array = [1, 8, 15]\n# A typical generator expression\ngen = (x for x in array if array.count(x) &gt; 0)\narray = [2, 8, 22]\n</code></pre></p> <p>Output:</p> <pre><code>&gt;&gt;&gt; print(list(gen)) # Where did the other values go?\n[8]\n</code></pre> <p>2.</p> <pre><code>array_1 = [1,2,3,4]\ngen_1 = (x for x in array_1)\narray_1 = [1,2,3,4,5]\n\narray_2 = [1,2,3,4]\ngen_2 = (x for x in array_2)\narray_2[:] = [1,2,3,4,5]\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; print(list(gen_1))\n[1, 2, 3, 4]\n\n&gt;&gt;&gt; print(list(gen_2))\n[1, 2, 3, 4, 5]\n</code></pre></p> <p>3.</p> <pre><code>array_3 = [1, 2, 3]\narray_4 = [10, 20, 30]\ngen = (i + j for i in array_3 for j in array_4)\n\narray_3 = [4, 5, 6]\narray_4 = [400, 500, 600]\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; print(list(gen))\n[401, 501, 601, 402, 502, 602, 403, 503, 603]\n</code></pre></p>"},{"location":"USA/#explanation_10","title":"\ud83d\udca1 Explanation","text":"<ul> <li>In a generator expression, the <code>in</code> clause is evaluated at declaration time, but the conditional clause is evaluated at runtime.</li> <li>So before runtime, <code>array</code> is re-assigned to the list <code>[2, 8, 22]</code>, and since out of <code>1</code>, <code>8</code> and <code>15</code>, only the count of <code>8</code> is greater than <code>0</code>, the generator only yields <code>8</code>.</li> <li>The differences in the output of <code>g1</code> and <code>g2</code> in the second part is due the way variables <code>array_1</code> and <code>array_2</code> are re-assigned values.</li> <li>In the first case, <code>array_1</code> is bound to the new object <code>[1,2,3,4,5]</code> and since the <code>in</code> clause is evaluated at the declaration time it still refers to the old object <code>[1,2,3,4]</code> (which is not destroyed).</li> <li>In the second case, the slice assignment to <code>array_2</code> updates the same old object <code>[1,2,3,4]</code> to <code>[1,2,3,4,5]</code>. Hence both the <code>g2</code> and <code>array_2</code> still have reference to the same object (which has now been updated to <code>[1,2,3,4,5]</code>).</li> <li> <p>Okay, going by the logic discussed so far, shouldn't be the value of <code>list(gen)</code> in the third snippet be <code>[11, 21, 31, 12, 22, 32, 13, 23, 33]</code>? (because <code>array_3</code> and <code>array_4</code> are going to behave just like <code>array_1</code>). The reason why (only) <code>array_4</code> values got updated is explained in PEP-289</p> <p>Only the outermost for-expression is evaluated immediately, the other expressions are deferred until the generator is run.</p> </li> </ul>"},{"location":"USA/#is-not-is-not-is-not","title":"\u25b6 <code>is not ...</code> is not <code>is (not ...)</code>","text":"<pre><code>&gt;&gt;&gt; 'something' is not None\nTrue\n&gt;&gt;&gt; 'something' is (not None)\nFalse\n</code></pre>"},{"location":"USA/#explanation_11","title":"\ud83d\udca1 Explanation","text":"<ul> <li><code>is not</code> is a single binary operator, and has behavior different than using <code>is</code> and <code>not</code> separated.</li> <li><code>is not</code> evaluates to <code>False</code> if the variables on either side of the operator point to the same object and <code>True</code> otherwise. </li> <li>In the example, <code>(not None)</code> evaluates to <code>True</code> since the value <code>None</code> is <code>False</code> in a boolean context, so the expression becomes <code>'something' is True</code>.</li> </ul>"},{"location":"USA/#a-tic-tac-toe-where-x-wins-in-the-first-attempt","title":"\u25b6 A tic-tac-toe where X wins in the first attempt!","text":"<pre><code># Let's initialize a row\nrow = [\"\"] * 3 #row i['', '', '']\n# Let's make a board\nboard = [row] * 3\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; board\n[['', '', ''], ['', '', ''], ['', '', '']]\n&gt;&gt;&gt; board[0]\n['', '', '']\n&gt;&gt;&gt; board[0][0]\n''\n&gt;&gt;&gt; board[0][0] = \"X\"\n&gt;&gt;&gt; board\n[['X', '', ''], ['X', '', ''], ['X', '', '']]\n</code></pre> <p>We didn't assign three <code>\"X\"</code>s, did we?</p>"},{"location":"USA/#explanation_12","title":"\ud83d\udca1 Explanation:","text":"<p>When we initialize <code>row</code> variable, this visualization explains what happens in the memory</p> <p></p> <p>And when the <code>board</code> is initialized by multiplying the <code>row</code>, this is what happens inside the memory (each of the elements <code>board[0]</code>, <code>board[1]</code> and <code>board[2]</code> is a reference to the same list referred by <code>row</code>)</p> <p></p> <p>We can avoid this scenario here by not using <code>row</code> variable to generate <code>board</code>. (Asked in this issue).</p> <pre><code>&gt;&gt;&gt; board = [['']*3 for _ in range(3)]\n&gt;&gt;&gt; board[0][0] = \"X\"\n&gt;&gt;&gt; board\n[['X', '', ''], ['', '', ''], ['', '', '']]\n</code></pre>"},{"location":"USA/#schrodingers-variable","title":"\u25b6 Schr\u00f6dinger's variable *","text":"<pre><code>funcs = []\nresults = []\nfor x in range(7):\n    def some_func():\n        return x\n    funcs.append(some_func)\n    results.append(some_func())  # note the function call here\n\nfuncs_results = [func() for func in funcs]\n</code></pre> <p>Output (Python version): <pre><code>&gt;&gt;&gt; results\n[0, 1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; funcs_results\n[6, 6, 6, 6, 6, 6, 6]\n</code></pre></p> <p>The values of <code>x</code> were different in every iteration prior to appending <code>some_func</code> to <code>funcs</code>, but all the functions return 6 when they're evaluated after the loop completes.</p> <p>2.</p> <pre><code>&gt;&gt;&gt; powers_of_x = [lambda x: x**i for i in range(10)]\n&gt;&gt;&gt; [f(2) for f in powers_of_x]\n[512, 512, 512, 512, 512, 512, 512, 512, 512, 512]\n</code></pre>"},{"location":"USA/#explanation_13","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>When defining a function inside a loop that uses the loop variable in its body, the loop function's closure is bound to the variable, not its value. The function looks up <code>x</code> in the surrounding context, rather than using the value of <code>x</code> at the time the function is created. So all of the functions use the latest value assigned to the variable for computation. We can see that it's using the <code>x</code> from the surrounding context (i.e. not a local variable) with: <pre><code>&gt;&gt;&gt; import inspect\n&gt;&gt;&gt; inspect.getclosurevars(funcs[0])\nClosureVars(nonlocals={}, globals={'x': 6}, builtins={}, unbound=set())\n</code></pre> Since <code>x</code> is a global value, we can change the value that the <code>funcs</code> will lookup and return by updating <code>x</code>:</li> </ul> <pre><code>&gt;&gt;&gt; x = 42\n&gt;&gt;&gt; [func() for func in funcs]\n[42, 42, 42, 42, 42, 42, 42]\n</code></pre> <ul> <li>To get the desired behavior you can pass in the loop variable as a named variable to the function. Why does this work? Because this will define the variable inside the function's scope. It will no longer go to the surrounding (global) scope to look up the variables value but will create a local variable that stores the value of <code>x</code> at that point in time.</li> </ul> <pre><code>funcs = []\nfor x in range(7):\n    def some_func(x=x):\n        return x\n    funcs.append(some_func)\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; funcs_results = [func() for func in funcs]\n&gt;&gt;&gt; funcs_results\n[0, 1, 2, 3, 4, 5, 6]\n</code></pre> <p>It is not longer using the <code>x</code> in the global scope:</p> <pre><code>&gt;&gt;&gt; inspect.getclosurevars(funcs[0])\nClosureVars(nonlocals={}, globals={}, builtins={}, unbound=set())\n</code></pre>"},{"location":"USA/#the-chicken-egg-problem","title":"\u25b6 The chicken-egg problem *","text":"<p>1. <pre><code>&gt;&gt;&gt; isinstance(3, int)\nTrue\n&gt;&gt;&gt; isinstance(type, object)\nTrue\n&gt;&gt;&gt; isinstance(object, type)\nTrue\n</code></pre></p> <p>So which is the \"ultimate\" base class? There's more to the confusion by the way,</p> <p>2. </p> <pre><code>&gt;&gt;&gt; class A: pass\n&gt;&gt;&gt; isinstance(A, A)\nFalse\n&gt;&gt;&gt; isinstance(type, type)\nTrue\n&gt;&gt;&gt; isinstance(object, object)\nTrue\n</code></pre> <p>3.</p> <pre><code>&gt;&gt;&gt; issubclass(int, object)\nTrue\n&gt;&gt;&gt; issubclass(type, object)\nTrue\n&gt;&gt;&gt; issubclass(object, type)\nFalse\n</code></pre>"},{"location":"USA/#explanation_14","title":"\ud83d\udca1 Explanation","text":"<ul> <li><code>type</code> is a metaclass in Python.</li> <li>Everything is an <code>object</code> in Python, which includes classes as well as their objects (instances).</li> <li>class <code>type</code> is the metaclass of class <code>object</code>, and every class (including <code>type</code>) has inherited directly or indirectly from <code>object</code>.</li> <li>There is no real base class among <code>object</code> and <code>type</code>. The confusion in the above snippets is arising because we're thinking about these relationships (<code>issubclass</code> and <code>isinstance</code>) in terms of Python classes. The relationship between <code>object</code> and <code>type</code> can't be reproduced in pure python. To be more precise the following relationships can't be reproduced in pure Python,<ul> <li>class A is an instance of class B, and class B is an instance of class A.</li> <li>class A is an instance of itself.</li> </ul> </li> <li>These relationships between <code>object</code> and <code>type</code> (both being instances of each other as well as themselves) exist in Python because of \"cheating\" at the implementation level.</li> </ul>"},{"location":"USA/#subclass-relationships","title":"\u25b6 Subclass relationships","text":"<p>Output: <pre><code>&gt;&gt;&gt; from collections.abc import Hashable\n&gt;&gt;&gt; issubclass(list, object)\nTrue\n&gt;&gt;&gt; issubclass(object, Hashable)\nTrue\n&gt;&gt;&gt; issubclass(list, Hashable)\nFalse\n</code></pre></p> <p>The Subclass relationships were expected to be transitive, right? (i.e., if <code>A</code> is a subclass of <code>B</code>, and <code>B</code> is a subclass of <code>C</code>, the <code>A</code> should a subclass of <code>C</code>)</p>"},{"location":"USA/#explanation_15","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>Subclass relationships are not necessarily transitive in Python. Anyone is allowed to define their own, arbitrary <code>__subclasscheck__</code> in a metaclass.</li> <li>When <code>issubclass(cls, Hashable)</code> is called, it simply looks for non-Falsey \"<code>__hash__</code>\" method in <code>cls</code> or anything it inherits from.</li> <li>Since <code>object</code> is hashable, but <code>list</code> is non-hashable, it breaks the transitivity relation.</li> <li>More detailed explanation can be found here.</li> </ul>"},{"location":"USA/#methods-equality-and-identity","title":"\u25b6 Methods equality and identity","text":"<p>1. <pre><code>class SomeClass:\n    def method(self):\n        pass\n\n    @classmethod\n    def classm(cls):\n        pass\n\n    @staticmethod\n    def staticm():\n        pass\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; print(SomeClass.method is SomeClass.method)\nTrue\n&gt;&gt;&gt; print(SomeClass.classm is SomeClass.classm)\nFalse\n&gt;&gt;&gt; print(SomeClass.classm == SomeClass.classm)\nTrue\n&gt;&gt;&gt; print(SomeClass.staticm is SomeClass.staticm)\nTrue\n</code></pre></p> <p>Accessing <code>classm</code> twice, we get an equal object, but not the same one? Let's see what happens with instances of <code>SomeClass</code>:</p> <p>2. <pre><code>o1 = SomeClass()\no2 = SomeClass()\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; print(o1.method == o2.method)\nFalse\n&gt;&gt;&gt; print(o1.method == o1.method)\nTrue\n&gt;&gt;&gt; print(o1.method is o1.method)\nFalse\n&gt;&gt;&gt; print(o1.classm is o1.classm)\nFalse\n&gt;&gt;&gt; print(o1.classm == o1.classm == o2.classm == SomeClass.classm)\nTrue\n&gt;&gt;&gt; print(o1.staticm is o1.staticm is o2.staticm is SomeClass.staticm)\nTrue\n</code></pre></p> <p>Accessing <code>classm</code> or <code>method</code> twice, creates equal but not same objects for the same instance of <code>SomeClass</code>.</p>"},{"location":"USA/#explanation_16","title":"\ud83d\udca1 Explanation","text":"<ul> <li>Functions are descriptors. Whenever a function is accessed as an attribute, the descriptor is invoked, creating a method object which \"binds\" the function with the object owning the attribute. If called, the method calls the function, implicitly passing the bound object as the first argument (this is how we get <code>self</code> as the first argument, despite not passing it explicitly). <pre><code>&gt;&gt;&gt; o1.method\n&lt;bound method SomeClass.method of &lt;__main__.SomeClass object at ...&gt;&gt;\n</code></pre></li> <li>Accessing the attribute multiple times creates a method object every time! Therefore <code>o1.method is o1.method</code> is never truthy. Accessing functions as class attributes (as opposed to instance) does not create methods, however; so <code>SomeClass.method is SomeClass.method</code> is truthy. <pre><code>&gt;&gt;&gt; SomeClass.method\n&lt;function SomeClass.method at ...&gt;\n</code></pre></li> <li><code>classmethod</code> transforms functions into class methods. Class methods are descriptors that, when accessed, create a method object which binds the class (type) of the object, instead of the object itself. <pre><code>&gt;&gt;&gt; o1.classm\n&lt;bound method SomeClass.classm of &lt;class '__main__.SomeClass'&gt;&gt;\n</code></pre></li> <li>Unlike functions, <code>classmethod</code>s will create a method also when accessed as class attributes (in which case they bind the class, not to the type of it). So <code>SomeClass.classm is SomeClass.classm</code> is falsy. <pre><code>&gt;&gt;&gt; SomeClass.classm\n&lt;bound method SomeClass.classm of &lt;class '__main__.SomeClass'&gt;&gt;\n</code></pre></li> <li>A method object compares equal when both the functions are equal, and the bound objects are the same. So <code>o1.method == o1.method</code> is truthy, although not the same object in memory.</li> <li><code>staticmethod</code> transforms functions into a \"no-op\" descriptor, which returns the function as-is. No method objects are ever created, so comparison with <code>is</code> is truthy. <pre><code>&gt;&gt;&gt; o1.staticm\n&lt;function SomeClass.staticm at ...&gt;\n&gt;&gt;&gt; SomeClass.staticm\n&lt;function SomeClass.staticm at ...&gt;\n</code></pre></li> <li>Having to create new \"method\" objects every time Python calls instance methods and having to modify the arguments every time in order to insert <code>self</code> affected performance badly. CPython 3.7 solved it by introducing new opcodes that deal with calling methods without creating the temporary method objects. This is used only when the accessed function is actually called, so the snippets here are not affected, and still generate methods :)</li> </ul>"},{"location":"USA/#all-true-ation","title":"\u25b6 All-true-ation *","text":"<pre><code>&gt;&gt;&gt; all([True, True, True])\nTrue\n&gt;&gt;&gt; all([True, True, False])\nFalse\n\n&gt;&gt;&gt; all([])\nTrue\n&gt;&gt;&gt; all([[]])\nFalse\n&gt;&gt;&gt; all([[[]]])\nTrue\n</code></pre> <p>Why's this True-False alteration?</p>"},{"location":"USA/#explanation_17","title":"\ud83d\udca1 Explanation:","text":"<ul> <li> <p>The implementation of <code>all</code> function is equivalent to</p> </li> <li> <p><code>py   def all(iterable):       for element in iterable:           if not element:               return False       return True</code></p> </li> <li> <p><code>all([])</code> returns <code>True</code> since the iterable is empty. </p> </li> <li><code>all([[]])</code> returns <code>False</code> because the passed array has one element, <code>[]</code>, and in python, an empty list is falsy.</li> <li><code>all([[[]]])</code> and higher recursive variants are always <code>True</code>. This is because the passed array's single element (<code>[[...]]</code>) is no longer empty, and lists with values are truthy.</li> </ul>"},{"location":"USA/#the-surprising-comma","title":"\u25b6 The surprising comma","text":"<p>Output (&lt; 3.6):</p> <pre><code>&gt;&gt;&gt; def f(x, y,):\n...     print(x, y)\n...\n&gt;&gt;&gt; def g(x=4, y=5,):\n...     print(x, y)\n...\n&gt;&gt;&gt; def h(x, **kwargs,):\n  File \"&lt;stdin&gt;\", line 1\n    def h(x, **kwargs,):\n                     ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; def h(*args,):\n  File \"&lt;stdin&gt;\", line 1\n    def h(*args,):\n                ^\nSyntaxError: invalid syntax\n</code></pre>"},{"location":"USA/#explanation_18","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>Trailing comma is not always legal in formal parameters list of a Python function.</li> <li>In Python, the argument list is defined partially with leading commas and partially with trailing commas. This conflict causes situations where a comma is trapped in the middle, and no rule accepts it.</li> <li>Note: The trailing comma problem is fixed in Python 3.6. The remarks in this post discuss in brief different usages of trailing commas in Python.</li> </ul>"},{"location":"USA/#strings-and-the-backslashes","title":"\u25b6 Strings and the backslashes","text":"<p>Output: <pre><code>&gt;&gt;&gt; print(\"\\\"\")\n\"\n\n&gt;&gt;&gt; print(r\"\\\"\")\n\\\"\n\n&gt;&gt;&gt; print(r\"\\\")\nFile \"&lt;stdin&gt;\", line 1\n    print(r\"\\\")\n              ^\nSyntaxError: EOL while scanning string literal\n\n&gt;&gt;&gt; r'\\'' == \"\\\\'\"\nTrue\n</code></pre></p>"},{"location":"USA/#explanation_19","title":"\ud83d\udca1 Explanation","text":"<ul> <li>In a usual python string, the backslash is used to escape characters that may have a special meaning (like single-quote, double-quote, and the backslash itself).     <pre><code>&gt;&gt;&gt; \"wt\\\"f\"\n'wt\"f'\n</code></pre></li> <li>In a raw string literal (as indicated by the prefix <code>r</code>),  the backslashes pass themselves as is along with the behavior of escaping the following character.     <pre><code>&gt;&gt;&gt; r'wt\\\"f' == 'wt\\\\\"f'\nTrue\n&gt;&gt;&gt; print(repr(r'wt\\\"f')\n'wt\\\\\"f'\n\n&gt;&gt;&gt; print(\"\\n\")\n\n&gt;&gt;&gt; print(r\"\\\\n\")\n'\\\\n'\n</code></pre></li> <li>This means when a parser encounters a backslash in a raw string, it expects another character following it. And in our case (<code>print(r\"\\\")</code>), the backslash escaped the trailing quote, leaving the parser without a terminating quote (hence the <code>SyntaxError</code>). That's why backslashes don't work at the end of a raw string.</li> </ul>"},{"location":"USA/#not-knot","title":"\u25b6 not knot!","text":"<pre><code>x = True\ny = False\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; not x == y\nTrue\n&gt;&gt;&gt; x == not y\n  File \"&lt;input&gt;\", line 1\n    x == not y\n           ^\nSyntaxError: invalid syntax\n</code></pre></p>"},{"location":"USA/#explanation_20","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>Operator precedence affects how an expression is evaluated, and <code>==</code> operator has higher precedence than <code>not</code> operator in Python.</li> <li>So <code>not x == y</code> is equivalent to <code>not (x == y)</code> which is equivalent to <code>not (True == False)</code> finally evaluating to <code>True</code>.</li> <li>But <code>x == not y</code> raises a <code>SyntaxError</code> because it can be thought of being equivalent to <code>(x == not) y</code> and not <code>x == (not y)</code> which you might have expected at first sight.</li> <li>The parser expected the <code>not</code> token to be a part of the <code>not in</code> operator (because both <code>==</code> and <code>not in</code> operators have the same precedence), but after not being able to find an <code>in</code> token following the <code>not</code> token, it raises a <code>SyntaxError</code>.</li> </ul>"},{"location":"USA/#half-triple-quoted-strings","title":"\u25b6 Half triple-quoted strings","text":"<p>Output: <pre><code>&gt;&gt;&gt; print('wtfpython''')\nwtfpython\n&gt;&gt;&gt; print(\"wtfpython\"\"\")\nwtfpython\n&gt;&gt;&gt; # The following statements raise `SyntaxError`\n&gt;&gt;&gt; # print('''wtfpython')\n&gt;&gt;&gt; # print(\"\"\"wtfpython\")\n  File \"&lt;input&gt;\", line 3\n    print(\"\"\"wtfpython\")\n                        ^\nSyntaxError: EOF while scanning triple-quoted string literal\n</code></pre></p>"},{"location":"USA/#explanation_21","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>Python supports implicit string literal concatenation, Example,   <pre><code>&gt;&gt;&gt; print(\"wtf\" \"python\")\nwtfpython\n&gt;&gt;&gt; print(\"wtf\" \"\") # or \"wtf\"\"\"\nwtf\n</code></pre></li> <li><code>'''</code> and <code>\"\"\"</code> are also string delimiters in Python which causes a SyntaxError because the Python interpreter was expecting a terminating triple quote as delimiter while scanning the currently encountered triple quoted string literal.</li> </ul>"},{"location":"USA/#whats-wrong-with-booleans","title":"\u25b6 What's wrong with booleans?","text":"<p>1.</p> <pre><code># A simple example to count the number of booleans and\n# integers in an iterable of mixed data types.\nmixed_list = [False, 1.0, \"some_string\", 3, True, [], False]\nintegers_found_so_far = 0\nbooleans_found_so_far = 0\n\nfor item in mixed_list:\n    if isinstance(item, int):\n        integers_found_so_far += 1\n    elif isinstance(item, bool):\n        booleans_found_so_far += 1\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; integers_found_so_far\n4\n&gt;&gt;&gt; booleans_found_so_far\n0\n</code></pre></p> <p>2. <pre><code>&gt;&gt;&gt; some_bool = True\n&gt;&gt;&gt; \"wtf\" * some_bool\n'wtf'\n&gt;&gt;&gt; some_bool = False\n&gt;&gt;&gt; \"wtf\" * some_bool\n''\n</code></pre></p> <p>3.</p> <pre><code>def tell_truth():\n    True = False\n    if True == False:\n        print(\"I have lost faith in truth!\")\n</code></pre> <p>Output (&lt; 3.x):</p> <pre><code>&gt;&gt;&gt; tell_truth()\nI have lost faith in truth!\n</code></pre>"},{"location":"USA/#explanation_22","title":"\ud83d\udca1 Explanation:","text":"<ul> <li> <p><code>bool</code> is a subclass of <code>int</code> in Python</p> <pre><code>&gt;&gt;&gt; issubclass(bool, int)\nTrue\n&gt;&gt;&gt; issubclass(int, bool)\nFalse\n</code></pre> </li> <li> <p>And thus, <code>True</code> and <code>False</code> are instances of <code>int</code> <pre><code>&gt;&gt;&gt; isinstance(True, int)\nTrue\n&gt;&gt;&gt; isinstance(False, int)\nTrue\n</code></pre></p> </li> <li> <p>The integer value of <code>True</code> is <code>1</code> and that of <code>False</code> is <code>0</code>.   <pre><code>&gt;&gt;&gt; int(True)\n1\n&gt;&gt;&gt; int(False)\n0\n</code></pre></p> </li> <li> <p>See this StackOverflow answer for the rationale behind it.</p> </li> <li> <p>Initially, Python used to have no <code>bool</code> type (people used 0 for false and non-zero value like 1 for true).  <code>True</code>, <code>False</code>, and a <code>bool</code> type was added in 2.x versions, but, for backward compatibility, <code>True</code> and <code>False</code> couldn't be made constants. They just were built-in variables, and it was possible to reassign them</p> </li> <li> <p>Python 3 was backward-incompatible, the issue was finally fixed, and thus the last snippet won't work with Python 3.x!</p> </li> </ul>"},{"location":"USA/#class-attributes-and-instance-attributes","title":"\u25b6 Class attributes and instance attributes","text":"<p>1. <pre><code>class A:\n    x = 1\n\nclass B(A):\n    pass\n\nclass C(A):\n    pass\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; A.x, B.x, C.x\n(1, 1, 1)\n&gt;&gt;&gt; B.x = 2\n&gt;&gt;&gt; A.x, B.x, C.x\n(1, 2, 1)\n&gt;&gt;&gt; A.x = 3\n&gt;&gt;&gt; A.x, B.x, C.x # C.x changed, but B.x didn't\n(3, 2, 3)\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.x, A.x\n(3, 3)\n&gt;&gt;&gt; a.x += 1\n&gt;&gt;&gt; a.x, A.x\n(4, 3)\n</code></pre></p> <p>2. <pre><code>class SomeClass:\n    some_var = 15\n    some_list = [5]\n    another_list = [5]\n    def __init__(self, x):\n        self.some_var = x + 1\n        self.some_list = self.some_list + [x]\n        self.another_list += [x]\n</code></pre></p> <p>Output:</p> <pre><code>&gt;&gt;&gt; some_obj = SomeClass(420)\n&gt;&gt;&gt; some_obj.some_list\n[5, 420]\n&gt;&gt;&gt; some_obj.another_list\n[5, 420]\n&gt;&gt;&gt; another_obj = SomeClass(111)\n&gt;&gt;&gt; another_obj.some_list\n[5, 111]\n&gt;&gt;&gt; another_obj.another_list\n[5, 420, 111]\n&gt;&gt;&gt; another_obj.another_list is SomeClass.another_list\nTrue\n&gt;&gt;&gt; another_obj.another_list is some_obj.another_list\nTrue\n</code></pre>"},{"location":"USA/#explanation_23","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>Class variables and variables in class instances are internally handled as dictionaries of a class object. If a variable name is not found in the dictionary of the current class, the parent classes are searched for it.</li> <li>The <code>+=</code> operator modifies the mutable object in-place without creating a new object. So changing the attribute of one instance affects the other instances and the class attribute as well.</li> </ul>"},{"location":"USA/#yielding-none","title":"\u25b6 yielding None","text":"<pre><code>some_iterable = ('a', 'b')\n\ndef some_func(val):\n    return \"something\"\n</code></pre> <p>Output (&lt;= 3.7.x):</p> <pre><code>&gt;&gt;&gt; [x for x in some_iterable]\n['a', 'b']\n&gt;&gt;&gt; [(yield x) for x in some_iterable]\n&lt;generator object &lt;listcomp&gt; at 0x7f70b0a4ad58&gt;\n&gt;&gt;&gt; list([(yield x) for x in some_iterable])\n['a', 'b']\n&gt;&gt;&gt; list((yield x) for x in some_iterable)\n['a', None, 'b', None]\n&gt;&gt;&gt; list(some_func((yield x)) for x in some_iterable)\n['a', 'something', 'b', 'something']\n</code></pre>"},{"location":"USA/#explanation_24","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>This is a bug in CPython's handling of <code>yield</code> in generators and comprehensions.</li> <li>Source and explanation can be found here: https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions</li> <li>Related bug report: https://bugs.python.org/issue10544</li> <li>Python 3.8+ no longer allows <code>yield</code> inside list comprehension and will throw a <code>SyntaxError</code>.</li> </ul>"},{"location":"USA/#yielding-from-return","title":"\u25b6 Yielding from... return! *","text":"<p>1.</p> <pre><code>def some_func(x):\n    if x == 3:\n        return [\"wtf\"]\n    else:\n        yield from range(x)\n</code></pre> <p>Output (&gt; 3.3):</p> <pre><code>&gt;&gt;&gt; list(some_func(3))\n[]\n</code></pre> <p>Where did the <code>\"wtf\"</code> go? Is it due to some special effect of <code>yield from</code>? Let's validate that,</p> <p>2.</p> <pre><code>def some_func(x):\n    if x == 3:\n        return [\"wtf\"]\n    else:\n        for i in range(x):\n          yield i\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; list(some_func(3))\n[]\n</code></pre> <p>The same result, this didn't work either.</p>"},{"location":"USA/#explanation_25","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>From Python 3.3 onwards, it became possible to use <code>return</code> statement with values inside generators (See PEP380). The official docs say that,</li> </ul> <p>\"... <code>return expr</code> in a generator causes <code>StopIteration(expr)</code> to be raised upon exit from the generator.\"</p> <ul> <li> <p>In the case of <code>some_func(3)</code>, <code>StopIteration</code> is raised at the beginning because of <code>return</code> statement. The <code>StopIteration</code> exception is automatically caught inside the <code>list(...)</code> wrapper and the <code>for</code> loop. Therefore, the above two snippets result in an empty list.</p> </li> <li> <p>To get <code>[\"wtf\"]</code> from the generator <code>some_func</code> we need to catch the <code>StopIteration</code> exception,</p> </li> </ul> <pre><code>try:\n    next(some_func(3))\nexcept StopIteration as e:\n    some_string = e.value\n</code></pre> <pre><code>&gt;&gt;&gt; some_string\n[\"wtf\"]\n</code></pre>"},{"location":"USA/#nan-reflexivity","title":"\u25b6 Nan-reflexivity *","text":"<p>1.</p> <pre><code>a = float('inf')\nb = float('nan')\nc = float('-iNf')  # These strings are case-insensitive\nd = float('nan')\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; a\ninf\n&gt;&gt;&gt; b\nnan\n&gt;&gt;&gt; c\n-inf\n&gt;&gt;&gt; float('some_other_string')\nValueError: could not convert string to float: some_other_string\n&gt;&gt;&gt; a == -c # inf==inf\nTrue\n&gt;&gt;&gt; None == None # None == None\nTrue\n&gt;&gt;&gt; b == d # but nan!=nan\nFalse\n&gt;&gt;&gt; 50 / a\n0.0\n&gt;&gt;&gt; a / a\nnan\n&gt;&gt;&gt; 23 + b\nnan\n</code></pre> <p>2.</p> <pre><code>&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; y = x / x\n&gt;&gt;&gt; y is y # identity holds\nTrue\n&gt;&gt;&gt; y == y # equality fails of y\nFalse\n&gt;&gt;&gt; [y] == [y] # but the equality succeeds for the list containing y\nTrue\n</code></pre>"},{"location":"USA/#explanation_26","title":"\ud83d\udca1 Explanation:","text":"<ul> <li> <p><code>'inf'</code> and <code>'nan'</code> are special strings (case-insensitive), which, when explicitly typecast-ed to <code>float</code> type, are used to represent mathematical \"infinity\" and \"not a number\" respectively.</p> </li> <li> <p>Since according to IEEE standards <code>NaN != NaN</code>, obeying this rule breaks the reflexivity assumption of a collection element in Python i.e. if <code>x</code> is a part of a collection like <code>list</code>, the implementations like comparison are based on the assumption that <code>x == x</code>.  Because of this assumption, the identity is compared first (since it's faster) while comparing two elements, and the values are compared only when the identities mismatch. The following snippet will make things clearer,</p> </li> </ul> <pre><code>&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; x == x, [x] == [x]\n(False, True)\n&gt;&gt;&gt; y = float('nan')\n&gt;&gt;&gt; y == y, [y] == [y]\n(False, True)\n&gt;&gt;&gt; x == y, [x] == [y]\n(False, False)\n</code></pre> <p>Since the identities of <code>x</code> and <code>y</code> are different, the values are considered, which are also different; hence the comparison returns <code>False</code> this time.</p> <ul> <li>Interesting read: Reflexivity, and other pillars of civilization</li> </ul>"},{"location":"USA/#mutating-the-immutable","title":"\u25b6 Mutating the immutable!","text":"<p>This might seem trivial if you know how references work in Python.</p> <pre><code>some_tuple = (\"A\", \"tuple\", \"with\", \"values\")\nanother_tuple = ([1, 2], [3, 4], [5, 6])\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; some_tuple[2] = \"change this\"\nTypeError: 'tuple' object does not support item assignment\n&gt;&gt;&gt; another_tuple[2].append(1000) #This throws no error\n&gt;&gt;&gt; another_tuple\n([1, 2], [3, 4], [5, 6, 1000])\n&gt;&gt;&gt; another_tuple[2] += [99, 999]\nTypeError: 'tuple' object does not support item assignment\n&gt;&gt;&gt; another_tuple\n([1, 2], [3, 4], [5, 6, 1000, 99, 999])\n</code></pre></p> <p>But I thought tuples were immutable...</p>"},{"location":"USA/#explanation_27","title":"\ud83d\udca1 Explanation:","text":"<ul> <li> <p>Quoting from https://docs.python.org/3/reference/datamodel.html</p> <p>Immutable sequences     An object of an immutable sequence type cannot change once it is created. (If the object contains references to other objects, these other objects may be mutable and may be modified; however, the collection of objects directly referenced by an immutable object cannot change.)</p> </li> <li> <p><code>+=</code> operator changes the list in-place. The item assignment doesn't work, but when the exception occurs, the item has already been changed in place.</p> </li> <li>There's also an explanation in official Python FAQ.</li> </ul>"},{"location":"USA/#the-disappearing-variable-from-outer-scope","title":"\u25b6 The disappearing variable from outer scope","text":"<pre><code>e = 7\ntry:\n    raise Exception()\nexcept Exception as e:\n    pass\n</code></pre> <p>Output (Python 2.x): <pre><code>&gt;&gt;&gt; print(e)\n# prints nothing\n</code></pre></p> <p>Output (Python 3.x): <pre><code>&gt;&gt;&gt; print(e)\nNameError: name 'e' is not defined\n</code></pre></p>"},{"location":"USA/#explanation_28","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>Source: https://docs.python.org/3/reference/compound_stmts.html#except</li> </ul> <p>When an exception has been assigned using <code>as</code> target, it is cleared at the end of the <code>except</code> clause. This is as if</p> <pre><code>except E as N:\n    foo\n</code></pre> <p>was translated into</p> <pre><code>except E as N:\n    try:\n        foo\n    finally:\n        del N\n</code></pre> <p>This means the exception must be assigned to a different name to be able to refer to it after the except clause. Exceptions are cleared because, with the traceback attached to them, they form a reference cycle with the stack frame, keeping all locals in that frame alive until the next garbage collection occurs.</p> <ul> <li> <p>The clauses are not scoped in Python. Everything in the example is present in the same scope, and the variable <code>e</code> got removed due to the execution of the <code>except</code> clause. The same is not the case with functions that have their separate inner-scopes. The example below illustrates this:</p> <pre><code>def f(x):\n    del(x)\n    print(x)\n\nx = 5\ny = [5, 4, 3]\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; f(x)\nUnboundLocalError: local variable 'x' referenced before assignment\n&gt;&gt;&gt; f(y)\nUnboundLocalError: local variable 'x' referenced before assignment\n&gt;&gt;&gt; x\n5\n&gt;&gt;&gt; y\n[5, 4, 3]\n</code></pre></p> </li> <li> <p>In Python 2.x, the variable name <code>e</code> gets assigned to <code>Exception()</code> instance, so when you try to print, it prints nothing.</p> <p>Output (Python 2.x): <pre><code>&gt;&gt;&gt; e\nException()\n&gt;&gt;&gt; print e\n# Nothing is printed!\n</code></pre></p> </li> </ul>"},{"location":"USA/#the-mysterious-key-type-conversion","title":"\u25b6 The mysterious key type conversion","text":"<pre><code>class SomeClass(str):\n    pass\n\nsome_dict = {'s': 42}\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; type(list(some_dict.keys())[0])\nstr\n&gt;&gt;&gt; s = SomeClass('s')\n&gt;&gt;&gt; some_dict[s] = 40\n&gt;&gt;&gt; some_dict # expected: Two different keys-value pairs\n{'s': 40}\n&gt;&gt;&gt; type(list(some_dict.keys())[0])\nstr\n</code></pre></p>"},{"location":"USA/#explanation_29","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>Both the object <code>s</code> and the string <code>\"s\"</code> hash to the same value because <code>SomeClass</code> inherits the <code>__hash__</code> method of <code>str</code> class.</li> <li><code>SomeClass(\"s\") == \"s\"</code> evaluates to <code>True</code> because <code>SomeClass</code> also inherits <code>__eq__</code> method from <code>str</code> class.</li> <li>Since both the objects hash to the same value and are equal, they are represented by the same key in the dictionary.</li> <li>For the desired behavior, we can redefine the <code>__eq__</code> method in <code>SomeClass</code> <pre><code>class SomeClass(str):\n  def __eq__(self, other):\n      return (\n          type(self) is SomeClass\n          and type(other) is SomeClass\n          and super().__eq__(other)\n      )\n\n  # When we define a custom __eq__, Python stops automatically inheriting the\n  # __hash__ method, so we need to define it as well\n  __hash__ = str.__hash__\n\nsome_dict = {'s':42}\n</code></pre></li> </ul> <p>Output: <pre><code>&gt;&gt;&gt; s = SomeClass('s')\n&gt;&gt;&gt; some_dict[s] = 40\n&gt;&gt;&gt; some_dict\n{'s': 40, 's': 42}\n&gt;&gt;&gt; keys = list(some_dict.keys())\n&gt;&gt;&gt; type(keys[0]), type(keys[1])\n(__main__.SomeClass, str)\n</code></pre></p>"},{"location":"USA/#lets-see-if-you-can-guess-this","title":"\u25b6 Let's see if you can guess this?","text":"<pre><code>a, b = a[b] = {}, 5\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; a\n{5: ({...}, 5)}\n</code></pre></p>"},{"location":"USA/#explanation_30","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>According to Python language reference, assignment statements have the form   <pre><code>(target_list \"=\")+ (expression_list | yield_expression)\n</code></pre>   and</li> </ul> <p>An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.</p> <ul> <li> <p>The <code>+</code> in <code>(target_list \"=\")+</code> means there can be one or more target lists. In this case, target lists are <code>a, b</code> and <code>a[b]</code> (note the expression list is exactly one, which in our case is <code>{}, 5</code>).</p> </li> <li> <p>After the expression list is evaluated, its value is unpacked to the target lists from left to right. So, in our case, first the <code>{}, 5</code> tuple is unpacked to <code>a, b</code> and we now have <code>a = {}</code> and <code>b = 5</code>.</p> </li> <li> <p><code>a</code> is now assigned to <code>{}</code>, which is a mutable object.</p> </li> <li> <p>The second target list is <code>a[b]</code> (you may expect this to throw an error because both <code>a</code> and <code>b</code> have not been defined in the statements before. But remember, we just assigned <code>a</code> to <code>{}</code> and <code>b</code> to <code>5</code>).</p> </li> <li> <p>Now, we are setting the key <code>5</code> in the dictionary to the tuple <code>({}, 5)</code> creating a circular reference (the <code>{...}</code> in the output refers to the same object that <code>a</code> is already referencing). Another simpler example of circular reference could be   <pre><code>&gt;&gt;&gt; some_list = some_list[0] = [0]\n&gt;&gt;&gt; some_list\n[[...]]\n&gt;&gt;&gt; some_list[0]\n[[...]]\n&gt;&gt;&gt; some_list is some_list[0]\nTrue\n&gt;&gt;&gt; some_list[0][0][0][0][0][0] == some_list\nTrue\n</code></pre>   Similar is the case in our example (<code>a[b][0]</code> is the same object as <code>a</code>)</p> </li> <li> <p>So to sum it up, you can break the example down to   <pre><code>a, b = {}, 5\na[b] = a, b\n</code></pre>   And the circular reference can be justified by the fact that <code>a[b][0]</code> is the same object as <code>a</code> <pre><code>&gt;&gt;&gt; a[b][0] is a\nTrue\n</code></pre></p> </li> </ul>"},{"location":"USA/#exceeds-the-limit-for-integer-string-conversion","title":"\u25b6 Exceeds the limit for integer string conversion","text":"<pre><code>&gt;&gt;&gt; # Python 3.10.6\n&gt;&gt;&gt; int(\"2\" * 5432)\n\n&gt;&gt;&gt; # Python 3.10.8\n&gt;&gt;&gt; int(\"2\" * 5432)\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; # Python 3.10.6\n222222222222222222222222222222222222222222222222222222222222222...\n\n&gt;&gt;&gt; # Python 3.10.8\nTraceback (most recent call last):\n   ...\nValueError: Exceeds the limit (4300) for integer string conversion:\n   value has 5432 digits; use sys.set_int_max_str_digits()\n   to increase the limit.\n</code></pre></p>"},{"location":"USA/#explanation_31","title":"\ud83d\udca1 Explanation:","text":"<p>This call to <code>int()</code> works fine in Python 3.10.6 and raises a ValueError in Python 3.10.8. Note that Python can still work with large integers. The error is only raised when converting between integers and strings.</p> <p>Fortunately, you can increase the limit for the allowed number of digits when you expect an operation to exceed it. To do this, you can use one of the following: - The -X int_max_str_digits command-line flag - The set_int_max_str_digits() function from the sys module - The PYTHONINTMAXSTRDIGITS environment variable</p> <p>Check the documentation for more details on changing the default limit if you expect your code to exceed this value.</p>"},{"location":"USA/#section-slippery-slopes","title":"Section: Slippery Slopes","text":""},{"location":"USA/#modifying-a-dictionary-while-iterating-over-it","title":"\u25b6 Modifying a dictionary while iterating over it","text":"<pre><code>x = {0: None}\n\nfor i in x:\n    del x[i]\n    x[i+1] = None\n    print(i)\n</code></pre> <p>Output (Python 2.7- Python 3.5):</p> <pre><code>0\n1\n2\n3\n4\n5\n6\n7\n</code></pre> <p>Yes, it runs for exactly eight times and stops.</p>"},{"location":"USA/#explanation_32","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>Iteration over a dictionary that you edit at the same time is not supported.</li> <li>It runs eight times because that's the point at which the dictionary resizes to hold more keys (we have eight deletion entries, so a resize is needed). This is actually an implementation detail.</li> <li>How deleted keys are handled and when the resize occurs might be different for different Python implementations.</li> <li>So for Python versions other than Python 2.7 - Python 3.5, the count might be different from 8 (but whatever the count is, it's going to be the same every time you run it). You can find some discussion around this here or in this StackOverflow thread.</li> <li>Python 3.7.6 onwards, you'll see <code>RuntimeError: dictionary keys changed during iteration</code> exception if you try to do this.</li> </ul>"},{"location":"USA/#stubborn-del-operation","title":"\u25b6 Stubborn <code>del</code> operation","text":"<pre><code>class SomeClass:\n    def __del__(self):\n        print(\"Deleted!\")\n</code></pre> <p>Output: 1. <pre><code>&gt;&gt;&gt; x = SomeClass()\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; del x # this should print \"Deleted!\"\n&gt;&gt;&gt; del y\nDeleted!\n</code></pre></p> <p>Phew, deleted at last. You might have guessed what saved <code>__del__</code> from being called in our first attempt to delete <code>x</code>. Let's add more twists to the example.</p> <p>2. <pre><code>&gt;&gt;&gt; x = SomeClass()\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; del x\n&gt;&gt;&gt; y # check if y exists\n&lt;__main__.SomeClass instance at 0x7f98a1a67fc8&gt;\n&gt;&gt;&gt; del y # Like previously, this should print \"Deleted!\"\n&gt;&gt;&gt; globals() # oh, it didn't. Let's check all our global variables and confirm\nDeleted!\n{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'SomeClass': &lt;class __main__.SomeClass at 0x7f98a1a5f668&gt;, '__package__': None, '__name__': '__main__', '__doc__': None}\n</code></pre></p> <p>Okay, now it's deleted :confused:</p>"},{"location":"USA/#explanation_33","title":"\ud83d\udca1 Explanation:","text":"<ul> <li><code>del x</code> doesn\u2019t directly call <code>x.__del__()</code>.</li> <li>When <code>del x</code> is encountered, Python deletes the name <code>x</code> from current scope and decrements by 1 the reference count of the object <code>x</code> referenced. <code>__del__()</code> is called only when the object's reference count reaches zero.</li> <li>In the second output snippet, <code>__del__()</code> was not called because the previous statement (<code>&gt;&gt;&gt; y</code>) in the interactive interpreter created another reference to the same object (specifically, the <code>_</code> magic variable which references the result value of the last non <code>None</code> expression on the REPL), thus preventing the reference count from reaching zero when <code>del y</code> was encountered.</li> <li>Calling <code>globals</code> (or really, executing anything that will have a non <code>None</code> result) caused <code>_</code> to reference the new result, dropping the existing reference. Now the reference count reached 0 and we can see \"Deleted!\" being printed (finally!).</li> </ul>"},{"location":"USA/#the-out-of-scope-variable","title":"\u25b6 The out of scope variable","text":"<p>1. <pre><code>a = 1\ndef some_func():\n    return a\n\ndef another_func():\n    a += 1\n    return a\n</code></pre></p> <p>2. <pre><code>def some_closure_func():\n    a = 1\n    def some_inner_func():\n        return a\n    return some_inner_func()\n\ndef another_closure_func():\n    a = 1\n    def another_inner_func():\n        a += 1\n        return a\n    return another_inner_func()\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; some_func()\n1\n&gt;&gt;&gt; another_func()\nUnboundLocalError: local variable 'a' referenced before assignment\n\n&gt;&gt;&gt; some_closure_func()\n1\n&gt;&gt;&gt; another_closure_func()\nUnboundLocalError: local variable 'a' referenced before assignment\n</code></pre></p>"},{"location":"USA/#explanation_34","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>When you make an assignment to a variable in scope, it becomes local to that scope. So <code>a</code> becomes local to the scope of <code>another_func</code>, but it has not been initialized previously in the same scope, which throws an error.</li> <li>To modify the outer scope variable <code>a</code> in <code>another_func</code>, we have to use the <code>global</code> keyword.   <pre><code>def another_func()\n    global a\n    a += 1\n    return a\n</code></pre></li> </ul> <p>Output: <pre><code>&gt;&gt;&gt; another_func()\n2\n</code></pre> * In <code>another_closure_func</code>, <code>a</code> becomes local to the scope of <code>another_inner_func</code>, but it has not been initialized previously in the same scope, which is why it throws an error.  * To modify the outer scope variable <code>a</code> in <code>another_inner_func</code>, use the <code>nonlocal</code> keyword. The nonlocal statement is used to refer to variables defined in the nearest outer (excluding the global) scope.   <pre><code>def another_func():\n    a = 1\n    def another_inner_func():\n        nonlocal a\n        a += 1\n        return a\n    return another_inner_func()\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; another_func()\n2\n</code></pre> * The keywords <code>global</code> and <code>nonlocal</code> tell the python interpreter to not declare new variables and look them up in the corresponding outer scopes. * Read this short but an awesome guide to learn more about how namespaces and scope resolution works in Python.</p>"},{"location":"USA/#deleting-a-list-item-while-iterating","title":"\u25b6 Deleting a list item while iterating","text":"<pre><code>list_1 = [1, 2, 3, 4]\nlist_2 = [1, 2, 3, 4]\nlist_3 = [1, 2, 3, 4]\nlist_4 = [1, 2, 3, 4]\n\nfor idx, item in enumerate(list_1):\n    del item\n\nfor idx, item in enumerate(list_2):\n    list_2.remove(item)\n\nfor idx, item in enumerate(list_3[:]):\n    list_3.remove(item)\n\nfor idx, item in enumerate(list_4):\n    list_4.pop(idx)\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; list_1\n[1, 2, 3, 4]\n&gt;&gt;&gt; list_2\n[2, 4]\n&gt;&gt;&gt; list_3\n[]\n&gt;&gt;&gt; list_4\n[2, 4]\n</code></pre></p> <p>Can you guess why the output is <code>[2, 4]</code>?</p>"},{"location":"USA/#explanation_35","title":"\ud83d\udca1 Explanation:","text":"<ul> <li> <p>It's never a good idea to change the object you're iterating over. The correct way to do so is to iterate over a copy of the object instead, and <code>list_3[:]</code> does just that.</p> <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4]\n&gt;&gt;&gt; id(some_list)\n139798789457608\n&gt;&gt;&gt; id(some_list[:]) # Notice that python creates new object for sliced list.\n139798779601192\n</code></pre> </li> </ul> <p>Difference between <code>del</code>, <code>remove</code>, and <code>pop</code>: * <code>del var_name</code> just removes the binding of the <code>var_name</code> from the local or global namespace (That's why the <code>list_1</code> is unaffected). * <code>remove</code> removes the first matching value, not a specific index, raises <code>ValueError</code> if the value is not found. * <code>pop</code> removes the element at a specific index and returns it, raises <code>IndexError</code> if an invalid index is specified.</p> <p>Why the output is <code>[2, 4]</code>? - The list iteration is done index by index, and when we remove <code>1</code> from <code>list_2</code> or <code>list_4</code>, the contents of the lists are now <code>[2, 3, 4]</code>. The remaining elements are shifted down, i.e., <code>2</code> is at index 0, and <code>3</code> is at index 1. Since the next iteration is going to look at index 1 (which is the <code>3</code>), the <code>2</code> gets skipped entirely. A similar thing will happen with every alternate element in the list sequence.</p> <ul> <li>Refer to this StackOverflow thread explaining the example</li> <li>See also this nice StackOverflow thread for a similar example related to dictionaries in Python.</li> </ul>"},{"location":"USA/#lossy-zip-of-iterators","title":"\u25b6 Lossy zip of iterators *","text":"<p><pre><code>&gt;&gt;&gt; numbers = list(range(7))\n&gt;&gt;&gt; numbers\n[0, 1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; first_three, remaining = numbers[:3], numbers[3:]\n&gt;&gt;&gt; first_three, remaining\n([0, 1, 2], [3, 4, 5, 6])\n&gt;&gt;&gt; numbers_iter = iter(numbers)\n&gt;&gt;&gt; list(zip(numbers_iter, first_three)) \n[(0, 0), (1, 1), (2, 2)]\n# so far so good, let's zip the remaining\n&gt;&gt;&gt; list(zip(numbers_iter, remaining))\n[(4, 3), (5, 4), (6, 5)]\n</code></pre> Where did element <code>3</code> go from the <code>numbers</code> list?</p>"},{"location":"USA/#explanation_36","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>From Python docs, here's an approximate implementation of zip function,     <pre><code>def zip(*iterables):\n    sentinel = object()\n    iterators = [iter(it) for it in iterables]\n    while iterators:\n        result = []\n        for it in iterators:\n            elem = next(it, sentinel)\n            if elem is sentinel: return\n            result.append(elem)\n        yield tuple(result)\n</code></pre></li> <li>So the function takes in arbitrary number of iterable objects, adds each of their items to the <code>result</code> list by calling the <code>next</code> function on them, and stops whenever any of the iterable is exhausted. </li> <li>The caveat here is when any iterable is exhausted, the existing elements in the <code>result</code> list are discarded. That's what happened with <code>3</code> in the <code>numbers_iter</code>.</li> <li>The correct way to do the above using <code>zip</code> would be,     <pre><code>&gt;&gt;&gt; numbers = list(range(7))\n&gt;&gt;&gt; numbers_iter = iter(numbers)\n&gt;&gt;&gt; list(zip(first_three, numbers_iter))\n[(0, 0), (1, 1), (2, 2)]\n&gt;&gt;&gt; list(zip(remaining, numbers_iter))\n[(3, 3), (4, 4), (5, 5), (6, 6)]\n</code></pre>     The first argument of zip should be the one with fewest elements.</li> </ul>"},{"location":"USA/#loop-variables-leaking-out","title":"\u25b6 Loop variables leaking out!","text":"<p>1. <pre><code>for x in range(7):\n    if x == 6:\n        print(x, ': for x inside loop')\nprint(x, ': x in global')\n</code></pre></p> <p>Output: <pre><code>6 : for x inside loop\n6 : x in global\n</code></pre></p> <p>But <code>x</code> was never defined outside the scope of for loop...</p> <p>2. <pre><code># This time let's initialize x first\nx = -1\nfor x in range(7):\n    if x == 6:\n        print(x, ': for x inside loop')\nprint(x, ': x in global')\n</code></pre></p> <p>Output: <pre><code>6 : for x inside loop\n6 : x in global\n</code></pre></p> <p>3.</p> <p>Output (Python 2.x): <pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; print([x for x in range(5)])\n[0, 1, 2, 3, 4]\n&gt;&gt;&gt; print(x)\n4\n</code></pre></p> <p>Output (Python 3.x): <pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; print([x for x in range(5)])\n[0, 1, 2, 3, 4]\n&gt;&gt;&gt; print(x)\n1\n</code></pre></p>"},{"location":"USA/#explanation_37","title":"\ud83d\udca1 Explanation:","text":"<ul> <li> <p>In Python, for-loops use the scope they exist in and leave their defined loop-variable behind. This also applies if we explicitly defined the for-loop variable in the global namespace before. In this case, it will rebind the existing variable.</p> </li> <li> <p>The differences in the output of Python 2.x and Python 3.x interpreters for list comprehension example can be explained by following change documented in What\u2019s New In Python 3.0 changelog:</p> <p>\"List comprehensions no longer support the syntactic form <code>[... for var in item1, item2, ...]</code>. Use <code>[... for var in (item1, item2, ...)]</code> instead. Also, note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a <code>list()</code> constructor, and in particular, the loop control variables are no longer leaked into the surrounding scope.\"</p> </li> </ul>"},{"location":"USA/#beware-of-default-mutable-arguments","title":"\u25b6 Beware of default mutable arguments!","text":"<pre><code>def some_func(default_arg=[]):\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; some_func()\n['some_string']\n&gt;&gt;&gt; some_func()\n['some_string', 'some_string']\n&gt;&gt;&gt; some_func([])\n['some_string']\n&gt;&gt;&gt; some_func()\n['some_string', 'some_string', 'some_string']\n</code></pre></p>"},{"location":"USA/#explanation_38","title":"\ud83d\udca1 Explanation:","text":"<ul> <li> <p>The default mutable arguments of functions in Python aren't really initialized every time you call the function. Instead, the recently assigned value to them is used as the default value. When we explicitly passed <code>[]</code> to <code>some_func</code> as the argument, the default value of the <code>default_arg</code> variable was not used, so the function returned as expected.</p> <pre><code>def some_func(default_arg=[]):\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; some_func.__defaults__ #This will show the default argument values for the function\n([],)\n&gt;&gt;&gt; some_func()\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string'],)\n&gt;&gt;&gt; some_func()\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string', 'some_string'],)\n&gt;&gt;&gt; some_func([])\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string', 'some_string'],)\n</code></pre></p> </li> <li> <p>A common practice to avoid bugs due to mutable arguments is to assign <code>None</code> as the default value and later check if any value is passed to the function corresponding to that argument. Example:</p> <pre><code>def some_func(default_arg=None):\n    if default_arg is None:\n        default_arg = []\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> </li> </ul>"},{"location":"USA/#catching-the-exceptions","title":"\u25b6 Catching the Exceptions","text":"<pre><code>some_list = [1, 2, 3]\ntry:\n    # This should raise an ``IndexError``\n    print(some_list[4])\nexcept IndexError, ValueError:\n    print(\"Caught!\")\n\ntry:\n    # This should raise a ``ValueError``\n    some_list.remove(4)\nexcept IndexError, ValueError:\n    print(\"Caught again!\")\n</code></pre> <p>Output (Python 2.x): <pre><code>Caught!\n\nValueError: list.remove(x): x not in list\n</code></pre></p> <p>Output (Python 3.x): <pre><code>  File \"&lt;input&gt;\", line 3\n    except IndexError, ValueError:\n                     ^\nSyntaxError: invalid syntax\n</code></pre></p>"},{"location":"USA/#explanation_39","title":"\ud83d\udca1 Explanation","text":"<ul> <li> <p>To add multiple Exceptions to the except clause, you need to pass them as parenthesized tuple as the first argument. The second argument is an optional name, which when supplied will bind the Exception instance that has been raised. Example,   <pre><code>some_list = [1, 2, 3]\ntry:\n   # This should raise a ``ValueError``\n   some_list.remove(4)\nexcept (IndexError, ValueError), e:\n   print(\"Caught again!\")\n   print(e)\n</code></pre> Output (Python 2.x): <pre><code>Caught again!\nlist.remove(x): x not in list\n</code></pre> Output (Python 3.x): <pre><code>  File \"&lt;input&gt;\", line 4\n    except (IndexError, ValueError), e:\n                                     ^\nIndentationError: unindent does not match any outer indentation level\n</code></pre></p> </li> <li> <p>Separating the exception from the variable with a comma is deprecated and does not work in Python 3; the correct way is to use <code>as</code>. Example,   <pre><code>some_list = [1, 2, 3]\ntry:\n    some_list.remove(4)\n\nexcept (IndexError, ValueError) as e:\n    print(\"Caught again!\")\n    print(e)\n</code></pre> Output: <pre><code>Caught again!\nlist.remove(x): x not in list\n</code></pre></p> </li> </ul>"},{"location":"USA/#same-operands-different-story","title":"\u25b6 Same operands, different story!","text":"<p>1. <pre><code>a = [1, 2, 3, 4]\nb = a\na = a + [5, 6, 7, 8]\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; a\n[1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; b\n[1, 2, 3, 4]\n</code></pre></p> <p>2. <pre><code>a = [1, 2, 3, 4]\nb = a\na += [5, 6, 7, 8]\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; a\n[1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; b\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre></p>"},{"location":"USA/#explanation_40","title":"\ud83d\udca1 Explanation:","text":"<ul> <li> <p><code>a += b</code> doesn't always behave the same way as <code>a = a + b</code>.  Classes may implement the <code>op=</code> operators differently, and lists do this.</p> </li> <li> <p>The expression <code>a = a + [5,6,7,8]</code> generates a new list and sets <code>a</code>'s reference to that new list, leaving <code>b</code> unchanged.</p> </li> <li> <p>The expression <code>a += [5,6,7,8]</code> is actually mapped to an \"extend\" function that operates on the list such that <code>a</code> and <code>b</code> still point to the same list that has been modified in-place.</p> </li> </ul>"},{"location":"USA/#name-resolution-ignoring-class-scope","title":"\u25b6 Name resolution ignoring class scope","text":"<p>1. <pre><code>x = 5\nclass SomeClass:\n    x = 17\n    y = (x for i in range(10))\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; list(SomeClass.y)[0]\n5\n</code></pre></p> <p>2. <pre><code>x = 5\nclass SomeClass:\n    x = 17\n    y = [x for i in range(10)]\n</code></pre></p> <p>Output (Python 2.x): <pre><code>&gt;&gt;&gt; SomeClass.y[0]\n17\n</code></pre></p> <p>Output (Python 3.x): <pre><code>&gt;&gt;&gt; SomeClass.y[0]\n5\n</code></pre></p>"},{"location":"USA/#explanation_41","title":"\ud83d\udca1 Explanation","text":"<ul> <li>Scopes nested inside class definition ignore names bound at the class level.</li> <li>A generator expression has its own scope.</li> <li>Starting from Python 3.X, list comprehensions also have their own scope.</li> </ul>"},{"location":"USA/#rounding-like-a-banker","title":"\u25b6 Rounding like a banker *","text":"<p>Let's implement a naive function to get the middle element of a list: <pre><code>def get_middle(some_list):\n    mid_index = round(len(some_list) / 2)\n    return some_list[mid_index - 1]\n</code></pre></p> <p>Python 3.x: <pre><code>&gt;&gt;&gt; get_middle([1])  # looks good\n1\n&gt;&gt;&gt; get_middle([1,2,3])  # looks good\n2\n&gt;&gt;&gt; get_middle([1,2,3,4,5])  # huh?\n2\n&gt;&gt;&gt; len([1,2,3,4,5]) / 2  # good\n2.5\n&gt;&gt;&gt; round(len([1,2,3,4,5]) / 2)  # why?\n2\n</code></pre> It seems as though Python rounded 2.5 to 2.</p>"},{"location":"USA/#explanation_42","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>This is not a float precision error, in fact, this behavior is intentional. Since Python 3.0, <code>round()</code> uses banker's rounding where .5 fractions are rounded to the nearest even number:</li> </ul> <pre><code>&gt;&gt;&gt; round(0.5)\n0\n&gt;&gt;&gt; round(1.5)\n2\n&gt;&gt;&gt; round(2.5)\n2\n&gt;&gt;&gt; import numpy  # numpy does the same\n&gt;&gt;&gt; numpy.round(0.5)\n0.0\n&gt;&gt;&gt; numpy.round(1.5)\n2.0\n&gt;&gt;&gt; numpy.round(2.5)\n2.0\n</code></pre> <ul> <li>This is the recommended way to round .5 fractions as described in IEEE 754. However, the other way (round away from zero) is taught in school most of the time, so banker's rounding is likely not that well known. Furthermore, some of the most popular programming languages (for example: JavaScript, Java, C/C++, Ruby, Rust) do not use banker's rounding either. Therefore, this is still quite special to Python and may result in confusion when rounding fractions. </li> <li>See the round() docs or this stackoverflow thread for more information.</li> <li>Note that <code>get_middle([1])</code> only returned 1 because the index was <code>round(0.5) - 1 = 0 - 1 = -1</code>, returning the last element in the list.</li> </ul>"},{"location":"USA/#needles-in-a-haystack","title":"\u25b6 Needles in a Haystack *","text":"<p>I haven't met even a single experience Pythonist till date who has not come across one or more of the following scenarios,</p> <p>1.</p> <pre><code>x, y = (0, 1) if True else None, None\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; x, y  # expected (0, 1)\n((0, 1), None)\n</code></pre> <p>2.</p> <pre><code>t = ('one', 'two')\nfor i in t:\n    print(i)\n\nt = ('one')\nfor i in t:\n    print(i)\n\nt = ()\nprint(t)\n</code></pre> <p>Output:</p> <pre><code>one\ntwo\no\nn\ne\ntuple()\n</code></pre> <p>3.</p> <pre><code>ten_words_list = [\n    \"some\",\n    \"very\",\n    \"big\",\n    \"list\",\n    \"that\"\n    \"consists\",\n    \"of\",\n    \"exactly\",\n    \"ten\",\n    \"words\"\n]\n</code></pre> <p>Output</p> <pre><code>&gt;&gt;&gt; len(ten_words_list)\n9\n</code></pre> <p>4. Not asserting strongly enough</p> <pre><code>a = \"python\"\nb = \"javascript\"\n</code></pre> <p>Output:</p> <pre><code># An assert statement with an assertion failure message.\n&gt;&gt;&gt; assert(a == b, \"Both languages are different\")\n# No AssertionError is raised\n</code></pre> <p>5.</p> <pre><code>some_list = [1, 2, 3]\nsome_dict = {\n  \"key_1\": 1,\n  \"key_2\": 2,\n  \"key_3\": 3\n}\n\nsome_list = some_list.append(4) \nsome_dict = some_dict.update({\"key_4\": 4})\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; print(some_list)\nNone\n&gt;&gt;&gt; print(some_dict)\nNone\n</code></pre> <p>6.</p> <pre><code>def some_recursive_func(a):\n    if a[0] == 0:\n        return\n    a[0] -= 1\n    some_recursive_func(a)\n    return a\n\ndef similar_recursive_func(a):\n    if a == 0:\n        return a\n    a -= 1\n    similar_recursive_func(a)\n    return a\n</code></pre> <p>Output:</p> <pre><code>&gt;&gt;&gt; some_recursive_func([5, 0])\n[0, 0]\n&gt;&gt;&gt; similar_recursive_func(5)\n4\n</code></pre>"},{"location":"USA/#explanation_43","title":"\ud83d\udca1 Explanation:","text":"<ul> <li> <p>For 1, the correct statement for expected behavior is <code>x, y = (0, 1) if True else (None, None)</code>.</p> </li> <li> <p>For 2, the correct statement for expected behavior is <code>t = ('one',)</code> or <code>t = 'one',</code> (missing comma) otherwise the interpreter considers <code>t</code> to be a <code>str</code> and iterates over it character by character.</p> </li> <li> <p><code>()</code> is a special token and denotes empty <code>tuple</code>.</p> </li> <li> <p>In 3, as you might have already figured out, there's a missing comma after 5th element (<code>\"that\"</code>) in the list. So by implicit string literal concatenation,</p> </li> </ul> <pre><code>&gt;&gt;&gt; ten_words_list\n['some', 'very', 'big', 'list', 'thatconsists', 'of', 'exactly', 'ten', 'words']\n</code></pre> <ul> <li>No <code>AssertionError</code> was raised in 4th snippet because instead of asserting the individual expression <code>a == b</code>, we're asserting entire tuple. The following snippet will clear things up,</li> </ul> <pre><code>&gt;&gt;&gt; a = \"python\"\n&gt;&gt;&gt; b = \"javascript\"\n&gt;&gt;&gt; assert a == b\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n\n&gt;&gt;&gt; assert (a == b, \"Values are not equal\")\n&lt;stdin&gt;:1: SyntaxWarning: assertion is always true, perhaps remove parentheses?\n\n&gt;&gt;&gt; assert a == b, \"Values are not equal\"\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError: Values are not equal\n</code></pre> <ul> <li> <p>As for the fifth snippet, most methods that modify the items of sequence/mapping objects like <code>list.append</code>, <code>dict.update</code>, <code>list.sort</code>, etc. modify the objects in-place and return <code>None</code>. The rationale behind this is to improve performance by avoiding making a copy of the object if the operation can be done in-place (Referred from here).</p> </li> <li> <p>Last one should be fairly obvious, mutable object (like <code>list</code>) can be altered in the function, and the reassignment of an immutable (<code>a -= 1</code>) is not an alteration of the value.</p> </li> <li> <p>Being aware of these nitpicks can save you hours of debugging effort in the long run. </p> </li> </ul>"},{"location":"USA/#splitsies","title":"\u25b6 Splitsies *","text":"<pre><code>&gt;&gt;&gt; 'a'.split()\n['a']\n\n# is same as\n&gt;&gt;&gt; 'a'.split(' ')\n['a']\n\n# but\n&gt;&gt;&gt; len(''.split())\n0\n\n# isn't the same as\n&gt;&gt;&gt; len(''.split(' '))\n1\n</code></pre>"},{"location":"USA/#explanation_44","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>It might appear at first that the default separator for split is a single space <code>' '</code>, but as per the docs     &gt;  If sep is not specified or is <code>None</code>, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns <code>[]</code>.     &gt; If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, <code>'1,,2'.split(',')</code> returns <code>['1', '', '2']</code>). Splitting an empty string with a specified separator returns <code>['']</code>.</li> <li>Noticing how the leading and trailing whitespaces are handled in the following snippet will make things clear,     <pre><code>&gt;&gt;&gt; ' a '.split(' ')\n['', 'a', '']\n&gt;&gt;&gt; ' a '.split()\n['a']\n&gt;&gt;&gt; ''.split(' ')\n['']\n</code></pre></li> </ul>"},{"location":"USA/#wild-imports","title":"\u25b6 Wild imports *","text":"<pre><code># File: module.py\n\ndef some_weird_name_func_():\n    print(\"works!\")\n\ndef _another_weird_name_func():\n    print(\"works!\")\n</code></pre> <p>Output</p> <pre><code>&gt;&gt;&gt; from module import *\n&gt;&gt;&gt; some_weird_name_func_()\n\"works!\"\n&gt;&gt;&gt; _another_weird_name_func()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name '_another_weird_name_func' is not defined\n</code></pre>"},{"location":"USA/#explanation_45","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>It is often advisable to not use wildcard imports. The first obvious reason for this is, in wildcard imports, the names with a leading underscore don't get imported. This may lead to errors during runtime.</li> <li>Had we used <code>from ... import a, b, c</code> syntax, the above <code>NameError</code> wouldn't have occurred.     <pre><code>&gt;&gt;&gt; from module import some_weird_name_func_, _another_weird_name_func\n&gt;&gt;&gt; _another_weird_name_func()\nworks!\n</code></pre></li> <li> <p>If you really want to use wildcard imports, then you'd have to define the list <code>__all__</code> in your module that will contain a list of public objects that'll be available when we do wildcard imports.     <pre><code>__all__ = ['_another_weird_name_func']\n\ndef some_weird_name_func_():\n    print(\"works!\")\n\ndef _another_weird_name_func():\n    print(\"works!\")\n</code></pre> Output</p> <pre><code>&gt;&gt;&gt; _another_weird_name_func()\n\"works!\"\n&gt;&gt;&gt; some_weird_name_func_()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'some_weird_name_func_' is not defined\n</code></pre> </li> </ul>"},{"location":"USA/#all-sorted","title":"\u25b6 All sorted? *","text":"<pre><code>&gt;&gt;&gt; x = 7, 8, 9\n&gt;&gt;&gt; sorted(x) == x\nFalse\n&gt;&gt;&gt; sorted(x) == sorted(x)\nTrue\n\n&gt;&gt;&gt; y = reversed(x)\n&gt;&gt;&gt; sorted(y) == sorted(y)\nFalse\n</code></pre>"},{"location":"USA/#explanation_46","title":"\ud83d\udca1 Explanation:","text":"<ul> <li> <p>The <code>sorted</code> method always returns a list, and comparing lists and tuples always returns <code>False</code> in Python. </p> </li> <li> <p>```py</p> <p>[] == tuple()   False x = 7, 8, 9 type(x), type(sorted(x))   (tuple, list)   ```</p> </li> <li> <p>Unlike <code>sorted</code>, the <code>reversed</code> method returns an iterator. Why? Because sorting requires the iterator to be either modified in-place or use an extra container (a list), whereas reversing can simply work by iterating from the last index to the first.</p> </li> <li> <p>So during comparison <code>sorted(y) == sorted(y)</code>, the first call to <code>sorted()</code> will consume the iterator <code>y</code>, and the next call will just return an empty list.</p> </li> </ul> <pre><code>&gt;&gt;&gt; x = 7, 8, 9\n&gt;&gt;&gt; y = reversed(x)\n&gt;&gt;&gt; sorted(y), sorted(y)\n([7, 8, 9], [])\n</code></pre>"},{"location":"USA/#midnight-time-doesnt-exist","title":"\u25b6 Midnight time doesn't exist?","text":"<pre><code>from datetime import datetime\n\nmidnight = datetime(2018, 1, 1, 0, 0)\nmidnight_time = midnight.time()\n\nnoon = datetime(2018, 1, 1, 12, 0)\nnoon_time = noon.time()\n\nif midnight_time:\n    print(\"Time at midnight is\", midnight_time)\n\nif noon_time:\n    print(\"Time at noon is\", noon_time)\n</code></pre> <p>Output (&lt; 3.5):</p> <p><pre><code>('Time at noon is', datetime.time(12, 0))\n</code></pre> The midnight time is not printed.</p>"},{"location":"USA/#explanation_47","title":"\ud83d\udca1 Explanation:","text":"<p>Before Python 3.5, the boolean value for <code>datetime.time</code> object was considered to be <code>False</code> if it represented midnight in UTC. It is error-prone when using the <code>if obj:</code> syntax to check if the <code>obj</code> is null or some equivalent of \"empty.\"</p>"},{"location":"USA/#-","title":"---","text":""},{"location":"USA/#section-the-hidden-treasures","title":"Section: The Hidden treasures!","text":"<p>This section contains a few lesser-known and interesting things about Python that most beginners like me are unaware of (well, not anymore).</p>"},{"location":"USA/#okay-python-can-you-make-me-fly","title":"\u25b6 Okay Python, Can you make me fly?","text":"<p>Well, here you go</p> <pre><code>import antigravity\n</code></pre> <p>Output: Sshh... It's a super-secret.</p>"},{"location":"USA/#explanation_48","title":"\ud83d\udca1 Explanation:","text":"<ul> <li><code>antigravity</code> module is one of the few easter eggs released by Python developers.</li> <li><code>import antigravity</code> opens up a web browser pointing to the classic XKCD comic about Python.</li> <li>Well, there's more to it. There's another easter egg inside the easter egg. If you look at the code, there's a function defined that purports to implement the XKCD's geohashing algorithm.</li> </ul>"},{"location":"USA/#goto-but-why","title":"\u25b6 <code>goto</code>, but why?","text":"<pre><code>from goto import goto, label\nfor i in range(9):\n    for j in range(9):\n        for k in range(9):\n            print(\"I am trapped, please rescue!\")\n            if k == 2:\n                goto .breakout # breaking out from a deeply nested loop\nlabel .breakout\nprint(\"Freedom!\")\n</code></pre> <p>Output (Python 2.3): <pre><code>I am trapped, please rescue!\nI am trapped, please rescue!\nFreedom!\n</code></pre></p>"},{"location":"USA/#explanation_49","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>A working version of <code>goto</code> in Python was announced as an April Fool's joke on 1st April 2004.</li> <li>Current versions of Python do not have this module.</li> <li>Although it works, but please don't use it. Here's the reason to why <code>goto</code> is not present in Python.</li> </ul>"},{"location":"USA/#brace-yourself","title":"\u25b6 Brace yourself!","text":"<p>If you are one of the people who doesn't like using whitespace in Python to denote scopes, you can use the C-style {} by importing,</p> <pre><code>from __future__ import braces\n</code></pre> <p>Output: <pre><code>  File \"some_file.py\", line 1\n    from __future__ import braces\nSyntaxError: not a chance\n</code></pre></p> <p>Braces? No way! If you think that's disappointing, use Java. Okay, another surprising thing, can you find where's the <code>SyntaxError</code> raised in <code>__future__</code> module code?</p>"},{"location":"USA/#explanation_50","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>The <code>__future__</code> module is normally used to provide features from future versions of Python. The \"future\" in this specific context is however, ironic.</li> <li>This is an easter egg concerned with the community's feelings on this issue.</li> <li>The code is actually present here in <code>future.c</code> file.</li> <li>When the CPython compiler encounters a future statement, it first runs the appropriate code in <code>future.c</code> before treating it as a normal import statement.</li> </ul>"},{"location":"USA/#lets-meet-friendly-language-uncle-for-life","title":"\u25b6 Let's meet Friendly Language Uncle For Life","text":"<p>Output (Python 3.x) <pre><code>&gt;&gt;&gt; from __future__ import barry_as_FLUFL\n&gt;&gt;&gt; \"Ruby\" != \"Python\" # there's no doubt about it\n  File \"some_file.py\", line 1\n    \"Ruby\" != \"Python\"\n              ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; \"Ruby\" &lt;&gt; \"Python\"\nTrue\n</code></pre></p> <p>There we go.</p>"},{"location":"USA/#explanation_51","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>This is relevant to PEP-401 released on April 1, 2009 (now you know, what it means).</li> <li>Quoting from the PEP-401</li> </ul> <p>Recognized that the != inequality operator in Python 3.0 was a horrible, finger-pain inducing mistake, the FLUFL reinstates the &lt;&gt; diamond operator as the sole spelling. - There were more things that Uncle Barry had to share in the PEP; you can read them here. - It works well in an interactive environment, but it will raise a <code>SyntaxError</code> when you run via python file (see this issue). However, you can wrap the statement inside an <code>eval</code> or <code>compile</code> to get it working,     <pre><code>from __future__ import barry_as_FLUFL\nprint(eval('\"Ruby\" &lt;&gt; \"Python\"'))\n</code></pre></p>"},{"location":"USA/#even-python-understands-that-love-is-complicated","title":"\u25b6 Even Python understands that love is complicated","text":"<pre><code>import this\n</code></pre> <p>Wait, what's this? <code>this</code> is love :heart:</p> <p>Output: <pre><code>The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code></pre></p> <p>It's the Zen of Python!</p> <pre><code>&gt;&gt;&gt; love = this\n&gt;&gt;&gt; this is love\nTrue\n&gt;&gt;&gt; love is True\nFalse\n&gt;&gt;&gt; love is False\nFalse\n&gt;&gt;&gt; love is not True or False\nTrue\n&gt;&gt;&gt; love is not True or False; love is love  # Love is complicated\nTrue\n</code></pre>"},{"location":"USA/#explanation_52","title":"\ud83d\udca1 Explanation:","text":"<ul> <li><code>this</code> module in Python is an easter egg for The Zen Of Python (PEP 20).</li> <li>And if you think that's already interesting enough, check out the implementation of this.py. Interestingly, the code for the Zen violates itself (and that's probably the only place where this happens).</li> <li>Regarding the statement <code>love is not True or False; love is love</code>, ironic but it's self-explanatory (if not, please see the examples related to <code>is</code> and <code>is not</code> operators).</li> </ul>"},{"location":"USA/#yes-it-exists","title":"\u25b6 Yes, it exists!","text":"<p>The <code>else</code> clause for loops. One typical example might be:</p> <pre><code>  def does_exists_num(l, to_find):\n      for num in l:\n          if num == to_find:\n              print(\"Exists!\")\n              break\n      else:\n          print(\"Does not exist\")\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; does_exists_num(some_list, 4)\nExists!\n&gt;&gt;&gt; does_exists_num(some_list, -1)\nDoes not exist\n</code></pre></p> <p>The <code>else</code> clause in exception handling. An example,</p> <pre><code>try:\n    pass\nexcept:\n    print(\"Exception occurred!!!\")\nelse:\n    print(\"Try block executed successfully...\")\n</code></pre> <p>Output: <pre><code>Try block executed successfully...\n</code></pre></p>"},{"location":"USA/#explanation_53","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>The <code>else</code> clause after a loop is executed only when there's no explicit <code>break</code> after all the iterations. You can think of it as a \"nobreak\" clause.</li> <li><code>else</code> clause after a try block is also called \"completion clause\" as reaching the <code>else</code> clause in a <code>try</code> statement means that the try block actually completed successfully.</li> </ul>"},{"location":"USA/#ellipsis","title":"\u25b6 Ellipsis *","text":"<pre><code>def some_func():\n    Ellipsis\n</code></pre> <p>Output <pre><code>&gt;&gt;&gt; some_func()\n# No output, No Error\n\n&gt;&gt;&gt; SomeRandomString\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'SomeRandomString' is not defined\n\n&gt;&gt;&gt; Ellipsis\nEllipsis\n</code></pre></p>"},{"location":"USA/#explanation_54","title":"\ud83d\udca1 Explanation","text":"<ul> <li>In Python, <code>Ellipsis</code> is a globally available built-in object which is equivalent to <code>...</code>.     <pre><code>&gt;&gt;&gt; ...\nEllipsis\n</code></pre></li> <li>Ellipsis can be used for several purposes,<ul> <li>As a placeholder for code that hasn't been written yet (just like <code>pass</code> statement)</li> <li>In slicing syntax to represent the full slices in remaining direction <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; three_dimensional_array = np.arange(8).reshape(2, 2, 2)\narray([\n    [\n        [0, 1],\n        [2, 3]\n    ],\n\n    [\n        [4, 5],\n        [6, 7]\n    ]\n])\n</code></pre> So our <code>three_dimensional_array</code> is an array of array of arrays. Let's say we want to print the second element (index <code>1</code>) of all the innermost arrays, we can use Ellipsis to bypass all the preceding dimensions <pre><code>&gt;&gt;&gt; three_dimensional_array[:,:,1]\narray([[1, 3],\n   [5, 7]])\n&gt;&gt;&gt; three_dimensional_array[..., 1] # using Ellipsis.\narray([[1, 3],\n   [5, 7]])\n</code></pre> Note: this will work for any number of dimensions. You can even select slice in first and last dimension and ignore the middle ones this way (<code>n_dimensional_array[firs_dim_slice, ..., last_dim_slice]</code>)</li> <li>In type hinting to indicate only a part of the type (like <code>(Callable[..., int]</code> or <code>Tuple[str, ...]</code>))</li> <li>You may also use Ellipsis as a default function argument (in the cases when you want to differentiate between the \"no argument passed\" and \"None value passed\" scenarios).</li> </ul> </li> </ul>"},{"location":"USA/#inpinity","title":"\u25b6 Inpinity","text":"<p>The spelling is intended. Please, don't submit a patch for this.</p> <p>Output (Python 3.x): <pre><code>&gt;&gt;&gt; infinity = float('infinity')\n&gt;&gt;&gt; hash(infinity)\n314159\n&gt;&gt;&gt; hash(float('-inf'))\n-314159\n</code></pre></p>"},{"location":"USA/#explanation_55","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>Hash of infinity is 10\u2075 x \u03c0.</li> <li>Interestingly, the hash of <code>float('-inf')</code> is \"-10\u2075 x \u03c0\" in Python 3, whereas \"-10\u2075 x e\" in Python 2.</li> </ul>"},{"location":"USA/#lets-mangle","title":"\u25b6 Let's mangle","text":"<p>1. <pre><code>class Yo(object):\n    def __init__(self):\n        self.__honey = True\n        self.bro = True\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; Yo().bro\nTrue\n&gt;&gt;&gt; Yo().__honey\nAttributeError: 'Yo' object has no attribute '__honey'\n&gt;&gt;&gt; Yo()._Yo__honey\nTrue\n</code></pre></p> <p>2. <pre><code>class Yo(object):\n    def __init__(self):\n        # Let's try something symmetrical this time\n        self.__honey__ = True\n        self.bro = True\n</code></pre></p> <p>Output: <pre><code>&gt;&gt;&gt; Yo().bro\nTrue\n\n&gt;&gt;&gt; Yo()._Yo__honey__\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'Yo' object has no attribute '_Yo__honey__'\n</code></pre></p> <p>Why did <code>Yo()._Yo__honey</code> work?</p> <p>3.</p> <pre><code>_A__variable = \"Some value\"\n\nclass A(object):\n    def some_func(self):\n        return __variable # not initialized anywhere yet\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; A().__variable\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'A' object has no attribute '__variable'\n\n&gt;&gt;&gt; A().some_func()\n'Some value'\n</code></pre></p>"},{"location":"USA/#explanation_56","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>Name Mangling is used to avoid naming collisions between different namespaces.</li> <li>In Python, the interpreter modifies (mangles) the class member names starting with <code>__</code> (double underscore a.k.a \"dunder\") and not ending with more than one trailing underscore by adding <code>_NameOfTheClass</code> in front.</li> <li>So, to access <code>__honey</code> attribute in the first snippet, we had to append <code>_Yo</code> to the front, which would prevent conflicts with the same name attribute defined in any other class.</li> <li>But then why didn't it work in the second snippet? Because name mangling excludes the names ending with double underscores.</li> <li>The third snippet was also a consequence of name mangling. The name <code>__variable</code> in the statement <code>return __variable</code> was mangled to <code>_A__variable</code>, which also happens to be the name of the variable we declared in the outer scope.</li> <li>Also, if the mangled name is longer than 255 characters, truncation will happen.</li> </ul>"},{"location":"USA/#-_1","title":"---","text":""},{"location":"USA/#section-appearances-are-deceptive","title":"Section: Appearances are deceptive!","text":""},{"location":"USA/#skipping-lines","title":"\u25b6 Skipping lines?","text":"<p>Output: <pre><code>&gt;&gt;&gt; value = 11\n&gt;&gt;&gt; valu\u0435 = 32\n&gt;&gt;&gt; value\n11\n</code></pre></p> <p>Wut?</p> <p>Note: The easiest way to reproduce this is to simply copy the statements from the above snippet and paste them into your file/shell.</p>"},{"location":"USA/#explanation_57","title":"\ud83d\udca1 Explanation","text":"<p>Some non-Western characters look identical to letters in the English alphabet but are considered distinct by the interpreter.</p> <pre><code>&gt;&gt;&gt; ord('\u0435') # cyrillic 'e' (Ye)\n1077\n&gt;&gt;&gt; ord('e') # latin 'e', as used in English and typed using standard keyboard\n101\n&gt;&gt;&gt; '\u0435' == 'e'\nFalse\n\n&gt;&gt;&gt; value = 42 # latin e\n&gt;&gt;&gt; valu\u0435 = 23 # cyrillic 'e', Python 2.x interpreter would raise a `SyntaxError` here\n&gt;&gt;&gt; value\n42\n</code></pre> <p>The built-in <code>ord()</code> function returns a character's Unicode code point, and different code positions of Cyrillic 'e' and Latin 'e' justify the behavior of the above example.</p>"},{"location":"USA/#teleportation","title":"\u25b6 Teleportation","text":"<pre><code># `pip install numpy` first.\nimport numpy as np\n\ndef energy_send(x):\n    # Initializing a numpy array\n    np.array([float(x)])\n\ndef energy_receive():\n    # Return an empty numpy array\n    return np.empty((), dtype=np.float).tolist()\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; energy_send(123.456)\n&gt;&gt;&gt; energy_receive()\n123.456\n</code></pre></p> <p>Where's the Nobel Prize?</p>"},{"location":"USA/#explanation_58","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>Notice that the numpy array created in the <code>energy_send</code> function is not returned, so that memory space is free to reallocate.</li> <li><code>numpy.empty()</code> returns the next free memory slot without reinitializing it. This memory spot just happens to be the same one that was just freed (usually, but not always).</li> </ul>"},{"location":"USA/#well-something-is-fishy","title":"\u25b6 Well, something is fishy...","text":"<pre><code>def square(x):\n    \"\"\"\n    A simple function to calculate the square of a number by addition.\n    \"\"\"\n    sum_so_far = 0\n    for counter in range(x):\n        sum_so_far = sum_so_far + x\n  return sum_so_far\n</code></pre> <p>Output (Python 2.x):</p> <pre><code>&gt;&gt;&gt; square(10)\n10\n</code></pre> <p>Shouldn't that be 100?</p> <p>Note: If you're not able to reproduce this, try running the file mixed_tabs_and_spaces.py via the shell.</p>"},{"location":"USA/#explanation_59","title":"\ud83d\udca1 Explanation","text":"<ul> <li>Don't mix tabs and spaces! The character just preceding return is a \"tab\",  and the code is indented by multiple of \"4 spaces\" elsewhere in the example.</li> <li>This is how Python handles tabs:</li> </ul> <p>First, tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight &lt;...&gt; * So the \"tab\" at the last line of <code>square</code> function is replaced with eight spaces, and it gets into the loop. * Python 3 is kind enough to throw an error for such cases automatically.</p> <pre><code>**Output (Python 3.x):**\n```py\nTabError: inconsistent use of tabs and spaces in indentation\n```\n</code></pre>"},{"location":"USA/#-_2","title":"---","text":""},{"location":"USA/#section-miscellaneous","title":"Section: Miscellaneous","text":""},{"location":"USA/#is-faster","title":"\u25b6 <code>+=</code> is faster","text":"<pre><code># using \"+\", three strings:\n&gt;&gt;&gt; timeit.timeit(\"s1 = s1 + s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100)\n0.25748300552368164\n# using \"+=\", three strings:\n&gt;&gt;&gt; timeit.timeit(\"s1 += s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100)\n0.012188911437988281\n</code></pre>"},{"location":"USA/#explanation_60","title":"\ud83d\udca1 Explanation:","text":"<ul> <li><code>+=</code> is faster than <code>+</code> for concatenating more than two strings because the first string (example, <code>s1</code> for <code>s1 += s2 + s3</code>) is not destroyed while calculating the complete string.</li> </ul>"},{"location":"USA/#lets-make-a-giant-string","title":"\u25b6 Let's make a giant string!","text":"<pre><code>def add_string_with_plus(iters):\n    s = \"\"\n    for i in range(iters):\n        s += \"xyz\"\n    assert len(s) == 3*iters\n\ndef add_bytes_with_plus(iters):\n    s = b\"\"\n    for i in range(iters):\n        s += b\"xyz\"\n    assert len(s) == 3*iters\n\ndef add_string_with_format(iters):\n    fs = \"{}\"*iters\n    s = fs.format(*([\"xyz\"]*iters))\n    assert len(s) == 3*iters\n\ndef add_string_with_join(iters):\n    l = []\n    for i in range(iters):\n        l.append(\"xyz\")\n    s = \"\".join(l)\n    assert len(s) == 3*iters\n\ndef convert_list_to_string(l, iters):\n    s = \"\".join(l)\n    assert len(s) == 3*iters\n</code></pre> <p>Output:</p> <pre><code># Executed in ipython shell using %timeit for better readability of results.\n# You can also use the timeit module in normal python shell/scriptm=, example usage below\n# timeit.timeit('add_string_with_plus(10000)', number=1000, globals=globals())\n\n&gt;&gt;&gt; NUM_ITERS = 1000\n&gt;&gt;&gt; %timeit -n1000 add_string_with_plus(NUM_ITERS)\n124 \u00b5s \u00b1 4.73 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS)\n211 \u00b5s \u00b1 10.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_format(NUM_ITERS)\n61 \u00b5s \u00b1 2.18 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_join(NUM_ITERS)\n117 \u00b5s \u00b1 3.21 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; l = [\"xyz\"]*NUM_ITERS\n&gt;&gt;&gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS)\n10.1 \u00b5s \u00b1 1.06 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre> <p>Let's increase the number of iterations by a factor of 10.</p> <pre><code>&gt;&gt;&gt; NUM_ITERS = 10000\n&gt;&gt;&gt; %timeit -n1000 add_string_with_plus(NUM_ITERS) # Linear increase in execution time\n1.26 ms \u00b1 76.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS) # Quadratic increase\n6.82 ms \u00b1 134 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_format(NUM_ITERS) # Linear increase\n645 \u00b5s \u00b1 24.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_join(NUM_ITERS) # Linear increase\n1.17 ms \u00b1 7.25 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; l = [\"xyz\"]*NUM_ITERS\n&gt;&gt;&gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS) # Linear increase\n86.3 \u00b5s \u00b1 2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre>"},{"location":"USA/#explanation_61","title":"\ud83d\udca1 Explanation","text":"<ul> <li>You can read more about timeit or %timeit on these links. They are used to measure the execution time of code pieces.</li> <li>Don't use <code>+</code> for generating long strings \u2014 In Python, <code>str</code> is immutable, so the left and right strings have to be copied into the new string for every pair of concatenations. If you concatenate four strings of length 10, you'll be copying (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90 characters instead of just 40 characters. Things get quadratically worse as the number and size of the string increases (justified with the execution times of <code>add_bytes_with_plus</code> function)</li> <li>Therefore, it's advised to use <code>.format.</code> or <code>%</code> syntax (however, they are slightly slower than <code>+</code> for very short strings).</li> <li>Or better, if already you've contents available in the form of an iterable object, then use <code>''.join(iterable_object)</code> which is much faster.</li> <li>Unlike <code>add_bytes_with_plus</code> because of the <code>+=</code> optimizations discussed in the previous example, <code>add_string_with_plus</code> didn't show a quadratic increase in execution time. Had the statement been <code>s = s + \"x\" + \"y\" + \"z\"</code> instead of <code>s += \"xyz\"</code>, the increase would have been quadratic.   <pre><code>def add_string_with_plus(iters):\n    s = \"\"\n    for i in range(iters):\n        s = s + \"x\" + \"y\" + \"z\"\n    assert len(s) == 3*iters\n\n&gt;&gt;&gt; %timeit -n100 add_string_with_plus(1000)\n388 \u00b5s \u00b1 22.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n100 add_string_with_plus(10000) # Quadratic increase in execution time\n9 ms \u00b1 298 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n</code></pre></li> <li> <p>So many ways to format and create a giant string are somewhat in contrast to the Zen of Python, according to which,</p> <p>There should be one-- and preferably only one --obvious way to do it.</p> </li> </ul>"},{"location":"USA/#slowing-down-dict-lookups","title":"\u25b6 Slowing down <code>dict</code> lookups *","text":"<pre><code>some_dict = {str(i): 1 for i in range(1_000_000)}\nanother_dict = {str(i): 1 for i in range(1_000_000)}\n</code></pre> <p>Output: <pre><code>&gt;&gt;&gt; %timeit some_dict['5']\n28.6 ns \u00b1 0.115 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n&gt;&gt;&gt; some_dict[1] = 1\n&gt;&gt;&gt; %timeit some_dict['5']\n37.2 ns \u00b1 0.265 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n\n&gt;&gt;&gt; %timeit another_dict['5']\n28.5 ns \u00b1 0.142 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n&gt;&gt;&gt; another_dict[1]  # Trying to access a key that doesn't exist\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nKeyError: 1\n&gt;&gt;&gt; %timeit another_dict['5']\n38.5 ns \u00b1 0.0913 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n</code></pre> Why are same lookups becoming slower?</p>"},{"location":"USA/#explanation_62","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>CPython has a generic dictionary lookup function that handles all types of keys (<code>str</code>, <code>int</code>, any object ...), and a specialized one for the common case of dictionaries composed of <code>str</code>-only keys.</li> <li>The specialized function (named <code>lookdict_unicode</code> in CPython's source) knows all existing keys (including the looked-up key) are strings, and uses the faster &amp; simpler string comparison to compare keys, instead of calling the <code>__eq__</code> method.</li> <li>The first time a <code>dict</code> instance is accessed with a non-<code>str</code> key, it's modified so future lookups use the generic function.</li> <li>This process is not reversible for the particular <code>dict</code> instance, and the key doesn't even have to exist in the dictionary. That's why attempting a failed lookup has the same effect.</li> </ul>"},{"location":"USA/#bloating-instance-dicts","title":"\u25b6 Bloating instance <code>dict</code>s *","text":"<pre><code>import sys\n\nclass SomeClass:\n    def __init__(self):\n        self.some_attr1 = 1\n        self.some_attr2 = 2\n        self.some_attr3 = 3\n        self.some_attr4 = 4\n\n\ndef dict_size(o):\n    return sys.getsizeof(o.__dict__)\n</code></pre> <p>Output: (Python 3.8, other Python 3 versions may vary a little) <pre><code>&gt;&gt;&gt; o1 = SomeClass()\n&gt;&gt;&gt; o2 = SomeClass()\n&gt;&gt;&gt; dict_size(o1)\n104\n&gt;&gt;&gt; dict_size(o2)\n104\n&gt;&gt;&gt; del o1.some_attr1\n&gt;&gt;&gt; o3 = SomeClass()\n&gt;&gt;&gt; dict_size(o3)\n232\n&gt;&gt;&gt; dict_size(o1)\n232\n</code></pre></p> <p>Let's try again... In a new interpreter:</p> <pre><code>&gt;&gt;&gt; o1 = SomeClass()\n&gt;&gt;&gt; o2 = SomeClass()\n&gt;&gt;&gt; dict_size(o1)\n104  # as expected\n&gt;&gt;&gt; o1.some_attr5 = 5\n&gt;&gt;&gt; o1.some_attr6 = 6\n&gt;&gt;&gt; dict_size(o1)\n360\n&gt;&gt;&gt; dict_size(o2)\n272\n&gt;&gt;&gt; o3 = SomeClass()\n&gt;&gt;&gt; dict_size(o3)\n232\n</code></pre> <p>What makes those dictionaries become bloated? And why are newly created objects bloated as well?</p>"},{"location":"USA/#explanation_63","title":"\ud83d\udca1 Explanation:","text":"<ul> <li>CPython is able to reuse the same \"keys\" object in multiple dictionaries. This was added in PEP 412 with the motivation to reduce memory usage, specifically in dictionaries of instances - where keys (instance attributes) tend to be common to all instances.</li> <li>This optimization is entirely seamless for instance dictionaries, but it is disabled if certain assumptions are broken.</li> <li>Key-sharing dictionaries do not support deletion; if an instance attribute is deleted, the dictionary is \"unshared\", and key-sharing is disabled for all future instances of the same class.</li> <li>Additionally, if the dictionary keys have been resized (because new keys are inserted), they are kept shared only if they are used by a exactly single dictionary (this allows adding many attributes in the <code>__init__</code> of the very first created instance, without causing an \"unshare\"). If multiple instances exist when a resize happens, key-sharing is disabled for all future instances of the same class: CPython can't tell if your instances are using the same set of attributes anymore, and decides to bail out on attempting to share their keys.</li> <li>A small tip, if you aim to lower your program's memory footprint: don't delete instance attributes, and make sure to initialize all attributes in your <code>__init__</code>!</li> </ul>"},{"location":"USA/#minor-ones","title":"\u25b6 Minor Ones *","text":"<ul> <li><code>join()</code> is a string operation instead of list operation. (sort of counter-intuitive at first usage)</li> </ul> <p>\ud83d\udca1 Explanation: If <code>join()</code> is a method on a string, then it can operate on any iterable (list, tuple, iterators). If it were a method on a list, it'd have to be implemented separately by every type. Also, it doesn't make much sense to put a string-specific method on a generic <code>list</code> object API.</p> <ul> <li>Few weird looking but semantically correct statements:</li> <li><code>[] = ()</code> is a semantically correct statement (unpacking an empty <code>tuple</code> into an empty <code>list</code>)</li> <li><code>'a'[0][0][0][0][0]</code> is also semantically correct, because Python doesn't have a character data type like other languages branched from C. So selecting a single character from a string returns a single-character string.</li> <li> <p><code>3 --0-- 5 == 8</code> and <code>--5 == 5</code> are both semantically correct statements and evaluate to <code>True</code>.</p> </li> <li> <p>Given that <code>a</code> is a number, <code>++a</code> and <code>--a</code> are both valid Python statements but don't behave the same way as compared with similar statements in languages like C, C++, or Java.   <pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; a\n5\n&gt;&gt;&gt; ++a\n5\n&gt;&gt;&gt; --a\n5\n</code></pre></p> </li> </ul> <p>\ud83d\udca1 Explanation:   + There is no <code>++</code> operator in Python grammar. It is actually two <code>+</code> operators.   + <code>++a</code> parses as <code>+(+a)</code> which translates to <code>a</code>. Similarly, the output of the statement <code>--a</code> can be justified.   + This StackOverflow thread discusses the rationale behind the absence of increment and decrement operators in Python.</p> <ul> <li> <p>You must be aware of the Walrus operator in Python. But have you ever heard about the space-invader operator?   <pre><code>&gt;&gt;&gt; a = 42\n&gt;&gt;&gt; a -=- 1\n&gt;&gt;&gt; a\n43\n</code></pre>   It is used as an alternative incrementation operator, together with another one   <pre><code>&gt;&gt;&gt; a +=+ 1\n&gt;&gt;&gt; a\n&gt;&gt;&gt; 44\n</code></pre> \ud83d\udca1 Explanation: This prank comes from Raymond Hettinger's tweet. The space invader operator is actually just a malformatted <code>a -= (-1)</code>. Which is equivalent to <code>a = a - (- 1)</code>. Similar for the <code>a += (+ 1)</code> case.</p> </li> <li> <p>Python has an undocumented converse implication operator. </p> <pre><code>&gt;&gt;&gt; False ** False == True\nTrue\n&gt;&gt;&gt; False ** True == False\nTrue\n&gt;&gt;&gt; True ** False == True\nTrue\n&gt;&gt;&gt; True ** True == True\nTrue\n</code></pre> <p>\ud83d\udca1 Explanation: If you replace <code>False</code> and <code>True</code> by 0 and 1 and do the maths, the truth table is equivalent to a converse implication operator. (Source)</p> </li> <li> <p>Since we are talking operators, there's also <code>@</code> operator for matrix multiplication (don't worry, this time it's for real).</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.array([2, 2, 2]) @ np.array([7, 8, 8])\n46\n</code></pre> <p>\ud83d\udca1 Explanation: The <code>@</code> operator was added in Python 3.5 keeping the scientific community in mind. Any object can overload <code>__matmul__</code> magic method to define behavior for this operator.</p> </li> <li> <p>From Python 3.8 onwards you can use a typical f-string syntax like <code>f'{some_var=}</code> for quick debugging. Example,     <pre><code>&gt;&gt;&gt; some_string = \"wtfpython\"\n&gt;&gt;&gt; f'{some_string=}'\n\"some_string='wtfpython'\"\n</code></pre></p> </li> <li> <p>Python uses 2 bytes for local variable storage in functions. In theory, this means that only 65536 variables can be defined in a function. However, python has a handy solution built in that can be used to store more than 2^16 variable names. The following code demonstrates what happens in the stack when more than 65536 local variables are defined (Warning: This code prints around 2^18 lines of text, so be prepared!):</p> <p>```py  import dis exec(\"\"\" def f():     \"\"\" + \"\"\"     \"\"\".join([\"X\" + str(x) + \"=\" + str(x) for x in range(65539)]))</p> <p>f()</p> <p>print(dis.dis(f)) ```</p> </li> <li> <p>Multiple Python threads won't run your Python code concurrently (yes, you heard it right!). It may seem intuitive to spawn several threads and let them execute your Python code concurrently, but, because of the Global Interpreter Lock in Python, all you're doing is making your threads execute on the same core turn by turn. Python threads are good for IO-bound tasks, but to achieve actual parallelization in Python for CPU-bound tasks, you might want to use the Python multiprocessing module.</p> </li> <li> <p>Sometimes, the <code>print</code> method might not print values immediately. For example,</p> <pre><code># File some_file.py\nimport time\n\nprint(\"wtfpython\", end=\"_\")\ntime.sleep(3)\n</code></pre> <p>This will print the <code>wtfpython</code> after 3 seconds due to the <code>end</code> argument because the output buffer is flushed either after encountering <code>\\n</code> or when the program finishes execution. We can force the buffer to flush by passing <code>flush=True</code> argument.</p> </li> <li> <p>List slicing with out of the bounds indices throws no errors   <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; some_list[111:]\n[]\n</code></pre></p> </li> <li> <p>Slicing an iterable not always creates a new object. For example,     <pre><code>&gt;&gt;&gt; some_str = \"wtfpython\"\n&gt;&gt;&gt; some_list = ['w', 't', 'f', 'p', 'y', 't', 'h', 'o', 'n']\n&gt;&gt;&gt; some_list is some_list[:] # False expected because a new object is created.\nFalse\n&gt;&gt;&gt; some_str is some_str[:] # True because strings are immutable, so making a new object is of not much use.\nTrue\n</code></pre></p> </li> <li> <p><code>int('\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669')</code> returns <code>123456789</code> in Python 3. In Python, Decimal characters include digit characters, and all characters that can be used to form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. Here's an interesting story related to this behavior of Python.</p> </li> <li> <p>You can separate numeric literals with underscores (for better readability) from Python 3 onwards.</p> <pre><code>&gt;&gt;&gt; six_million = 6_000_000\n&gt;&gt;&gt; six_million\n6000000\n&gt;&gt;&gt; hex_address = 0xF00D_CAFE\n&gt;&gt;&gt; hex_address\n4027435774\n</code></pre> </li> <li> <p><code>'abc'.count('') == 4</code>. Here's an approximate implementation of <code>count</code> method, which would make the things more clear   <pre><code>def count(s, sub):\n    result = 0\n    for i in range(len(s) + 1 - len(sub)):\n        result += (s[i:i + len(sub)] == sub)\n    return result\n</code></pre>   The behavior is due to the matching of empty substring(<code>''</code>) with slices of length 0 in the original string.</p> </li> </ul>"},{"location":"USA/#-_3","title":"---","text":""},{"location":"USA/#contributing","title":"Contributing","text":"<p>A few ways in which you can contribute to wtfpython,</p> <ul> <li>Suggesting new examples</li> <li>Helping with translation (See issues labeled translation)</li> <li>Minor corrections like pointing out outdated snippets, typos, formatting errors, etc.</li> <li>Identifying gaps (things like inadequate explanation, redundant examples, etc.)</li> <li>Any creative suggestions to make this project more fun and useful</li> </ul> <p>Please see CONTRIBUTING.md for more details. Feel free to create a new issue to discuss things.</p> <p>PS: Please don't reach out with backlinking requests, no links will be added unless they're highly relevant to the project.</p>"},{"location":"USA/#acknowledgements","title":"Acknowledgements","text":"<p>The idea and design for this collection were initially inspired by Denys Dovhan's awesome project wtfjs. The overwhelming support by Pythonistas gave it the shape it is in right now.</p>"},{"location":"USA/#some-nice-links","title":"Some nice Links!","text":"<ul> <li>https://www.youtube.com/watch?v=sH4XF6pKKmk</li> <li>https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python</li> <li>https://sopython.com/wiki/Common_Gotchas_In_Python</li> <li>https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines</li> <li>https://stackoverflow.com/questions/1011431/common-pitfalls-in-python</li> <li>https://www.python.org/doc/humor/</li> <li>https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator</li> <li>https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;type=Issues</li> <li>WFTPython discussion threads on Hacker News and Reddit.</li> </ul>"},{"location":"USA/#license","title":"\ud83c\udf93 License","text":"<p>\u00a9 Satwik Kansal</p>"},{"location":"USA/#surprise-your-friends-as-well","title":"Surprise your friends as well!","text":"<p>If you like wtfpython, you can use these quick links to share it with your friends,</p> <p>Twitter | Linkedin | Facebook </p>"},{"location":"USA/#need-a-pdf-version","title":"Need a pdf version?","text":"<p>I've received a few requests for the pdf (and epub) version of wtfpython. You can add your details here to get them as soon as they are finished.</p> <p>That's all folks! For upcoming content like this, you can add your email here.</p>"},{"location":"VI/","title":"Vietnamese","text":"What the f*ck Python! \ud83d\ude31 <p> English | Ti\u1ebfng Vi\u1ec7t </p> <p>C\u00f9ng kh\u00e1m ph\u00e1 v\u00e0 t\u00ecm hi\u1ec3u Python th\u00f4ng qua c\u00e1c \u0111o\u1ea1n m\u00e3 khi\u1ebfn b\u1ea1n b\u1ea5t ng\u1edd.</p> <p>C\u00e1c b\u1ea3n d\u1ecbch ti\u1ebfng n\u01b0\u1edbc ngo\u00e0i kh\u00e1c: Ti\u1ebfng Trung \u4e2d\u6587 | Th\u00eam b\u1ea3n d\u1ecbch</p> <p>B\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o c\u00e1c \u0111o\u1ea1n m\u00e3 v\u1edbi: Ch\u1ebf \u0111\u1ed9 tr\u1ef1c quan | Giao di\u1ec7n d\u00f2ng l\u1ec7nh</p> <p>Python l\u00e0 m\u1ed9t ng\u00f4n ng\u1eef c\u1ea5p cao, v\u1edbi c\u00e1c m\u00e3 \u0111\u01b0\u1ee3c th\u00f4ng d\u1ecbch thay v\u00ec bi\u00ean d\u1ecbch nh\u01b0 c\u00e1c ng\u00f4n ng\u1eef kh\u00e1c nh\u01b0 C hay Java. Python c\u00f3 r\u1ea5t nhi\u1ec1u c\u00e1c t\u00ednh n\u0103ng gi\u00fap vi\u1ec7c l\u1eadp tr\u00ecnh d\u1ec5 d\u00e0ng, thu\u1eadn ti\u1ec7n. Tuy nhi\u00ean, c\u00e1c \u0111o\u1ea1n m\u00e3 vi\u1ebft b\u1eb1ng Python th\u1ec9nh tho\u1ea3ng cho ra k\u1ebft qu\u1ea3 kh\u00f4ng r\u00f5 r\u00e0ng, g\u00e2y kh\u00f3 hi\u1ec3u khi m\u1edbi nh\u00ecn v\u00e0o.</p> <p>wtfpython \u0111\u01b0\u1ee3c t\u1ea1o ra v\u1edbi mong mu\u1ed1n gi\u1ea3i th\u00edch ch\u00ednh x\u00e1c c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c \u0111o\u1ea1n m\u00e3 tho\u1ea1t nh\u00ecn kh\u00f3 hi\u1ec3u v\u00e0 c\u00e1c t\u00ednh n\u0103ng \u00edt \u0111\u01b0\u1ee3c bi\u1ebft t\u1edbi trong Python.</p> <p>M\u1ed9t v\u00e0i v\u00ed d\u1ee5 c\u00f3 th\u1ec3 kh\u00f4ng l\u00e0m b\u1ea1n qu\u00e1 ng\u1ea1c nhi\u00ean, tuy v\u1eady b\u1ea1n s\u1ebd kh\u00e1m ph\u00e1 \u0111\u01b0\u1ee3c nh\u1eefng \u0111i\u1ec1u hay ho v\u1ec1 Python m\u00e0 c\u00f3 th\u1ec3 b\u1ea1n ch\u01b0a t\u1eebng bi\u1ebft t\u1edbi. H\u1ecdc l\u1eadp tr\u00ecnh th\u00f4ng qua nh\u1eefng v\u00ed d\u1ee5 nh\u01b0 v\u1eady gi\u00fap b\u1ea1n hi\u1ec3u s\u00e2u h\u01a1n nh\u1eefng th\u1ee9 n\u1eb1m b\u00ean trong c\u1ee7a m\u1ed9t ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh, khi \u0111\u00f3 b\u1ea1n s\u1ebd th\u1ea5y h\u1ee9ng th\u00fa h\u01a1n trong qu\u00e1 tr\u00ecnh h\u1ecdc.</p> <p>N\u1ebfu \u0111\u1ed9c gi\u1ea3 l\u00e0 m\u1ed9t l\u1eadp tr\u00ecnh vi\u00ean c\u00f3 th\u00e2m ni\u00ean, h\u00e3y th\u1eed th\u1ee9c m\u00ecnh v\u1edbi c\u00e1c \u0111o\u1ea1n m\u00e3 s\u1eafp t\u1edbi, c\u1ed1 g\u1eafng l\u00e0m \u0111\u00fang m\u1ed7i th\u1eed th\u00e1ch ngay trong l\u1ea7n \u0111\u1ea7u ti\u00ean. \u0110\u1ed9c gi\u1ea3 c\u00f3 th\u1ec3 \u0111\u00e3 th\u1eed qu\u1ea3 m\u1ed9t v\u00e0i trong s\u1ed1 c\u00e1c b\u00e0i to\u00e1n tr\u01b0\u1edbc \u0111\u00f3, \u0111\u1ecdc v\u00e0 l\u00e0m c\u00e1c b\u00e0i to\u00e1n d\u01b0\u1edbi \u0111\u00e2y c\u00f3 th\u1ec3 gi\u00fap b\u1ea1n \u00f4n l\u1ea1i ch\u00fang.</p> <p>PS: N\u1ebfu b\u1ea1n \u0111\u00e3 \u0111\u1ecdc b\u00e0i n\u00e0y tr\u01b0\u1edbc \u0111\u00f3, b\u1ea1n c\u00f3 th\u1ec3 mu\u1ed1n xem nh\u1eefng thay \u0111\u1ed5i m\u1edbi \u1edf \u0111\u00e2y.</p> <p>N\u00e0o ta b\u1eaft \u0111\u1ea7u ...</p>"},{"location":"VI/#nhung-noi-dung-chinh","title":"Nh\u1eefng n\u1ed9i dung ch\u00ednh","text":"<ul> <li>C\u1ea5u tr\u00fac c\u1ee7a c\u00e1c v\u00ed d\u1ee5<ul> <li>\u25b6 Some fancy Title</li> </ul> </li> <li>C\u00e1ch s\u1eed d\u1ee5ng</li> <li>\ud83d\udc40 C\u00e1c v\u00ed d\u1ee5</li> <li>Section: Strain your brain!<ul> <li>\u25b6 First things first! *</li> <li>\u25b6 Strings can be tricky sometimes</li> <li>\u25b6 Be careful with chained operations</li> <li>\u25b6 How not to use <code>is</code> operator</li> <li>\u25b6 Hash brownies</li> <li>\u25b6 Deep down, we're all the same.</li> <li>\u25b6 Disorder within order *</li> <li>\u25b6 Keep trying... *</li> <li>\u25b6 For what?</li> <li>\u25b6 Evaluation time discrepancy</li> <li>\u25b6 <code>is not ...</code> is not <code>is (not ...)</code></li> <li>\u25b6 A tic-tac-toe where X wins in the first attempt!</li> <li>\u25b6 The sticky output function</li> <li>\u25b6 The chicken-egg problem *</li> <li>\u25b6 Subclass relationships</li> <li>\u25b6 All-true-ation *</li> <li>\u25b6 The surprising comma</li> <li>\u25b6 Strings and the backslashes</li> <li>\u25b6 not knot!</li> <li>\u25b6 Half triple-quoted strings</li> <li>\u25b6 What's wrong with booleans?</li> <li>\u25b6 Class attributes and instance attributes</li> <li>\u25b6 Non-reflexive class method *</li> <li>\u25b6 yielding None</li> <li>\u25b6 Yielding from... return! *</li> <li>\u25b6 Nan-reflexivity *</li> <li>\u25b6 Mutating the immutable!</li> <li>\u25b6 The disappearing variable from outer scope</li> <li>\u25b6 The mysterious key type conversion</li> <li>\u25b6 Let's see if you can guess this?</li> </ul> </li> <li>Section: Slippery Slopes<ul> <li>\u25b6 Modifying a dictionary while iterating over it</li> <li>\u25b6 Stubborn <code>del</code> operation</li> <li>\u25b6 The out of scope variable</li> <li>\u25b6 Deleting a list item while iterating</li> <li>\u25b6 Lossy zip of iterators *</li> <li>\u25b6 Loop variables leaking out!</li> <li>\u25b6 Beware of default mutable arguments!</li> <li>\u25b6 Catching the Exceptions</li> <li>\u25b6 Same operands, different story!</li> <li>\u25b6 Name resolution ignoring class scope</li> <li>\u25b6 Needles in a Haystack *</li> <li>\u25b6 Splitsies *</li> <li>\u25b6 Wild imports *</li> <li>\u25b6 All sorted? *</li> <li>\u25b6 Midnight time doesn't exist?</li> </ul> </li> <li>Section: The Hidden treasures!<ul> <li>\u25b6 Okay Python, Can you make me fly?</li> <li>\u25b6 <code>goto</code>, but why?</li> <li>\u25b6 Brace yourself!</li> <li>\u25b6 Let's meet Friendly Language Uncle For Life</li> <li>\u25b6 Even Python understands that love is complicated</li> <li>\u25b6 Yes, it exists!</li> <li>\u25b6 Ellipsis *</li> <li>\u25b6 Inpinity</li> <li>\u25b6 Let's mangle</li> </ul> </li> <li>Section: Appearances are deceptive!<ul> <li>\u25b6 Skipping lines?</li> <li>\u25b6 Teleportation</li> <li>\u25b6 Well, something is fishy...</li> </ul> </li> <li>Section: Miscellaneous<ul> <li>\u25b6 <code>+=</code> is faster</li> <li>\u25b6 Let's make a giant string!</li> <li>\u25b6 Minor Ones *</li> </ul> </li> <li>Contributing</li> <li>Acknowledgements</li> <li>\ud83c\udf93 License</li> <li>Surprise your friends as well!</li> <li>More content like this?</li> </ul>"},{"location":"VI/#cau-truc-cua-cac-vi-du","title":"C\u1ea5u tr\u00fac c\u1ee7a c\u00e1c v\u00ed d\u1ee5","text":"<p>T\u1ea5t c\u1ea3 c\u00e1c c\u00e1c v\u00ed d\u1ee5 \u0111\u01b0\u1ee3c tr\u00ecnh b\u00e0y v\u1edbi c\u1ea5u tr\u00fac nh\u01b0 sau:</p> <p>L\u01b0u \u00fd: T\u1ea5t c\u1ea3 c\u00e1c v\u00ed d\u1ee5 \u0111\u00e3 \u0111\u01b0\u1ee3c ch\u1ee9ng minh ch\u1ea1y th\u00e0nh c\u00f4ng tr\u00ean tr\u00ecnh th\u00f4ng d\u1ecbch Python 3.5.2 ch\u1ebf \u0111\u1ed9 t\u01b0\u01a1ng t\u00e1c, v\u1edbi c\u00e1c phi\u00ean b\u1ea3n Python kh\u00e1c c\u00e1c v\u00ed d\u1ee5 s\u1ebd v\u1eabn ch\u1ea1y b\u00ecnh th\u01b0\u1eddng, ngo\u1ea1i tr\u1eeb m\u1ed9t s\u1ed1 v\u00ed d\u1ee5 ch\u00fang t\u00f4i s\u1ebd l\u01b0u \u00fd tr\u01b0\u1edbc ph\u1ea7n k\u1ebft qu\u1ea3.</p>"},{"location":"VI/#mot-tieu-e-hap-dan","title":"\u25b6 M\u1ed9t ti\u00eau \u0111\u1ec1 h\u1ea5p d\u1eabn","text":"<pre><code># \u0110o\u1ea1n m\u00e3 t\u1ea1o d\u1ef1ng v\u00ed d\u1ee5.\n# \u0110o\u1ea1n m\u00e3 ch\u1ee7 th\u1ec3 c\u1ea7n kh\u00e1m ph\u00e1...\n</code></pre> <p>K\u1ebft qu\u1ea3 (C\u00e1c phi\u00ean b\u1ea3n Python):</p> <p><pre><code>&gt;&gt;&gt; c\u00e2u l\u1ec7nh k\u00edch ho\u1ea1t?\nM\u1ed9t v\u00e0i k\u1ebft qu\u1ea3 b\u1ea5t ng\u1edd, kh\u00f4ng nh\u01b0 mong \u0111\u1ee3i\n</code></pre> (C\u00f3 th\u1ec3 c\u00f3 hay kh\u00f4ng): M\u1ed9t d\u00f2ng m\u00f4 t\u1ea3 k\u1ebft qu\u1ea3</p>"},{"location":"VI/#giai-thich","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Gi\u1ea3i th\u00edch nh\u1eefng \u0111i\u1ec1u \u0111ang di\u1ec5n ra v\u00e0 t\u1ea1i sao. <pre><code># \u0110o\u1ea1n m\u00e3 t\u1ea1o d\u1ef1ng v\u00ed d\u1ee5\n# Trong tr\u01b0\u1eddng h\u1ee3p c\u1ea7n thi\u1ebft, ch\u00fang t\u00f4i li\u1ec7t k\u00ea th\u00eam nhi\u1ec1u v\u00ed d\u1ee5 kh\u00e1c \u0111\u1ec3 gi\u00fap b\u1ea1n hi\u1ec3u r\u00f5 h\u01a1n\n</code></pre> K\u1ebft qu\u1ea3 (C\u00e1c phi\u00ean b\u1ea3n Python):</li> </ul> <pre><code>&gt;&gt;&gt; trigger # some example that makes it easy to unveil the magic\n&gt;&gt;&gt; trigger # M\u1ed9t v\u00e0i v\u00ed d\u1ee5 gi\u00fap b\u1ea1n hi\u1ec3u c\u00e1c \u0111o\u1ea1n m\u00e3\n# some justified output\n</code></pre>"},{"location":"VI/#cach-dung-cac-vi-du","title":"C\u00e1ch d\u00f9ng c\u00e1c v\u00ed d\u1ee5","text":"<p>Theo t\u00f4i, \u0111\u1ec3 h\u1ecdc c\u00e1c v\u00ed d\u1ee5 trong b\u00e0i, b\u1ea1n n\u00ean \u0111\u1ecdc theo tr\u00ecnh t\u1ef1 th\u1eddi gian, v\u00e0 \u0111\u1ed1i v\u1edbi m\u1ed7i v\u00ed d\u1ee5 h\u00e3y: - \u0110\u1ecdc k\u0129 \u0111o\u1ea1n m\u00e3 t\u1ea1o d\u1ef1ng n\u00ean v\u00ed d\u1ee5. N\u1ebfu b\u1ea1n \u0111\u00e3 l\u1eadp tr\u00ecnh l\u00e2u r\u1ed3i, b\u1ea1n s\u1ebd \u0111o\u00e1n \u0111\u01b0\u1ee3c nh\u1eefng \u0111i\u1ec1u s\u1eafp t\u1edbi ngay. - \u0110\u1ecdc k\u1ebft qu\u1ea3 c\u1ee7a c\u00e1c v\u00ed d\u1ee5 v\u00e0 th\u1ef1c hi\u1ec7n hai vi\u1ec7c sau:   + Ki\u1ec3m tra xem k\u1ebft qu\u1ea3 c\u00f3 gi\u1ed1ng nh\u01b0 b\u1ea1n ngh\u0129 hay kh\u00f4ng.   + M\u1ed9t khi \u0111\u1ecdc xong, h\u00e3y h\u1ecfi ch\u00ednh b\u1ea1n xem m\u00ecnh \u0111\u00e3 hi\u1ec3u th\u00f4ng su\u1ed1t l\u00fd do m\u00e0 c\u00f3 k\u1ebft qu\u1ea3 nh\u01b0 v\u1eady ch\u01b0a.     - N\u1ebfu c\u00e2u tr\u1ea3 l\u1eddi l\u00e0 \"ch\u01b0a, t\u00f4i ch\u01b0a hi\u1ec3u\" (kh\u00f4ng sao c\u1ea3), h\u00edt m\u1ed9t h\u01a1i th\u1eadt sau, v\u00e0 \u0111\u1ecdc ph\u1ea7n gi\u1ea3i th\u00edch (n\u1ebfu b\u1ea1n v\u1eabn ch\u01b0a hi\u1ec3u, h\u00e3y t\u1ea1o m\u1ed9t issue \u1edf d\u00e2y).     - N\u1ebfu c\u00e2u tr\u1ea3 l\u1eddi l\u00e0 \"c\u00f3, t\u00f4i \u0111\u00e3 hi\u1ec3u\", b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecdc v\u00ed d\u1ee5 ti\u1ebfp theo. PS: B\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecdc WTFPython d\u00f9ng ch\u1ebf \u0111\u1ed9 d\u00f2ng l\u1ec7nh s\u1eed d\u1ee5ng pypi package, <pre><code>$ pip install wtfpython -U\n$ wtfpython\n</code></pre></p>"},{"location":"VI/#cac-vi-du","title":"\ud83d\udc40 C\u00e1c v\u00ed d\u1ee5","text":""},{"location":"VI/#chuong-1-hack-nao","title":"Ch\u01b0\u01a1ng 1: Hack n\u00e3o!","text":""},{"location":"VI/#mon-khai-vi","title":"\u25b6 M\u00f3n khai v\u1ecb! *","text":"<p>K\u00ed hi\u1ec7u \"con h\u00e0 m\u00e3\" (\"Walrus\" operator), \u0111\u01b0\u1ee3c gi\u1edbi thi\u1ec7u trong phi\u00ean b\u1ea3n Python 3.8 \u0111\u00e3 tr\u1edf n\u00ean kh\u00e1 ph\u1ed5 bi\u1ebfn v\u00ec m\u1ed9t v\u00e0i l\u00fd do. H\u00e3y th\u1eed qua n\u00f3 xem 1.</p> <pre><code># Phi\u00ean b\u1ea3n Python 3.8+\n\n&gt;&gt;&gt; a = \"wtf_walrus\"\n&gt;&gt;&gt; a\n'wtf_walrus'\n\n&gt;&gt;&gt; a := \"wtf_walrus\"\nFile \"&lt;stdin&gt;\", line 1\n    a := \"wtf_walrus\"\n      ^\nSyntaxError: invalid syntax (L\u1ed7i v\u1ec1 c\u00fa ph\u00e1p: C\u00fa ph\u00e1p kh\u00f4ng h\u1ee3p l\u1ec7)\n\n&gt;&gt;&gt; (a := \"wtf_walrus\") # This works though\n&gt;&gt;&gt; a\n'wtf_walrus'\n</code></pre> <p>2 .</p> <pre><code># Phi\u00ean b\u1ea3n Python 3.8+\n\n&gt;&gt;&gt; a = 6, 9\n&gt;&gt;&gt; a\n(6, 9)\n\n&gt;&gt;&gt; (a := 6, 9)\n&gt;&gt;&gt; a\n6\n\n&gt;&gt;&gt; a, b = 6, 9 # Ph\u00e2n r\u00e3 (unpacking) c\u00e1c gi\u00e1 tr\u1ecb, hay c\u00f2n g\u1ecdi l\u00e0 c\u00e2u l\u1ec7nh g\u00e1n \u0111a gi\u00e1 tr\u1ecb (multiple assignments)\n&gt;&gt;&gt; a, b\n(6, 9)\n&gt;&gt;&gt; (a, b = 16, 19) # C\u00f3 \n  File \"&lt;stdin&gt;\", line 1\n    (a, b = 6, 9)\n          ^\nSyntaxError: invalid syntax (L\u1ed7i c\u00fa ph\u00e1p: c\u00fa ph\u00e1p kh\u00f4ng h\u1ee3p l\u1ec7)\n\n&gt;&gt;&gt; (a, b := 16, 19) # C\u00e2u l\u1ec7nh n\u00e0y in ra m\u1ed9t tuple c\u00f3 3 ph\u1ea7n t\u1eed kh\u00f4ng nh\u01b0 mong \u0111\u1ee3i (\u0111\u00e1ng l\u1ebd l\u00e0 2 ph\u1ea7n t\u1eed 16 v\u00e0 19)\n(6, 16, 19)\n\n&gt;&gt;&gt; a # a \u0111\u01b0\u1ee3c \u0111\u01b0\u1ee3c g\u00e1n l\u1ea1i gi\u00e1 tr\u1ecb tr\u01b0\u1edbc \u0111\u00f3, nh\u01b0ng gi\u00e1 tr\u1ecb ph\u00eda d\u01b0\u1edbi v\u1eabn gi\u1eef nguy\u00ean, l\u00e0 sao?\n6\n\n&gt;&gt;&gt; b \n16\n</code></pre>"},{"location":"VI/#giai-thich_1","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch","text":"<p>\u00d4n l\u1ea1i m\u1ed9t ch\u00fat v\u1ec1 k\u00ed hi\u1ec7u \"con h\u00e0 m\u00e3\"</p> <p>K\u00ed hi\u1ec7u con h\u00e0 m\u00e3 (<code>:=</code>) l\u1ea7n \u0111\u1ea7u ti\u00ean \u0111\u01b0\u1ee3c gi\u1edbi thi\u1ec7u trong phi\u00ean b\u1ea3n Python 3.8, n\u00f3 h\u1eefu d\u1ee5ng khi b\u1ea1n mu\u1ed1n g\u00e1n gi\u00e1 tr\u1ecb cho c\u00e1c bi\u1ebfn b\u00ean trong m\u1ed9t bi\u1ec3u di\u1ec5n (expression).</p> <pre><code>def some_func():\n        # Gi\u1ea3 \u0111\u1ecbnh r\u1eb1ng ta th\u1ef1c hi\u1ec7n m\u1ed9t v\u00e0i ph\u00e9p t\u00ednh t\u1ed1n nhi\u1ec1u t\u00e0i nguy\u00ean (th\u1eddi gian, I/O) \u1edf \u0111\u00e2y\n        # time.sleep(1000)\n        return 5\n\n# Thay v\u00ec th\u1ef1c hi\u1ec7n vi\u1ec7c ki\u1ec3m tra k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 c\u1ee7a h\u00e0m tr\u00ean,\nif some_func():\n        print(some_func()) # V\u00e0 g\u1ecdi l\u1ea1i h\u00e0m \u0111\u00f3 trong th\u00e2n \u0111i\u1ec1u ki\u1ec7n, ngh\u0129a l\u00e0 th\u1ef1c hi\u1ec7n c\u00e1c t\u00ednh to\u00e1n trong h\u00e0m 2 l\u1ea7n.\n# Hay t\u1ed1t h\u01a1n, ta c\u00f3 th\u1ec3 ti\u1ebft ki\u1ec7m m\u1ed9t l\u1eddi g\u1ecdi h\u00e0m th\u00f4ng qua vi\u1ec7c l\u1ea5y v\u1ec1 gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 \u1edf m\u1ed9t l\u1ea7n g\u1ecdi v\u00e0 th\u1ef1c hi\u1ec7n so s\u00e1nh tr\u00ean gi\u00e1 tr\u1ecb \u0111\u00f3:\na = some_func()\nif a:\n    print(a)\n\n# D\u00f9ng k\u0129 hi\u1ec7u con h\u00e0 m\u00e3 b\u1ea1n c\u00f3 th\u1ec3 vi\u1ebft ng\u1eafn g\u1ecdn h\u01a1n nh\u01b0 d\u01b0\u1edbi \u0111\u00e2y, ph\u00e9p g\u00e1n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nh\u01b0 m\u1ec7nh \u0111\u1ec1 \u0111i\u1ec1u ki\u1ec7n v\u00e0 ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng bi\u1ebfn \u0111\u01b0\u1ee3c g\u00e1n gi\u00e1 tr\u1ecb trong th\u00e2n c\u00e2u \u0111i\u1ec1u ki\u1ec7n if:\nif a := some_func():\n        print(a)\n</code></pre> <p>K\u1ebft qu\u1ea3 (&gt; 3.8):</p> <pre><code>5\n5\n5\n</code></pre> <p>S\u1eed d\u1ee5ng k\u00ed hi\u1ec7u con h\u00e0 m\u00e3 gi\u00fap ta r\u00fat ng\u1eafn \u0111\u01b0\u1ee3c \u0111o\u1ea1n m\u00e3 \u0111i m\u1ed9t d\u00f2ng v\u00e0 tr\u00e1nh \u0111\u01b0\u1ee3c vi\u1ec7c g\u1ecdi <code>some_func</code> hai l\u1ea7n.</p> <ul> <li> <p>Ta ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ph\u00e9p g\u00e1n c\u00f3 k\u00ed hi\u1ec7u h\u00e0 m\u00e3 \u1edf c\u1ea5p \u0111\u1ed9 cao nh\u1ea5t do \u0111\u00f3 l\u1ed7i c\u00fa ph\u00e1p (<code>SyntaxError</code>) trong c\u00e2u l\u1ec7nh <code>a := \"wtf_walrus\"</code> x\u1ea3y ra. Khi ta cho ph\u00e9p g\u00e1n n\u00e0y v\u00e0o hai d\u1ea5u ngo\u1eb7c \u0111\u01a1n <code>()</code> th\u00ec s\u1ebd kh\u00f4ng b\u1ecb l\u1ed7i n\u1eefa.  </p> </li> <li> <p>Th\u00f4ng th\u01b0\u1eddng, c\u00e2u l\u1ec7nh c\u00f3 d\u1ea5u b\u1eb1ng <code>=</code> s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p \u0111\u1eb7t trong d\u1ea5u ngo\u1eb7c \u0111\u01a1n. Do v\u1eady c\u00e2u l\u1ec7nh <code>(a, b = 6, 9)</code> b\u1ecb l\u1ed7i c\u00fa ph\u00e1p. </p> </li> <li> <p>C\u00fa ph\u00e1p c\u1ee7a k\u00ed hi\u1ec7u g\u00e1n con h\u00e0 m\u00e3 nh\u01b0 sau: <code>NAME:= expr</code>, \u1edf \u0111\u00f3 <code>NAME</code> l\u00e0 m\u1ed9t t\u00ean bi\u1ebfn h\u1ee3p l\u1ec7, v\u00e0 <code>expr</code> l\u00e0 m\u1ed9t bi\u1ec3u di\u1ec5n h\u1ee3p l\u1ec7. Do v\u1eady, vi\u1ec7c s\u1eed d\u1ee5ng c\u00e1c ph\u00e9p g\u1ed9p (packing) hay ph\u00e2n r\u00e3 trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3, ngh\u00e3i l\u00e0 </p> </li> <li> <p><code>(a := 6, 9)</code> t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi <code>((a := 6), 9)</code> v\u00e0 bu\u1ed5i di\u1ec5n cu\u1ed1i c\u00f9ng l\u00e0  <code>(a, 9)</code> (\u1edf \u0111\u00f3 gi\u00e1 tr\u1ecb c\u1ee7a  <code>a</code> l\u00e0 6). B\u1ea1n c\u00f3 th\u1ec3 ki\u1ec3m tra l\u1ea1i v\u1edbi c\u00e1c d\u00f2ng l\u1ec7nh d\u01b0\u1edbi \u0111\u00e2y</p> <pre><code>&gt;&gt;&gt; (a := 6, 9) == ((a := 6), 9)\nTrue # Bi\u1ec3u di\u1ec5n b\u00ean tr\u00e1i b\u1eb1ng b\u00ean ph\u1ea3i do ph\u00e9p ph\u00e2n r\u00e3 kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p (nh\u01b0 \u0111\u00e3 gi\u1ea3i th\u00edch ph\u00eda tr\u00ean)\n&gt;&gt;&gt; x = (a := 696, 9)\n&gt;&gt;&gt; x\n(696, 9)\n&gt;&gt;&gt; x[0] is a # C\u1ea3 x[0] v\u00e0 a c\u00f9ng tr\u1ecf v\u1ec1 chung m\u1ed9t \u0111\u1ecba ch\u1ec9 trong b\u1ed9 nh\u1edb \nTrue\n</code></pre> </li> <li> <p>T\u01b0\u01a1ng t\u1ef1, <code>(a, b := 16, 19)</code> t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi <code>(a, (b := 16), 19)</code> khi ta c\u00f3 3 gi\u00e1 tr\u1ecb trong m\u1ed9t tuple. </p> </li> </ul>"},{"location":"VI/#strings-thinh-thoang-co-the-kha-oai-oam","title":"\u25b6 Strings th\u1ec9nh tho\u1ea3ng c\u00f3 th\u1ec3 kh\u00e1 o\u00e1i o\u0103m","text":"<p>1.</p> <pre><code>&gt;&gt;&gt; a = \"some_string\"\n&gt;&gt;&gt; id(a)\n140420665652016\n&gt;&gt;&gt; id(\"some\" + \"_\" + \"string\") # \u0110\u1ec3 \u00fd r\u1eb1ng c\u1ea3 hai gi\u00e1 tr\u1ecb id \u0111\u1ec1u gi\u1ed1ng nhau (140420665652016).\n140420665652016\n</code></pre> <p>2. <pre><code>&gt;&gt;&gt; a = \"wtf\"\n&gt;&gt;&gt; b = \"wtf\"\n&gt;&gt;&gt; a is b\nTrue # a v\u00e0 b c\u00f9ng tr\u1ecf t\u1edbi m\u1ed9t \u0111\u1ecba ch\u1ec9 trong b\u1ed9 nh\u1edb\n\n&gt;&gt;&gt; a = \"wtf!\"\n&gt;&gt;&gt; b = \"wtf!\"\n&gt;&gt;&gt; a is b\nFalse # a v\u00e0 b kh\u00f4ng c\u00f9ng tr\u1ecf t\u1edbi m\u1ed9t \u0111\u1ecba ch\u1ec9 trong b\u1ed9 nh\u1edb\n</code></pre></p> <p>3.</p> <pre><code>&gt;&gt;&gt; a, b = \"wtf!\", \"wtf!\"\n&gt;&gt;&gt; a is b # \u00c1p d\u1ee5ng cho t\u1ea5t c\u1ea3 c\u00e1c phi\u00ean b\u1ea3n Python, ngo\u1ea1i tr\u1eeb c\u00e1c phi\u00ean b\u1ea3n 3.7.x\nTrue # a v\u00e0 b c\u00f9ng tr\u1ecf t\u1edbi m\u1ed9t \u0111\u1ecba ch\u1ec9 trong b\u1ed9 nh\u1edb\n\n&gt;&gt;&gt; a = \"wtf!\"; b = \"wtf!\"\n&gt;&gt;&gt; a is b # K\u1ebft qu\u1ea3 l\u00e0 True ho\u1eb7c False tu\u1ef3 thu\u1ed9c v\u00e0o m\u00f4i tr\u01b0\u1eddng b\u00ean ch\u1ea1y \u0111o\u1ea1n m\u00e3 (python shell / ipython / as a script)\nFalse\n</code></pre> <pre><code># T\u1ea1o m\u1ed9t file t\u00ean some_file.py, ch\u1ee9a ba d\u00f2ng code d\u01b0\u1edbi \u0111\u00e2y:\na = \"wtf!\"\nb = \"wtf!\"\nprint(a is b)\n\n# Khi file n\u00e0y \u0111\u01b0\u1ee3c ch\u1ea1y k\u1ebft qu\u1ea3 in ra l\u00e0 True\n</code></pre> <p>4.</p> <p>K\u1ebft qu\u1ea3 (&lt; Python3.7 )</p> <pre><code>&gt;&gt;&gt; 'a' * 20 is 'aaaaaaaaaaaaaaaaaaaa'\nTrue\n&gt;&gt;&gt; 'a' * 21 is 'aaaaaaaaaaaaaaaaaaaaa'\nFalse\n</code></pre> <p>C\u00f3 g\u00ec \u0111\u00f3 sai sai?</p>"},{"location":"VI/#giai-thich_2","title":"\ud83d\udca1Gi\u1ea3i th\u00edch:","text":"<ul> <li>Nh\u1eefng \u0111i\u1ec1u x\u1ea3y ra trong c\u00e1c \u0111o\u1ea1n m\u00e3 \u0111\u1ea7u ti\u00ean v\u00e0 th\u1ee9 hai \u0111\u1ebfn t\u1eeb m\u1ed9t t\u1ed1i \u01b0u c\u1ee7a CPython (\u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 string interning), t\u1ed1i \u01b0u n\u00e0y c\u1ed1 g\u1eafng s\u1eed d\u1ee5ng c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb hi\u1ec7n t\u1ed3n t\u1ea1i trong m\u1ed9t v\u00e0i tr\u01b0\u1eddng h\u1ee3p thay v\u00ec vi\u1ec7c t\u1ea1o ra m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng m\u1edbi m\u1ed7i l\u1ea7n.</li> <li>Sau khi \u0111\u01b0\u1ee3c \"interned,\" nhi\u1ec1u bi\u1ebfn c\u00f3 th\u1ec3 tham chi\u1ebfu t\u1edbi c\u00f9ng m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng string trong b\u1ed9 nh\u1edb (do v\u1eady m\u00e0 ti\u1ebft ki\u1ec7m b\u1ed9 nh\u1edb).</li> <li>Trong c\u00e1c \u0111o\u1ea1n m\u00e3 ph\u00eda tr\u00ean, c\u00e1c strings \u0111\u01b0\u1ee3c interned m\u1ed9t c\u00e1ch ng\u1ea7m. Quy\u1ebft \u0111\u1ecbnh ki n\u00e0o th\u00ec intern m\u1ed9t c\u00e1ch ng\u1ea7m l\u00e0 ph\u1ee5 thu\u1ed9c v\u00e0o m\u1ed7i tri\u1ec3n khai Python. C\u00f3 m\u1ed9t v\u00e0i lu\u1eadt c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111o\u00e1n bi\u1ebft m\u1ed9t string s\u1ebd \u0111\u01b0\u1ee3c intern hay kh\u00f4ng:</li> <li>T\u1ea5t c\u1ea3 strings c\u00f3 \u0111\u1ed9 d\u00e0i b\u1eb1ng 0 v\u00e0 1 \u0111\u01b0\u1ee3c intern.</li> <li>C\u00e1c strings \u0111\u01b0\u1ee3c intern t\u1ea1i th\u1eddi \u0111i\u1ec3m bi\u00ean d\u1ecbch (<code>'wtf'</code> s\u1ebd \u0111\u01b0\u1ee3c intern nh\u01b0ng <code>''.join(['w', 't', 'f'])</code> s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c intern).</li> <li>C\u00e1c strings kh\u00f4ng \u0111\u01b0\u1ee3c t\u1ea1o th\u00e0nh t\u1eeb c\u00e1c m\u1eabu t\u1ef1 ASCII, s\u1ed1, ho\u1eb7c d\u1ea5u g\u1ea1ch ch\u00e2n, s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c intern. \u0110i\u1ec1u \u0111\u00f3 gi\u1ea3i th\u00edch t\u1ea1i sao <code>'wtf!'</code> kh\u00f4ng \u0111\u01b0\u1ee3c intern b\u1edfi v\u00ec k\u00ed t\u1ef1 <code>!</code>. Tri\u1ec3n khai Cpython cho lu\u1eadt n\u00e0y c\u00f3 th\u1ec3 t\u00ecm th\u1ea5y \u1edf \u0111\u00e2y </li> <li>Khi <code>a</code> and <code>b</code> \u0111\u01b0\u1ee3c cho nh\u1eadn gi\u00e1 tr\u1ecb <code>\"wtf!\"</code> tr\u00ean c\u00f9ng m\u1ed9t d\u00f2ng, tr\u00ecnh th\u00f4ng d\u1ecbch Python s\u1ebd t\u1ea1o m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng m\u1edbi, sau \u0111\u00f3 tham chi\u1ebfu t\u1edbi bi\u1ebfn th\u1ee9 hai t\u1ea1i c\u00f9ng m\u1ed9t th\u1eddi \u0111i\u1ec3m. N\u1ebfu b\u1ea1n l\u00e0m c\u00e1c ph\u00e9p g\u00e1n tr\u00ean c\u00e1c d\u00f2ng ri\u00eang bi\u1ec7t, tr\u00ecnh th\u00f4ng d\u1ecbch s\u1ebd kh\u00f4ng bi\u1ebft r\u1eb1ng \u0111\u00e3 c\u00f3 <code>\"wtf!\"</code> t\u1ed3n t\u1ea1i nh\u01b0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng (b\u1edfi v\u00ec  <code>\"wtf!\"</code> kh\u00f4ng \u0111\u01b0\u1ee3c intern ng\u1ea7m nh\u01b0 \u0111i\u1ec1u \u0111\u01b0\u1ee3c tr\u00ecnh b\u00e0y tr\u00ean). \u0110\u00e2y l\u00e0 m\u1ed9t t\u1ed1i \u01b0u t\u1ea1i th\u1eddi \u0111i\u1ec3m bi\u00ean d\u1ecbch. T\u1ed1i \u01b0u n\u00e0y kh\u00f4ng \u00e1p d\u1ee5ng cho c\u00e1c phi\u00ean b\u1ea3n CPython 3.7.x (xem th\u00eam v\u1ec1 v\u1ea5n \u0111\u1ec1 n\u00e0y [\u1edf \u0111\u00e2y] (https://github.com/satwikkansal/wtfpython/issues/100)).</li> <li>M\u1ed9t \u0111\u01a1n v\u1ecb bi\u00ean d\u1ecbch trong m\u00f4i tr\u01b0\u1eddng t\u01b0\u01a1ng t\u00e1c nh\u01b0 IPython bao g\u1ed3m ch\u1ec9 m\u1ed9t c\u00e2u l\u1ec7nh \u0111\u01a1n, tr\u00e1i l\u1ea1i <code>a = \"wtf!\"; b = \"wtf!\"</code>l\u00e0 hai c\u00e2u l\u1ec7nh. \u0110i\u1ec1u n\u00e0y gi\u1ea3i th\u00edch t\u1ea1i sao c\u00e1c danh \u0111\u1ecbnh (identities) l\u1ea1i kh\u00e1c nhau trong <code>a = \"wtf!\"; b = \"wtf!\"</code>, v\u00e0 c\u0169ng gi\u1ea3i th\u00edch t\u1ea1i sao ch\u00fang l\u1ea1i gi\u1ed1ng nhau trong <code>some_file.py</code>.</li> <li>S\u1ef1 thay \u0111\u1ed5i \u0111\u1ed9t ng\u1ed9t trong \u0111o\u1ea1n m\u00e3 th\u1ee9 t\u01b0 l\u00e0 do m\u1ed9t k\u0129 thu\u1eadt T\u1ed1i \u01b0u peephole hay c\u00f2n \u0111\u01b0\u1ee3c bi\u1ebft \u0111\u1ebfn nh\u01b0 s\u1ef1 g\u1ea5p h\u1eb1ng s\u1ed1. \u0110i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0  bi\u1ec3u di\u1ec5n <code>'a'*20</code> \u0111\u01b0\u1ee3c thay th\u1ebf b\u1edf <code>'aaaaaaaaaaaaaaaaaaaa'</code> trong qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch ti\u1ebft ki\u1ec7m m\u1ed9t v\u00e0i chu k\u00ec \u0111\u1ed3ng h\u1ed3 trong su\u1ed1t th\u1eddi gian ch\u1ea1y . S\u1ef1 g\u1ea5p h\u1eb1ng s\u1ed1 ch\u1ec9 x\u1ea3y ra \u0111\u1ed1i v\u1edbi c\u00e1c strings c\u00f3 \u0111\u1ed9 d\u00e0i nh\u1ecf h\u01a1n 20 (T\u1ea1i sao? t\u01b0\u1edfng t\u01b0\u1ee3ng k\u00edch th\u01b0\u1edbc c\u1ee7a file <code>.pyc</code> sinh ra b\u1edfi bi\u1ec3u di\u1ec5n <code>'a'*10**10</code>). Link n\u00e0y d\u1eabn t\u1edbi tri\u1ec3n khai c\u1ee7a t\u1ed1i \u01b0u \u0111\u01b0\u1ee3c \u0111\u1ec1 c\u1eadp.</li> <li>Ch\u00fa \u00fd r\u1eb1ng: trong Python 3.7, g\u1ea5p h\u1eb1ng s\u1ed1 \u0111\u01b0\u1ee3c chuy\u1ec3n t\u1eeb b\u1ed9 t\u1ed1i \u01b0u peephole sang b\u1ed9 t\u1ed1i \u01b0u m\u1edbi AST v\u1edbi m\u1ed9t v\u00e0i thay \u0111\u1ed5i lu\u1eadn l\u00fd, n\u00ean \u0111o\u1ea1n m\u00e3 th\u1ee9 t\u01b0 kh\u00f4ng ch\u1ea1y \u0111\u01b0\u1ee3c trong Python 3.7. B\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecdc th\u00eam v\u1ec1 s\u1ef1 thay \u0111\u1ed5i n\u00e0y \u1edf . </li> </ul>"},{"location":"VI/#be-careful-with-chained-operations","title":"\u25b6 Be careful with chained operations","text":"<pre><code>&gt;&gt;&gt; (False == False) in [False] # makes sense\nFalse\n&gt;&gt;&gt; False == (False in [False]) # makes sense\nFalse\n&gt;&gt;&gt; False == False in [False] # now what?\nTrue\n\n&gt;&gt;&gt; True is False == False\nFalse\n&gt;&gt;&gt; False is False is False\nTrue\n\n&gt;&gt;&gt; 1 &gt; 0 &lt; 1\nTrue\n&gt;&gt;&gt; (1 &gt; 0) &lt; 1\nFalse\n&gt;&gt;&gt; 1 &gt; (0 &lt; 1)\nFalse\n</code></pre>"},{"location":"VI/#giai-thich_3","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<p>As per https://docs.python.org/2/reference/expressions.html#not-in</p> <p>N\u1ebfu a, b, c, ..., y, z l\u00e0 c\u00e1c bi\u1ec3u di\u1ec5n (expressions) v\u00e0 op1, op2, ..., opN l\u00e0 c\u00e1c ph\u00e9p so s\u00e1nh, khi \u0111\u00f3 op1 b op2 c ... y opN z t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi op1 b and b op2 c and ... y opN, ngo\u1ea1i tr\u00ec vi\u1ec7c m\u1ed7i bi\u1ec3u di\u1ec5n \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n hay \u0111\u00e1nh gi\u00e1 nhi\u1ec1u nh\u00e2t m\u1ed9t l\u1ea7n</p> <p>Trong khi nh\u1eefng \u0111i\u1ec1u ta th\u1ea5y ph\u00eda tr\u00ean c\u00f3 th\u1ec3 h\u01a1i ng\u1edb ng\u1ea9n \u0111\u1ed1i v\u1edbi b\u1ea1n, ta c\u00f3 th\u1ec3 l\u00e0m nh\u1eefng th\u1ee9 th\u00fa v\u1ecb h\u01a1n nh\u01b0 <code>a == b == c</code> v\u00e0 <code>0 &lt;= x &lt;= 100</code>.</p> <ul> <li><code>False is False is False</code> t\u01b0\u01a1ng \u0111\u01b0\u01a1ng <code>(False is False) and (False is False)</code></li> <li><code>True is False == False</code> t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi <code>True is False and False == False</code> v\u00e0 do ph\u1ea7n so s\u00e1nh \u0111\u1ea7u ti\u00ean (<code>True is False</code>) cho ra k\u1ebft qu\u1ea3 <code>False</code>, do \u0111\u00f3 k\u1ebft qu\u1ea3 cu\u1ed1i c\u00f9ng l\u00e0 <code>False</code>.</li> <li><code>1 &gt; 0 &lt; 1</code> t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi <code>1 &gt; 0 and 0 &lt; 1</code> v\u00e0 cho ra k\u1ebft qu\u1ea3 l\u00e0 <code>True</code>.</li> <li>Bi\u1ec3u di\u1ec5n <code>(1 &gt; 0) &lt; 1</code> t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi <code>True &lt; 1</code> v\u00e0   <pre><code>&gt;&gt;&gt; int(True)\n1\n&gt;&gt;&gt; True + 1 #l\u00e0m cho vui th\u00f4i, ch\u1ee9 kh\u00f4ng li\u00ean quan\n2\n</code></pre>   do \u0111\u00f3, <code>1 &lt; 1</code> cho ra k\u1ebft qu\u1ea3<code>False</code></li> </ul>"},{"location":"VI/#how-not-to-use-is-operator","title":"\u25b6 How not to use <code>is</code> operator","text":"<p>V\u00ed d\u1ee5 d\u01b0\u01a1i \u0111\u00e2y r\u1ea5t n\u1ed5i ti\u1ebfng tr\u00ean Internet 1.</p> <pre><code>&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; a is b\nTrue\n\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; a is b\nFalse\n</code></pre> <p>2.</p> <pre><code>&gt;&gt;&gt; a = []\n&gt;&gt;&gt; b = []\n&gt;&gt;&gt; a is b\nFalse\n\n&gt;&gt;&gt; a = tuple()\n&gt;&gt;&gt; b = tuple()\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <p>3. K\u1ebft qu\u1ea3</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; a is b\nTrue\n</code></pre> <p>K\u1ebft q\u1ee7a (Ch\u1ec9 \u00e1p d\u1ee5ng cho Python 3.7.x )</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt; a is b\nFalse\n</code></pre>"},{"location":"VI/#giai-thich_4","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<p>S\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa <code>is</code> v\u00e0 <code>==</code></p> <ul> <li><code>is</code> ki\u1ec3m tra xem c\u1ea3 hai ph\u1ea7n t\u1eed so s\u00e1nh c\u00f3 tr\u1ecf v\u1ec1 c\u00f9ng m\u1ed9t \u0111\u00f4i t\u01b0\u1ee3ng (v\u00ed d\u1ee5, <code>is</code> ki\u1ec3m tra \u0111\u1ecbnh danh c\u1ee7a c\u1ea3 hai th\u00e0nh ph\u1ea7n \u0111\u01b0\u1ee3c so s\u00e1nh c\u00f3 kh\u1edbp v\u1edbi nhau hay kh\u00f4ng)</li> <li><code>==</code> so s\u00e1nh gi\u00e1 tr\u1ecb c\u1ee7a hai ph\u1ea7n t\u1eed xem ch\u00fang c\u00f3 b\u1eb1ng nhau hay kh\u00f4ng</li> <li>V\u00ec th\u1ebf <code>is</code> \u0111\u01b0\u1ee3c d\u00f9ng cho vi\u1ec7c so s\u00e1nh tham chi\u1ebfu v\u00e0 <code>==</code> \u0111\u01b0\u1ee3c d\u00f9ng cho so s\u00e1nh tham tr\u1ecb. H\u00e3y xem v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y \u0111\u1ec3 hi\u1ec3u r\u00f5 h\u01a1n   <pre><code>&gt;&gt;&gt; class A: pass\n&gt;&gt;&gt; A() is A() # Hai \u0111\u1ed1i t\u01b0\u1ee3ng r\u1ed7ng nh\u01b0ng n\u1eb1m \u1edf hai v\u1ecb tr\u00ed kh\u00e1c nhau trong b\u1ed9 nh\u1edb.\nFalse\n</code></pre> ** <code>256</code> l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng hi\u1ec7n h\u1eefu nh\u01b0ng <code>257</code> l\u1ea1i kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng hi\u1ec7n h\u1eefu.</li> </ul> <p>Khi b\u1ea1n kh\u1edfi ch\u1ea1y python c\u00e1c s\u1ed1 t\u1eeb <code>-5</code> t\u1edbi <code>256</code> s\u1ebd \u0111\u01b0\u1ee3c c\u1ea5p ph\u00e1t. Nh\u1eefng s\u00f4 nay \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng r\u1ea5t nhi\u1ec1u, do \u0111\u00f3 vi\u1ec7c c\u1ea5p ph\u00e1t n\u00e0y l\u00e0 h\u1ee3p l\u00fd. Tham kh\u1ea3o t\u1eeb https://docs.python.org/3/c-api/long.html</p> <p>C\u00e1ch tri\u1ec3n khai hi\u1ec7n h\u00e0nh c\u1ee7a Python duy tr\u00ec m\u1ed9t m\u1ea3ng c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng s\u00f4 nguy\u00ean t\u1eeb -5 t\u1edbi 256, khi b\u1ea1n t\u1ea1o m\u1ed9t s\u1ed1 nguy\u00ean trong d\u1ea3i n\u00e0y b\u1ea1n s\u1ebd quay tr\u1edf v\u1ec1 l\u1ea1i m\u1ed9t tham chi\u1ebfu t\u1edbi m\u1ed9t \u0111\u00f4i t\u01b0\u1ee3ng t\u1ed3n t\u1ea1i. Do v\u1eady ta v\u1eabn c\u00f3 th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a 1. </p> <pre><code>&gt;&gt;&gt; id(256)\n10922528\n&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; id(a)\n10922528\n&gt;&gt;&gt; id(b)\n10922528\n&gt;&gt;&gt; id(257)\n140084850247312\n&gt;&gt;&gt; x = 257\n&gt;&gt;&gt; y = 257\n&gt;&gt;&gt; id(x)\n140084850247440\n&gt;&gt;&gt; id(y)\n140084850247344\n</code></pre> <p>\u1ede \u0111\u00e2y tr\u00ecnh th\u00f4ng d\u1ecbch kh\u00f4ng \u0111\u1ee7 th\u00f4ng minh khi th\u1ef1c thi <code>y = 257</code> v\u00e0 nh\u1eadn ra r\u1eb1ng ch\u00fang ta \u0111\u00e3 t\u1ea1o m\u1ed9t s\u1ed1 nguy\u00ean c\u00f3 gi\u00e1 tr\u1ecb l\u00e0 <code>257,</code> r\u1ed3i, do \u0111\u00f3 n\u00f3 ti\u1ebfp t\u1ee5c t\u1ea1o m\u1ed9t \u0111\u00f4i t\u01b0\u1ee3ng kh\u00e1c trong b\u1ed9 nh\u1edb. </p> <p>M\u1ed9t t\u1ed1i \u01b0u t\u01b0\u01a1ng t\u1ef1 \u00e1p d\u1ee5ng cho c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ea5t bi\u1ebfn (immutable) kh\u00e1c nh\u01b0 l\u00e0 c\u00e1c tuples. B\u1edfi v\u00ec lists c\u00f3 th\u1ec3 bi\u1ebfn \u0111\u1ed5i \u0111\u01b0\u1ee3c, do \u0111\u00f3 ta hi\u1ec3u t\u1ea1i sao <code>[] is []</code> s\u1ebd tr\u1ea3 v\u1ec1 <code>False</code> v\u00e0 <code>() is ()</code> s\u1ebd tr\u1ea3 v\u1ec1 <code>True</code>. \u0110i\u1ec1u n\u00e0y gi\u1ea3i th\u00edch \u0111o\u1ea1n m\u00e3 th\u1ee9 hai. N\u00e0o h\u00e3y c\u00f9ng \u0111i qua v\u00ed d\u1ee5 th\u1ee9 3.</p> <p>** C\u1ea3 <code>a</code> v\u00e0 <code>b</code> \u0111\u1ec1u tr\u1ecf v\u1ec1 c\u00f9ng m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng khi \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u1edbi cung m\u1ed9t gi\u00e1 tr\u1ecb v\u00e0 tr\u00ean c\u00f9ng m\u1ed9t d\u00f2ng code K\u1ebft qu\u1ea3**</p> <pre><code>&gt;&gt;&gt; a, b = 257, 257\n&gt;&gt;&gt; id(a)\n140640774013296\n&gt;&gt;&gt; id(b)\n140640774013296\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; id(a)\n140640774013392\n&gt;&gt;&gt; id(b)\n140640774013488\n</code></pre> <ul> <li> <p>Tr\u00ean c\u00f9ng m\u1ed9t d\u00f2ng code n\u01a1i c\u1ea3 a va b \u0111\u01b0\u1ee3c g\u00e1n cho gi\u00e1 tr\u1ecb <code>257</code>, trinh th\u00f4ng d\u1ecbch Python t\u1ea1o m\u1ed9t \u0111\u00f4i t\u01b0\u1ee3ng m\u1edbi, sau \u0111\u00f3 tr\u1ecf t\u1edbi bi\u1ebfn th\u1ee9 hai c\u00f9ng m\u1ed9t l\u00fac. N\u1ebfu b\u1ea1n th\u1ef1c hi\u1ec7n vi\u1ec7c g\u00e1n tr\u00ean c\u00e1c d\u00f2ng ri\u00eang bi\u1ec7t, Python s\u1ebd kh\u00f4ng bi\u1ebft r\u1eb1ng \u0111\u00e3 c\u00f3 s\u0103n m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng <code>257</code></p> </li> <li> <p>\u0110\u00e2y l\u00e0 m\u1ed9t t\u1ed1i \u01b0u c\u1ee7a tr\u00ecnh bi\u00ean d\u1ecbch, v\u00e0 \u00e1p d\u1ee5ng c\u1ee5 th\u1ec3 cho m\u00f4i tr\u01b0\u1eddng t\u01b0\u01a1ng t\u00e1c (interactive environment). Khi b\u1ea1n nh\u1eadp hai d\u00f2ng code trong phi\u00ean th\u00f4n d\u1ecbch \u0111\u1ed9ng, ch\u00fang \u0111\u01b0\u1ee3c bi\u00ean d\u1ecbch ri\u00eang, do \u0111\u00f3 \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u ri\u00eang. N\u1ebfu b\u1ea1n th\u1eed v\u00ed d\u1ee5 n\u00e0y trong m\u1ed9t file <code>.py</code> b\u1ea1n s\u1ebd kh\u00f4ng th\u1ea5y \u0111i\u1ec1u tr\u00ean x\u1ea3y ra do file code \u0111\u01b0\u1ee3c bi\u00ean d\u1ecbch m\u1ed9t l\u1ea7n. T\u1ed1i \u01b0u nay kh\u00f4ng ch\u1ec9 gi\u01a1i h\u1ea1n cho c\u00e1c s\u1ed1 nguy\u00ean, n\u00f3 c\u00f2n ho\u1ea1t \u0111\u1ed9ng \u0111\u01b0\u1ee3c v\u1edbi c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u b\u1ea5t bi\u1ebfn kh\u00e1c nh\u01b0 strings (xem \"Strings are tricky example\") v\u00e0 floats.   <pre><code>&gt;&gt;&gt; a, b = 257.0, 257.0\n&gt;&gt;&gt; a is b\nTrue\n</code></pre></p> </li> </ul>"},{"location":"VI/#tai-sao-vi-du-nay-lai-khong-chay-uoc-tren-python-37-ai-khai-ly-do-la-boi-vi-cac-toi-uu-cua-trinh-bien-dich-ap-dung-cho-cac-truong-hop-cu-the-vi-du-mot-cach-toi-uu-co-the-thay-oi-tuy-theo-phien-ban-he-ieu-hanh-van-van-toi-van-ang-tim-hieu-cac-thay-oi-cu-the-trong-code-trieu-khai-ban-co-the-xem-them-tai-ay","title":"* T\u1ea1i sao v\u00ed d\u1ee5 nay l\u1ea1i kh\u00f4ng ch\u1ea1y \u0111\u01b0\u1ee3c tr\u00ean Python 3.7? \u0110\u1ea1i kh\u00e1i l\u00fd do l\u00e0 b\u1edfi v\u00ec c\u00e1c t\u1ed1i \u01b0u c\u1ee7a tr\u00ecnh bi\u00ean d\u1ecbch \u00e1p d\u1ee5ng cho c\u00e1c tr\u01b0\u1eddng h\u1ee3p c\u1ee5 th\u1ec3 (v\u00ed d\u1ee5. m\u1ed9t c\u00e1ch t\u1ed1i \u01b0u c\u00f3 th\u1ec3 thay \u0111\u1ed5i tu\u1ef3 theo phi\u00ean b\u1ea3n, h\u1ec7 \u0111i\u1ec1u h\u00e0nh, v\u00e2n v\u00e2n). T\u00f4i v\u00e2n \u0111ang t\u00ecm hi\u1ec3u c\u00e1c thay \u0111\u1ed5i c\u1ee5 th\u1ec3 trong code tri\u1ec3u khai, b\u1ea1n c\u00f3 th\u1ec3 xem th\u00eam t\u1ea1i \u0111\u00e2y","text":""},{"location":"VI/#hash-brownies","title":"\u25b6 Hash brownies","text":"<p>1. <pre><code>some_dict = {}\nsome_dict[5.5] = \"JavaScript\"\nsome_dict[5.0] = \"Ruby\"\nsome_dict[5] = \"Python\"\n</code></pre></p> <p>K\u1ebft qu\u1ea3:</p> <pre><code>&gt;&gt;&gt; some_dict[5.5]\n\"JavaScript\"\n&gt;&gt;&gt; some_dict[5.0] # \"Python\" chi\u1ebfm l\u1ea5y kho\u00e1 (key) c\u1ee7a \"Ruby\"?\n\"Python\"\n&gt;&gt;&gt; some_dict[5] \n\"Python\"\n\n&gt;&gt;&gt; complex_five = 5 + 0j\n&gt;&gt;&gt; type(complex_five)\ncomplex\n&gt;&gt;&gt; some_dict[complex_five]\n\"Python\"\n</code></pre> <p>Th\u1ebf qu\u00e1i n\u00e0o m\u00e0 to\u00e0n in ra Python?</p>"},{"location":"VI/#giai-thich_5","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch","text":"<ul> <li>T\u00ednh duy nh\u1ea5t c\u1ee7a c\u00e1c kho\u00e1 (keys) trong c\u1ea5u tr\u00fac d\u1eef li\u1ec7u t\u1eeb \u0111i\u1ec3n c\u1ee7a \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh b\u1edfi  s\u1ef1 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng, ch\u1ee9 kh\u00f4ng ph\u1ea3i d\u1ef1a tr\u00ean danh t\u00ednh. Do \u0111\u00f3 d\u1eabu cho <code>5</code>, <code>5.0</code>, v\u00e0 <code>5 + 0j</code> l\u00e0 c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng ri\u00eang bi\u1ec7t c\u00f3 ki\u1ec3u kh\u00e1c nhau, nh\u01b0ng b\u1edfi v\u00ec ch\u00fang b\u0103ng nhau n\u00ean kh\u00f4ng th\u1ec3 t\u1ed3n t\u1ea1i nh\u01b0 m\u1ed9t kho\u00e1 ri\u00eang c\u1ee7a <code>dict</code> (ho\u1eb7c <code>set</code>). Khi b\u1ea1n th\u00eam c\u00e1c kho\u00e1 n\u00e0y v\u00e0o t\u1eeb \u0111i\u1ec3n sau \u0111\u00f3 tra gi\u00e1 tr\u1ecb c\u1ee7a kho\u00e1 \u0111\u00f3 d\u1ef1a tr\u00ean gi\u1ea3 \u0111\u1ecbnh v\u1ec1 s\u1ef1 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng th\u00ec Python ch\u1ec9 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a kho\u00e1 \u0111\u01b0\u1ee3c ch\u00e8n v\u00e0o ban \u0111\u1ea7u (thay v\u00ec tr\u1ea3 l\u1ea1i l\u1ed7i v\u1ec1 truy xu\u1ea5t kho\u00e1 <code>KeyError</code>):   <pre><code>&gt;&gt;&gt; 5 == 5.0 == 5 + 0j\nTrue\n&gt;&gt;&gt; 5 is not 5.0 is not 5 + 0j\nTrue\n&gt;&gt;&gt; some_dict = {}\n&gt;&gt;&gt; some_dict[5.0] = \"Ruby\"\n&gt;&gt;&gt; 5.0 in some_dict\nTrue\n&gt;&gt;&gt; (5 in some_dict) and (5 + 0j in some_dict)\nTrue\n</code></pre></li> <li> <p>Nguy\u00ean l\u00fd tr\u00ean c\u0169ng \u00e1p d\u1ee5ng khi b\u1ea1n g\u00e1n gi\u00e1 tr\u1ecb cho kho\u00e1. Khi b\u1ea1n th\u1ef1c hi\u1ec7n ph\u00e9p g\u00e1n <code>some_dict[5] = \"Python\"</code>, Python t\u00ecm ph\u1ea7n t\u1eed c\u00f3 s\u1eb5n trong t\u1eeb \u0111i\u1ec3n c\u00f3 kho\u00e1 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng, trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y n\u00e8 <code>5.0 -&gt; \"Ruby\"</code>, ghi \u0111\u00e8 l\u00ean gi\u00e1 tr\u1ecb c\u1ee7a kho\u00e1 n\u00e0y ngay, v\u00e0 l\u1edd \u0111i kho\u00e1 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng m\u00e0 b\u1ea1n m\u1edbi cung c\u1ea5p.   <pre><code>&gt;&gt;&gt; some_dict\n{5.0: 'Ruby'}\n&gt;&gt;&gt; some_dict[5] = \"Python\"\n&gt;&gt;&gt; some_dict\n{5.0: 'Python'}\n</code></pre></p> </li> <li> <p>V\u1eady l\u00e0m sao \u0111\u1ec3 c\u1eadp nh\u1eadt kho\u00e1 <code>5</code> v\u00e0o t\u1eeb \u0111i\u1ec3n (thay v\u00ec <code>5.0</code>)? Th\u1ef1c s\u1ef1 l\u00e0 ch\u00fang ta kh\u00f4ng th\u1ec3 l\u00e0m \u0111i\u1ec1u \u0111\u00f3 v\u01a1i m\u1ed9t thao t\u00e1c, nh\u01b0ng ta c\u00f3 th\u1ec3 xo\u00e1 \u0111i kho\u00e1 c\u0169  (<code>del some_dict[5.0]</code>), v\u00e0 sau \u0111\u00f3 thi\u1ebft l\u1eadp kho\u00e1 m\u1edbi(<code>some_dict[5]</code>) \u0111\u1ec3 c\u00f3 th\u1ec3 l\u1ea5y \u0111\u01b0\u1ee3c kho\u00e1 <code>5</code> thay v\u00ec <code>5.0</code>, tuy nhi\u00ean c\u00e1ch n\u00e0y \u00edt ai x\u00e0i t\u1edbi l\u1eafm.</p> </li> <li> <p>L\u00e0m th\u1ebf n\u00e0o Python t\u00ecm kho\u00e1 <code>5</code> trong t\u1eeb \u0111i\u1ec3n c\u00f3 ch\u1ee9a s\u1eb5n kho\u00e1 <code>5.0</code>? N\u00f3 l\u00e0m \u0111\u01b0\u1ee3c \u0111i\u1ec1u \u0111\u00f3 m\u00e0 kh\u00f4ng ph\u1ea3i d\u00f2 qua m\u1ecdi ph\u1ea7n t\u1eed trong t\u1eeb \u0111i\u1ec3n th\u00f4ng qua s\u1eed d\u1ee5ng c\u00e1c h\u00e0m b\u0103m (hash functions), do \u0111\u00f3 t\u1ed1n th\u1eddi gian ch\u1ea1y h\u1eb1ng s\u1ed1 (constant time). Khi Python tra  kho\u00e1 t\u00ean <code>foo</code> trong m\u1ed9t t\u01b0 \u0111i\u1ec3n, \u0111\u1ea7u ti\u00ean n\u00f3 th\u1ef1c hi\u1ec7n h\u00e0m b\u0103m <code>hash(foo)</code> (v\u1edbi th\u1eddi gian ch\u1ea1y h\u1eb1ng s\u1ed1). B\u1edfi v\u00ec trong Python c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng b\u0103ng nhau khi ch\u00fang c\u00f3 chung m\u1ed9t gi\u00e1 tr\u1ecb b\u0103m (\u0111\u1ecdc th\u00eam \u1edf \u0111\u00e2y here), <code>5</code>, <code>5.0</code>, and <code>5 + 0j</code> have the same hash value.   <pre><code>&gt;&gt;&gt; 5 == 5.0 == 5 + 0j\nTrue\n&gt;&gt;&gt; hash(5) == hash(5.0) == hash(5 + 0j)\nTrue\n</code></pre> Ghi ch\u00fa: C\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 gi\u00e1 tr\u1ecb b\u0103m b\u0103ng nhau ch\u01b0a ch\u1eafc \u0111\u00e3 b\u1eb1ng nhau. (V\u1eabn \u0111\u1ec1 n\u00e0y \u0111\u01b0\u1ee3c bi\u1ebft t\u1edbi v\u1edbi t\u00ean g\u1ecdi hash collision, v\u00e0 gi\u1ea3m \u0111i hi\u1ec7u n\u0103ng v\u1edbi th\u1eddi gian h\u1eb1ng s\u1ed1 qua vi\u1ec7c d\u00f9ng h\u00e0m b\u0103m.)</p> </li> </ul>"},{"location":"VI/#deep-down-were-all-the-same","title":"\u25b6 Deep down, we're all the same.","text":"<pre><code>class WTF:\n  pass\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; WTF() == WTF() # two different instances can't be equal\nFalse\n&gt;&gt;&gt; WTF() is WTF() # identities are also different\nFalse\n&gt;&gt;&gt; hash(WTF()) == hash(WTF()) # hashes _should_ be different as well\nTrue\n&gt;&gt;&gt; id(WTF()) == id(WTF())\nTrue\n</code></pre></p>"},{"location":"VI/#giai-thich_6","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Khi <code>id</code> \u0111\u01b0\u1ee3c g\u1ecdi, Python t\u1ea1o m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng l\u1edbp <code>WTF</code> v\u00e0 truy\u1ec1n \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y cho h\u00e0m <code>id</code>. H\u00e0m <code>id</code> l\u1ea5y <code>id</code> c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng (v\u00f9ng nh\u1edb c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng), v\u00e0 v\u1ee9t \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y \u0111i. Do \u0111\u00f3 \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ecb ti\u00eau hu\u1ef7.</li> <li>Khi ch\u00fang ta g\u1ecdi <code>id</code> hai l\u1ea7n, Python c\u1ea5p ph\u00e1t c\u00f9ng m\u1ed9t v\u00f9ng nh\u01a1 cho \u0111\u1ed1i t\u01b0\u1ee3ng th\u01b0 hai. B\u1edfi vi (trong CPython) <code>id</code> s\u1eed d\u1ee5ng v\u00f9ng nh\u1edb cho id c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng, id c\u1ee7a hai \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y l\u00e0 gi\u1ed1ng nhau.</li> <li>V\u00ec v\u1eady, id c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng ch\u1ec9 duy nh\u1ea5t trong v\u00f2ng \u0111\u1eddi c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u00f3. Sau khi \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ecb ti\u00eau hi\u1ec3u, hay tr\u01b0\u1edbc khi n\u00f3 \u0111\u01b0\u1ee3c t\u1ea1o, nh\u1eefng th\u1ee9 kh\u00e1c c\u00f3 th\u1ec3 c\u00f3 c\u00f9ng id v\u1edbi n\u00f3.</li> <li>Nh\u01b0ng t\u1ea1i sao ph\u00e9p <code>is</code> l\u1ea1i cho ra k\u1ebft qu\u1ea3 <code>False</code>? H\u00e3y nh\u00ecn v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y <pre><code>  class WTF(object):\n    def __init__(self): print(\"I\")\n    def __del__(self): print(\"D\")\n  ```\n  **K\u1ebft qu\u1ea3:**\n  ```py\n  &gt;&gt;&gt; WTF() is WTF()\n  I\n  I\n  D\n  D\n  False\n  &gt;&gt;&gt; id(WTF()) == id(WTF())\n  I\n  D\n  I\n  D\n  True\n  ```\n  Nh\u01b0 b\u1ea1n quan s\u00e1t th\u1ea5y, c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t \u1edf th\u1ee9 t\u1ef1 ti\u00eau hi\u1ec3u c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng, v\u00e0 \u0111\u00f3 t\u1ea1o ra s\u1ef1 kh\u00e1c bi\u1ec7t.\n\n---\n\n### \u25b6 V\u00f4 tr\u1eadt t\u1ef1 trong tr\u1eadt t\u1ef1 *\n&lt;!-- Example ID: 91bff1f8-541d-455a-9de4-6cd8ff00ea66 ---&gt;\n```py\nfrom collections import OrderedDict\n\n\ndictionary[1] = 'a'; dictionary[2] = 'b';\n\nordered_dict = OrderedDict()\nordered_dict[1] = 'a'; ordered_dict[2] = 'b';\n\nanother_ordered_dict = OrderedDict()\nanother_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';\n\nclass DictWithHash(dict):\n    \"\"\"\n    A dict that also implements __hash__ magic.\n    \"\"\"\n    __hash__ = lambda self: 0\n\nclass OrderedDictWithHash(OrderedDict):\n    \"\"\"\n    An OrderedDict that also implements __hash__ magic.\n    \"\"\"\n    __hash__ = lambda self: 0\n</code></pre></li> </ul> <p>K\u1ebft qu\u1ea3 <pre><code>&gt;&gt;&gt; dictionary == ordered_dict # N\u1ebfu a == b\nTrue\n&gt;&gt;&gt; dictionary == another_ordered_dict # and b == c\nTrue\n&gt;&gt;&gt; ordered_dict == another_ordered_dict # th\u1ebf sao c != a ??\nFalse\n\n# ta bi\u1ebft r\u0103ng set ch\u1ec9 ch\u1ee9a c\u00e1c ph\u1ea7n t\u1eed \u0111\u1ed9c nh\u1ea5t,\n# th\u1eed t\u1ea1o m\u1ed9t set ch\u1ee9a 3 t\u1eeb \u0111i\u1ec3n ph\u00eda tr\u00ean xem sao...\n\n&gt;&gt;&gt; len({dictionary, ordered_dict, another_ordered_dict})\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'dict' (L\u1ed7i v\u1ec1 ki\u1ec3u: ki\u1ec3u kh\u00f4ng th\u1ec3 hash \u0111\u01b0\u1ee3c)\n\n# L\u1ed7i tr\u00ean x\u1ea3y ra l\u00e0 \u0111i\u1ec1u d\u00ea hi\u1ec3u do t\u1eeb \u0111i\u1ec3n kh\u00f4ng \u0111\u01b0\u1ee3c tran b\u1ecb __hash__, \n# s\u1eed d\u1ee5ng c\u00e1c l\u1edbp b\u1ecdc (wrapper classes) ta x\u00e2y d\u1ef1ng ph\u00eda tr\u00ean th\u1eed xem.\n&gt;&gt;&gt; dictionary = DictWithHash()\n&gt;&gt;&gt; dictionary[1] = 'a'; dictionary[2] = 'b';\n&gt;&gt;&gt; ordered_dict = OrderedDictWithHash()\n&gt;&gt;&gt; ordered_dict[1] = 'a'; ordered_dict[2] = 'b';\n&gt;&gt;&gt; another_ordered_dict = OrderedDictWithHash()\n&gt;&gt;&gt; another_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';\n&gt;&gt;&gt; len({dictionary, ordered_dict, another_ordered_dict})\n1\n&gt;&gt;&gt; len({ordered_dict, another_ordered_dict, dictionary}) # x\u00e1o tr\u1ed9n th\u1ee9 t\u1ef1 c\u00e1 ph\u1ea7n t\u1eed trong set\n2\n</code></pre></p> <p>C\u00e1i qu\u00e1i g\u00ec \u0111ang x\u1ea3y ra?</p>"},{"location":"VI/#giai-thich_7","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li> <p>L\u00fd do t\u1ea1i sao quy t\u1eafc so s\u00e1nh b\u1eafc c\u1ea7u kh\u00f4ng \u00e1p d\u1ee5ng \u0111\u01b0\u1ee3c khi so s\u00e1nh  <code>dictionary</code>, <code>ordered_dict</code> v\u00e0 <code>another_ordered_dict</code> l\u00e0 do c\u00e1ch tri\u1ec3n khai ph\u01b0\u01a1ng th\u1ee9c <code>__eq__</code> trong l\u1edbp <code>OrderedDict</code> . Xem th\u00eam t\u00e0i li\u1ec7u</p> <p>C\u00e1c ph\u00e9p so s\u00e1nh b\u1eb1ng gi\u1eefa c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng OrderedDict tu\u00f4n theo th\u01b0 t\u1ef1 v\u00e0 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n nh\u01b0 sau. C\u00f2n ph\u00e9p so s\u00e1nh b\u0103ng gi\u1eefa c\u00e1 \u0111\u1ed1i t\u01b0\u1ee3ng <code>OrderedDict</code> v\u00e0 c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng \u00e1nh x\u1ea1 kh\u00e1c (mapping objects) th\u00ec kh\u00f4ng tu\u00e2n theo th\u1ee9 t\u1ef1 nh\u01b0 l\u00e0 c\u00e1c t\u1eeb \u0111i\u1ec3n th\u00f4ng th\u01b0\u1eddng..</p> </li> <li> <p>L\u00fd do \u1edf \u0111\u00e2y l\u00e0 c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng <code>OrderedDict</code> \u0111\u01b0\u1ee3c cho ph\u00e9p b\u1ecb thay th\u1ebf tr\u1ef1c ti\u1ebfp t\u1ea1i b\u1ea5t c\u1ee9 v\u1ecb tr\u00ed nao m\u1ed9t t\u1eeb \u0111i\u1ec3n th\u00f4ng th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng.</p> </li> <li> <p>V\u1eady t\u1ea1i sao thay \u0111\u1ed5i th\u01b0 t\u1ef1 c\u1ee7a c\u00e1c t\u1eeb \u0111i\u1ec3n l\u1ea1i \u1ea3nh h\u01b0\u1edfng t\u1edbi \u0111\u1ed1i t\u01b0\u1ee3ng <code>set</code> \u0111\u01b0\u1ee3c sinh ra? C\u00e2u tr\u1ea3 l\u1eddi l\u00e0 do thi\u1ebfu s\u1ef1 so s\u00e1nh n\u1ed9i \u0111\u1ed1i t\u01b0\u1ee3ng (intrasitive) . Do sets l\u00e0 c\u00e1c t\u1eadp h\u1ee3p kh\u00f4ng c\u00f3 th\u1ee9 t\u1ef1 c\u1ee7a c\u00e1c ph\u1ea7n t\u1eed \u0111\u1ed9c nh\u1ea5t, th\u1ee9 t\u1ef1 c\u00e1c ph\u1ea7n t\u1eed khi ch\u00e8n v\u00e0o kh\u00f4ng c\u00f3 ngh\u0129a l\u00fd g\u00ec c\u1ea3. Nh\u01b0ng trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, n\u00f3 l\u1ea1i c\u00f3 v\u1ea5n \u0111\u1ec1. H\u00e3y t\u00ecm hi\u1ec3u th\u00eam xem sao</p> <p><pre><code>&gt;&gt;&gt; some_set = set()\n&gt;&gt;&gt; some_set.add(dictionary) # these are the mapping objects from the snippets above\n&gt;&gt;&gt; ordered_dict in some_set\nTrue\n&gt;&gt;&gt; some_set.add(ordered_dict)\n&gt;&gt;&gt; len(some_set)\n1\n&gt;&gt;&gt; another_ordered_dict in some_set\nTrue\n&gt;&gt;&gt; some_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(some_set)\n1\n\n&gt;&gt;&gt; another_set = set()\n&gt;&gt;&gt; another_set.add(ordered_dict)\n&gt;&gt;&gt; another_ordered_dict in another_set\nFalse\n&gt;&gt;&gt; another_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(another_set)\n2\n&gt;&gt;&gt; dictionary in another_set\nTrue\n&gt;&gt;&gt; another_set.add(another_ordered_dict)\n&gt;&gt;&gt; len(another_set)\n2\n</code></pre> S\u1ef1 b\u1ea5t nh\u1ea5t \u1edf \u0111\u00e2y  <code>another_ordered_dict in another_set</code> cho k\u1ebft qu\u1ea3 l\u00e0 <code>False</code> b\u1edfi v\u00ec <code>ordered_dict</code> \u0111\u00e3 t\u1ed3n t\u1ea1i trong <code>another_set</code> tr\u01b0\u1edbc \u0111\u00f3, <code>ordered_dict == another_ordered_dict</code> tr\u1edf th\u00e0nh  <code>False</code>.</p> </li> </ul>"},{"location":"VI/#co-them-chut-nua","title":"\u25b6 C\u1ed1 th\u00eam ch\u00fat n\u1eefa... *","text":"<pre><code>def some_func():\n    try:\n        return 'from_try'\n    finally:\n        return 'from_finally'\n\ndef another_func(): \n    for _ in range(3):\n        try:\n            continue\n        finally:\n            print(\"Finally!\")\n\ndef one_more_func(): # A gotcha!\n    try:\n        for i in range(3):\n            try:\n                1 / i\n            except ZeroDivisionError:\n                # Let's throw it here and handle it outside for loop\n                raise ZeroDivisionError(\"A trivial divide by zero error\")\n            finally:\n                print(\"Iteration\", i)\n                break\n    except ZeroDivisionError as e:\n        print(\"Zero division error occurred\", e)\n</code></pre> <p>K\u1ebft qu\u1ea3:</p> <pre><code>&gt;&gt;&gt; some_func()\n'from_finally'\n\n&gt;&gt;&gt; another_func()\nFinally!\nFinally!\nFinally!\n\n&gt;&gt;&gt; 1 / 0\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero (Ngo\u1ea1i l\u1ec7 sinh ra b\u1edfi chia m\u1ed9t s\u1ed1 cho s\u1ed1 0)\n\n&gt;&gt;&gt; one_more_func()\nIteration 0\n</code></pre>"},{"location":"VI/#giai-thich_8","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Khi c\u00e2u l\u1ec7nh <code>return</code>, <code>break</code> hay <code>continue</code> \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong ph\u1ea7n <code>try</code> c\u1ee7a kh\u1ed1i \"try\u2026finally\", ph\u1ea7n <code>finally</code> c\u0169ng \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n.</li> <li>Gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 c\u1ee7a m\u1ed9t h\u00e0m \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh b\u1edfi c\u00e2u l\u1ec7nh <code>return</code> cu\u1ed1i cung \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n. B\u1edfi v\u00ec ph\u1ea7n <code>finally</code> lu\u00f4n \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n, c\u00e2u l\u1ec7nh <code>return</code> trong ph\u1ea7n <code>finally</code> s\u1ebd lu\u00f4n l\u00e0 c\u00e2u l\u1ec7nh tr\u1ea3 v\u1ec1 gia tr\u1ecb cu\u1ed1i c\u00f9ng.</li> <li>Tuy nhi\u00ean n\u1ebfu ph\u1ea7n finally th\u1ef1c hi\u1ec7n c\u00e2u l\u1ec7nh <code>return</code> hay <code>break</code> th\u00ec ph\u1ea7n ngo\u1ea1i l\u1ec7 t\u1ed3n t\u1ea1i s\u1ebd b\u1ecb b\u1ecf qua.</li> </ul>"},{"location":"VI/#for-what","title":"\u25b6 For what?","text":"<pre><code>some_string = \"wtf\"\nsome_dict = {}\nfor i, some_dict[i] in enumerate(some_string):\n    i = 10\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; some_dict # An indexed dict appears.\n{0: 'w', 1: 't', 2: 'f'}\n</code></pre></p>"},{"location":"VI/#giai-thich_9","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>C\u00e2u l\u1ec7nh <code>for</code> \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong ng\u1eef ph\u00e1p Python nh\u01b0 sau:   <pre><code>for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]\n</code></pre></li> </ul> <p>\u1ede \u0111\u00f3 <code>exprlist</code> l\u00e0 bi\u1ebfn m\u1ee5c ti\u00eau c\u1ee7a ph\u00e9p g\u00e1n. \u0110i\u1ec1u \u0111\u00f3 co ngh\u0129a l\u00e0 c\u00e2u l\u1ec7nh g\u00e1n <code>{exprlist} = {next_value}</code> \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n \u0111\u1ed1i v\u1edbi m\u1ed7i ph\u1ea7n t\u1eed trong \u0111\u1ed1i t\u01b0\u1ee3ng l\u1eb7p (iterable)   An interesting example that illustrates this:   <pre><code>for i in range(4):\n    print(i)\n    i = 10\n</code></pre></p> <p>K\u1ebft qu\u1ea3: <pre><code>0\n1\n2\n3\n</code></pre></p> <p>B\u1ea1n c\u00f3 ngh\u0129 r\u0103ng v\u00f2ng l\u1eb7p tr\u00ean ch\u1ec9 ch\u1ea1y c\u00f3 m\u1ed9t l\u1ea7n?</p> <p>\ud83d\udca1 Gi\u1ea3i th\u00edch:</p> <ul> <li> <p>C\u00e2u l\u1ec7nh g\u00e1n <code>i = 10</code> kh\u00f4ng bao gi\u1edd \u1ea3nh h\u01b0\u1edfng t\u1edbi c\u00e1c v\u00f2ng l\u1eb7p do c\u00e1ch th\u1ee9c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a v\u00f2ng l\u1eb7p for tron Python. Tr\u01b0\u1edbc \u0111i\u1ec3m kh\u1edfi \u0111\u1ea7u c\u1ee7a m\u1ed7i v\u00f2ng l\u1eb7p, ph\u1ea7n t\u1eed ti\u1ebfp theo \u0111\u01b0\u1ee3c \u0111\u01b0a ra b\u1edfi tr\u00ecnh sinh (iterator, trong tr\u01b0\u1eddng h\u1ee3p nay l\u00e0 <code>range(4)</code>), ph\u1ea7n t\u1eed n\u00e0y \u0111\u01b0\u1ee3c gi\u1ea3i n\u00e9n ra (unpacked) v\u00e0 g\u00e1n cho c\u00e1c bi\u1ebfn ch\u1ea1y (trong tr\u01b0\u1eddng h\u1ee3p nay l\u00e0 <code>i</code>)</p> </li> <li> <p>H\u00e0m <code>enumerate(some_string)</code> sinh ra gi\u00e1 tr\u1ecb m\u1edbi <code>i</code> (bi\u1ebfn \u0111\u1ebfm) v\u00e0 m\u1ed9t k\u00ed t\u1ef1 t\u1eeb <code>some_string</code> t\u1ea1i m\u1ed7i l\u1ea7n l\u1eb7p. Sau \u0111\u00f3 n\u00f3 g\u00e1n kho\u00e1 <code>i</code> c\u1ee7a t\u1eeb \u0111i\u1ec3n <code>some_dict</code> cho k\u00ed t\u1ef1 \u0111\u00f3. Tr\u00ecnh t\u1ef1 \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n \u0111\u01a1n gi\u1ea3n nh\u01b0 d\u01b0\u1edbi \u0111\u00e2y:   <pre><code>&gt;&gt;&gt; i, some_dict[i] = (0, 'w')\n&gt;&gt;&gt; i, some_dict[i] = (1, 't')\n&gt;&gt;&gt; i, some_dict[i] = (2, 'f')\n&gt;&gt;&gt; some_dict\n</code></pre></p> </li> </ul>"},{"location":"VI/#su-khac-biet-en-tu-thoi-iem-anh-gia","title":"\u25b6 S\u1ef1 kh\u00e1c bi\u1ec7t \u0111\u1ebfn t\u1eeb th\u1eddi \u0111i\u1ec3m \u0111\u00e1nh gi\u00e1","text":"<p>1. <pre><code>array = [1, 8, 15]\n# M\u1ed9t bi\u1ec3u di\u1ec5n generator th\u00f4ng th\u01b0\u1eddng\ngen = (x for x in array if array.count(x) &gt; 0)\narray = [2, 8, 22]\n</code></pre></p> <p>K\u1ebft qu\u1ea3:</p> <pre><code>&gt;&gt;&gt; print(list(gen)) # C\u00e1c gi\u00e1 tr\u1ecb kh\u00e1c \u0111i \u0111\u00e2u m\u1ea5t r\u1ed3i?\n[8]\n</code></pre> <p>2.</p> <pre><code>array_1 = [1,2,3,4]\ngen_1 = (x for x in array_1)\narray_1 = [1,2,3,4,5]\n\narray_2 = [1,2,3,4]\ngen_2 = (x for x in array_2)\narray_2[:] = [1,2,3,4,5]\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; print(list(gen_1))\n[1, 2, 3, 4]\n\n&gt;&gt;&gt; print(list(gen_2))\n[1, 2, 3, 4, 5]\n</code></pre></p> <p>3.</p> <pre><code>array_3 = [1, 2, 3]\narray_4 = [10, 20, 30]\ngen = (i + j for i in array_3 for j in array_4)\n\narray_3 = [4, 5, 6]\narray_4 = [400, 500, 600]\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; print(list(gen))\n[401, 501, 601, 402, 502, 602, 403, 503, 603]\n</code></pre></p>"},{"location":"VI/#ly-giai","title":"\ud83d\udca1 L\u00fd gi\u1ea3i","text":"<ul> <li>Trong m\u1ed9t bi\u1ec3u di\u1ec5n generator, c\u00e2u <code>in</code> \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u1ea1i th\u1eddi \u0111i\u1ec3m khai b\u00e1o, nh\u01b0ng c\u00e2u \u0111i\u1ec1u ki\u1ec7n \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u1ea1i th\u1eddi \u0111i\u1ec3m ch\u1ea1y (runtime).</li> <li>Do tr\u01b0\u1edbc th\u1eddi \u0111i\u1ec3m ch\u1ea1y, <code>array</code> \u0111\u01b0\u1ee3c g\u00e1n cho gi\u00e1 tr\u1ecb <code>[2, 8, 22]</code>, v\u00e0 trong ba s\u1ed1 \u0111\u01b0\u1ee3c g\u00e1n tr\u01b0\u1edbc \u0111\u00f3 <code>1</code>, <code>8</code> and <code>15</code>, ch\u1ec9 c\u00f3 <code>8</code> c\u00f3 s\u1ed1 l\u1ea7n xu\u1ea5t hi\u1ec7n trong m\u1ea3ng m\u1edbi v\u00e0 do \u0111\u00f3 s\u1ed1 l\u1ea7n xu\u00e2t hi\u1ec7n l\u1edbn h\u01a1n <code>0</code>, n\u00ean generator ch\u1ec9 cho ra s\u1ed1 <code>8</code>.</li> <li>S\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa k\u1ebft qu\u1ea3 c\u1ee7a <code>g1</code> and <code>g2</code> trong ph\u1ea7n th\u1ee9 hai l\u00e0 do c\u00e1ch c\u00e1c bi\u1ebfn <code>array_1</code> v\u00e0 <code>array_2</code> \u0111\u01b0\u1ee3c g\u00e1n l\u1ea1i c\u00e1c gi\u00e1 tr\u1ecb.</li> <li>Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u1ea7u ti\u00ean, <code>array_1</code> \u0111\u01b0\u1ee3c g\u00e1n cho m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng m\u1edbi <code>[1,2,3,4,5]</code> v\u00e0 v\u00ec c\u00e2u <code>in</code> \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u1ea1i th\u1eddi \u0111i\u1ec3m khai b\u00e1o n\u00ean n\u00f3 v\u1eabn tr\u1ecf t\u1edbi \u0111\u1ed1i t\u01b0\u1ee3ng c\u0169 <code>[1,2,3,4]</code> (\u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y ch\u01b0a b\u1ecb m\u1ea5t \u0111i).</li> <li>Trong tr\u01b0\u1eddng h\u1ee3p th\u01b0 hai, ph\u00e9p g\u00e1n l\u00e1t c\u1eaft (slice assignment) <code>array_2</code> c\u1eadp nh\u1eadt \u0111\u1ed1i t\u01b0\u1ee3ng c\u0169 <code>[1,2,3,4]</code> th\u00e0nh <code>[1,2,3,4,5]</code>. Hi\u1ec3n nhi\u00ean c\u1ea3 <code>g2</code> v\u00e0 <code>array_2</code> \u0111\u1ec1u tr\u1ecf t\u1edbi cung m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng (\u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u00e3 \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt th\u00e0nh <code>[1,2,3,4,5]</code>).</li> <li>Okay, v\u1edbi nh\u1eefng g\u00ec ta quan s\u00e1t tr\u00ean, co ph\u1ea3i gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 t\u1eeb <code>list(g)</code> trong ph\u1ea7n th\u1ee9 ba ph\u1ea3i l\u00e0 <code>[11, 21, 31, 12, 22, 32, 13, 23, 33]</code>? (b\u1edfi v\u00ec <code>array_3</code> v\u00e0 <code>array_4</code> s\u1ebd gi\u1ed1ng nh\u01b0 <code>array_1</code>). L\u00fd do ch\u1ec9 <code>array_4</code> \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch \u1edf \u0111\u00e2y PEP-289     &gt;Ch\u1ec9 c\u00f3 v\u00f2ng for ngo\u00e0i c\u00f9ng \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n ngay l\u1eadp t\u1ee9c, c\u00e1c l\u1ec7nh kh\u00e1c \u0111\u01b0\u1ee3c tr\u00ec ho\u00e3n cho \u0111\u1ebfn khi generator \u0111\u01b0\u1ee3c ch\u1ea1y.</li> </ul>"},{"location":"VI/#is-not-khong-phai-la-is-not","title":"\u25b6 <code>is not ...</code> kh\u00f4ng ph\u1ea3i l\u00e0 <code>is (not ...)</code>","text":"<pre><code>&gt;&gt;&gt; 'something' is not None\nTrue\n&gt;&gt;&gt; 'something' is (not None)\nFalse\n</code></pre>"},{"location":"VI/#giai-thich_10","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch","text":"<ul> <li><code>is not</code> l\u00e0 m\u1ed9t to\u00e1n t\u1eed nh\u1ecb ph\u00e2n \u0111\u01a1n, v\u00e0 khi th\u1ef1c hi\u1ec7n s\u1ebd cho k\u1ebft qu\u1ea3 kh\u00e1c v\u1edbi s\u1eed d\u1ee5ng <code>is</code> v\u00e0 <code>not</code> ri\u00eang bi\u1ec7t.</li> <li><code>is not</code> cho ra k\u1ebft qu\u1ea3 <code>False</code> khi c\u00e1c bi\u1ebfn \u1edf hai \u0111\u1ea7u c\u1ee7a n\u00f3 tr\u1ecf v\u1ec1 c\u00f9ng m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng , v\u00e0 n\u1ebfu hai bi\u1ebfn n\u00e0y tr\u1ecf v\u1ec1 kh\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng, k\u1ebft qu\u1ea3 s\u1ebd l\u00e0 <code>True</code>. C\u1ee5 th\u1ec3, <code>None</code> v\u00e0 <code>something</code> tr\u1ecf v\u1ec1 hai bi\u1ebfn kh\u00e1c nhau n\u00ean k\u1ebft qu\u1ea3 l\u00e0 <code>True</code></li> <li>Trong v\u00ed d\u1ee5 tr\u00ean, <code>(not None)</code> s\u1ebd cho ra k\u1ebft qu\u1ea3 <code>True</code> b\u1edfi v\u00ec khi s\u1eed d\u1ee5ng trong ph\u00e9p so s\u00e1nh lu\u1eadn l\u00fd <code>None</code> t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi <code>False</code>, do \u0111\u00f3 d\u00f2ng m\u00e3 tr\u00ean s\u1ebd tr\u1edf th\u00e0nh <code>'something' is True</code>. C\u1ee5 th\u1ec3, do <code>something</code> v\u00e0 <code>True</code> tr\u1ecf v\u1ec1 hai \u0111\u1ed1i t\u01b0\u1ee3ng kh\u00e1c nhau n\u00ean k\u1ebft qu\u1ea3 l\u00e0 <code>False</code></li> </ul>"},{"location":"VI/#a-tic-tac-toe-where-x-wins-in-the-first-attempt","title":"\u25b6 A tic-tac-toe where X wins in the first attempt!","text":"<pre><code># Kh\u1edfi t\u1ea1o m\u1ed9t h\u00e0ng\nrow = [\"\"] * 3 #row i['', '', '']\n# V\u00e0 t\u1ea1o m\u1ed9t b\u1ea3ng g\u1ed3m c\u00e1c h\u00e0ng\nboard = [row] * 3\n</code></pre> <p>K\u1ebft qu\u1ea3:</p> <pre><code>&gt;&gt;&gt; board\n[['', '', ''], ['', '', ''], ['', '', '']]\n&gt;&gt;&gt; board[0]\n['', '', '']\n&gt;&gt;&gt; board[0][0]\n''\n&gt;&gt;&gt; board[0][0] = \"X\"\n&gt;&gt;&gt; board\n[['X', '', ''], ['X', '', ''], ['X', '', '']]\n</code></pre> <p>Ch\u00fang ta \u0111\u00e3 g\u00e1n <code>\"X\"</code> cho ba v\u1ecb tr\u00ed trong b\u1ea3ng n\u00e0y ch\u0103ng?</p>"},{"location":"VI/#giai-thich_11","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<p>Khi ch\u00fang ta kh\u1edfi t\u1ea1oi bi\u1ebfn <code>row</code>, h\u00ecnh m\u00f4 ph\u1ecfng d\u01b0\u1edbi \u0111\u00e2y cho ta bi\u1ebft nh\u1eefng g\u00ec di\u1ec5n ra trong b\u1ed9 nh\u1edb</p> <p></p> <p>Khi <code>board</code> \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u0103ng vi\u1ec7c nh\u00e2n b\u1ea3n <code>row</code>, minh ho\u1ea1 ph\u00eda d\u01b0\u1edbi m\u00f4 t\u1ea3 nh\u1eefng g\u00ec di\u00ean ra trong b\u1ed9 nh\u1edb (m\u1ed7i th\u00e0nh ph\u1ea7n c\u1ee7a b\u1ea3ng <code>board[0]</code>, <code>board[1]</code> v\u00e0 <code>board[2]</code> l\u00e0 m\u1ed9t tham chi\u1ebfu t\u1edbi cung m\u1ed9t danh s\u00e1ch tr\u1ecf b\u1edfi <code>row</code>)</p> <p></p> <p>Ch\u00fang ta c\u00f3 th\u1ec3 tr\u00e1nh \u0111i\u1ec1u tr\u00ean x\u1ea3y ra b\u1eb1ng c\u00e1ch kh\u00f4ng d\u00f9ng bi\u1ebfn <code>row</code> \u0111\u1ec3 sinh ra <code>board</code>. (Tim hi\u1ec3u th\u00eam t\u1ea1i (https://github.com/satwikkansal/wtfpython/issues/68) ) <pre><code>&gt;&gt;&gt; board = [['']*3 for _ in range(3)]\n&gt;&gt;&gt; board[0][0] = \"X\"\n&gt;&gt;&gt; board\n[['X', '', ''], ['', '', ''], ['', '', '']]\n</code></pre></p>"},{"location":"VI/#the-sticky-output-function","title":"\u25b6 The sticky output function","text":"<p>1.</p> <pre><code>funcs = []\nresults = []\nfor x in range(7):\n    def some_func():\n        return x\n    funcs.append(some_func)\n    results.append(some_func())  # Ch\u00fa \u00fd l\u1eddi g\u1ecdi h\u00e0m \u1edf \u0111\u00e2y\n\nfuncs_results = [func() for func in funcs]\n</code></pre> <p>k\u1ebft qu\u1ea3:</p> <p><pre><code>&gt;&gt;&gt; results\n[0, 1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; funcs_results\n[6, 6, 6, 6, 6, 6, 6]\n</code></pre> Ngay c\u1ea3 khi c\u00e1c gi\u00e1 tr\u1ecb <code>x</code> kh\u00e1c nhau trong m\u1ecdi v\u00f2ng l\u1eb7p tr\u01b0\u1edbc khi \u0111\u1eb7t <code>some_func</code> v\u00e0o trong danh s\u00e1ch <code>funcs</code>, t\u1ea5t c\u1ea3 c\u00e1c h\u00e0m \u0111\u1ec1u tr\u1ea3 v\u1ec1 6.</p> <p>2.</p> <pre><code>&gt;&gt;&gt; powers_of_x = [lambda x: x**i for i in range(10)]\n&gt;&gt;&gt; [f(2) for f in powers_of_x]\n[512, 512, 512, 512, 512, 512, 512, 512, 512, 512]\n</code></pre>"},{"location":"VI/#ly-giai_1","title":"\ud83d\udca1 L\u00fd gi\u1ea3i","text":"<ul> <li> <p>Khi \u0111\u1ecbnh nghia m\u1ed9t h\u00e0m b\u00ean trong m\u1ed9t v\u00f2ng l\u1eb7p, v\u00f2ng l\u1eb7p c\u00f3 bi\u1ebfn l\u1eb7p \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong th\u00e2n h\u00e0m, closure c\u1ee7a h\u00e0m n\u00e0y \u0111\u01b0\u1ee3c gi\u01a1i h\u1ea1n cho bi\u1ebfn, ch\u01b0 kh\u00f4ng ph\u1ea3i l\u00e0 gi\u00e1 tr\u1ecb. V\u00ec v\u1eady t\u1ea5t c\u1ea3 c\u00e1c ham s\u1eed d\u1ee5ng gi\u00e1 tr\u1ecb cu\u1ed1i cung \u0111\u01b0\u1ee3c g\u00e1n cho bi\u1ebfn n\u00e0y \u0111\u1ec3 th\u1ef1c hi\u1ec7n t\u00ednh to\u00e1n. \u0110\u1ec3 r\u00f5 h\u01a1n ta th\u1ea5y \u0111\u01b0\u1ee3c r\u1eb1ng bi\u1ebfn l\u1eb7p <code>x</code> (v\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a cung c\u1ee7a n\u00f3 nh\u1eadn \u0111\u01b0\u1ee3c l\u00e0 <code>6</code>) trong v\u00ed d\u1ee5 th\u1ee9 nh\u1ea5t \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho t\u1ea5t c\u1ea3 c\u00e1c h\u00e0m <code>func()</code>, h\u00e0m n\u00e0y s\u1ebd lu\u00f4n tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb l\u00e0 <code>6</code> </p> </li> <li> <p>\u0110\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c t\u00ednh to\u00e1n mong mu\u1ed1n b\u1ea1n c\u00f3 th\u1ec3 truy\u1ec1n bi\u1ebfn l\u1eb7p nh\u01b0 l\u00e0 bi\u1ebfn \u0111\u01b0\u1ee3c \u0111\u1eb7t t\u00ean (named variable) cho h\u00e0m. Sao m\u00e0 n\u00f3 l\u1ea1i ch\u1ea1y \u0111\u00fang \u0111\u01b0\u1ee3c? \u1edfi v\u00ec vi\u1ec7c truy\u1ec1n bi\u1ebfn nh\u01b0 v\u1eady s\u1ebd \u0111\u1ecbnh ngh\u0129a l\u1ea1i bi\u1ebfn nay b\u00ean trong ph\u1ea1m vi c\u1ee7a h\u00e0m.</p> <pre><code>funcs = []\nfor x in range(7):\n    def some_func(x=x):\n        return x\n    funcs.append(some_func)\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; funcs_results = [func() for func in funcs]\n&gt;&gt;&gt; funcs_results\n[0, 1, 2, 3, 4, 5, 6]\n</code></pre></p> </li> </ul>"},{"location":"VI/#bai-toan-con-ga-va-qua-trung","title":"\u25b6 B\u00e0i to\u00e1n con g\u00e0 v\u00e0 qu\u1ea3 tr\u1ee9ng *","text":"<p>1. <pre><code>&gt;&gt;&gt; isinstance(3, int)\nTrue\n&gt;&gt;&gt; isinstance(type, object)\nTrue\n&gt;&gt;&gt; isinstance(object, type)\nTrue\n</code></pre></p> <p>\u0110\u00e2u l\u00e0 l\u1edbp c\u01a1 b\u1ea3n cu\u1ed1i c\u00f9ng ? C\u00f2n nhi\u1ec1u th\u1ee9 g\u00e2y kh\u00f3 hi\u1ec3u h\u01a1n n\u1eefa sau \u0111\u00e2y</p> <p>2. </p> <pre><code>&gt;&gt;&gt; class A: pass\n&gt;&gt;&gt; isinstance(A, A)\nFalse\n&gt;&gt;&gt; isinstance(type, type)\nTrue\n&gt;&gt;&gt; isinstance(object, object)\nTrue\n</code></pre> <p>3.</p> <pre><code>&gt;&gt;&gt; issubclass(int, object)\nTrue\n&gt;&gt;&gt; issubclass(type, object)\nTrue\n&gt;&gt;&gt; issubclass(object, type)\nFalse\n</code></pre>"},{"location":"VI/#giai-thich_12","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch","text":"<ul> <li><code>type</code> l\u00e0 m\u1ed9t metaclass trong Python.</li> <li>M\u1ecdi th\u1ee9 \u0111\u1ec1u l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng <code>object</code> trong Python, bao g\u1ed3m c\u1ea3 c\u00e1c l\u1edbp (classes) c\u0169ng nh\u01b0 l\u00e0 c\u00e1c hi\u1ec7n th\u1ef1c c\u1ee7a ch\u00fang (instances).</li> <li>L\u1edbp <code>type</code> l\u00e0 metaclass c\u1ee7a l\u1edbp <code>object</code>, do \u0111\u00f3 m\u1ecdi l\u1edbp (g\u1ed3m c\u1ea3 <code>type</code>) th\u1eeba h\u01b0\u1edfng tr\u1ef1c ti\u1ebfp hay gi\u00e1n ti\u1ebfp t\u1eeb <code>object</code>.</li> <li>Kh\u00f4ng c\u00f3 m\u1ed9t l\u1edbp n\u00e0o n\u1eb1m gi\u1eefa l\u1edbp <code>object</code> v\u00e0 <code>type</code>. V\u1ea5n \u0111\u1ec1 \u0111\u1ed1i v\u1edbi c\u00e1c \u0111o\u1ea1n m\u00e3 ph\u00eda tr\u00ean n\u1eb1m \u1edf c\u00e1ch ta t\u00ecm c\u00e1c m\u1ed1i quan h\u1ec7 gi\u1eefa c\u00e1c l\u1edbp trong Python (d\u00f9ng <code>issubclass</code> v\u00e0 <code>isinstance</code>). M\u1ed7i quan h\u1ec7 gi\u1eefa <code>object</code> v\u00e0 <code>type</code> kh\u00f4ng th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong Python \u0111\u01a1n thu\u1ea7n. Ch\u00ednh x\u00e1c h\u01a1n, ngh\u0129a l\u00e0,<ul> <li>L\u1edbp A l\u00e0 m\u1ed9t hi\u1ec7n th\u1ef1c c\u1ee7a l\u1edbp B, v\u00e0 l\u1edbp B l\u00e0 m\u1ed9t hi\u1ec7n th\u1ef1c c\u1ee7a l\u1edbp A.  </li> <li>L\u1edbp A l\u00e0 m\u1ed9t hi\u1ec7n th\u1ef1c c\u1ee7a ch\u00ednh n\u00f3.</li> </ul> </li> <li>C\u00e1c m\u1ed1i quan h\u1ec7 gi\u1eefa <code>object</code> v\u00e0 <code>type</code> (\u1edf c\u1ea3 hai c\u1ea5p \u0111\u1ed9 hi\u1ec7n th\u1ef1c c\u0169ng nh\u01b0 ch\u00ednh l\u1edbp \u0111\u00f3) t\u1ed3n t\u1ea1i l\u00e0 do vi\u1ec7c \"\u0103n gian\" khi tri\u1ec3n khai c\u00e1c l\u1edbp n\u00e0y.</li> </ul>"},{"location":"VI/#cac-moi-quan-he-cua-lop-con-subclass","title":"\u25b6 C\u00e1c m\u1ed1i quan h\u1ec7 c\u1ee7a l\u01a1p con (subclass)","text":"<p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; from collections import Hashable\n&gt;&gt;&gt; issubclass(list, object)\nTrue\n&gt;&gt;&gt; issubclass(object, Hashable)\nTrue\n&gt;&gt;&gt; issubclass(list, Hashable)\nFalse\n</code></pre></p> <p>M\u1ed1i quan h\u1ec7 gi\u1eefa c\u00e1c l\u1edbp con c\u00f3 t\u00ednh b\u1eafc c\u1ea7u kh\u00f4ng?(v\u00ed d\u1ee5, n\u1ebfu <code>A</code> l\u00e0 l\u1edbp con c\u1ee7a <code>B</code>, v\u00e0 <code>B</code> l\u00e0 l\u1edbp con c\u1ee7a <code>C</code>, v\u1eady <code>A</code> n\u00ean l\u00e0 l\u1edbp con c\u1ee7a <code>C</code>)</p>"},{"location":"VI/#ly-giai_2","title":"\ud83d\udca1 L\u00fd gi\u1ea3i:","text":"<ul> <li>Trong Python m\u1ed1i quan h\u1ec7 gi\u1eefa c\u00e1 l\u1edbp con kh\u00f4ng nh\u1ea5t thi\u1ebft ph\u1ea3i mang t\u00ednh b\u1eafc c\u1ea7u. B\u1ea5t c\u1ee9 ai c\u0169ng \u0111\u01b0\u1ee3c ph\u00e9p \u0111\u1ecbnh ngh\u0129a m\u1ed9t l\u1edbp <code>__subclasscheck__</code> ri\u00eang, tu\u1ef3 \u00fd trong m\u1ed9t si\u00eau l\u1edbp (metaclass).</li> <li>Khi <code>issubclass(cls, Hashable)</code> \u0111\u01b0\u1ee3c g\u1ecdi, n\u00f3 ch\u1ec9 t\u00ecm ph\u01b0\u01a1ng th\u1ee9c non-Falsey \"<code>__hash__</code>\"  trong <code>cls</code> ho\u1eb7c b\u1ea5t c\u01b0 th\u01b0 g\u00ec n\u00f3 th\u1eeba h\u01b0\u1edfng t\u1eeb \u0111\u00f3.</li> <li>B\u1edfi v\u00ec <code>object</code> l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 b\u0103m (hashable), c\u00f2n <code>list</code> thi kh\u00f4ng, n\u00ean n\u00f3 ph\u00e1 v\u1ee1 t\u00ednh b\u1eafc c\u1ea7u.</li> <li>Gi\u1ea3i th\u00edch chi ti\u1ebft c\u00f3 th\u1ec3 xem \u1edf \u0111\u00e2y.</li> </ul>"},{"location":"VI/#all-true-ation","title":"\u25b6 All-true-ation *","text":"<pre><code>&gt;&gt;&gt; all([True, True, True])\nTrue\n&gt;&gt;&gt; all([True, True, False])\nFalse\n\n&gt;&gt;&gt; all([])\nTrue\n&gt;&gt;&gt; all([[]])\nFalse\n&gt;&gt;&gt; all([[[]]])\nTrue\n</code></pre> <p>L\u00fd do v\u00ec sao m\u00e0 l\u00fac th\u00ec True m\u00e0 l\u00fac th\u00ec l\u1ea1i False</p>"},{"location":"VI/#giai-thich_13","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li> <p>H\u00e0m <code>all</code> t\u01b0\u01a1ng \u0111\u01b0\u01a1ng nh\u01b0 \u0111o\u1ea1n m\u00e3 d\u01b0\u1edbi</p> </li> <li> <p><code>py   def all(iterable):       for element in iterable:           if not element:               return False       return True</code></p> </li> <li> <p><code>all([])</code> tr\u1ea3 v\u1ec1 <code>True</code> b\u1edfi v\u00ec danh s\u00e1ch nay r\u1ed7ng. </p> </li> <li><code>all([[]])</code> tr\u1ea3 v\u1ec1 <code>False</code> b\u1edfi v\u00ec <code>not []</code> l\u00e0 <code>True</code> t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi <code>not False</code> b\u1edfi v\u00ec danh s\u00e1ch ph\u00eda trong r\u1ed7ng.</li> <li><code>all([[[]]])</code> v\u00e0 c\u00e1c bi\u1ebfn th\u1ec3 \u0111\u1ec7 quy cao h\u01a1n lu\u00f4n tr\u1ea3 v\u1ec1 <code>True</code> b\u1edfi v\u00ec <code>not [[]]</code>, <code>not [[[]]]</code>, t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi<code>not True</code>.</li> </ul>"},{"location":"VI/#dau-phay-la-lung","title":"\u25b6 D\u1ea5u ph\u1ea9y l\u1ea1 l\u00f9ng","text":"<p>K\u1ebft qu\u1ea3 (&lt; 3.6):</p> <pre><code>&gt;&gt;&gt; def f(x, y,):\n...     print(x, y)\n...\n&gt;&gt;&gt; def g(x=4, y=5,):\n...     print(x, y)\n...\n&gt;&gt;&gt; def h(x, **kwargs,):\n  File \"&lt;stdin&gt;\", line 1\n    def h(x, **kwargs,):\n                     ^\nSyntaxError: invalid syntax (L\u1ed7i c\u00fa ph\u00e1p kh\u00f4ng h\u1ee3p l\u1ec7)\n\n&gt;&gt;&gt; def h(*args,):\n  File \"&lt;stdin&gt;\", line 1\n    def h(*args,):\n                ^\nSyntaxError: invalid syntax (L\u1ed7i c\u00fa ph\u00e1p kh\u00f4ng h\u1ee3p l\u1ec7)\n</code></pre>"},{"location":"VI/#ly-giai_3","title":"\ud83d\udca1 L\u00fd gi\u1ea3i:","text":"<ul> <li>D\u1ea5u ph\u1ea9y n\u1eb1m \u1edf cu\u1ed1i danh s\u00e1ch c\u00e1c tham s\u1ed1 c\u1ee7a m\u1ed9t h\u00e0m kh\u00f4ng ph\u1ea3i bao gi\u1edd c\u0169ng h\u1ee3p l\u1ec7.</li> <li>Trong Python, danh s\u00e1ch tham s\u1ed1 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1edfi m\u1ed9t ph\u1ea7n c\u00e1c d\u1ea5u ph\u1ea9y n\u1eb1m ph\u00eda tr\u01b0\u1edbc v\u00e0 m\u1ed9t ph\u1ea7n c\u00e1c d\u1ea5y ph\u1ea9y n\u1eb1m ph\u00eda sau. \u0110i\u1ec1u nay m\u00e2u thu\u1eabn v\u1edbi c\u00e1c t\u00ecnh hu\u1ed1ng \u1edf \u0111\u00f3 m\u1ed9t d\u1ea5u ph\u1ea9y b\u1ecb m\u1eafc k\u1eb9t \u1edf gi\u1eefa danh s\u00e1ch, v\u00e0 ch\u1eb3ng c\u00f3 m\u1ed9t lu\u1eadt n\u00e0o ch\u1ea5p nh\u1eadn \u0111i\u1ec1u n\u00e0y c\u1ea3.</li> <li>Ch\u00fa \u00fd: V\u1ea5n \u0111\u1ec1 v\u1ec1 d\u00e2u ph\u1ea9y \u1edf cu\u1ed1i  \u0111\u00e3 \u0111\u01b0\u1ee3c s\u1eeda trong Python 3.6. Th\u1ea3o lu\u1eadn \u1edf \u0111\u00e2y cung c\u1ea5p nh\u1eefng c\u00e1ch dung kh\u00e1c nhau c\u1ee7a d\u00e2y ph\u1ea9y \u1edf cu\u1ed1i.</li> </ul>"},{"location":"VI/#strings-and-the-backslashes","title":"\u25b6 Strings and the backslashes","text":"<p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; print(\"\\\"\")\n\"\n\n&gt;&gt;&gt; print(r\"\\\"\")\n\\\"\n\n&gt;&gt;&gt; print(r\"\\\")\nFile \"&lt;stdin&gt;\", line 1\n    print(r\"\\\")\n              ^\nSyntaxError: EOL while scanning string literal\n\n&gt;&gt;&gt; r'\\'' == \"\\\\'\"\nTrue\n</code></pre></p>"},{"location":"VI/#giai-thich_14","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch","text":"<ul> <li>Trong m\u1ed9t string th\u00f4ng th\u01b0\u1eddng, d\u1ea5u xuy\u1ec7c ng\u01b0\u1ee3c \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 \"escape\" c\u00e1c k\u00ed t\u1ef1 c\u00f3 m\u1ed9t \u00fd ngh\u0129a \u0111\u1eb7c bi\u1ec7t (nh\u01b0 l\u00e0 d\u1ea5u tr\u00edch d\u1eabn \u0111\u01a1n, d\u1ea5u tr\u00edch d\u1eabn k\u00e9p, va ch\u00ednh d\u1ea5u xuy\u1ec7c ng\u01b0\u1ee3c).     <pre><code>&gt;&gt;&gt; \"wt\\\"f\"\n'wt\"f'\n</code></pre></li> <li>\u0110\u1ed1i v\u1edbi m\u1ed9t string th\u00f4 (raw string) (\u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh b\u1edfi ti\u1ebfp \u0111\u1ea7u ng\u1eef <code>r</code>), d\u1ea5u xuy\u1ec7c ng\u01b0\u1ee3c.     <pre><code>&gt;&gt;&gt; r'wt\\\"f' == 'wt\\\\\"f'\nTrue\n&gt;&gt;&gt; print(repr(r'wt\\\"f')\n'wt\\\\\"f'\n\n&gt;&gt;&gt; print(\"\\n\")\n\n&gt;&gt;&gt; print(r\"\\\\n\")\n'\\\\\\\\n'\n</code></pre></li> <li>C\u00f3 ngh\u0129a l\u00e0 khi m\u1ed9t tr\u00ecnh ph\u00e2n t\u00edch c\u00fa ph\u00e1p g\u1eb7p m\u1ed9t d\u1ea5u xuy\u1ec7c ng\u01b0\u1ee3c tron m\u1ed9t string th\u00f4, tr\u00ecnh n\u00e0y mong \u0111\u1ee3i m\u1ed9t k\u00ed t\u1ef1 kh\u00e1c ph\u00eda sau n\u00f3. V\u00e0 tron tr\u01b0\u1eddng h\u1ee3p c\u1ee7a ch\u00fang ta <code>print(r\"\\\")</code>, d\u1ea5u xuy\u1ec7c ng\u01b0\u1ee3c v\u00f4 hi\u1ec7u ho\u00e1 (escape) d\u1ea5u tr\u00edch d\u1eabn \u1edf \u0111u\u00f4i, \u0111\u1ec3 l\u1ea1i cho tr\u00ecnh th\u00f4ng d\u1ecbch x\u1eed l\u00fd m\u00e0 kh\u00f4ng c\u00f3 d\u1ea5u tr\u00edch d\u1eabn k\u1ebft th\u00fac (do \u0111\u00f3 g\u00e2y ra l\u1ed7i v\u1ec1 c\u00fa ph\u00e1p <code>SyntaxError</code>). \u0110\u00f3 l\u00e0 l\u00fd do t\u1ea1i  sao c\u00e1c d\u1ea5u xuy\u1ec7c ng\u01b0\u1ee3c kh\u00f4ng ch\u1ea1y \u0111\u01b0\u1ee3c khi \u1edf cu\u1ed1i m\u1ed9t string th\u00f4.</li> </ul>"},{"location":"VI/#not-knot","title":"\u25b6 not knot!","text":"<pre><code>x = True\ny = False\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; not x == y\nTrue\n&gt;&gt;&gt; x == not y\n  File \"&lt;input&gt;\", line 1\n    x == not y\n           ^\nSyntaxError: invalid syntax (L\u1ed7i v\u1ec1 c\u00fa ph\u00e1p)\n</code></pre></p>"},{"location":"VI/#giai-thich_15","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Th\u1ee9 t\u1ef1 \u01b0u ti\u00ean c\u1ee7a c\u00e1c ph\u00e9p to\u00e1n \u1ea3nh h\u01b0\u1edfng t\u01a1i c\u00e1ch m\u1ed9t c\u00e2u l\u1ec7nh \u0111\u01b0\u1ee3c th\u1ef1c thi, v\u00e0 ph\u00e9p <code>==</code> c\u00f3 \u0111\u1ed9 \u01b0u ti\u00ean cao h\u01a1n ph\u00e9p <code>not</code> trong Python.</li> <li>V\u00ec v\u1eady <code>not x == y</code> t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi <code>not (x == y)</code> r\u1ed3i t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi <code>not (True == False)</code> v\u00e0 k\u1ebft qu\u1ea3 l\u00e0<code>True</code>.</li> <li>Nh\u01b0ng <code>x == not y</code> g\u00e2y ra l\u1ed7i c\u00fa ph\u00e1p <code>SyntaxError</code> b\u1edfi v\u00ec Python ngh\u0129 r\u1eb1ng n\u00f3 s\u1ebd th\u1ef1c hi\u1ec7n <code>(x == not) y</code> ch\u1ee9 kh\u00f4ng ph\u1ea3i l\u00e0 <code>x == (not y)</code> do \u0111\u00f3 b\u1ea1n m\u1edbi g\u1eb7p l\u1ed7i v\u1ec1 c\u00fa ph\u00e1p.</li> <li>Tr\u00ecnh ph\u00e2n t\u00edch c\u00fa ph\u00e1p mong \u0111\u1ee3i <code>not</code> l\u00e0 m\u1ed9t ph\u1ea7n c\u1ee7a ph\u00e9p to\u00e1n <code>not in</code> (b\u1edfi v\u00ec c\u1ea3  <code>==</code> v\u00e0 <code>not in</code> c\u00f3 c\u00f9ng \u0111\u1ed9 \u01b0u ti\u00ean), nh\u01b0ng do trong tr\u01b0\u01a1ng h\u1ee3p c\u1ee7a ch\u00fang ta, tr\u00ecnh x\u1eed l\u00fd kh\u00f4ng t\u00ecm th\u1ea5y <code>in</code> \u0111\u1eb1ng sau <code>not</code>, n\u00ean n\u00f3 g\u00e2y ra <code>SyntaxError</code>.</li> </ul>"},{"location":"VI/#cac-chuoi-ruoi-trich-dan","title":"\u25b6 C\u00e1c chu\u1ed7i r\u01b0\u1ee1i tr\u00edch d\u1eabn","text":"<p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; print('wtfpython''')\nwtfpython\n&gt;&gt;&gt; print(\"wtfpython\"\"\")\nwtfpython\n&gt;&gt;&gt; # C\u00e1c c\u00e2u l\u1ec7nh ph\u00eda d\u01b0\u1edbi g\u1eb7p l\u1ed7i c\u00fa ph\u00e1p `SyntaxError` khi th\u1ef1c thi\n&gt;&gt;&gt; # print('''wtfpython')\n&gt;&gt;&gt; # print(\"\"\"wtfpython\")\n  File \"&lt;input&gt;\", line 3\n    print(\"\"\"wtfpython\")\n                        ^\nSyntaxError: EOF while scanning triple-quoted string literal (L\u1ed7i c\u00fa ph\u00e1p khi s\u1eed l\u00fd chu\u1ed7i \u0111\u01b0\u1ee3c bao b\u1edfi d\u1ea5u tr\u00edch d\u1eabn)\n</code></pre></p>"},{"location":"VI/#giai-thich_16","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Python h\u1ed7 tr\u1ee3 ng\u1ea7m gh\u00e9p chu\u1ed7i, v\u00ed d\u1ee5,   <pre><code>&gt;&gt;&gt; print(\"wtf\" \"python\")\nwtfpython\n&gt;&gt;&gt; print(\"wtf\" \"\") # or \"wtf\"\"\"\nwtf\n</code></pre></li> </ul>"},{"location":"VI/#va-la-cac-ki-hieu-phan-cach-chuoi-trong-python-chung-tao-ra-loi-syntaxerror-boi-vi-trinh-thong-dich-python-cho-oi-ki-hieu-phan-cach-ket-thuc-khi-no-do-tim-chuoi-ki-tu-trich-dan-co-ba-dau-nhay","title":"+ <code>'''</code> v\u00e0 <code>\"\"\"</code> l\u00e0 c\u00e1c k\u00ed hi\u1ec7u ph\u00e2n c\u00e1ch chu\u1ed7i trong Python, ch\u00fang t\u1ea1o ra l\u1ed7i SyntaxError b\u1edfi v\u00ec tr\u00ecnh th\u00f4ng d\u1ecbch Python ch\u01a1 \u0111\u1ee3i k\u00ed hi\u1ec7u ph\u00e2n c\u00e1ch k\u1ebft th\u00fac khi n\u00f3 d\u00f2 t\u00ecm chu\u1ed7i k\u00ed t\u1ef1 tr\u00edch d\u1eabn c\u00f3 ba d\u1ea5u nh\u00e1y .","text":""},{"location":"VI/#co-gi-sai-sai-voi-cac-gia-tri-luan-ly-booleans","title":"\u25b6 C\u00f3 g\u00ec sai sai v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb lu\u1eadn l\u00fd (booleans)?","text":"<p>1.</p> <pre><code># M\u1ed9t v\u00ed d\u1ee5 t\u00ednh to\u00e1n s\u1ed1 l\u01b0\u1ee3ng c\u00e1c gi\u00e1 tr\u1ecb lu\u1eadn l\u00fd v\u00e0\n# s\u00f4 nguy\u00ean trong m\u1ed9t danh s\u00e1ch l\u1eabn l\u1ed9n c\u00e1c ki\u1ec3u ph\u1ea7n t\u1eed kh\u00e1c nhau.\nmixed_list = [False, 1.0, \"some_string\", 3, True, [], False]\nintegers_found_so_far = 0\nbooleans_found_so_far = 0\n\nfor item in mixed_list:\n    if isinstance(item, int):\n        integers_found_so_far += 1\n    elif isinstance(item, bool):\n        booleans_found_so_far += 1\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; integers_found_so_far\n4\n&gt;&gt;&gt; booleans_found_so_far\n0\n</code></pre></p> <p>2. <pre><code>&gt;&gt;&gt; some_bool = True\n&gt;&gt;&gt; \"wtf\" * some_bool\n'wtf'\n&gt;&gt;&gt; some_bool = False\n&gt;&gt;&gt; \"wtf\" * some_bool\n''\n</code></pre></p> <p>3.</p> <pre><code>def tell_truth():\n    True = False\n    if True == False:\n        print(\"I have lost faith in truth!\")\n</code></pre> <p>K\u1ebft qu\u1ea3 (&lt; 3.x):</p> <pre><code>&gt;&gt;&gt; tell_truth()\nI have lost faith in truth!\n</code></pre>"},{"location":"VI/#ly-giai_4","title":"\ud83d\udca1 L\u00fd gi\u1ea3i:","text":"<ul> <li> <p><code>bool</code> l\u00e0 l\u01a1p con c\u1ee7a <code>int</code> trong Python</p> <pre><code>&gt;&gt;&gt; issubclass(bool, int)\nTrue\n&gt;&gt;&gt; issubclass(int, bool)\nFalse\n</code></pre> </li> <li> <p>V\u00e0 do v\u1eady, <code>True</code> v\u00e0 <code>False</code> l\u00e0 c\u00e1c hi\u1ec7n th\u1ef1c (instances) c\u1ee7a <code>int</code> <pre><code>&gt;&gt;&gt; isinstance(True, int)\nTrue\n&gt;&gt;&gt; isinstance(False, int)\nTrue\n</code></pre></p> </li> <li> <p>Gi\u00e1 tr\u1ecb d\u1ea1ng s\u1ed1 nguy\u00ean c\u1ee7a <code>True</code> l\u00e0 <code>1</code> v\u00e0 c\u1ee7a <code>False</code> l\u00e0 <code>0</code>.   <pre><code>&gt;&gt;&gt; int(True)\n1\n&gt;&gt;&gt; int(False)\n0\n</code></pre></p> </li> <li> <p>Xem tr\u00ean [c\u00e2u tr\u1ea3 l\u1eddi] tr\u00ean StackOverflow(https://stackoverflow.com/a/8169049/4354153) \u0111\u1ec3 bi\u1ebft l\u00fd do.</p> </li> <li> <p>L\u00fac \u0111\u1ea7u, Python kh\u00f4ng c\u00f3 ki\u1ec3u <code>bool</code> (ng\u01b0\u1eddi ta dung 0 cho false v\u00e0 c\u00e1c gi\u00e1 tr\u1ecb kh\u00e1c kh\u00f4ng nh\u01b0 1 cho true).  <code>True</code>, <code>False</code>, va ki\u1ec3u <code>bool</code> \u0111\u01b0\u1ee3c b\u1ed5 sung trong c\u00e1 phi\u00ean b\u1ea3n 2.x, nh\u01b0ng vi l\u00fd do h\u1ed7 tr\u1ee3 t\u01b0\u01a1ng th\u00edch ng\u01b0\u1ee3c (backward compatibility), <code>True</code> v\u00e0 <code>False</code> kh\u00f4ng th\u1ec3 tr\u01a1 th\u00e0nh c\u00e1c h\u0103ng s\u1ed1 (constants). Ch\u00fang ch\u1ec9 l\u00e0 c\u00e1c bi\u1ebfn \u0111\u01b0\u1ee3c t\u00edch h\u1ee3p s\u1eb5n trong Python, v\u00e0 ta c\u00f3 th\u1ec3 g\u00e1n l\u1ea1i gi\u00e1 tr\u1ecb cho ch\u00fang.</p> </li> </ul>"},{"location":"VI/#python-3-khong-ho-tro-tuong-thich-nguoc-va-do-vay-cac-oan-ma-cuoi-cung-khong-chay-uoc-tren-python-3x","title":"* Python 3 kh\u00f4ng h\u1ed7 tr\u1ee3 t\u01b0\u01a1ng th\u00edch ng\u01b0\u1ee3c, v\u00e0 do v\u1eady c\u00e1c \u0111o\u1ea1n m\u00e3 cu\u1ed1i cung kh\u00f4ng ch\u1ea1y \u0111\u01b0\u1ee3c tr\u00ean  Python 3.x!","text":""},{"location":"VI/#class-attributes-and-instance-attributes","title":"\u25b6 Class attributes and instance attributes","text":"<p>1. <pre><code>class A:\n    x = 1\n\nclass B(A):\n    pass\n\nclass C(A):\n    pass\n</code></pre></p> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; A.x, B.x, C.x\n(1, 1, 1)\n&gt;&gt;&gt; B.x = 2\n&gt;&gt;&gt; A.x, B.x, C.x\n(1, 2, 1)\n&gt;&gt;&gt; A.x = 3\n&gt;&gt;&gt; A.x, B.x, C.x # C.x thay \u0111\u1ed5i, nh\u01b0ng B.x kh\u00f4ng thay \u0111\u1ed5i\n(3, 2, 3)\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.x, A.x\n(3, 3)\n&gt;&gt;&gt; a.x += 1\n&gt;&gt;&gt; a.x, A.x\n(4, 3)\n</code></pre></p> <p>2. <pre><code>class SomeClass:\n    some_var = 15\n    some_list = [5]\n    another_list = [5]\n    def __init__(self, x):\n        self.some_var = x + 1\n        self.some_list = self.some_list + [x]\n        self.another_list += [x]\n</code></pre></p> <p>K\u1ebft qu\u1ea3:</p> <pre><code>&gt;&gt;&gt; some_obj = SomeClass(420)\n&gt;&gt;&gt; some_obj.some_list\n[5, 420]\n&gt;&gt;&gt; some_obj.another_list\n[5, 420]\n&gt;&gt;&gt; another_obj = SomeClass(111)\n&gt;&gt;&gt; another_obj.some_list\n[5, 111]\n&gt;&gt;&gt; another_obj.another_list\n[5, 420, 111]\n&gt;&gt;&gt; another_obj.another_list is SomeClass.another_list\nTrue\n&gt;&gt;&gt; another_obj.another_list is some_obj.another_list\nTrue\n</code></pre>"},{"location":"VI/#giai-thich_17","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>C\u00e1c bi\u1ebfn thu\u1ed9c v\u1ec1 l\u1edbp v\u00e0 c\u00e1c bi\u1ebfn thu\u1ed9c v\u1ec1 c\u00e1c hi\u1ec7n th\u1ef1c c\u1ee7a l\u01a1p (class instances) \u0111\u01b0\u1ee3c x\u1eed l\u00fd n\u1ed9i t\u1ea1i nh\u01b0 l\u00e0 c\u00e1c t\u1eeb \u0111i\u1ec3n c\u1ee7a m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng l\u1edbp. N\u1ebfu m\u1ed9t bi\u1ebfn kh\u00f4ng n\u1eb1m trong t\u1eeb \u0111i\u1ec3n c\u1ee7a l\u1edbp hi\u1ec7n h\u00e0nh, n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c t\u00ecm trong c\u00e1c l\u1edbp cha. </li> <li>Ph\u00e9p <code>+=</code> thay \u0111\u1ed5i \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 bi\u1ebfn \u0111\u1ed5i (mutable) t\u1ea1i ch\u1ed7 m\u00e0 kh\u00f4n c\u1ea7n ph\u1ea3i t\u1ea1o m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng m\u1edbi. V\u00ec v\u1eady thay \u0111\u1ed5i thu\u1ed9c t\u00ednh cua m\u1ed9t hi\u1ec7n th\u1ef1c \u1ea3nh h\u01b0\u1edfng t\u1edbi thu\u1ed9c t\u00ednh c\u1ee7a c\u00e1c hi\u1ec7n th\u1ef1c kh\u00e1c v\u00e0 thu\u1ed9c t\u00ednh l\u1edbp.</li> </ul>"},{"location":"VI/#non-reflexive-class-method","title":"\u25b6 Non-reflexive class method *","text":"<pre><code>class SomeClass:\n        def instance_method(self):\n                pass\n\n        @classmethod\n        def class_method(cls):\n                pass\n</code></pre> <p>K\u1ebft qu\u1ea3:</p> <pre><code>&gt;&gt;&gt; SomeClass.instance_method is SomeClass.instance_method\nTrue\n&gt;&gt;&gt; SomeClass.class_method is SomeClass.class_method\nFalse\n&gt;&gt;&gt; id(SomeClass.class_method) == id(SomeClass.class_method)\nTrue\n</code></pre>"},{"location":"VI/#giai-thich_18","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>L\u00fd do l\u00e0 v\u00ec <code>SomeClass.class_method is SomeClass.class_method</code> tr\u1ea3 v\u1ec1 <code>False</code> l\u00e0 b\u1edfi v\u00ec decorator <code>@classmethod</code>. </li> </ul> <pre><code>&gt;&gt;&gt; SomeClass.instance_method\n&lt;function __main__.SomeClass.instance_method(self)&gt;\n&gt;&gt;&gt; SomeClass.class_method\n&lt;bound method SomeClass.class_method of &lt;class '__main__.SomeClass'&gt;\n</code></pre> <p>M\u1ed7i l\u1ea7n truy c\u1eadp t\u1edbi <code>SomeClass.class_method</code> l\u00e0 l\u1ea1i c\u00f3 m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c b\u1ecdc m\u1edbi sinh ra (new bound method)  -  <code>id(SomeClass.class_method) == id(SomeClass.class_method)</code> tr\u1ea3 v\u1ec1 <code>True</code> b\u1edfi v\u00ec qu\u00e1 tr\u00ecnh c\u1ea5p ph\u00e1t b\u1ed9 nh\u1edb cho <code>class_method</code> l\u1ea7n th\u1ee9 hai x\u1ea3y ra t\u1ea1i cung m\u1ed9t v\u00ed tr\u00ed v\u1edbi qu\u00e1 tr\u00ecnh gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb \u0111\u1ea7u ti\u00ean (Xem l\u1ea1i \"Deep Down, we're all the same example\" \u0111\u1ec3 c\u00f3 l\u1eddi gi\u1ea3i th\u00edch r\u00f5 h\u01a1n). </p>"},{"location":"VI/#yielding-none","title":"\u25b6 yielding None","text":"<pre><code>some_iterable = ('a', 'b')\n\ndef some_func(val):\n    return \"something\"\n</code></pre> <p>K\u1ebft qu\u1ea3 (&lt;= 3.7.x):</p> <pre><code>&gt;&gt;&gt; [x for x in some_iterable]\n['a', 'b']\n&gt;&gt;&gt; [(yield x) for x in some_iterable]\n&lt;generator object &lt;listcomp&gt; at 0x7f70b0a4ad58&gt;\n&gt;&gt;&gt; list([(yield x) for x in some_iterable])\n['a', 'b']\n&gt;&gt;&gt; list((yield x) for x in some_iterable)\n['a', None, 'b', None]\n&gt;&gt;&gt; list(some_func((yield x)) for x in some_iterable)\n['a', 'something', 'b', 'something']\n</code></pre>"},{"location":"VI/#giai-thich_19","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>\u0110\u00e2y l\u00e0 m\u1ed9t bug t\u1ed3n t\u1ea1i khi CPython x\u1eed l\u00fd <code>yield</code> trong c\u00e1c generators v\u00e0 comprehensions.</li> <li>B\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o th\u00eam v\u1ec1 l\u1ed7i n\u00e0y t\u1ea1i \u0111\u00e2y: https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions</li> <li>B\u00e1o c\u00e1o v\u1ec1 bug n\u00e0y: http://bugs.python.org/issue10544</li> <li>Theo Python 3.8+  <code>yield</code> kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p n\u1eb1m b\u00ean trong  list comprehension v\u00e0 n\u1ebfu b\u1ea1n l\u00e0m nh\u01b0 v\u1eady s\u1ebd t\u1ea1o ra l\u1ed7i c\u00fa ph\u00e1p <code>SyntaxError</code>.</li> </ul>"},{"location":"VI/#yielding-from-return","title":"\u25b6 Yielding from... return! *","text":"<p>1.</p> <pre><code>def some_func(x):\n    if x == 3:\n        return [\"wtf\"]\n    else:\n        yield from range(x)\n</code></pre> <p>K\u1ebft qu\u1ea3 (&gt; 3.3):</p> <pre><code>&gt;&gt;&gt; list(some_func(3))\n[]\n</code></pre> <p>\u0110\u00e1ng l\u1ebd ph\u1ea3i hi\u1ec3n th\u1ecb <code>\"wtf\"</code> ch\u1ee9 nh\u1ec9? C\u00f3 ph\u1ea3i l\u00e0 do <code>yield from</code>? C\u00f9ng t\u00ecm hi\u1ec3u th\u00eam n\u00e0o,</p> <p>2.</p> <pre><code>def some_func(x):\n    if x == 3:\n        return [\"wtf\"]\n    else:\n        for i in range(x):\n          yield i\n</code></pre> <p>K\u1ebft qu\u1ea3:</p> <pre><code>&gt;&gt;&gt; list(some_func(3))\n[]\n</code></pre> <p>V\u1eabn l\u1ea1i kh\u00f4ng in ra <code>\"wtf\"</code> .</p>"},{"location":"VI/#giai-thich_20","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li> <p>T\u1eeb Python 3.3 tr\u1edf \u0111i, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng <code>return</code>  v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb b\u00ean trong c\u00e1c generators (Xem th\u00eam PEP380). C\u00e1c t\u00e0i li\u1ec7u ch\u00ednh th\u1ee9c c\u0169ng n\u00f3i nh\u01b0 v\u1eady,</p> <p>\"... <code>return expr</code> tron m\u1ed9t generator t\u1ea1o ra ngo\u1ea1i l\u1ec7 <code>StopIteration(expr)</code> khi tho\u00e1t ra t\u1eeb generator.\"</p> </li> <li> <p>Trong tr\u01b0\u1eddng h\u1ee3p <code>some_func(3)</code>, ngo\u1ea1i l\u1ec7 <code>StopIteration</code> \u0111\u01b0\u1ee3c kh\u1edfi l\u00ean ngay t\u1eeb \u0111\u1ea7u b\u1edfi v\u00ec c\u00e2u l\u1ec7nh <code>return</code>. Ngo\u1ea1i l\u1ec7 <code>StopIteration</code> \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng b\u1eaft l\u1ea1i trong d\u00f2ng l\u1ec7nh bao <code>list(...)</code> v\u00e0 trong v\u00f2ng l\u1eb7p <code>for</code>. Do \u0111\u00f3, c\u1ea3 hai \u0111o\u1ea1n m\u00e3 tr\u00ean \u0111\u1ec1u tr\u1ea3 v\u1ec1 m\u1ed9t danh s\u00e1ch r\u1ed7ng.</p> </li> <li> <p>\u0110\u1ec3 c\u00f3 \u0111\u01b0\u1ee3c <code>[\"wtf\"]</code> t\u1eeb generator <code>some_func</code> b\u1ea1n c\u1ea7n b\u1eaft ngo\u1ea1i l\u1ec7 <code>StopIteration</code>,</p> </li> </ul> <pre><code>try:\n    next(some_func(3))\nexcept StopIteration as e:\n    some_string = e.value\n</code></pre> <pre><code>&gt;&gt;&gt; some_string\n[\"wtf\"]\n</code></pre>"},{"location":"VI/#tinh-phan-xa-cua-nan","title":"\u25b6 T\u00ednh ph\u1ea3n x\u1ea1 c\u1ee7a Nan *","text":"<p>1.</p> <pre><code>a = float('inf')\nb = float('nan')\nc = float('-iNf')  # C\u00e1c strings n\u00e0y kh\u00f4ng ph\u00e2n bi\u1ec7t hoa hay th\u01b0\u1eddng\nd = float('nan')\n</code></pre> <p>K\u1ebft qu\u1ea3:</p> <pre><code>&gt;&gt;&gt; a\ninf\n&gt;&gt;&gt; b\nnan\n&gt;&gt;&gt; c\n-inf\n&gt;&gt;&gt; float('some_other_string')\nValueError: could not convert string to float: some_other_string (L\u1ed7i gi\u00e1 tr\u1ecb: Kh\u00f4ng th\u1ec3 chuy\u1ec3n \u0111\u1ed5i t\u1eeb string sang float)\n&gt;&gt;&gt; a == -c # inf==inf\nTrue\n&gt;&gt;&gt; None == None # None == None\nTrue\n&gt;&gt;&gt; b == d # nh\u01b0ng nan!=nan\nFalse\n&gt;&gt;&gt; 50 / a\n0.0\n&gt;&gt;&gt; a / a\nnan\n&gt;&gt;&gt; 23 + b\nnan\n</code></pre> <p>2.</p> <pre><code>&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; y = x / x\n&gt;&gt;&gt; y is y # \u0111\u1ecbnh danh gi\u1ed1ng nhau (c\u00f9ng tr\u1ecf v\u1ec1 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng)\nTrue\n&gt;&gt;&gt; y == y # G\u00eda tr\u1ecb l\u1ea1i kh\u00f4ng b\u1eb1ng nhau\nFalse\n&gt;&gt;&gt; [y] == [y] # Gi\u00e1 tr\u1ecb b\u1eb1ng nhau khi n\u1eb1m \u1edf trong m\u1ed9t list\nTrue\n</code></pre>"},{"location":"VI/#giai-thich_21","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li> <p><code>'inf'</code> v\u00e0 <code>'nan'</code> l\u00e0 c\u00e1c strings \u0111\u1eb7c bi\u1ec7t (kh\u00f4ng ph\u00e2n bi\u1ec7t hoa th\u01b0\u1eddng), khi \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed5i sang ki\u1ec3u <code>float</code> s\u1ebd t\u01b0\u01a1ng \u1ee9ng bi\u1ec3u di\u1ec5n cho gi\u00e1 tr\u1ecb v\u00f4 h\u1ea1n \"infinity\" hay kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t s\u1ed1 \"not a number\".</p> </li> <li> <p>Theo chu\u1ea9n c\u1ee7a IEEE th\u00ec <code>NaN != NaN</code>, tu\u00e2n theo quy t\u1eafc tr\u00ean s\u1ebd ph\u00e1 v\u1ee1 gi\u1ea3 \u0111\u1ecbnh v\u1ec1 t\u00ednh t\u01b0\u01a1ng ph\u1ea3n c\u1ee7a m\u1ed9t ph\u1ea7n t\u1eed trong m\u1ed9t t\u1eadp trong Python v\u00ed d\u1ee5. n\u1ebfu <code>x</code> l\u00e0 m\u1ed9t ph\u1ea7n t\u1eed c\u1ee7a m\u1ed9t t\u1eadp <code>list</code>, c\u00e1c ph\u00e9p to\u00e1n tr\u00ean c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a t\u1eadp nh\u01b0 l\u00e0 so s\u00e1nh s\u1ebd d\u1ef1a tr\u00ean gi\u1ea3i \u0111\u1ecbnh r\u1eb1ng <code>x == x</code>.  Do gi\u1ea3 \u0111\u1ecbnh n\u00e0y n\u00ean \u0111\u1ecbnh danh \u0111\u01b0\u1ee3c so s\u00e1nh \u0111\u1ea7u ti\u00ean (do nhanh h\u01a1n) khi so s\u00e1nh hai ph\u1ea7n t\u1eed, v\u00e0 c\u00e1c gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c so s\u00e1nh ch\u1ec9 khi c\u00e1c \u0111\u1ecbnh danh kh\u00f4ng kh\u1edbp. V\u00ed d\u1ee5 sau s\u1ebd gi\u00fap b\u1ea1n d\u1ec5 hi\u1ec3u h\u01a1n   <pre><code>&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; x == x, [x] == [x]\n(False, True)\n&gt;&gt;&gt; y = float('nan')\n&gt;&gt;&gt; y == y, [y] == [y]\n(False, True)\n&gt;&gt;&gt; x == y, [x] == [y]\n(False, False)\n</code></pre></p> </li> </ul> <p>Do c\u00e1c \u0111\u1ecbnh danh c\u1ee7a <code>x</code> v\u00e0 <code>y</code> kh\u00e1c nhau, do \u0111\u00f3 gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang s\u1ebd \u0111\u01b0\u1ee3c so s\u00e1nh, m\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang kh\u00e1c nhau trong v\u00ed d\u1ee5 n\u00e0y; n\u00ean k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 l\u00e0 <code>False</code>. C\u1ee5 th\u1ec3 h\u01a1n, theo ti\u00eau chu\u1ea9n c\u1ee7a IEEE th\u00ec <code>x</code> f va <code>y</code> \u0111\u1ec3u c\u00f3 gi\u00e1 tr\u1ecb l\u00e0 <code>nan</code> khi \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed5i qua float, <code>NaN != NaN</code> n\u00ean <code>x != y</code>, nh\u01b0ng khi \u0111\u1eb7t trong m\u1ed9t list th\u00ec \u0111\u1ecbnh danh s\u1ebd \u0111c so s\u00e1nh tr\u01b0\u1edbc n\u00ean <code>[x] == [y]</code></p> <ul> <li>\u0110\u1ecdc th\u00eam: Reflexivity, and other pillars of civilization</li> </ul>"},{"location":"VI/#mutating-the-immutable","title":"\u25b6 Mutating the immutable!","text":"<p>V\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y c\u00f3 v\u1ebb t\u1ea7m th\u01b0\u1eddng n\u1ebfu b\u1ea1n hi\u1ec3u c\u00e1ch c\u00e1c tham chi\u1ebfu (references) ho\u1ea1t \u0111\u00f4ng trong Python. <pre><code>some_tuple = (\"A\", \"tuple\", \"with\", \"values\")\nanother_tuple = ([1, 2], [3, 4], [5, 6])\n</code></pre></p> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; some_tuple[2] = \"change this\"\nTypeError: 'tuple' object does not support item assignment (L\u1ed7i v\u1ec1 ki\u1ec3u: \u0111\u1ed1i t\u01b0\u1ee3ng 'tuple' kh\u00f4ng h\u1ed7 tr\u1ee3 ph\u00e9p g\u00e1n ph\u1ea7n t\u1eed)\n&gt;&gt;&gt; another_tuple[2].append(1000) # D\u00f2ng n\u00e0y kh\u00f4ng b\u1ecb l\u1ed7i\n&gt;&gt;&gt; another_tuple\n([1, 2], [3, 4], [5, 6, 1000])\n&gt;&gt;&gt; another_tuple[2] += [99, 999]\nTypeError: 'tuple' object does not support item assignment (L\u1ed7i v\u1ec1 ki\u1ec3u: \u0111\u1ed1i t\u01b0\u1ee3ng 'tuple' kh\u00f4ng h\u1ed7 tr\u1ee3 ph\u00e9p g\u00e1n ph\u1ea7n t\u1eed)\n&gt;&gt;&gt; another_tuple\n([1, 2], [3, 4], [5, 6, 1000, 99, 999])\n</code></pre></p> <p>T\u00f4i \u0111\u00e3 ngh\u0129 r\u1eb1ng c\u00e1c tuples th\u00ec b\u1ea5t bi\u1ebfn (immutable) ...</p>"},{"location":"VI/#giai-thich_22","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li> <p>Tr\u00edch t\u1eeb https://docs.python.org/2/reference/datamodel.html</p> <p>C\u00e1c chu\u1ed7i b\u1ea5t bi\u1ebfn     M\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng ki\u1ec3u chu\u1ed7i b\u1ea5t bi\u1ebfn kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a n\u00f3 sau khi \u0111\u01b0\u1ee3c t\u1ea1o. (N\u1ebfu \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y ch\u1ee9a c\u00e1c tham chi\u1ebfu t\u1edbi c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng kh\u00e1c, nh\u1eefng \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 thay \u0111\u1ed5i \u0111\u01b0\u1ee3c; tuy th\u1ebf, t\u1eadp h\u1ee3p c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c tr\u1ecf tr\u1ef1c ti\u1ebfp b\u1edfi m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ea5t bi\u1ebfn kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i .)</p> </li> <li> <p>To\u00e1n t\u1eed <code>+=</code> thay \u0111\u1ed5i list t\u1ea1i ch\u1ed7. Ph\u00e9p g\u00e1n ph\u1ea7n t\u1eed kh\u00f4ng th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c, nh\u01b0ng khi ngo\u1ea1i l\u1ec7 x\u1ea3y ra, ph\u1ea7n t\u1eed \u0111\u00e3 \u0111\u01b0\u1ee3c thay \u0111\u1ed5i ngay t\u1ea1i ch\u1ed7.</p> </li> </ul>"},{"location":"VI/#the-disappearing-variable-from-outer-scope","title":"\u25b6 The disappearing variable from outer scope","text":"<pre><code>e = 7\ntry:\n    raise Exception()\nexcept Exception as e:\n    pass\n</code></pre> <p>K\u1ebft qu\u1ea3 (Python 2.x): <pre><code>&gt;&gt;&gt; print(e)\n# Kh\u00f4ng in ra k\u1ebft qu\u1ea3 n\u00e0o c\u1ea3\n</code></pre></p> <p>K\u1ebft qu\u1ea3 (Python 3.x): <pre><code>&gt;&gt;&gt; print(e)\nNameError: name 'e' is not defined (L\u1ed7i t\u00ean bi\u1ebfn kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a)\n</code></pre></p>"},{"location":"VI/#giai-thich_23","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Source: https://docs.python.org/3/reference/compound_stmts.html#except</li> </ul> <p>Khi m\u1ed9t ngo\u1ea1i l\u1ec7 \u0111\u01b0\u1ee3c g\u00e1n s\u1eed d\u1ee5ng \u0111\u00edch \u0111\u01b0\u1ee3c \u0111\u1ecbnh nghia b\u1edfi <code>as</code>, ngo\u1ea1i l\u1ec7 n\u00e0y \u0111\u01b0\u1ee3c d\u1ecdn d\u1eb9p \u1edf cu\u1ed1i c\u00e2u <code>except</code>. Nh\u01b0 v\u1eady th\u00ec</p> <pre><code>except E as N:\n    foo\n</code></pre> <p>s\u1ebd \u0111\u01b0\u1ee3c hi\u1ec3u nh\u01b0 sau</p> <pre><code>except E as N:\n    try:\n        foo\n    finally:\n        del N\n</code></pre> <pre><code>\u0110i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a la ngo\u1ea1i l\u1ec7 ph\u1ea3i \u0111\u01b0\u1ee3c g\u00e1n cho m\u1ed9t c\u00e1i t\u00ean kh\u00e1c \u0111\u1ec3 ta c\u00f3 th\u1ec3 t\u00ecm th\u1ea5y n\u00f3 sau c\u00e2u except. C\u00e1c ngo\u1ea1i l\u1ec7 \u0111\u01b0\u1ee3c d\u1ecdn d\u1eb9p b\u1edfi v\u00ec v\u1edbi truy l\u1ed7i (traceback) \u0111\u01b0\u1ee3c g\u00e1n cho ch\u00fang, ch\u00fang h\u00ecnh th\u00e0nh n\u00ean m\u1ed9t v\u00f2ng tham chi\u1ebfu b\u00ean trong khung ng\u0103n x\u1ebfp (stack frame), gi\u1eef t\u1ea5t c\u1ea3 c\u00e1c bi\u1ebfn c\u1ee5c b\u1ed9 kh\u00f4ng b\u1ecb xo\u00e1 \u0111i cho \u0111\u1ebfn khi vi\u1ec7c thu th\u1eadp r\u00e1c ti\u1ebfp theo ti\u1ebfp di\u1ec5n.\n</code></pre> <ul> <li> <p>C\u00e1c c\u00e2u n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c t\u00ednh ph\u1ea1m vi trong Python. M\u1ecdi th\u01b0 trong v\u00ed d\u1ee5 nay \u0111\u1ec1u n\u00e0m trong c\u00f9ng m\u1ed9t ph\u1ea1m vi, v\u00e0 bi\u1ebfn <code>e</code> b\u1ecb xo\u00e1 \u0111i b\u1edfi v\u00ec ngo\u1ea1i l\u1ec7 <code>except</code>. \u0110i\u1ec1u t\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady kh\u00f4ng \u0111\u00fang v\u1edbi c\u00e1c h\u00e0m c\u00f3 c\u00e1c n\u1ed9i ph\u1ea1m vi (inner-scopes) ri\u00eang bi\u1ec7t. V\u00ed d\u1ee5 sau s\u1ebd cho ta th\u1ea5y:</p> <pre><code>def f(x):\n    del(x)\n    print(x)\n\nx = 5\ny = [5, 4, 3]\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt;f(x)\nUnboundLocalError: local variable 'x' referenced before assignment\n&gt;&gt;&gt;f(y)\nUnboundLocalError: local variable 'x' referenced before assignment\n&gt;&gt;&gt; x\n5\n&gt;&gt;&gt; y\n[5, 4, 3]\n</code></pre></p> </li> <li> <p>Trong Python 2.x, bi\u1ebfn <code>e</code> \u0111\u01b0\u1ee3c g\u00e1n cho m\u1ed9t hi\u1ec7n th\u1ef1c <code>Exception()</code>, khi b\u1ea1n in ra bi\u1ebfn n\u00e0y, n\u00f3 kh\u00f4ng hi\u1ec3n th\u1ecb g\u00ec c\u1ea3</p> <p>K\u1ebft qu\u1ea3 (Python 2.x): <pre><code>&gt;&gt;&gt; e\nException()\n&gt;&gt;&gt; print e\n# Kh\u00f4ng in ra g\u00ec c\u1ea3!\n</code></pre></p> </li> </ul>"},{"location":"VI/#the-mysterious-key-type-conversion","title":"\u25b6 The mysterious key type conversion","text":"<pre><code>class SomeClass(str):\n    pass\n\nsome_dict = {'s': 42}\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; type(list(some_dict.keys())[0])\nstr\n&gt;&gt;&gt; s = SomeClass('s')\n&gt;&gt;&gt; some_dict[s] = 40\n&gt;&gt;&gt; some_dict # Gi\u00e1 tr\u1ecb mong \u0111\u1ee3i: Hai c\u1eb7p kho\u00e1 v\u00e0 gi\u00e1 tr\u1ecb kh\u00e1c nhau\n{'s': 40}\n&gt;&gt;&gt; type(list(some_dict.keys())[0])\nstr\n</code></pre></p>"},{"location":"VI/#giai-thich_24","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>C\u1ea3 \u0111\u1ed1i t\u01b0\u1ee3ng <code>s</code> v\u00e0 string <code>\"s\"</code> khi \u0111\u01b0\u1ee3c b\u0103m (hash) s\u1ebd cho ra c\u00f9ng m\u1ed9t gi\u00e1 tr\u1ecb \u1edfi <code>SomeClass</code> th\u1eeba k\u1ebf ph\u01b0\u01a1ng th\u1ee9c <code>__hash__</code> c\u1ee7a l\u1edbp <code>str</code>.</li> <li><code>SomeClass(\"s\") == \"s\"</code>  b\u1eb1ng <code>True</code> b\u1edfi v\u00ec <code>SomeClass</code> c\u0169ng th\u1eeba k\u1ebf ph\u01b0\u01a1ng th\u1ee9c <code>__eq__</code> t\u1eeb l\u1edbp <code>str</code> .</li> <li>B\u1edfi v\u00ec c\u1ea3 hai \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y khi b\u0103m cho ra c\u00f9ng gi\u00e1 tr\u1ecb v\u00e0 b\u1eb1ng nhau n\u00ean ch\u00fang \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n b\u1edfi c\u00f9ng m\u1ed9t kho\u00e1 trong t\u1eeb \u0111i\u1ec3n.</li> <li>\u0110\u1ec3 c\u00f3 \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 nh\u01b0 mong mu\u1ed1n v\u1edbi hai c\u1eb7p gi\u00e1 kho\u00e1 v\u00e0 gi\u00e1 tr\u1ecb kh\u00e1c nhau, ch\u00fang ta c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a ph\u01b0\u01a1ng th\u1ee9c <code>__eq__</code> trong <code>SomeClass</code></li> </ul> <pre><code>class SomeClass(str):\n  def __eq__(self, other):\n      return (\n          type(self) is SomeClass\n          and type(other) is SomeClass\n          and super().__eq__(other)\n      )\n\n  # Khi ch\u00fang ta ta \u0111\u1ecbnh ngh\u0129a m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c __eq__ tu\u1ef3 ch\u1ec9nh, Python t\u1ef1 \u0111\u1ed9ng d\u1eebng vi\u1ec7c th\u1eeba k\u1ebf\n  # v\u00e0 ch\u00fang ta c\u0169ng c\u1ea7n \u0111\u1ecbnh ngh\u0129a ph\u01b0\u01a1n th\u1ee9c __hash__ ,\n  __hash__ = str.__hash__\n\nsome_dict = {'s':42}\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; s = SomeClass('s')\n&gt;&gt;&gt; some_dict[s] = 40\n&gt;&gt;&gt; some_dict\n{'s': 40, 's': 42}\n&gt;&gt;&gt; keys = list(some_dict.keys())\n&gt;&gt;&gt; type(keys[0]), type(keys[1])\n(__main__.SomeClass, str)\n</code></pre></p>"},{"location":"VI/#lets-see-if-you-can-guess-this","title":"\u25b6 Let's see if you can guess this?","text":"<pre><code>a, b = a[b] = {}, 5\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; a\n{5: ({...}, 5)}\n</code></pre></p>"},{"location":"VI/#giai-thich_25","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li> <p>D\u1ef1a tr\u00ean ngu\u1ed3n tham kh\u1ea3o ng\u00f4n ng\u1eef Python, c\u00e1c c\u00e2u l\u1ec7nh g\u00e1n s\u1ebd c\u00f3 c\u00e1ch khai b\u00e1o nh\u01b0 sau   <pre><code>(target_list \"=\")+ (expression_list | yield_expression)\n</code></pre>   v\u00e0 M\u1ed9t c\u00e2u l\u1ec7nh g\u00e1n \u0111\u00e1nh gi\u00e1 m\u1ed9t danh s\u00e1ch bi\u1ec3u di\u1ec5n(nh\u1edb r\u1eb1ng \u0111\u00e2y c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t bi\u1ec3u di\u1ec5n \u0111\u01a1n l\u1ebb ho\u1eb7c m\u1ed9t danh s\u00e1ch c\u00e1c bi\u1ec3u di\u1ec5n \u0111\u01b0\u1ee3c ph\u00e2n c\u00e1ch b\u1edfi d\u1ea5u ph\u1ea9y, \u0111\u1ed1i v\u1edbi tr\u01b0\u1eddng h\u1ee3p ph\u00eda sau th\u00ec sainh ra m\u1ed9t tuple) v\u00e0 g\u00e1n \u0111\u1ed1i t\u01b0\u1ee3ng k\u1ebft qu\u1ea3 \u0111\u01a1n cho m\u1ed7i m\u1ed9t danh s\u00e1ch m\u1ee5c ti\u00eau, t\u1eeb tr\u00e1i sang ph\u1ea3i. </p> </li> <li> <p>To\u00e1n t\u1eed <code>+</code> trong <code>(target_list \"=\")+</code> c\u00f3 ngh\u0129a l\u00e0 c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t hay nhi\u1ec1u danh s\u00e1ch m\u1ee5c ti\u00eau (target lists). Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, c\u00e1c danh s\u00e1ch m\u1ee5c ti\u00eau l\u00e0 <code>a, b</code> v\u00e0 <code>a[b]</code> (ch\u00fa \u00fd l\u00e0 danh s\u00e1ch bi\u1ec3u di\u1ec5n ch\u1ec9 c\u00f3 ch\u00ednh x\u00e1c m\u1ed9t, trong tr\u01b0\u1eddng h\u1ee3p c\u1ee7a ch\u00fang ta l\u00e0 <code>{}, 5</code>)</p> </li> <li> <p>Sau khi bi\u1ec3u di\u1ec5n danh s\u00e1ch \u0111\u01b0\u1ee3c \u0111\u00e1nh gi\u00e1, gi\u00e1 tr\u1ecb c\u1ee7a n\u00f3 \u0111\u01b0\u1ee3c gi\u1ea3i n\u00e9n th\u00e0nh c\u00e1c danh s\u00e1ch \u0111\u01b0\u1ee3c gi\u1ea3i n\u00e9n th\u00e0nh c\u00e1c danh s\u00e1ch m\u1ee5c ti\u00eau t\u1eeb tr\u00e1i sang ph\u1ea3i. Do \u0111\u00f3, trong tr\u01b0\u1eddng h\u1ee3p c\u1ee7a ch\u00fang ta, \u0111\u1ea7u ti\u00ean tuple <code>{}, 5</code> \u0111\u01b0\u1ee3c gi\u1ea3i n\u00e9n ra <code>a, b</code> v\u00e0 ch\u00fang ta c\u00f3 <code>a = {}</code> v\u00e0 <code>b = 5</code>.</p> </li> <li> <p><code>a</code> \u0111\u01b0\u1ee3c g\u00e1n cho <code>{}</code>, \u0111\u00e2y l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 thay \u0111\u1ed5i \u0111\u01b0\u1ee3c gi\u00e1 tr\u1ecb (mutable object).</p> </li> <li> <p>Danh s\u00e1ch m\u1ee5c ti\u00eau th\u1ee9 hai l\u00e0 <code>a[b]</code> (b\u1ea1n c\u00f3 th\u1ec3 c\u00f3 th\u1ec3 ngh\u0129 ta s\u1ebd g\u1eb7p m\u1ed9t l\u1ed7i b\u1edfi v\u00ec c\u1ea3 <code>a</code> v\u00e0 <code>b</code> \u0111\u1ec1u ch\u01b0a \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong c\u00e1c c\u00e2u l\u1ec7nh tr\u01b0\u1edbc \u0111\u00f3. Nh\u01b0ng nh\u1edb r\u1eb1ng, ch\u00fang ta \u0111\u00e3 g\u00e1n <code>a</code> b\u1eb1ng <code>{}</code> v\u00e0 <code>b</code> b\u1eb1ng <code>5</code>).</p> </li> <li> <p>B\u00e2y gi\u1edd, ch\u00fang ta thi\u1ebft l\u1eadp kho\u00e1 <code>5</code> trong t\u1eeb \u0111i\u1ec3n v\u1edbi gi\u00e1 tr\u1ecb l\u00e0 tuple <code>({}, 5)</code> t\u1ea1o ra m\u1ed9t tham chi\u1ebfu v\u00f2ng tr\u00f2n (<code>{...}</code> trong k\u1ebft qu\u1ea3 tr\u1ecf t\u1edbi c\u00f9ng m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng m\u00e0 <code>a</code> \u0111\u00e3 \u0111ang tham chi\u1ebfu). M\u1ed9t v\u00ed d\u1ee5 \u0111\u01a1n gi\u1ea3n h\u01a1n v\u1ec1 tham chi\u1ebfu v\u00f2ng tr\u00f2n l\u00e0   <pre><code>&gt;&gt;&gt; some_list = some_list[0] = [0]\n&gt;&gt;&gt; some_list\n[[...]]\n&gt;&gt;&gt; some_list[0]\n[[...]]\n&gt;&gt;&gt; some_list is some_list[0]\nTrue\n&gt;&gt;&gt; some_list[0][0][0][0][0][0] == some_list\nTrue\n</code></pre>  T\u01b0\u01a1ng t\u1ef1 l\u00e0 trong v\u00ed d\u1ee5 c\u1ee7a ch\u00fang ta (<code>a[b][0]</code> l\u00e0 c\u00f9ng \u0111\u1ed1i t\u01b0\u1ee3ng v\u1edbi <code>a</code>)</p> </li> <li> <p>T\u1ed5ng k\u1ebft l\u1ea1i, b\u1ea1n c\u00f3 th\u1ec3 chia v\u00ed d\u1ee5 n\u00e0y ra   <pre><code>a, b = {}, 5\na[b] = a, b\n</code></pre>   V\u00e0 tham chi\u1ebfu v\u00f2ng c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c bi\u1ec7n h\u1ed9 b\u1edfi m\u1ed9t \u0111i\u1ec1u l\u00e0 <code>a[b][0]</code> l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng gi\u1ed1ng  <code>a</code> <pre><code>&gt;&gt;&gt; a[b][0] is a\nTrue\n</code></pre></p> </li> </ul>"},{"location":"VI/#-","title":"---","text":""},{"location":"VI/#section-slippery-slopes","title":"Section: Slippery Slopes","text":""},{"location":"VI/#modifying-a-dictionary-while-iterating-over-it","title":"\u25b6 Modifying a dictionary while iterating over it","text":"<pre><code>x = {0: None}\n\nfor i in x:\n    del x[i]\n    x[i+1] = None\n    print(i)\n</code></pre> <p>K\u1ebft qu\u1ea3 (\u00c1p d\u1ee5ng cho c\u00e1c phi\u00ean b\u1ea3n Python 2.7- Python 3.5):</p> <pre><code>0\n1\n2\n3\n4\n5\n6\n7\n</code></pre> <p>V\u00f2ng l\u1eb7p ch\u1ea1y \u0111\u00fang t\u00e1m l\u1ea7n r\u1ed3i d\u1eebng l\u1ea1i</p>"},{"location":"VI/#giai-thich_26","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Vi\u1ec7c l\u1eb7p v\u00e0 ch\u1ec9nh s\u1eeda m\u1ed9t t\u1eeb \u0111i\u1ec3n c\u00f9ng m\u1ed9t l\u00fac kh\u00f4ng \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3.</li> <li>C\u00f3 t\u00e1m l\u1ea7n ch\u1ea1y b\u1edfi v\u00ec t\u1ea1i th\u1eddi \u0111i\u1ec3m d\u1eebng \u0111\u00f3 l\u00e0 l\u00fac t\u1eeb \u0111i\u1ec3n \u0111i\u1ec1u ch\u1ec9nh k\u00edch th\u01b0\u1edbc \u0111\u1ec3 gi\u1eef th\u00eam nhi\u1ec1u kho\u00e1 h\u01a1n (ch\u00fang ta c\u00f3 t\u00e1m ph\u1ea7n t\u1eeb xo\u00e1, do \u0111\u00f3 \u0111i\u1ec1u ch\u1ec9nh k\u00edch th\u01b0\u1edbc l\u00e0 c\u1ea7n thi\u1ebft). \u0110\u00e2y th\u1ef1c s\u1ef1 l\u00e0 m\u1ed9t chi ti\u1ebft trong tri\u1ec3n khai.</li> <li>C\u00e1ch c\u00e1c kho\u00e1 b\u1ecb xo\u00e1 \u0111\u01b0\u1ee3c x\u1eed l\u00fd v\u00e0 khi nao th\u00ec vi\u1ec7c \u0111i\u1ec1u ch\u1ec9nh k\u00edch th\u01b0\u1edbc di\u1ec5n ra s\u1ebd kh\u00e1c bi\u1ec7t \u0111\u1ed1i v\u1edbi c\u00e1c phi\u00ean b\u1ea3n Python kh\u00e1c nhau</li> <li>Do \u0111\u00f3 c\u00e1c phi\u00ean b\u1ea3n Python l\u1edbn h\u01a1n 2.7 v\u00e0 nh\u1ecf h\u01a1n 3.5, s\u1ed1 l\u01b0\u1ee3ng c\u00e1 kho\u00e1 c\u00f3 th\u1ec3 gi\u1eef dao \u0111\u1ed9ng t\u1eeb 8 (nh\u01b0ng khi b\u1ea1n ch\u1ea1y th\u00ec con s\u1ed1 n\u00e0y s\u1ebd kh\u00f4ng thay \u0111\u1ed5i gi\u1eefa c\u00e1c l\u1ea7n ch\u1ea1y). B\u1ea1n c\u00f3 th\u1ec3 xem th\u00eam c\u00e1c th\u1ea3o lu\u1eadn kh\u00e1c \u1edf \u0111\u00e2y ho\u1eb7c tr\u00ean Stackoverflow t\u1ea1i \u0111\u00e2y</li> <li>T\u1eeb phi\u00ean b\u1ea3n 3.7.6 tr\u1edf \u0111i, b\u1ea1n s\u1ebd g\u1eb7p ngo\u1ea1i l\u1ec7 <code>RuntimeError: dictionary keys changed during iteration</code> khi b\u1ea1n c\u1ed1 g\u1eafng th\u1eed v\u00ed d\u1ee5 tr\u00ean.</li> </ul>"},{"location":"VI/#stubborn-del-operation","title":"\u25b6 Stubborn <code>del</code> operation","text":"<pre><code>class SomeClass:\n    def __del__(self):\n        print(\"Deleted!\")\n</code></pre> <p>K\u1ebft qu\u1ea3: 1. <pre><code>&gt;&gt;&gt; x = SomeClass()\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; del x # this should print \"Deleted!\"\n&gt;&gt;&gt; del y\nDeleted!\n</code></pre></p> <p>C\u00f3 th\u1ec3 b\u1ea1n \u0111o\u00e1n \u0111\u01b0\u1ee3c l\u00e0m sao m\u00e0 <code>__del__</code> kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi khi ta c\u1ed1 g\u1eafng xo\u00e1 <code>x</code> trong l\u1ea7n \u0111\u1ea7u ti\u00ean. H\u00e3y th\u1eed th\u00eam  2. <pre><code>&gt;&gt;&gt; x = SomeClass()\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; del x\n&gt;&gt;&gt; y # check if y exists Ki\u1ec3m tra y c\u00f3 t\u1ed3n t\u1ea1i\n&lt;__main__.SomeClass instance at 0x7f98a1a67fc8&gt;\n&gt;&gt;&gt; del y # Nh\u01b0 l\u1ea7n tr\u01b0\u1edbc, \u0111\u00e1ng l\u1ebd k\u1ebft qu\u1ea3 n\u00ean l\u00e0 in ra \"Deleted!\"\n&gt;&gt;&gt; globals() # nh\u01b0ng kh\u00f4ng, ta kh\u00f4ng c\u00f3 \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 nh\u01b0 mong mu\u1ed1n. C\u00f9ng ki\u1ec3m tra t\u1ea5t c\u1ea3 c\u00e1c bi\u1ebfn to\u00e0n c\u1ee5c v\u00e0 x\u00e1c nh\u1eadn \nDeleted!\n{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'SomeClass': &lt;class __main__.SomeClass at 0x7f98a1a5f668&gt;, '__package__': None, '__name__': '__main__', '__doc__': None}\n</code></pre></p> <p>Ok gi\u1edd th\u00ec n\u00f3 \u0111\u00e3 \u0111\u01b0\u1ee3c xo\u00e1 :confused:</p>"},{"location":"VI/#giai-thich_27","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li><code>del x</code> kh\u00f4ng g\u1ecdi tr\u1ef1c ti\u1ebfp <code>x.__del__()</code>.</li> <li>Khi <code>del x</code> \u0111\u01b0\u1ee3c ch\u1ea1y, Python xo\u00e1  t\u00ean  <code>x</code> kh\u1ecfi ph\u1ea1m vi hi\u1ec7n h\u00e0nh v\u00e0 gi\u1ea3m bi\u1ebfn \u0111\u1ebfm tham chi\u1ebfu c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng \u0111i 1. <code>__del__()</code> \u0111\u01b0\u1ee3c g\u1ecdi ch\u1ec9 khi bi\u1ebfn \u0111\u1ebfm n\u00e0y gi\u1ea3m xu\u1ed1ng 0.</li> <li>Tron \u0111o\u1ea1n m\u00e3 th\u1ee9 hai, <code>__del__()</code> kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi b\u1edfi v\u00ec c\u00e2u l\u1ec7nh tr\u01b0\u1edbc \u0111\u00f3 (<code>&gt;&gt;&gt; y</code>) t\u1ea1o m\u1ed9t tham chi\u1ebfu kh\u00e1c t\u1edbi c\u00f9ng m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng (c\u1ee5 th\u1ec3 l\u00e0, bi\u1ebfn <code>_</code> tr\u1ecf t\u1edbi gi\u00e1 tr\u1ecb k\u1ebft qu\u1ea3 c\u1ee7a m\u1ed9t bi\u1ec3u di\u1ec5n kh\u00f4ng ph\u1ea3i <code>None</code> tron REPL), do \u0111\u00f3 ng\u0103n bi\u1ebfn \u0111\u1ebfm tham chi\u1ebfu gi\u1ea3m v\u1ec1 0 khi th\u1ef1c hi\u1ec7n <code>del y</code></li> <li>G\u1ecdi <code>globals</code> (th\u1ef1c ra th\u00ec th\u1ef1c hi\u1ec7n b\u1ea5t c\u1ee9 th\u1ee9 g\u00ec t\u1ea1o ra k\u1ebft qu\u1ea3 kh\u00f4ng ph\u1ea3i l\u00e0 <code>None</code>) l\u00e0m cho <code>_</code> tham chi\u1ebfu t\u1edbi k\u1ebft qu\u1ea3 m\u1edbi, b\u1ecf \u0111i tham chi\u1ebfu hi\u1ec7n t\u1ed3n t\u1ea1i. B\u00e2y gi\u1edd th\u00ec bi\u1ebfn \u0111\u1ebfm tham chi\u1ebfu gi\u1ea3m ve 0 v\u00e0 b\u1ea1n c\u00f3 th\u1ec3 t\u1eeb \"Deleted!\" \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb.</li> </ul>"},{"location":"VI/#the-out-of-scope-variable","title":"\u25b6 The out of scope variable","text":"<pre><code>a = 1\ndef some_func():\n    return a\n\ndef another_func():\n    a += 1\n    return a\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; some_func()\n1\n&gt;&gt;&gt; another_func()\nUnboundLocalError: local variable 'a' referenced before assignment (tham chi\u1ebfu t\u1edbi 'a' tr\u01b0\u1edbc khi g\u00e1n gi\u00e1 tr\u1ecb)\n</code></pre></p>"},{"location":"VI/#giai-thich_28","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Khi b\u1ea1n g\u00e1n gi\u00e1 tr\u1ecb cho m\u1ed9t bi\u1ebfn trong m\u1ed9t ph\u1ea1m vi, th\u00ec bi\u1ebfn n\u00e0y tr\u1edf th\u00e0nh c\u1ee5c b\u1ed9 cho ph\u1ea1m vi \u0111\u00f3. Do \u0111\u00f3 <code>a</code> tr\u1edf th\u00e0nh c\u1ee5c b\u1ed9 \u0111\u1ed1i v\u1edbi <code>another_func</code>, nh\u01b0ng n\u00f3 ch\u01b0a \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o trong c\u00f9ng ph\u1ea1m vi, n\u00ean ta g\u1eb7p l\u1ed7i v\u1ec1 tham chi\u1ebfu ph\u00eda tr\u00ean.</li> <li>\u0110\u1ecdc b\u00e0i n\u00e0y \u0111\u1ec3 h\u1ecdc v\u1ec1 c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c kh\u00f4ng gian t\u00ean (namespaces) v\u00e0 vi\u1ec7c ph\u00e2n gi\u1ea3i ph\u1ea1m vi trong Python.</li> <li>\u0110\u1ec3 thay \u0111\u1ed5i bi\u00ean b\u00ean ngo\u00e0i ph\u1ea1m vi <code>a</code> b\u00ean trong h\u00e0m <code>another_func</code>, s\u1eed d\u1ee5ng t\u1eeb kho\u00e1 <code>global</code> <pre><code>def another_func()\n    global a\n    a += 1\n    return a\n</code></pre></li> </ul> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; another_func()\n2\n</code></pre></p>"},{"location":"VI/#deleting-a-list-item-while-iterating","title":"\u25b6 Deleting a list item while iterating","text":"<pre><code>list_1 = [1, 2, 3, 4]\nlist_2 = [1, 2, 3, 4]\nlist_3 = [1, 2, 3, 4]\nlist_4 = [1, 2, 3, 4]\n\nfor idx, item in enumerate(list_1):\n    del item\n\nfor idx, item in enumerate(list_2):\n    list_2.remove(item)\n\nfor idx, item in enumerate(list_3[:]):\n    list_3.remove(item)\n\nfor idx, item in enumerate(list_4):\n    list_4.pop(idx)\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; list_1\n[1, 2, 3, 4]\n&gt;&gt;&gt; list_2\n[2, 4]\n&gt;&gt;&gt; list_3\n[]\n&gt;&gt;&gt; list_4\n[2, 4]\n</code></pre></p> <p>V\u00ec sao l\u1ea1i c\u00f3 k\u1ebft qu\u1ea3 l\u00e0 <code>[2, 4]</code>?</p>"},{"location":"VI/#giai-thich_29","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li> <p>Thay \u0111\u1ed5i \u0111\u1ed1i t\u01b0\u1ee3ng trong khi l\u1eb7p kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t c\u00e1ch l\u00e0m hay. C\u00e1ch th\u1ef1c hi\u1ec7n \u0111\u00fang l\u00e0 l\u1eb7p qua m\u1ed9t b\u1ea3n sao c\u1ee7a ch\u00ednh \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u00f3 nh\u01b0 tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng <code>list_3[:]</code></p> <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4]\n&gt;&gt;&gt; id(some_list)\n139798789457608\n&gt;&gt;&gt; id(some_list[:]) # Ch\u00fa \u00fd r\u1eb1ng Python t\u1ea1o m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng m\u1edbi sinh ra t\u1eeb vi\u1ec7c c\u1eaft (slice) list.\n139798779601192\n</code></pre> </li> </ul> <p>S\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa <code>del</code>, <code>remove</code>, v\u00e0 <code>pop</code>: * <code>del var_name</code> ch\u1ec9 lo\u1ea1i b\u1ecf s\u1ef1 c\u00f3 m\u0103t c\u1ee7a <code>var_name</code> kh\u1ecfi kh\u00f4 gian t\u00ean c\u1ee5c b\u1ed9 v\u00e0 to\u00e0n c\u1ee5c (\u0111\u00f3 la l\u00fd do t\u1ea1i sao <code>list_1</code> kh\u00f4ng b\u1ecb \u1ea3nh h\u01b0\u1edfng )  * <code>remove</code> lo\u1ea1i b\u1ecf gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c kh\u1edbp \u0111\u1ea7u ti\u00ean, kh\u00f4ng ph\u1ea3i t\u1ea1i m\u1ed9t ch\u1ec9 s\u1ed1 c\u1ee5 th\u1ec3, ngo\u1ea1i l\u1ec7 <code>ValueError</code> s\u1ebd x\u1ea3y ra n\u1ebfu gi\u00e1 tr\u1ecb mu\u1ed1n lo\u1ea1i b\u1ecf kh\u00f4ng t\u1ed3n t\u1ea1i. * <code>pop</code> lo\u1ea1i b\u1ecf ph\u1ea7n t\u1eed c\u1ee7a danh s\u00e1ch \u1edf m\u1ed7i ch\u1ec9 s\u1ed1 c\u1ee5 th\u1ec3 v\u00e0 tr\u1ea3 v\u1ec1 ph\u1ea7n t\u1eeb \u0111\u00f3, <code>pop</code> s\u1ebd kh\u1edfi l\u00ean <code>IndexError</code> n\u1ebfu n\u00f3 nh\u1eadn m\u1ed9t ch\u1ec9 s\u1ed1 kh\u00f4ng h\u1ee3p l\u1ec7</p> <p>T\u1ea1i sao k\u1ebft qu\u1ea3 l\u1ea1i ra <code>[2, 4]</code>? - Vi\u1ec7c l\u1eb7p qua danh s\u00e1ch \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n theo t\u1eebng ch\u1ec9 s\u1ed1 m\u1ed9t, v\u00e0 khi ch\u00fang ta lo\u1ea1i b\u1ecf <code>1</code> kh\u1ecfi <code>list_2</code> hay <code>list_4</code>, c\u00e1c danh s\u00e1ch n\u00e0y s\u1ebd c\u00f2n l\u1ea1i <code>[2, 3, 4]</code>. C\u00e1c ph\u1ea7n t\u1eed c\u00f2n l\u1ea1i trong list \u0111\u01b0\u1ee3c d\u1ecbch chuy\u1ec3n sang tr\u00e1i, v\u00ed d\u1ee5 nh\u01b0 <code>2</code> s\u1ebd c\u00f3 ch\u1ec9 s\u1ed1 l\u00e0 0, v\u00e0 <code>3</code> c\u00f3 ch\u1ec9 s\u1ed1 l\u00e0 1. Do l\u1ea7n l\u1eb7p ti\u1ebfp theo s\u1ebd x\u1eed l\u00fd ph\u1ea7n t\u1eed c\u00f3 ch\u1ec9 s\u1ed1 l\u00e0 1 (<code>3</code>), n\u00ean ph\u1ea7n t\u1eed t\u1ea1i ch\u1ec9 s\u1ed1 0 (<code>2</code>) s\u1ebd b\u1ecb b\u1ecf qua. </p> <ul> <li>Xem th\u00eam t\u1ea1i StackOverflow thread explaining the example</li> <li>V\u00e0 xem th\u00eam \u1edf \u0111\u00e2y \u0111\u1ec3 c\u00f3 c\u00e1c v\u00ed d\u1ee5 li\u00ean quan t\u1edbi c\u00e1c t\u1eeb \u0111i\u1ec3n thread.</li> </ul>"},{"location":"VI/#lossy-zip-of-iterators","title":"\u25b6 Lossy zip of iterators *","text":"<p><pre><code>&gt;&gt;&gt; numbers = list(range(7))\n&gt;&gt;&gt; numbers\n[0, 1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; first_three, remaining = numbers[:3], numbers[3:]\n&gt;&gt;&gt; first_three, remaining\n([0, 1, 2], [3, 4, 5, 6])\n&gt;&gt;&gt; numbers_iter = iter(numbers)\n&gt;&gt;&gt; list(zip(numbers_iter, first_three)) \n[(0, 0), (1, 1), (2, 2)]\n# so far so good, let's zip the remaining\n&gt;&gt;&gt; list(zip(numbers_iter, remaining))\n[(4, 3), (5, 4), (6, 5)]\n</code></pre> Ph\u1ea7n t\u1eed  <code>3</code> trong <code>numbers</code> \u0111\u00e2u?</p>"},{"location":"VI/#giai-thich_30","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Theo t\u00e0i li\u1ec7u c\u1ee7a Python docs, tri\u1ec3n khai g\u1ea7n nh\u1ea5t c\u1ee7a h\u00e0m zip nh\u01b0 sau,     <pre><code>def zip(*iterables):\n    sentinel = object()\n    iterators = [iter(it) for it in iterables]\n    while iterators:\n        result = []\n        for it in iterators:\n            elem = next(it, sentinel)\n            if elem is sentinel: return\n            result.append(elem)\n        yield tuple(result)\n</code></pre></li> <li>H\u00e0m n\u00e0y nh\u1eadn v\u00e0o m\u1ed9t s\u1ed1 tu\u1ef3 \u00fd c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 l\u1eb7p (iterable objects), th\u00eam m\u1ed7i ph\u1ea7n t\u1eed c\u1ee7a c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y v\u00e0o danh s\u00e1ch <code>result</code> th\u00f4ng qua vi\u1ec7c g\u1ecdi h\u00e0m <code>next</code> tr\u00ean \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y, v\u00e0 d\u01b0ng l\u1ea1i khi \u0111\u00f4i t\u01b0\u1ee3ng n\u00e0y h\u1ebft c\u00e1c ph\u1ea7n t\u1eed \u0111\u1ec3 l\u1eb7p   </li> <li>Ch\u00fa \u00fd l\u00e0 khi b\u1ea5t c\u1ee9 \u0111\u1ed1i t\u01b0\u1ee3ng l\u1eb7p n\u00e0o c\u1ea1n ki\u1ec7t \u0111\u1ed1i t\u01b0\u1ee3ng l\u1eb7p, c\u00e1c ph\u1ea7n t\u1eed t\u1ed3n t\u1ea1i trong danh s\u00e1ch <code>result</code> \u0111\u01b0\u1ee3c b\u1ecf qua. \u0110\u00f3 l\u00e0 nh\u1eefng g\u00ec x\u1ea3y v\u1edbi <code>3</code> trong <code>numbers_iter</code></li> <li>\u0110\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u00fang, ta c\u1ea7n l\u00e0m nh\u01b0 sau     <pre><code>&gt;&gt;&gt; numbers = list(range(7))\n&gt;&gt;&gt; numbers_iter = iter(numbers)\n&gt;&gt;&gt; list(zip(first_three, numbers_iter))\n[(0, 0), (1, 1), (2, 2)]\n&gt;&gt;&gt; list(zip(remaining, numbers_iter))\n[(3, 3), (4, 4), (5, 5), (6, 6)]\n</code></pre>     Tham s\u1ed1 \u0111\u1ea7u ti\u00ean c\u1ee7a zip n\u00ean l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 s\u1ed1 l\u01b0\u1ee3ng c\u00e1c ph\u1ea7n t\u1eed \u00edt nh\u1ea5t.</li> </ul>"},{"location":"VI/#loop-variables-leaking-out","title":"\u25b6 Loop variables leaking out!","text":"<p>1. <pre><code>for x in range(7):\n    if x == 6:\n        print(x, ': for x inside loop')\nprint(x, ': x in global')\n</code></pre></p> <p>K\u1ebft qu\u1ea3: <pre><code>6 : for x inside loop\n6 : x in global\n</code></pre></p> <p>Nh\u01b0ng m\u00e0 <code>x</code> ch\u01b0a bao gi\u1edd \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u00ean ngo\u00e0i v\u00f2ng l\u1eb7p... 2. <pre><code># L\u1ea7n n\u00e0y kh\u1edfi t\u1ea1o x tr\u01b0\u1edbc\nx = -1\nfor x in range(7):\n    if x == 6:\n        print(x, ': for x inside loop')\nprint(x, ': x in global')\n</code></pre></p> <p>K\u1ebft qu\u1ea3: <pre><code>6 : for x inside loop\n6 : x in global\n</code></pre></p> <p>3.</p> <p>K\u1ebft qu\u1ea3 (Python 2.x): <pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; print([x for x in range(5)])\n[0, 1, 2, 3, 4]\n&gt;&gt;&gt; print(x)\n4\n</code></pre></p> <p>K\u1ebft qu\u1ea3 (Python 3.x): <pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; print([x for x in range(5)])\n[0, 1, 2, 3, 4]\n&gt;&gt;&gt; print(x)\n1\n</code></pre></p>"},{"location":"VI/#giai-thich_31","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li> <p>Trong Python, v\u00f2ng l\u1eb7p for s\u1eed d\u1ee5ng ph\u1ea1m vi m\u00e0 ch\u00fang t\u1ed3n t\u1ea1i b\u00ean trong v\u00e0 \u0111\u1ec3 bi\u1ebfn l\u1eb7p (loop-variable) \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a c\u1ee7a ch\u00fang \u0111\u1eb1ng sau. \u0110i\u1ec1u n\u00e0y c\u0169ng \u00e1p d\u1ee5ng khi ch\u00fang ta \u0111\u1ecbnh ngh\u0129a r\u00f5 bi\u1ebfn l\u1eb7p trong kh\u00f4ng gian t\u00ean to\u00e0n c\u1ee5c tr\u01b0\u1edbc \u0111\u00f3. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y v\u00f2ng l\u1eb7p s\u1ebd g\u1eafn l\u1ea1i bi\u1ebfn \u0111\u00e3 t\u1ed3n t\u1ea1i. </p> </li> <li> <p>S\u1ef1 kh\u00e1c nhau gi\u1eefa k\u1ebft qu\u1ea3 c\u1ee7a tr\u00ecnh th\u00f4ng d\u1ecbch Python 2.x v\u00e0 Python 3.x li\u00ean quan t\u1edbi v\u00ed d\u1ee5 list comprehension c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch b\u1eb1ng t\u00e0i li\u1ec7u Nh\u1eefng \u0111i\u1ec1u m\u1edbi trong Python 3.0:</p> <p>\"List comprehensions kh\u00f4ng c\u00f2n h\u1ed7 tr\u1ee3 d\u1ea1ng c\u00fa ph\u00e1p <code>[... for var in item1, item2, ...]</code>. H\u00e3y S\u1eed d\u1ee5ng <code>[... for var in (item1, item2, ...)]</code>. C\u00f2n n\u1eefa, ch\u00fa \u00fd r\u1eb1ng list comprehensions c\u00f3 c\u00e1c ng\u1eef ngh\u0129a kh\u00e1c nhau: ch\u00fang kh\u00e1 g\u1ea7n v\u1edbi c\u00fa ph\u00e1p \u0111\u1eb7c bi\u1ec7t c\u1ee7a m\u1ed9t bi\u1ec3u di\u1ec5n generator b\u00ean trong h\u00e0m x\u00e2y d\u1ef1ng <code>list()</code> , v\u00e0 c\u1ee5 th\u1ec3 l\u00e0,  c\u00e1c bi\u1ebfn \u0111i\u1ec1u khi\u1ec3n v\u00f2ng l\u1eb7p kh\u00f4ng c\u00f2n b\u1ecb r\u00f2 r\u1ec9 (leaked) trong ph\u1ea1m vi xung quanh\"</p> </li> </ul>"},{"location":"VI/#beware-of-default-mutable-arguments","title":"\u25b6 Beware of default mutable arguments!","text":"<pre><code>def some_func(default_arg=[]):\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; some_func()\n['some_string']\n&gt;&gt;&gt; some_func()\n['some_string', 'some_string']\n&gt;&gt;&gt; some_func([])\n['some_string']\n&gt;&gt;&gt; some_func()\n['some_string', 'some_string', 'some_string']\n</code></pre></p>"},{"location":"VI/#giai-thich_32","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li> <p>C\u00e1c tham s\u1ed1 m\u1eb7c \u0111\u1ecbnh c\u00f3 ki\u1ec3u gi\u00e1 tr\u1ecb thay \u0111\u1ed5i \u0111\u01b0\u1ee3c (mutable) c\u1ee7a c\u00e1c h\u00e0m trong Python kh\u00f4ng th\u1ef1c s\u1ef1 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o m\u1ed7i l\u1ea7n ta g\u1ecdi h\u00e0m. Thay v\u00e0o \u0111\u00f3 gi\u00e1 tr\u1ecb tr\u1ecb m\u1edbi \u0111\u01b0\u1ee3c g\u00e1n cho ch\u00fang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng v\u1edbi vai tr\u00f2  gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh. Khi ta truy\u1ec1n v\u00e0o h\u00e0m <code>some_func</code> gi\u00e1 tr\u1ecb <code>[]</code>, gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a bi\u1ebfn <code>default_arg</code> kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng, do \u0111\u00f3 h\u00e0m tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 nh\u01b0  mong \u0111\u1ee3i</p> <pre><code>def some_func(default_arg=[]):\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; some_func.__defaults__ # Thu\u1ed9c t\u00ednh n\u00e0y s\u1ebd cho ta th\u1ea5y c\u00e1c gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a tham s\u1ed1 truy\u1ec1n v\u00e0o h\u00e0m \n([],)\n&gt;&gt;&gt; some_func()\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string'],)\n&gt;&gt;&gt; some_func()\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string', 'some_string'],)\n&gt;&gt;&gt; some_func([])\n&gt;&gt;&gt; some_func.__defaults__\n(['some_string', 'some_string'],)\n</code></pre></p> </li> <li> <p>\u0110\u1ec3 tr\u00e1nh c\u00e1c bugs li\u00ean quan t\u1edbi c\u00e1c tham s\u1ed1 c\u00f3 th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb, ta c\u00f3 th\u1ec3 g\u00e1n cho ch\u00fang gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh l\u00e0 <code>None</code> v\u00e0 sau \u0111\u00f3 vi\u1ebft m\u00e3 ki\u1ec3m tra xem gi\u00e1 tr\u1ecb truy\u1ec1n v\u00e0o h\u00e0m c\u00f3 t\u01b0\u01a1ng \u1ee9ng v\u1edbi tham s\u1ed1 \u0111\u00f3 hay kh\u00f4ng. V\u00ed d\u1ee5:</p> <pre><code>def some_func(default_arg=None):\n    if default_arg is None:\n        default_arg = []\n    default_arg.append(\"some_string\")\n    return default_arg\n</code></pre> </li> </ul>"},{"location":"VI/#catching-the-exceptions","title":"\u25b6 Catching the Exceptions","text":"<pre><code>some_list = [1, 2, 3]\ntry:\n    # C\u00e2u l\u1ec7nh sau s\u1ebd g\u00e2y ra ngo\u1ea1i l\u1ec7 ``IndexError``\n    print(some_list[4])\nexcept IndexError, ValueError:\n    print(\"Caught!\")\n\ntry:\n    # C\u00e2u l\u1ec7nh sau s\u1ebd g\u00e2y ra ngo\u1ea1i l\u1ec7 ``ValueError``\n    some_list.remove(4)\nexcept IndexError, ValueError:\n    print(\"Caught again!\")\n</code></pre> <p>K\u1ebft qu\u1ea3 (Python 2.x): <pre><code>Caught!\n\nValueError: list.remove(x): x not in list\n</code></pre></p> <p>K\u1ebft qu\u1ea3 (Python 3.x): <pre><code>  File \"&lt;input&gt;\", line 3\n    except IndexError, ValueError:\n                     ^\nSyntaxError: invalid syntax\n</code></pre></p>"},{"location":"VI/#giai-thich_33","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch","text":"<ul> <li> <p>\u0110\u1ec3 th\u00eam nhi\u1ec1u ngo\u1ea1i l\u1ec7 tr\u00ean c\u00f9ng m\u1ed9t d\u00f2ng except, b\u1ea1n c\u1ea7n truy\u1ec1n v\u00e0o m\u1ed9t tuple v\u1edbi c\u00e1c ngo\u1ea1i l\u1ec7 \u0111\u01b0\u1ee3c li\u1ec7t k\u00ea b\u00ean trong hai d\u1ea5u ngo\u1eb7c \u0111\u01a1n. V\u00ed d\u1ee5,   <pre><code>some_list = [1, 2, 3]\ntry:\n   # This should raise a ``ValueError``\n   some_list.remove(4)\nexcept (IndexError, ValueError), e:\n   print(\"Caught again!\")\n   print(e)\n</code></pre> K\u1ebft qu\u1ea3 (Python 2.x): <pre><code>Caught again!\nlist.remove(x): x not in list\n</code></pre> K\u1ebft qu\u1ea3 (Python 3.x): <pre><code>  File \"&lt;input&gt;\", line 4\n    except (IndexError, ValueError), e:\n                                     ^\nIndentationError: unindent does not match any outer indentation level\n</code></pre></p> </li> <li> <p>T\u00e1ch bi\u1ec7t ngo\u1ea1i l\u1ec7 v\u1edbi bi\u1ebfn d\u00f9ng d\u1ea5u ph\u1ea9y \u0111\u00e3 kh\u00f4n c\u00f2n \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng n\u1eefa v\u00e0 khi vi\u1ebft nh\u01b0 v\u1eady thi code s\u1ebd kh\u00f4ng ch\u1ea1y trong Python 3; C\u00e1ch l\u00e0m \u0111\u00fang l\u00e0 s\u1eed d\u1ee5ng <code>as</code>. V\u00ed d\u1ee5,    <pre><code>some_list = [1, 2, 3]\ntry:\n    some_list.remove(4)\n\nexcept (IndexError, ValueError) as e:\n    print(\"Caught again!\")\n    print(e)\n</code></pre> K\u1ebft qu\u1ea3: <pre><code>Caught again!\nlist.remove(x): x not in list\n</code></pre></p> </li> </ul>"},{"location":"VI/#same-operands-different-story","title":"\u25b6 Same operands, different story!","text":"<p>1. <pre><code>a = [1, 2, 3, 4]\nb = a\na = a + [5, 6, 7, 8]\n</code></pre></p> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; a\n[1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; b\n[1, 2, 3, 4]\n</code></pre></p> <p>2. <pre><code>a = [1, 2, 3, 4]\nb = a\na += [5, 6, 7, 8]\n</code></pre></p> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; a\n[1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; b\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre></p>"},{"location":"VI/#giai-thich_34","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li> <p><code>a += b</code> kh\u00f4ng ph\u1ea3i lu\u00f4n lu\u00f4n cho ra k\u1ebft qu\u1ea3 gi\u1ed1ng nh\u01b0 <code>a = a + b</code>. C\u00e1c l\u01a1p c\u00f3 th\u1ec3 tri\u1ec3n khai ph\u00e9p <code>op=</code> kh\u00e1c nhau.</p> </li> <li> <p>Bi\u1ec3u di\u1ec5n <code>a = a + [5,6,7,8]</code> sinh ra m\u1ed9t danh s\u00e1ch m\u1edbi v\u00e0 tham chi\u1ebfu c\u1ee7a <code>a</code> tr\u1ecf t\u1edbi danh s\u00e1ch m\u1edbi, v\u00e0 \u0111\u1ec3 cho <code>b</code> kh\u00f4ng \u0111\u1ed5i.</p> </li> <li>Bi\u1ec3n di\u1ec5n <code>a += [5,6,7,8]</code> th\u1ef1c s\u1ef1 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u01a1i h\u00e0m \"m\u1edf r\u1ed9ng\" \u00e1p d\u1ee5ng cho danh s\u00e1ch \u01a1 \u0111\u00f3 <code>a</code> v\u00e0 <code>b</code> v\u1eabn tr\u1ecf v\u1ec1 c\u00f9ng m\u1ed9t danh s\u00e1ch \u0111\u00e3 \u0111\u01b0\u1ee3c thay \u0111\u1ed5i ngay t\u1ea1i ch\u1ed7.</li> </ul>"},{"location":"VI/#name-resolution-ignoring-class-scope","title":"\u25b6 Name resolution ignoring class scope","text":"<p>1. <pre><code>x = 5\nclass SomeClass:\n    x = 17\n    y = (x for i in range(10))\n</code></pre></p> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; list(SomeClass.y)[0]\n5\n</code></pre></p> <p>2. <pre><code>x = 5\nclass SomeClass:\n    x = 17\n    y = [x for i in range(10)]\n</code></pre></p> <p>K\u1ebft qu\u1ea3 (Python 2.x): <pre><code>&gt;&gt;&gt; SomeClass.y[0]\n17\n</code></pre></p> <p>K\u1ebft qu\u1ea3 (Python 3.x): <pre><code>&gt;&gt;&gt; SomeClass.y[0]\n5\n</code></pre></p>"},{"location":"VI/#giai-thich_35","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch","text":"<ul> <li>C\u00e1c ph\u1ea1m vi \u0111\u01b0\u1ee3c l\u1ed3ng b\u00ean trong \u0111\u1ecbnh ngh\u0129a c\u1ee7a l\u1edbp l\u1edd \u0111i c\u00e1c t\u00ean (bi\u1ebfn) \u0111\u01b0\u1ee3c khai b\u00e1o \u1edf m\u1ee9c l\u1edbp (bi\u1ebfn g\u00e1n v\u1edbi l\u1edbp)</li> <li>Bi\u1ec5n di\u1ec5n b\u1ed9 sinh (generator) c\u00f3 ph\u1ea1m vi ri\u00eang c\u1ee7a ch\u00fang</li> <li>B\u1eaft \u0111\u1ea7u t\u1eeb Python 3.X, c\u00e1c list comprehensions c\u0169ng c\u00f3 ph\u1ea1m ri\u00eang c\u1ee7a ch\u00fang</li> </ul>"},{"location":"VI/#needles-in-a-haystack","title":"\u25b6 Needles in a Haystack *","text":"<p>T\u00f4i ch\u01b0a bao gi\u1edd g\u1eb7p m\u1ed9t l\u1eadp tr\u00ecnh vi\u00ean Python kinh nghi\u1ec7m n\u00e0o m\u00e0 ch\u01b0a g\u1eb7p ph\u1ea3i m\u1ed9t trong nh\u1eefng t\u00ecnh hu\u1ed1ng \u00e9o le d\u01b0\u1edbi \u0111\u00e2y 1.</p> <pre><code>x, y = (0, 1) if True else None, None\n</code></pre> <p>K\u1ebft q\u1ee7a:</p> <pre><code>&gt;&gt;&gt; x, y  # K\u1ebft qu\u1ea3 mong \u0111\u1ee3i (0, 1)\n((0, 1), None)\n</code></pre> <p>2.</p> <pre><code>t = ('one', 'two')\nfor i in t:\n    print(i)\n\nt = ('one')\nfor i in t:\n    print(i)\n\nt = ()\nprint(t)\n</code></pre> <p>K\u1ebft qu\u1ea3:</p> <pre><code>one\ntwo\no\nn\ne\ntuple()\n</code></pre> <p>3.</p> <pre><code>ten_words_list = [\n    \"some\",\n    \"very\",\n    \"big\",\n    \"list\",\n    \"that\"\n    \"consists\",\n    \"of\",\n    \"exactly\",\n    \"ten\",\n    \"words\"\n]\n</code></pre> <p>K\u1ebft qu\u1ea3</p> <pre><code>&gt;&gt;&gt; len(ten_words_list)\n9\n</code></pre> <p>4. Not asserting strongly enough</p> <pre><code>a = \"python\"\nb = \"javascript\"\n</code></pre> <p>K\u1ebft qu\u1ea3:</p> <pre><code># G\u1ecdi m\u1ed9t c\u00e2u l\u1ec7nh assert v\u1edbi m\u1ed9t th\u00f4ng \u0111i\u1ec7p ch\u1ec9 r\u00f5 l\u00fd do b\u1ecb l\u1ed7i\n&gt;&gt;&gt; assert(a == b, \"Both languages are different\")\n# Kh\u00f4ng th\u1ea5y m\u1ed9t ngo\u1ea1i l\u1ec7 l\u1ed7i AssertionError \n</code></pre> <p>5.</p> <pre><code>some_list = [1, 2, 3]\nsome_dict = {\n  \"key_1\": 1,\n  \"key_2\": 2,\n  \"key_3\": 3\n}\n\nsome_list = some_list.append(4) \nsome_dict = some_dict.update({\"key_4\": 4})\n</code></pre> <p>K\u1ebft qu\u1ea3:</p> <pre><code>&gt;&gt;&gt; print(some_list)\nNone\n&gt;&gt;&gt; print(some_dict)\nNone\n</code></pre> <p>6.</p> <pre><code>def some_recursive_func(a):\n    if a[0] == 0:\n        return \n    a[0] -= 1\n    some_recursive_func(a)\n    return a\n\ndef similar_recursive_func(a):\n        if a == 0:\n                return a\n        a -= 1\n        similar_recursive_func(a)\n        return a\n</code></pre> <p>K\u1ebft qu\u1ea3:</p> <pre><code>&gt;&gt;&gt; some_recursive_func([5, 0])\n[0, 0]\n&gt;&gt;&gt; similar_recursive_func(5)\n4\n</code></pre>"},{"location":"VI/#giai-thich_36","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li> <p>Tr\u01b0\u1eddng h\u1ee3p th\u1ee9 nh\u1ea5t c\u00e1ch vi\u1ebft \u0111\u1ec3 c\u00f3 k\u1ebft qu\u1ea3 nh\u01b0 mong \u0111\u1ee3i l\u00e0 <code>x, y = (0, 1) if True else (None, None)</code>.</p> </li> <li> <p>Trong tr\u01b0\u1eddng h\u1ee3p th\u1ee9 hai c\u00e1ch vi\u1ebft \u0111\u00fang ph\u1ea3i l\u00e0 <code>t = ('one',)</code> ho\u1eb7c <code>t = 'one',</code> (c\u00f3 th\u00eam d\u1ea5u ph\u1ea9y ph\u00eda sau) n\u1ebfu kh\u00f4ng tr\u00ecnh th\u00f4ng d\u1ecbch s\u1ebd xem <code>t</code> nh\u01b0 l\u00e0 m\u1ed9t <code>str</code> v\u00e0 l\u1eb7p qua t\u1eebng k\u00ed t\u1ef1 c\u1ee7a string n\u00e0y.</p> </li> <li> <p><code>()</code> l\u00e0 m\u1ed9t c\u1eb7p k\u00ed hi\u1ec7u \u0111\u1eb7c bi\u1ec7t \u0111\u1ecbnh ngh\u0129a m\u1ed9t <code>tuple</code> r\u1ed7ng. </p> </li> <li> <p>Trong v\u00ed d\u1ee5 th\u1ee9 ba, b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ec3 \u00fd th\u1ea5y thi\u1ebfu m\u1ed9t d\u1ea5u ph\u1ea9y \u0111\u1eb1ng sau ph\u1ea7n t\u1eed th\u1ee9 5 (<code>\"that\"</code>) c\u1ee7a danh s\u00e1ch. Do \u0111\u00f3, Python ng\u1ea7m n\u1ed1i hai string li\u1ec1n k\u1ec1,   <pre><code>&gt;&gt;&gt; ten_words_list\n['some', 'very', 'big', 'list', 'thatconsists', 'of', 'exactly', 'ten', 'words']\n</code></pre></p> </li> <li> <p>Kh\u00f4ng c\u00f3 ngo\u1ea1i l\u1ec7 <code>AssertionError</code> trong v\u00ed d\u1ee5 th\u1ee9 t\u01b0 b\u1edfi v\u00ec thay v\u00ec ki\u1ec3m tra t\u00ednh \u0111\u00fang sai c\u1ee7a bi\u1ec3u di\u1ec5n <code>a == b</code>, ch\u00fang ta ki\u1ec3m tra m\u1ed9t tuple. V\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y l\u00e0m r\u00f5 h\u01a1n \u0111i\u1ec1u n\u00e0y,   <pre><code>&gt;&gt;&gt; a = \"python\"\n&gt;&gt;&gt; b = \"javascript\"\n&gt;&gt;&gt; assert a == b\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n\n&gt;&gt;&gt; assert (a == b, \"Values are not equal\")\n&lt;stdin&gt;:1: SyntaxWarning: assertion is always true, perhaps remove parentheses?\n\n&gt;&gt;&gt; assert a == b, \"Values are not equal\"\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError: Values are not equal\n</code></pre></p> </li> <li> <p>Trong v\u00ed d\u1ee5 th\u1ee9 n\u0103m, h\u1ea7u h\u1ebft c\u00e1c ph\u01b0\u01a1ng th\u1ee9c thay \u0111\u1ed5i c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng chu\u1ed7i (sequence) hay \u00e1nh x\u1ea1 nh\u01b0 <code>list.append</code>, <code>dict.update</code>,<code>list.sort</code>, v\u00e0 v\u00e2n v\u00e2n. thay \u0111\u1ed5i ngay t\u1ea1i ch\u1ed7 (in-place) c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y v\u00e0 tr\u1ea3 v\u1ec1  <code>None</code>. Nguy\u00ean nh\u00e2n s\u00e2u xa l\u00e0 nh\u1eb1m t\u0103ng hi\u1ec7u n\u0103ng th\u00f4ng qua vi\u1ec7c tr\u00e1nh t\u1ea1o b\u1ea3n sao c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng n\u1ebfu h\u00e0nh \u0111\u1ed9ng \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean \u0111\u1ed1i t\u01b0\u1ee3ng mang t\u00ednh \"ngay t\u1ea1i ch\u1ed7\" (Tham kh\u1ea3o th\u00eam t\u1ea1i \u0111\u00e2y).</p> </li> <li>Tr\u01b0\u1eddng h\u1ee3p cu\u1ed1i c\u00f9ng d\u01b0\u1eddng nh\u01b0 kh\u00e1 r\u00f5 r\u1eb1ng, \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb (nh\u01b0 <code>list</code> ) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c thay \u0111\u1ed5i trong h\u00e0m, v\u00e0 vi\u1ec7c g\u00e1n bi\u1ebfn n\u00e0y l\u1ea1i cho m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb ()<code>a -= 1</code> kh\u00f4ng l\u00e0m thay \u0111\u1ed5i gi\u00e1 tr\u1ecb.</li> <li>L\u01b0u \u00fd \u0111\u1ebfn nh\u1eefng \u0111i\u1ec1u k\u1ec3 tr\u00ean c\u00f3 th\u1ec3 gi\u00fap b\u1ea1n ti\u1ebft ki\u1ec7m \u0111\u01b0\u1ee3c nhi\u1ec1u th\u1eddi gian cho vi\u1ec7c t\u00ecm s\u1eeda l\u1ed7i trong c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh l\u1edbn.</li> </ul>"},{"location":"VI/#splitsies","title":"\u25b6 Splitsies *","text":"<pre><code># th\u1ef1c hi\u1ec7n c\u00e2u l\u1ec7nh n\u00e0y\n&gt;&gt;&gt; 'a'.split()\n['a']\n\n# c\u0169ng gi\u1ed1ng nh\u01b0\n&gt;&gt;&gt; 'a'.split(' ')\n['a']\n\n# nh\u01b0ng khi ch\u1ea1y\n&gt;&gt;&gt; len(''.split())\n0\n\n# l\u1ea1i cho k\u1ebft qu\u1ea3 kh\u00f4ng gi\u1ed1ng nhau\n&gt;&gt;&gt; len(''.split(' '))\n1\n</code></pre>"},{"location":"VI/#giai-thich_37","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Ta d\u01b0\u1eddng nh\u01b0 th\u1ea5y ngay l\u00e0 k\u00ed t\u1ef1 ph\u00e2n c\u00e1ch m\u1eb7c \u0111\u1ecbnh d\u00f9ng cho split l\u00e0 m\u1ed9t kho\u1ea3ng c\u00e1ch \u0111\u01a1n (single space) <code>' '</code>, nh\u01b0ng trong t\u00e0i li\u1ec7u [docs] (https://docs.python.org/2.7/library/stdtypes.html#str.split)     &gt;  N\u1ebfu k\u00ed t\u1ef1 ph\u00e2n c\u00e1ch kh\u00f4ng \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh ho\u1eb7c l\u00e0  <code>None</code>, m\u1ed9t gi\u1ea3i thu\u1eadt chia t\u00e1ch kh\u00e1c \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng: c\u00e1c kho\u1ea3ng tr\u1eafng li\u00ean t\u1ee5c \u0111\u01b0\u1ee3c xem nh\u01b0 l\u00e0 m\u1ed9t ph\u00e2n c\u00e1ch \u0111\u01a1n, v\u00e0 k\u1ebft qu\u1ea3 s\u1ebd ch\u1ee9a c\u00e1c strings kh\u00e1c r\u1ed7ng t\u1ea1i ph\u1ea7n \u0111\u1ea7u ho\u1eb7c cu\u1ed1i n\u1ebfu string c\u00f3 c\u00e1c kho\u1ea3ng tr\u1eafng \u1edf ph\u1ea7n \u0111\u1ea7u v\u00e0 \u0111u\u00f4i. Do v\u1eady, ph\u00e2n t\u00e1ch m\u1ed9t string r\u1ed7ng ho\u1eb7c m\u1ed9t string ch\u1ee9a ch\u1ec9 kho\u1ea3ng tr\u1eafng v\u1edbi m\u1ed9t ph\u00e2n t\u00e1ch None s\u1ebd tr\u1ea3 v\u1ec1 <code>[]</code>.     &gt; N\u1ebfu c\u00f3 k\u00ed t\u1ef1 ph\u00e2n c\u00e1ch, c\u00e1c d\u1ea5u ph\u00e2n c\u00e1ch li\u00ean t\u1ee5c kh\u00f4ng \u0111\u01b0\u1ee3c nh\u00f3m l\u1ea1i c\u00f9ng nhau v\u00e0 \u0111\u01b0\u1ee3c coi l\u00e0 \u0111\u1ec3 ph\u00e2n \u0111\u1ecbnh c\u00e1c strings r\u1ed7ng (v\u00ed d\u1ee5, <code>'1,,2'.split(',')</code> tr\u1ea3 v\u1ec1 <code>['1', '', '2']</code>). Ph\u00e2n t\u00e1ch m\u1ed9t string r\u1ed7ng v\u1edbi m\u1ed9t k\u00ed t\u1ef1 ph\u00e2n t\u00e1ch ch\u1ec9 \u0111\u1ecbnh tr\u1ea3 v\u1ec1  <code>['']</code>.</li> <li>V\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y ch\u1ec9 ra c\u00e1ch c\u00e1c kho\u1ea3ng tr\u1eafng \u0111\u01b0\u1ee3c x\u1eed l\u00fd,     <pre><code>&gt;&gt;&gt; ' a '.split(' ')\n['', 'a', '']\n&gt;&gt;&gt; ' a '.split()\n['a']\n&gt;&gt;&gt; ''.split(' ')\n['']\n</code></pre></li> </ul>"},{"location":"VI/#wild-imports","title":"\u25b6 Wild imports *","text":"<pre><code># File: module.py\n\ndef some_weird_name_func_():\n    print(\"works!\")\n\ndef _another_weird_name_func():\n    print(\"works!\")\n</code></pre> <p>K\u1ebft qu\u1ea3</p> <pre><code>&gt;&gt;&gt; from module import *\n&gt;&gt;&gt; some_weird_name_func_()\n\"works!\"\n&gt;&gt;&gt; _another_weird_name_func()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name '_another_weird_name_func' is not defined\n</code></pre>"},{"location":"VI/#giai-thich_38","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Ch\u00fang ta \u0111\u01b0\u1ee3c khuy\u00ean l\u00e0 tr\u00e1nh s\u1eed d\u1ee5ng c\u00e1c wildcard imports. V\u00ec v\u1edbi ch\u00fang, c\u00e1c t\u00ean (v\u00ed d\u1ee5 h\u00e0m) v\u1edbi d\u1ea5u g\u1ea1ch ch\u00e2n ph\u00eda tr\u01b0\u1edbc s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c import. \u0110i\u1ec1u n\u00e0y g\u00e2y ra l\u1ed7i trong l\u00fac code ch\u1ea1y</li> <li>Khi ch\u00fang ta d\u00f9ng <code>from ... import a, b, c</code>, l\u1ed7i <code>NameError</code> s\u1ebd kh\u00f4n x\u1ea3y ra n\u1eefa.     <pre><code>&gt;&gt;&gt; from module import some_weird_name_func_, _another_weird_name_func\n&gt;&gt;&gt; _another_weird_name_func()\nworks!\n</code></pre></li> <li> <p>N\u1ebfu b\u1ea1n th\u1ef1c s\u1ef1 mu\u1ed1n s\u1eed d\u1ee5ng wildcard imports, b\u1ea1n se ph\u1ea3i \u0111\u1ecbnh ngh\u0129a bi\u1ebfn <code>__all__</code> trong module c\u1ee7a b\u1ea1n, bi\u1ebfn n\u00e0y s\u1ebd ch\u01b0a m\u1ed9t danh s\u00e1ch c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f4ng c\u1ed9ng \u0111\u01b0\u1ee3c import khi s\u1eed d\u1ee5ng wildcard imports.     <pre><code>__all__ = ['_another_weird_name_func']\n\ndef some_weird_name_func_():\n    print(\"works!\")\n\ndef _another_weird_name_func():\n    print(\"works!\")\n</code></pre> K\u1ebft qu\u1ea3</p> <pre><code>&gt;&gt;&gt; _another_weird_name_func()\n\"works!\"\n&gt;&gt;&gt; some_weird_name_func_()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'some_weird_name_func_' is not defined (h\u00e0m \"some_weird_name_func_\" kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a)\n</code></pre> </li> </ul>"},{"location":"VI/#all-sorted","title":"\u25b6 All sorted? *","text":"<pre><code>&gt;&gt;&gt; x = 7, 8, 9\n&gt;&gt;&gt; sorted(x) == x\nFalse\n&gt;&gt;&gt; sorted(x) == sorted(x)\nTrue\n\n&gt;&gt;&gt; y = reversed(x)\n&gt;&gt;&gt; sorted(y) == sorted(y)\nFalse\n</code></pre>"},{"location":"VI/#giai-thich_39","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Ph\u01b0\u01a1ng th\u1ee9c <code>sorted</code> lu\u00f4n lu\u00f4n tr\u1ea3 v\u1ec1 m\u1ed9t list, v\u00e0 trong Python so s\u00e1nh gi\u1eefa lists v\u00e0 tuples lu\u00f4n lu\u00f4n cho ra k\u1ebft qu\u1ea3 <code>False</code>.</li> <li> <p>```py</p> <p>[] == tuple()   False x = 7, 8, 9 type(x), type(sorted(x))   (tuple, list)   ```</p> </li> <li> <p>Kh\u00e1c v\u1edbi <code>sorted</code>, ph\u01b0\u01a1ng th\u1ee9c <code>reversed</code> tr\u1ea3 v\u1ec1 m\u1ed9t iterator. T\u1ea1i sao? B\u1edfi v\u00ec vi\u1ec7c s\u1eafp x\u1ebfp y\u00eau c\u1ea7u iterator c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c thay \u0111\u1ed5i ngay t\u1ea1i ch\u1ed7 (in-place) ho\u1eb7c s\u1eed d\u1ee5ng m\u1ed9t b\u1ed9 ch\u1ee9a b\u1ed5 sung (m\u1ed9t list), tr\u00e1i l\u1ea1i vi\u1ec7c \u0111\u1ea3o chi\u1ec1u (reversing) c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng \u0111\u01a1n gi\u1ea3n l\u00e0 l\u1eb7p t\u1eeb ch\u1ec9 s\u1ed1 cu\u1ed1i v\u1ec1 ph\u1ea7n t\u1eed \u0111\u1ea7u</p> </li> <li>Do \u0111\u00f3 khi so s\u00e1nh <code>sorted(y) == sorted(y)</code>, l\u1eddi g\u1ecdi \u0111\u1ea7u ti\u00ean <code>sorted()</code> s\u1ebd ti\u00eau th\u1ee5 iterator <code>y</code>, v\u00e0 l\u1eddi g\u1ecdi ti\u1ebfp theo s\u1ebd tr\u1ea3 v\u1ec1 m\u1ed9t list r\u1ed7ng. </li> </ul> <pre><code>&gt;&gt;&gt; x = 7, 8, 9\n&gt;&gt;&gt; y = reversed(x)\n&gt;&gt;&gt; sorted(y), sorted(y)\n([7, 8, 9], [])\n</code></pre>"},{"location":"VI/#midnight-time-doesnt-exist","title":"\u25b6 Midnight time doesn't exist?","text":"<pre><code>from datetime import datetime\n\nmidnight = datetime(2018, 1, 1, 0, 0)\nmidnight_time = midnight.time()\n\nnoon = datetime(2018, 1, 1, 12, 0)\nnoon_time = noon.time()\n\nif midnight_time:\n    print(\"Time at midnight is\", midnight_time)\n\nif noon_time:\n    print(\"Time at noon is\", noon_time)\n</code></pre> <p>K\u1ebft qu\u1ea3 (&lt; 3.5):</p> <p><pre><code>('Time at noon is', datetime.time(12, 0))\n</code></pre> Th\u1eddi gian n\u1eeda \u0111\u00eam kh\u00f4ng \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb</p>"},{"location":"VI/#giai-them","title":"\ud83d\udca1 Gi\u1ea3i th\u00eam:","text":"<p>Tr\u01b0\u1edbc Python 3.5, gi\u00e1 tr\u1ecb lu\u1eadn l\u00fd cho \u0111\u1ed1i t\u01b0\u1ee3ng <code>datetime.time</code> \u0111\u01b0\u1ee3c xem nh\u01b0 l\u00e0 <code>False</code> n\u1ebfu \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y bi\u1ec3u di\u1ec5n n\u1eeda \u0111\u00eam trong UTC. Code d\u1ec5 sai khi s\u1eed d\u1ee5ng c\u00fa ph\u00e1p <code>if obj:</code> \u0111\u1ec3 ki\u1ec3m tra <code>obj</code> l\u00e0 null hay nh\u1eefng gi\u00e1 tr\u1ecb t\u01b0\u01a1ng t\u01b0\u01a1ng v\u1edbi \"r\u1ed7ng\".</p>"},{"location":"VI/#-_1","title":"---","text":""},{"location":"VI/#section-the-hidden-treasures","title":"Section: The Hidden treasures!","text":"<p>Ph\u1ea7n n\u00e0y bao g\u1ed3m nh\u1eefng \u0111i\u1ec1u \u00edt \u0111\u01b0\u1ee3c bi\u1ebft t\u1edbi v\u1ec1 Python, nh\u1eefng \u0111i\u1ec1u h\u1ea5p d\u1eabn n\u00e0y h\u1ea7u h\u1ebft nh\u1eefng ng\u01b0\u1eddi m\u1edbi b\u1eaft \u0111\u1ea7u nh\u01b0 t\u00f4i \u0111\u1ec1u kh\u00f4ng bi\u1ebft</p>"},{"location":"VI/#okay-python-can-you-make-me-fly","title":"\u25b6 Okay Python, Can you make me fly?","text":"<p>H\u00e3y b\u1eaft \u0111\u1ea7u n\u00e0o</p> <pre><code>import antigravity\n</code></pre> <p>K\u1ebft qu\u1ea3: Sshh... M\u1ed9t b\u00ed m\u1eadt l\u1edbn.</p>"},{"location":"VI/#giai-thich_40","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li><code>antigravity</code> l\u00e0 m\u1ed9t trong v\u00e0i qu\u1ea3 tr\u1ee9ng ph\u1ee5c sinh \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1edfi c\u00e1c l\u1eadp tr\u00ecnh vi\u00ean Python </li> <li><code>import antigravity</code> m\u1edf trang web truy\u1ec7n h\u00e0i XKCD  trong m\u1ed9t tr\u00ecnh duy\u1ec7t.</li> <li>C\u00f2n nhi\u1ec1u h\u01a1n th\u1ebf n\u1eefa. C\u00f3 c\u00e1c qu\u1ea3 tr\u1ee9ng ph\u1ee5c sinh kh\u00e1c b\u00ean trong qu\u1ea3 tr\u1ee9ng ph\u1ee5c sinh. N\u1ebfu b\u1ea1n xem \u0111o\u1ea1n [m\u00e3] (https://github.com/python/cpython/blob/master/Lib/antigravity.py#L7-L17), c\u00f3 m\u1ed9t h\u00e0m \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a \u0111\u1ec3 tri\u1ec3n khai [Gi\u1ea3i thu\u1eadt geohashing c\u1ee7a XKCD] </li> </ul>"},{"location":"VI/#goto-but-why","title":"\u25b6 <code>goto</code>, but why?","text":"<pre><code>from goto import goto, label\nfor i in range(9):\n    for j in range(9):\n        for k in range(9):\n            print(\"I am trapped, please rescue!\")\n            if k == 2:\n                goto .breakout # breaking out from a deeply nested loop\nlabel .breakout\nprint(\"Freedom!\")\n</code></pre> <p>K\u1ebft qu\u1ea3 (Python 2.3): <pre><code>I am trapped, please rescue!\nI am trapped, please rescue!\nFreedom!\n</code></pre></p>"},{"location":"VI/#giai-thich_41","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>M\u1ed9t phi\u00ean b\u1ea3n Python c\u1ee7a <code>goto</code> \u0111\u01b0\u1ee3c  c\u00f4ng b\u1ed1 trong ng\u00e0y c\u00e1 th\u00e1ng t\u01b0 n\u0103m 2004 nh\u01b0 l\u00e0 m\u1ed9t l\u1eddi \u0111\u00f9a.</li> <li>C\u00e1c phi\u00ean b\u1ea3n Python hi\u1ec7n h\u00e0nh kh\u00f4ng c\u00f3 module n\u00e0y.</li> <li>M\u1eb7c d\u00f9 tri\u1ec3n khai <code>goto</code> ch\u1ea1y \u0111\u01b0\u1ee3c, nh\u01b0ng \u0111\u1eebng s\u1eed d\u1ee5ng n\u00f3. L\u00fd do t\u1ea1i sao Python kh\u00f4ng c\u00f3 <code>goto</code>.</li> </ul>"},{"location":"VI/#brace-yourself","title":"\u25b6 Brace yourself!","text":"<p>N\u1ebfu b\u1ea1n kh\u00f4ng th\u00edch s\u1eed d\u1ee5ng kho\u1ea3ng tr\u1eafng \u0111\u1ec3 bi\u1ec3u th\u1ecb c\u00e1c ph\u1ea1m vi, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng phonng c\u00e1ch nh\u01b0 trong ng\u00f4n ng\u1eef C {} b\u1eb1ng c\u00e1ch import <pre><code>from __future__ import braces\n</code></pre></p> <p>K\u1ebft qu\u1ea3: <pre><code>  File \"some_file.py\", line 1\n    from __future__ import braces\nSyntaxError: not a chance\n</code></pre></p> <p>C\u00e1c d\u1ea5u ngo\u1eb7c nh\u1ecdn? Kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u00e2u! N\u1ebfu b\u1ea1n ngh\u0129 r\u1eb1ng \u0111i\u1ec1u g\u00e2y th\u1ea5t v\u1ecdng, s\u1eed d\u1ee5ng Java. C\u00f2n m\u1ed9t \u0111i\u1ec1u ng\u1ea1c nhi\u00ean n\u1eefa \u0111\u00e2y, b\u1ea1n c\u00f3 th\u1ec3 t\u00ecm th\u1ea5y ngo\u1ea1i l\u1ec7 <code>SyntaxError</code> \u0111\u01b0\u1ee3c kh\u1edfi l\u00ean \u1edf \u0111\u00e2u trong module <code>__future__</code> hay kh\u00f4ng (https://github.com/python/cpython/blob/master/Lib/future.py)?</p>"},{"location":"VI/#giai-thich_42","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Module <code>__future__</code> th\u01b0\u1eddng \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 cung c\u1ea5p c\u00e1c t\u00ednh n\u0103ng \u0111\u1ebfn t\u1eeb c\u00e1c phi\u00ean b\u1ea3n m\u1edbi c\u1ee7a Python. Tuy nhi\u00ean \"t\u01b0\u01a1ng lai\" (\"feature\") trong ho\u00e0n c\u1ea3nh n\u00e0y c\u00f3 v\u1ebb h\u01a1i m\u1ec9a mai.</li> <li>C\u00f3 m\u1ed9t qu\u1ea3 tr\u1ee9ng ph\u1ee5c sinh li\u00ean quan \u0111\u1ebfn t\u00e2m tr\u1ea1ng c\u1ee7a c\u1ed9ng \u0111\u1ed3ng Python v\u1ec1 v\u1ea5n \u0111\u1ec1 n\u00e0y. </li> <li>\u0110o\u1ea1n m\u00e3 \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y \u1edf \u0111\u00e2y trong file <code>future.c</code>.</li> <li>Khi tr\u00ecnh bi\u00ean d\u1ecbch Cpython g\u1eb7p m\u1ed9t c\u00e2u l\u1ec7nh future,  N\u00f3 ch\u1ea1y \u0111o\u1ea1n m\u00e3 t\u01b0\u01a1ng \u1ee9ng trong  <code>future.c</code> tr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n c\u00e2u l\u1ec7nh import th\u00f4ng th\u01b0\u1eddng.</li> </ul>"},{"location":"VI/#lets-meet-friendly-language-uncle-for-life","title":"\u25b6 Let's meet Friendly Language Uncle For Life","text":"<p>Output (Python 3.x) <pre><code>&gt;&gt;&gt; from __future__ import barry_as_FLUFL\n&gt;&gt;&gt; \"Ruby\" != \"Python\" # ch\u1ea3 c\u00f3 g\u00ec ph\u1ea3i nghi ng\u1edd v\u1ec1 c\u00e2u l\u1ec7nh so s\u00e1nh n\u00e0y c\u1ea3\n  File \"some_file.py\", line 1\n    \"Ruby\" != \"Python\"\n              ^\nSyntaxError: invalid syntax\n\n&gt;&gt;&gt; \"Ruby\" &lt;&gt; \"Python\"\nTrue\n</code></pre></p> <p>R\u1ed3i! c\u00f3 th\u1ee9 \u0111\u1ec3 xem.</p>"},{"location":"VI/#giai-thich_43","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>\u0110i\u1ec1u ta mu\u1ed1n t\u00ecm hi\u1ec3u li\u00ean quan t\u1edbi PEP-401, PEP n\u00e0y \u0111\u01b0\u1ee3c xu\u1ea5t b\u1ea3n v\u00e0o ng\u00e0y m\u1ed9t th\u00e1ng t\u01b0 n\u0103m 2009 (l\u00e0 g\u00ec th\u00ec b\u1ea1n bi\u1ebft r\u1ed3i \u0111\u00f3).</li> <li>\u0110o\u1ea1n d\u01b0\u1edbi \u0111\u00e2y \u0111\u01b0\u1ee3c tr\u00edch ra t\u1eeb PEP-401</li> </ul> <p>Nh\u1eadn ra r\u1eb1ng k\u00ed hi\u1ec7u to\u00e1n t\u1eed so s\u00e1nh kh\u00f4ng b\u1eb1ng != trong Python 3.0 th\u1ea5y g\u1edbm, g\u00f5 th\u1eadt kh\u00f3, FLUFL kh\u00f4i ph\u1ee5c l\u1ea1i k\u00ed hi\u1ec7u h\u00ecnh kim c\u01b0\u01a1ng &lt;&gt;. - B\u1ea1n nhi\u1ec1u th\u1ee9 \u0111\u00e1ng xem trong PEP n\u00e0y; b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecdc ch\u00fang [\u1edf \u0111\u00e2y] (https://www.python.org/dev/peps/pep-0401/). - To\u00e1n t\u1eed h\u00ecnh kim c\u01b0\u01a1ng n\u00e0y ho\u1ea1t \u0111\u1ed9ng t\u1ed1t trong m\u00f4i tr\u01b0\u1eddng t\u01b0\u01a1ng t\u00e1c, nh\u01b0ng l\u1ea1i g\u00e2y ra ngo\u1ea1i l\u1ec7 <code>SyntaxError</code> khi ch\u1ea1y qua file python (h\u00e3y xem v\u1ea5n \u0111\u1ec1). Tuy nhi\u00ean b\u1ea1n c\u00f3 th\u1ec3 g\u00f3i c\u00e2u l\u1ec7nh n\u00e0y v\u00e0o trong h\u00e0m <code>eval</code> ho\u1eb7c <code>compile</code> \u0111\u1ec3 ch\u1ea1y \u0111\u01b0\u1ee3c.     <pre><code>from __future__ import barry_as_FLUFL\nprint(eval('\"Ruby\" &lt;&gt; \"Python\"'))\n</code></pre></p>"},{"location":"VI/#even-python-understands-that-love-is-complicated","title":"\u25b6 Even Python understands that love is complicated","text":"<pre><code>import this\n</code></pre> <p>N\u00e0o, this l\u00e0 g\u00ec th\u1ebf? <code>this</code> l\u00e0 t\u00ecnh y\u00eau :heart:</p> <p>K\u1ebft qu\u1ea3: <pre><code>The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code></pre></p> <p><code>this</code> l\u00e0 Thi\u1ec1n c\u1ee7a Python!</p> <pre><code>&gt;&gt;&gt; love = this\n&gt;&gt;&gt; this is love\nTrue\n&gt;&gt;&gt; love is True\nFalse\n&gt;&gt;&gt; love is False\nFalse\n&gt;&gt;&gt; love is not True or False\nTrue\n&gt;&gt;&gt; love is not True or False; love is love  # T\u00ecnh y\u00eau th\u1eadt ph\u1ee9c t\u1ea1p\nTrue\n</code></pre>"},{"location":"VI/#giai-thich_44","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Module <code>this</code> trong Python l\u00e0 m\u1ed9t qu\u1ea3 tr\u1ee9ng ph\u1ee5c sinh cho Thi\u1ec1n c\u1ee7a Python (PEP 20).</li> <li>V\u00e0 n\u1ebfu b\u1ea1n th\u1ea5y n\u00f3 h\u1ee9ng th\u00fa, h\u00e3y xem m\u00e3 tri\u1ec3n khai c\u1ee7a this.py. H\u1ea5p d\u1eabn thay, m\u00e3 c\u1ee7a Thi\u1ec1n l\u1ea1i vi ph\u1ea1m ch\u00ednh quy t\u1eafc thi\u1ec1n</li> <li>N\u00f3i v\u1ec1 c\u00e2u <code>love is not True or False; love is love</code>, m\u1ec9a mai thay c\u00e2u nay t\u1ef1 th\u1ea5y n\u00f3 co ngh\u0129a (n\u1ebfu kh\u00f4ng, hay xnhinf c\u00e1 v\u00ed d\u1ee5 li\u00ean quan t\u1edbi <code>is</code> v\u00e0 <code>is not</code>)</li> </ul>"},{"location":"VI/#yes-it-exists","title":"\u25b6 Yes, it exists!","text":"<p>** Kh\u1ed1i <code>else</code> c\u1ee7a c\u00e1c v\u00f2ng l\u1eb7p .** D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t v\u00ed d\u1ee5 \u0111i\u1ec3n h\u00ecnh:</p> <pre><code>  def does_exists_num(l, to_find):\n      for num in l:\n          if num == to_find:\n              print(\"Exists!\")\n              break\n      else:\n          print(\"Does not exist\")\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; does_exists_num(some_list, 4)\nExists! (T\u1ed3n t\u1ea1i)\n&gt;&gt;&gt; does_exists_num(some_list, -1)\nDoes not exist (Kh\u00f4ng t\u1ed3n t\u1ea1i)\n</code></pre></p> <p>Kh\u1ed1i <code>else</code> trong x\u1eed l\u00fd ngo\u1ea1i l\u1ec7. M\u1ed9t v\u00ed d\u1ee5,</p> <pre><code>try:\n    pass\nexcept:\n    print(\"Exception occurred!!!\")\nelse:\n    print(\"Try block executed successfully...\")\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>Try block executed successfully...\n</code></pre></p>"},{"location":"VI/#giai-thich_45","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Kh\u1ed1i <code>else</code> sau m\u1ed9t v\u00f2ng l\u1eb7p \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n ch\u1ec9 khi trong qu\u00e1 tr\u00ecnh l\u1eb7p kh\u00f4ng c\u00f3 m\u1ed9t <code>break</code> n\u00e0o. B\u1ea1n c\u00f3 th\u1ec3 ngh\u0129 n\u00f3 nh\u01b0 l\u00e0 m\u1ed9t kh\u1ed1i \"kh\u00f4ng ng\u1eaft\" (\"nobreak\")</li> <li>Kh\u1ed1i <code>else</code> sau m\u1ed9t kh\u1ed1i try c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi la \"kh\u1ed1i ho\u00e0n t\u1ea5t\" \u0111\u00f3 khi c\u00e1c c\u00e2u l\u1ec7nh trong kh\u1ed1i n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi khi kh\u1ed1i try ho\u00e0n th\u00e0nh tr\u1ecdn v\u1eb9n c\u00f4ng vi\u1ec7c c\u1ee7a m\u00ecnh.</li> </ul>"},{"location":"VI/#ellipsis","title":"\u25b6 Ellipsis *","text":"<pre><code>def some_func():\n    Ellipsis\n</code></pre> <p>K\u1ebft qu\u1ea3 <pre><code>&gt;&gt;&gt; some_func()\n# No output, No Error\n\n&gt;&gt;&gt; SomeRandomString\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'SomeRandomString' is not defined\n\n&gt;&gt;&gt; Ellipsis\nEllipsis\n</code></pre></p>"},{"location":"VI/#giai-thich_46","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch","text":"<ul> <li>Trong Python, <code>Ellipsis</code> l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 s\u1eb5n, to\u00e0n c\u1ee5c t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi  <code>...</code>.     <pre><code>&gt;&gt;&gt; ...\nEllipsis\n</code></pre></li> <li>Eliipsis c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho c\u00e1c m\u1ee5c \u0111\u00edch sau<ul> <li>L\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng \"x\u00ed ch\u1ed7\" cho m\u00e3 ch\u01b0a \u0111\u01b0\u1ee3c vi\u1ebft (nh\u01b0 c\u00e2u l\u1ec7nh <code>pass</code>)</li> <li>Trong c\u00fa ph\u00e1p l\u00e1t c\u1eaft (slicing syntax), n\u00f3 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 bi\u1ec3u di\u1ec5n c\u00e1c l\u00e1t c\u1eaft \u0111\u1ea7y \u0111\u1ee7 theo h\u01b0\u1edbng c\u00f2n l\u1ea1i</li> <li>In slicing syntax to represent the full slices in remaining direction <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; three_dimensional_array = np.arange(8).reshape(2, 2, 2)\narray([\n    [\n        [0, 1],\n        [2, 3]\n    ],\n\n    [\n        [4, 5],\n        [6, 7]\n    ]\n])\n</code></pre> <code>three_dimensional_array</code> l\u00e0 m\u1ed9t m\u1ea3ng c\u1ee7a m\u1ea3ng c\u1ee7a c\u00e1c m\u1ea3ng. N\u00e0o, ch\u00fang ta mu\u1ed1n in ra ph\u1ea7n t\u1eed th\u1ee9 hai (ch\u1ec9 s\u1ed1 <code>1</code>) c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c m\u1ea3ng ph\u00eda trong c\u00f9ng, chugns ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng Ellipsis \u0111\u1ec3 \"ch\u01a1i chi\u00eau qua m\u1eb7t\" (bypass) t\u1ea5t c\u1ea3 c\u00e1c chi\u1ec1u (dimensions) ph\u00eda tr\u01b0\u1edbc \u0111\u00f3. <pre><code>&gt;&gt;&gt; three_dimensional_array[:,:,1]\narray([[1, 3],\n   [5, 7]])\n&gt;&gt;&gt; three_dimensional_array[..., 1] # using Ellipsis.\narray([[1, 3],\n   [5, 7]])\n</code></pre> Ch\u00fa \u00fd r\u1eb1ng: c\u00e1ch tr\u00ean c\u00f3 th\u1ec3 th\u1ef1c tr\u00ean b\u1ea5t c\u1ee9 m\u1ea3ng v\u1edbi s\u1ed1 l\u01b0\u1ee3ng chi\u1ec1u n\u00e0o. B\u1ea1n c\u00f3 th\u1ec3 l\u1ef1a tr\u00ean l\u00e1t c\u1eaft (slice) tr\u01b0\u1edbc v\u00e0 chi\u1ec1u cu\u1ed1i c\u00f9ng v\u00e0 l\u1edd \u0111i c\u00e1c chi\u1ec1u n\u1eb1m \u1edf gi\u1eefa (<code>n_dimensional_array[firs_dim_slice, ..., last_dim_slice]</code>)</li> <li>Trong G\u1ee3i \u00fd ki\u1ec3u, Ellipsis \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 ch\u1ec9 ra m\u1ed9t ph\u1ea7n c\u1ee7a ki\u1ec3u (nh\u01b0 l\u00e0 <code>(Callable[..., int]</code> hay <code>Tuple[str, ...]</code>))</li> <li>B\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng Ellipsis nh\u01b0 l\u00e0 m\u1ed9t tham s\u1ed1 h\u00e0m m\u1eb7c \u0111\u1ecbnh (trong nh\u1eefng tr\u01b0\u1eddng h\u1ee3p b\u1ea1n mu\u1ed1n ph\u00e2n bi\u1ec7t gi\u1eefa hai t\u00ednh hu\u1ed1ng \"kh\u00f4ng c\u00f3 tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o\") v\u00e0 \"gi\u00e1 tr\u1ecb None \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o\"</li> </ul> </li> </ul>"},{"location":"VI/#inpinity","title":"\u25b6 Inpinity","text":"<p>Vi\u1ec7c vi\u1ebft sai ch\u00ednh t\u1ea3 l\u00e0 ch\u1ee7 \u00fd. K\u1ebft qu\u1ea3 (Python 3.x): <pre><code>&gt;&gt;&gt; infinity = float('infinity')\n&gt;&gt;&gt; hash(infinity)\n314159\n&gt;&gt;&gt; hash(float('-inf'))\n-314159\n</code></pre></p>"},{"location":"VI/#giai-thich_47","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>M\u00e3 b\u0103m c\u1ee7a v\u00f4 c\u1ef1c l\u00e0 10\u2075 x \u03c0.</li> <li>Th\u00fa v\u1ecb l\u00e0 \u1edf ch\u1ed7 trong Python 3 m\u00e3 b\u0103m c\u1ee7a <code>float('-inf')</code> l\u00e0 \"-10\u2075 x \u03c0\", tr\u00e1i l\u1ea1i trong Python l\u00e0 \"-10\u2075 x e\"</li> </ul>"},{"location":"VI/#lets-mangle","title":"\u25b6 Let's mangle","text":"<p>1. <pre><code>class Yo(object):\n    def __init__(self):\n        self.__honey = True\n        self.bro = True\n</code></pre></p> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; Yo().bro\nTrue\n&gt;&gt;&gt; Yo().__honey\nAttributeError: 'Yo' object has no attribute '__honey' (\u0110\u1ed1i t\u01b0\u1ee3ng 'Yo' kh\u00f4ng c\u00f3 thu\u1ed9c t\u00ednh '__honey')\n&gt;&gt;&gt; Yo()._Yo__honey\nTrue\n</code></pre></p> <p>2. <pre><code>class Yo(object):\n    def __init__(self):\n        # Let's try something symmetrical this time\n        self.__honey__ = True\n        self.bro = True\n</code></pre></p> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; Yo().bro\nTrue\n\n&gt;&gt;&gt; Yo()._Yo__honey__\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'Yo' object has no attribute '_Yo__honey__' (\u0110\u1ed1i t\u01b0\u1ee3ng 'Yo' kh\u00f4ng c\u00f3 thu\u1ed9c t\u00ednh '_Yo__honey__')\n</code></pre></p> <p>T\u1ea1i sao <code>Yo()._Yo__honey</code> l\u1ea1i g\u00e2y ra l\u1ed7i?</p> <p>3.</p> <pre><code>_A__variable = \"Some value\"\n\nclass A(object):\n    def some_func(self):\n        return __variable # (bi\u1ebfn n\u00e0y ch\u01b0a \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o)\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; A().__variable\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'A' object has no attribute '__variable' (\u0110\u1ed1i t\u01b0\u1ee3ng 'A' kh\u00f4ng c\u00f3 thu\u1ed9c t\u00ednh '__variable')\n\n&gt;&gt;&gt; A().some_func()\n'Some value'\n</code></pre></p>"},{"location":"VI/#giai-thich_48","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Name Mangling \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 tr\u00e1nh vi\u1ec7c \u0111\u1ee5ng \u0111\u1ed9 v\u1ec1 t\u00ean (names) gi\u1eefa c\u00e1c kh\u00f4ng gian t\u00ean (namespaces).</li> <li>Trong Python, tr\u00ecnh th\u00f4ng d\u1ecbch thay \u0111\u1ed5i (mangles) t\u00ean c\u1ee7a c\u00e1c th\u00e0nh vi\u00ean c\u1ee7a m\u1ed9t l\u1edbp m\u00e0 b\u1eaft \u0111\u1ea7u v\u1edbi <code>__</code> (hai d\u1ea5u g\u1ea1ch ch\u00e2n li\u1ec1n nhau hay c\u00f2n g\u1ecdi l\u00e0 \"dunder\") v\u00e0 c\u00e1c t\u00ean kh\u00f4ng th\u00fac v\u1edbi nhi\u1ec1u h\u01a1n m\u1ed9t d\u1ea5u g\u1ea1ch ch\u00e2n b\u1eb1ng vi\u1ec7c th\u00eam v\u00e0o <code>_T\u00eanC\u1ee7aL\u1edbp</code> v\u00e0o tr\u01b0\u1edbc \u0111\u00f3</li> <li>V\u00ec v\u1eady, \u0111\u1ec3 truy c\u1eadp v\u00e0o thu\u1ed9c t\u00ednh <code>__honey</code> trong \u0111o\u1ea1n m\u00e3 \u0111\u1ea7u ti\u00ean, b\u1ea1n ph\u1ea3i n\u1ed1i <code>_Yo</code> v\u00e0o ph\u00eda tr\u01b0\u1edbc, \u0111\u1ec3 ng\u0103n vi\u1ec7c xung \u0111\u1ed9t v\u1edbi thu\u1ed9c t\u00ednh c\u00f3 c\u00f9ng t\u00ean trong l\u1edbp kh\u00e1c.</li> <li>Nh\u01b0ng t\u1ea1i sao trong \u0111o\u1ea1n m\u00e3 th\u1ee9 hai m\u1eb7c d\u00f9 \u0111\u00e3 dung t\u00ean \u0111\u00fang nh\u01b0ng ta v\u1eabn kh\u00f4ng truy c\u1eadp \u0111\u01b0\u1ee3c v\u00e0o thu\u1ed9c t\u00ednh? B\u1edfi v\u00ec c\u00e1ch th\u1ee9c mangling n\u00e0y kh\u00f4ng \u00e1p d\u1ee5ng \u0111\u1ed1i v\u1edbi c\u00e1c t\u00ean bi\u1ebfn k\u1ebft th\u00fac v\u1edbi hai d\u1ea5u g\u1ea1ch ch\u00e2n.</li> <li>\u0110o\u1ea1n m\u00e3 th\u1ee9 ba c\u0169ng l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c mangling. T\u00ean <code>__variable</code> trong c\u00e2u l\u1ec7nh <code>return __variable</code> \u0111\u01b0\u1ee3c chuy\u1ec3n th\u00e0nh <code>_A__variable</code>, v\u00e0 l\u1ea1i v\u00f4 t\u00ecnh tr\u00f9ng v\u1edbi t\u00ean bi\u1ebfn \u0111\u01b0\u1ee3c khai b\u00e1o ph\u00eda b\u00ean ngo\u00e0i</li> <li>C\u00f2n n\u1eefa, n\u1ebfu t\u00ean b\u1ecb mangle nhi\u1ec1u h\u01a1n 255 k\u00ed t\u1ef1, vi\u1ec7c c\u1eaft g\u1ecdn t\u00ean s\u1ebd di\u00ean ra.</li> </ul>"},{"location":"VI/#-_2","title":"---","text":""},{"location":"VI/#section-appearances-are-deceptive","title":"Section: Appearances are deceptive!","text":""},{"location":"VI/#skipping-lines","title":"\u25b6 Skipping lines?","text":"<p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; value = 11\n&gt;&gt;&gt; valu\u0435 = 32\n&gt;&gt;&gt; value\n11\n</code></pre></p> <p>C\u00e1i qu\u00e1i g\u00ec th\u1ebf?</p> <p>Ch\u00fa \u00fd: \u0110\u1ec3 l\u00e0m ra k\u1ebft qu\u1ea3 nh\u01b0 tr\u00ean b\u1ea1n ch\u1ec9 c\u1ea7n sao ch\u1ebfp c\u00e1c c\u00e2u l\u1ec7nh v\u00e0 d\u00e1n n\u00f3 v\u00e0o file hay shell.</p>"},{"location":"VI/#giai-thich_49","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch","text":"<p>M\u1ed9t v\u00e0i k\u00ed t\u1ef1 kh\u00f4ng ph\u1ea3i l\u00e0 k\u00ed t\u1ef1 ph\u01b0\u01a1ng t\u00e2y tr\u00f4ng gi\u1ed1ng nh\u01b0 c\u00e1c k\u00ed t\u1ef1 trong b\u1ea3ng ch\u1eef c\u00e1i ti\u1ebfng Anh nh\u01b0ng l\u1ea1i \u0111\u01b0\u1ee3c di\u1ec5n gi\u1ea3i kh\u00e1c b\u1edfi tr\u00ecnh th\u00f4ng idhcj <pre><code>&gt;&gt;&gt; ord('\u0435') # K\u00ed t\u1ef1 cyrillic 'e' (Ye)\n1077\n&gt;&gt;&gt; ord('e') # K\u00ed t\u1ef1 latin 'e', \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong ti\u1ebfng Anh v\u00e0 tr\u00ean c\u00e1c b\u00e0n ph\u00edm chu\u1ea9n\n101\n&gt;&gt;&gt; '\u0435' == 'e'\nFalse\n\n&gt;&gt;&gt; value = 42 # latin e\n&gt;&gt;&gt; valu\u0435 = 23 # cyrillic 'e', Python 2.x interpreter would raise a `SyntaxError` here\n&gt;&gt;&gt; value\n42\n</code></pre></p> <p>H\u00e0m t\u00edch h\u1ee3p s\u1eb5n <code>ord()</code> tr\u1ea3 v\u1ec1 m\u00e3 Unicode c\u1ee7a m\u1ed9t k\u00ed t\u1ef1 code point, v\u00e0 b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y c\u00e1c m\u00e3 kh\u00e1c nhau cho k\u00ed t\u1ef1  Cyrillic 'e' v\u00e0 k\u00ed t\u1ef1 Latin 'e' .</p>"},{"location":"VI/#teleportation","title":"\u25b6 Teleportation","text":"<pre><code># C\u00e0i \u0111\u1eb7t th\u01b0 vi\u00ean numpy s\u1eed d\u1ee5ng `pip install numpy` tr\u01b0\u1edbc\nimport numpy as np\n\ndef energy_send(x):\n    # Kh\u1edfi t\u1ea1o m\u1ed9t m\u1ea3ng numpy\n    np.array([float(x)])\n\ndef energy_receive():\n    # Tr\u1ea3 v\u1ec1 m\u1ed9t mang numpy r\u1ed7ng\n    return np.empty((), dtype=np.float).tolist()\n</code></pre> <p>K\u1ebft qu\u1ea3: <pre><code>&gt;&gt;&gt; energy_send(123.456)\n&gt;&gt;&gt; energy_receive()\n123.456\n</code></pre></p> <p>C\u00f3 g\u00ec m\u1edbi \u1edf \u0111\u00e2y n\u00e0o ?</p>"},{"location":"VI/#giai-thich_50","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":"<ul> <li>Ch\u00fa \u00fd r\u1eb1ng m\u1ea3ng numpy \u0111\u01b0\u1ee3c t\u1ea1o trong h\u00e0m <code>energy_send</code> kh\u00f4ng c\u00f3 \u0111\u01b0\u1ee3c tr\u1ea3 v\u00ec, v\u00ec v\u1eady kh\u00f4ng gian b\u1ed9 nh\u1edb \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng.</li> <li><code>numpy.empty()</code> tr\u1ea3 v\u1ec1 ph\u1ea7n b\u1ed9 nh\u01a1 t\u1ef1 do ti\u1ebfp theo m\u00e0 kh\u00f4ng kh\u1edfi t\u1ea1o l\u1ea1i n\u00f3. Ph\u00e2n b\u1ed9 nh\u1edb nay l\u1ea1i v\u00f4 t\u00ecnh trung v\u1edbi ph\u1ea7n b\u1ed9 nh\u1edb tr\u01b0\u1edbc \u0111\u00f3 \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng (th\u01b0\u1eddng x\u1ea3y ra, nh\u01b0ng kh\u00f4ng ph\u1ea3i l\u00e0 lu\u00f4n lu\u00f4n)</li> </ul>"},{"location":"VI/#well-something-is-fishy","title":"\u25b6 Well, something is fishy...","text":"<pre><code>def square(x):\n    \"\"\"\n    A simple function to calculate the square of a number by addition.\n    \"\"\"\n    sum_so_far = 0\n    for counter in range(x):\n        sum_so_far = sum_so_far + x\n  return sum_so_far\n</code></pre> <p>K\u1ebft qu\u1ea3 (Python 2.x):</p> <pre><code>&gt;&gt;&gt; square(10)\n10\n</code></pre> <p>Sao k\u1ebft qu\u1ea3 l\u1ea1i ra 100?</p> <p>Ch\u00fa \u00fd: N\u1ebfu b\u1ea1n kh\u00f4ng th\u1ef1c hi\u1ec7n l\u1ea1i \u0111\u01b0\u1ee3c v\u00ed d\u1ee5 tr\u00ean, ch\u1ea1y th\u1eed file mixed_tabs_and_spaces.py th\u00f4ng qua shell.</p>"},{"location":"VI/#explanation","title":"\ud83d\udca1 Explanation","text":"<ul> <li>\u0110\u1eebng tr\u1ed9n l\u1eabn tabs v\u00e0 c\u00e1c kho\u1ea3ng tr\u1eafng (spaces)! K\u00ed t\u1ef1 n\u1eb1m ph\u00eda tr\u01b0\u1edbc l\u1ec7nh return l\u00e0 m\u1ed9t \"tab\", v\u00e0 \u0111o\u1ea1n m\u00e3 \u1edf \u0111\u00e2u \u0111\u00f3 trong code \u0111\u01b0\u1ee3c th\u1ee5t l\u00f9i theo b\u1ed9i s\u1ed1 c\u1ee7a \"4 kho\u1ea3ng tr\u1eafng\"</li> <li>This is how Python handles tabs:</li> <li>\u0110\u00e2y l\u00e0 c\u00e1ch Python x\u1eed l\u00fd tabs:   <p>\u0110\u1ea7u ti\u00ean, tabs \u0111\u01b0\u1ee3c thay th\u1ebf (t\u1eeb tr\u00e1i sang ph\u1ea3i) b\u1eb1ng t\u1eeb m\u1ed9t t\u1edbi t\u00e1m kho\u1ea3ng tr\u1eafng \u0111\u1ec3 cho t\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng c\u00e1c k\u00ed t\u1ef1 (bao g\u1ed3m c\u1ea3 k\u00ed t\u1ef1 thay th\u1ebf) c\u00f3 gi\u00e1 tr\u1ecb l\u00e0 b\u1ed9i s\u1ed1 c\u1ee7a t\u00e1m &lt;...&gt;</p> </li> <li>Do \u0111\u00f3 \"tab\" n\u1eb1m \u1edf d\u00f2ng cu\u1ed1i c\u1ee7a h\u00e0m <code>square</code> \u0111\u01b0\u1ee3c thay th\u1ebf b\u1eb1ng t\u00e1m kho\u1ea3ng tr\u1eafng, v\u00e0 n\u00f3 \u0111i v\u00e0o n\u1eb1m trong v\u00f2ng l\u1eb7p.</li> <li>Python 3 s\u1ebd v\u0103ng ra m\u1ed9t l\u1ed7i khi n\u00f3 g\u1eb7p ph\u1ea3i c\u00e1c l\u1ed7i li\u00ean quan t\u1edbi tabs v\u00e0 kho\u1ea3ng tr\u1eafng.     K\u1ebft qu\u1ea3 (Python 3.x): <pre><code>TabError: inconsistent use of tabs and spaces in indentation\n</code></pre></li> </ul>"},{"location":"VI/#-_3","title":"---","text":""},{"location":"VI/#section-miscellaneous","title":"Section: Miscellaneous","text":""},{"location":"VI/#chay-nhanh-hon","title":"\u25b6 <code>+=</code> ch\u1ea1y nhanh h\u01a1n","text":"<pre><code># S\u1eed d\u1ee5ng \"+\" \u0111\u1ec3 c\u1ed9ng 3 strings:\n&gt;&gt;&gt; timeit.timeit(\"s1 = s1 + s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100)\n0.25748300552368164\n# S\u1eed d\u1ee5ng \"+=\" \u0111\u1ec3 c\u1ed9ng 3 strings:\n&gt;&gt;&gt; timeit.timeit(\"s1 += s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100)\n0.012188911437988281\n</code></pre>"},{"location":"VI/#giai-thich_51","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch:","text":""},{"location":"VI/#nhanh-hon-khi-noi-nhieu-hon-2-strings-boi-vi-string-au-tien-vi-du-s1-trong-s1-s2-s3-khong-bi-huy-i-khi-tao-ra-chuoi-ket-qua-cuoi-cung","title":"+ <code>+=</code> nhanh h\u01a1n <code>+</code> khi n\u1ed1i nhi\u1ec1u h\u01a1n 2 strings b\u1edfi v\u00ec string \u0111\u1ea7u ti\u00ean (v\u00ed d\u1ee5, <code>s1</code> trong <code>s1 += s2 + s3</code>) kh\u00f4ng b\u1ecb hu\u1ef7 \u0111i khi t\u1ea1o ra chu\u1ed7i k\u1ebft qu\u1ea3 cu\u1ed1i c\u00f9ng","text":""},{"location":"VI/#lets-make-a-giant-string","title":"\u25b6 Let's make a giant string!","text":"<pre><code>def add_string_with_plus(iters):\n    s = \"\"\n    for i in range(iters):\n        s += \"xyz\"\n    assert len(s) == 3*iters\n\ndef add_bytes_with_plus(iters):\n    s = b\"\"\n    for i in range(iters):\n        s += b\"xyz\"\n    assert len(s) == 3*iters\n\ndef add_string_with_format(iters):\n    fs = \"{}\"*iters\n    s = fs.format(*([\"xyz\"]*iters))\n    assert len(s) == 3*iters\n\ndef add_string_with_join(iters):\n    l = []\n    for i in range(iters):\n        l.append(\"xyz\")\n    s = \"\".join(l)\n    assert len(s) == 3*iters\n\ndef convert_list_to_string(l, iters):\n    s = \"\".join(l)\n    assert len(s) == 3*iters\n</code></pre> <p>K\u1ebft qu\u1ea3:</p> <pre><code># Ch\u1ea1y c\u00e1c \u0111o\u1ea1n l\u1ec7nh trong ipython shell s\u1eed dung %timeit \u0111\u1ec3 c\u00f3 k\u1ebft qu\u1ea3 d\u1ec5 \u0111\u1ecdc h\u01a1n\n# B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng module timeit trong python shell b\u00ecnh th\u01b0\u1eddng, nh\u01b0 v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y\n# timeit.timeit('add_string_with_plus(10000)', number=1000, globals=globals())\n\n&gt;&gt;&gt; NUM_ITERS = 1000\n&gt;&gt;&gt; %timeit -n1000 add_string_with_plus(NUM_ITERS)\n124 \u00b5s \u00b1 4.73 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS)\n211 \u00b5s \u00b1 10.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_format(NUM_ITERS)\n61 \u00b5s \u00b1 2.18 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_join(NUM_ITERS)\n117 \u00b5s \u00b1 3.21 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; l = [\"xyz\"]*NUM_ITERS\n&gt;&gt;&gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS)\n10.1 \u00b5s \u00b1 1.06 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre> <p>B\u00e2y gi\u1edd t\u0103ng s\u1ed1 v\u00f2ng l\u1eb7p l\u00ean 10 l\u1ea7n <pre><code>&gt;&gt;&gt; NUM_ITERS = 10000\n&gt;&gt;&gt; %timeit -n1000 add_string_with_plus(NUM_ITERS) # Linear increase in execution time\n1.26 ms \u00b1 76.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS) # Quadratic increase\n6.82 ms \u00b1 134 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_format(NUM_ITERS) # Linear increase\n645 \u00b5s \u00b1 24.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n1000 add_string_with_join(NUM_ITERS) # Linear increase\n1.17 ms \u00b1 7.25 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; l = [\"xyz\"]*NUM_ITERS\n&gt;&gt;&gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS) # Linear increase\n86.3 \u00b5s \u00b1 2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre></p>"},{"location":"VI/#giai-thich_52","title":"\ud83d\udca1 Gi\u1ea3i th\u00edch","text":"<ul> <li>B\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecdc th\u00eam v\u1ec1 [timeit] (https://docs.python.org/3/library/timeit.html) or %timeit. Module n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111o th\u1eddi gian ch\u1ea1y c\u1ee7a c\u00e1c \u0111o\u1ea1n code.</li> <li>\u0110\u1eebng d\u00f9ng <code>+</code> \u0111\u1ec3 sinh ra c\u00e1c strings d\u00e0i. Trong Python, <code>str</code> kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i \u0111\u01b0\u1ee3c gi\u00e1 tr\u1ecb, do \u0111\u00f3 c\u00e1c strings ph\u00eda b\u00ean tr\u00e1i v\u00e0 ph\u1ea3i ph\u1ea3i \u0111\u01b0\u1ee3c ch\u00e9p v\u00e0o string m\u1edbi cho m\u1ed7i c\u1eb7p gh\u00e9p string. N\u1ebfu b\u1ea1n n\u1ed1i strings c\u00f3 \u0111\u1ed9 d\u00e0i l\u00e0 10, b\u1ea1n s\u1ebd ch\u00e9p + ((10+10)+10) + (((10+10)+10)+10) = 90 k\u00ed t\u1ef1 thay v\u00ec ch\u1ec9 40 k\u00ed t\u1ef1. S\u1ebd t\u1ec7 h\u01a1n n\u1eefa khi s\u1ed1 l\u01b0\u1ee3ng v\u00e0 k\u00edch th\u01b0\u1edbc c\u1ee7a string t\u0103ng (nh\u01b0 b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y \u1edf h\u00e0m <code>add_bytes_with_plus</code> )</li> <li>Do \u0111\u00f3, b\u00ean n\u00ean d\u00f9ng <code>.format.</code> hay <code>%</code> (m\u1eb7c d\u00f9 c\u00e1c c\u00e1ch s\u1eed d\u1ee5ng n\u00e0y s\u1ebd ch\u1eadm h\u01a1n <code>+</code> \u0111\u1ed1i v\u1edbi c\u00e1c strings nh\u1ecf )</li> <li>Hay t\u1ed1t h\u01a1n n\u1eefa, n\u1ebfu b\u1ea1n \u0111\u00e3 c\u00f3 s\u1eb5n nh\u1eefng n\u1ed9i dung \u1edf d\u1ea1ng m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 l\u1eb7p, khi \u0111\u00f3 s\u1eed d\u1ee5ng <code>''.join(iterable_object)</code> s\u1ebd nhanh h\u01a1n. </li> <li> <p>Kh\u00f4ng gi\u1ed1ng nh\u01b0 <code>add_bytes_with_plus</code> v\u1edbi c\u00e1c t\u1ed1i \u01b0u \u0111\u1ebfn t\u1eeb <code>+=</code> nh\u01b0 \u0111\u00e3 th\u1ea3o lu\u1eadn \u1edf v\u00ed d\u1ee5 tr\u01b0\u1edbc \u0111\u00f3, <code>add_string_with_plus</code> kh\u00f4ng cho th\u1ea5y s\u1ef1 t\u0103ng c\u1ea5p b\u1eadc hai v\u1ec1 th\u1eddi gian th\u01b0ucj thi. S\u1eed d\u1ee5ng <code>s = s + \"x\" + \"y\" + \"z\"</code> thay v\u00ec <code>s += \"xyz\"</code> s\u1ebd l\u00e0m t\u0103ng th\u1eddi gian ch\u1ea1y l\u00ean hai l\u1ea7n..   <pre><code>def add_string_with_plus(iters):\n    s = \"\"\n    for i in range(iters):\n        s = s + \"x\" + \"y\" + \"z\"\n    assert len(s) == 3*iters\n\n&gt;&gt;&gt; %timeit -n100 add_string_with_plus(1000)\n388 \u00b5s \u00b1 22.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit -n100 add_string_with_plus(10000) # Quadratic increase in execution time\n9 ms \u00b1 298 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n</code></pre></p> </li> <li> <p>C\u00f3 nhi\u1ec1u c\u00e1ch \u0111\u1ec3 \u0111\u1ecbnh d\u1ea1ng v\u00e0 t\u1ea1o m\u1ed9t string kh\u1ed5ng l\u1ed3, tr\u00e1i ng\u01b0\u1ee3c v\u1edbi \u0111i\u1ec1u trong Zen of Python, nh\u01b0 sau     &gt; Ch\u1ec9 n\u00ean c\u00f3 m\u1ed9t -- v\u00e0 t\u1ed1t h\u01a1n l\u00e0 ch\u1ec9 m\u1ed9t -- c\u00e1ch r\u00f5 r\u00e0ng \u0111\u1ec3 l\u00e0m \u0111i\u1ec1u n\u00e0y.</p> </li> </ul>"},{"location":"VI/#minor-ones","title":"\u25b6 Minor Ones *","text":"<ul> <li> <p><code>join()</code> l\u00e0 m\u1ed9t h\u00e0m d\u00e0nh cho string thay v\u00ec d\u00e0nh cho list. (n\u1ebfu nh\u00ecn v\u00e0o th\u00ec ta c\u00f3 th\u1ec3 th\u1ea5y n\u00f3 h\u01a1i ng\u01b0\u1ee3c ng\u01b0\u1ee3c)   \ud83d\udca1 Gi\u1ea3i th\u00edch: N\u1ebfu <code>join()</code> l\u00e0 m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c ho\u1ea1t \u0111\u1ed9ng v\u1edbi m\u1ed9t string, khi \u0111\u00f3 n\u00f3 c\u0169ng c\u00f3 th\u1ec3 l\u00e0m vi\u1ec7c \u0111\u01b0\u1ee3c v\u1edbi b\u1ea5t c\u1ee9 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 l\u1eb7p kh\u00e1c (nh\u01b0 list, tuple, iterators). N\u1ebfu n\u00f3 l\u00e0 m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c ho\u1ea1t \u0111\u1ed9ng \u0111\u01b0\u1ee3c tr\u00ean list, th\u00ec n\u00f3 ph\u1ea3i \u0111\u01b0\u1ee3c tri\u1ec3n khai m\u1ed9t c\u00e1ch t\u00e1ch bi\u1ec7t v\u1edbi m\u1ecdi ki\u1ec3u. C\u00f2n n\u1eefa, s\u1ebd l\u00e0 kh\u00f4ng h\u1ee3p l\u00fd \u0111\u1ec3 \u0111\u1eb7t m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c ch\u1ec9 d\u00e0nh ri\u00eang cho string l\u00ean m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng t\u1ed5ng qu\u00e1t <code>list</code>.</p> </li> <li> <p>C\u00e1c c\u00e2u l\u1ec7nh d\u01b0\u1edbi \u0111\u00e2y nh\u00ecn c\u00f3 v\u1ebb l\u1ea1, nh\u01b0ng \u0111\u00fang v\u1ec1 ng\u1eef ngh\u0129a:</p> </li> <li><code>[] = ()</code> v\u1eabn \u0111\u00fang v\u1ec1 m\u1eb7t ng\u1eef ngh\u0129a (Gi\u1ea3i n\u00e9n m\u1ed9t <code>tuple</code> r\u1ed7ng s\u1ebd t\u1ea1o ra m\u1ed9t <code>list</code> r\u1ed7ng)</li> <li><code>'a'[0][0][0][0][0]</code> c\u0169ng \u0111\u00fang v\u1ec1 ng\u1eef ngh\u0129a b\u1edfi c\u00e1c strings l\u00e0 c\u00e1c chu\u1ed7i (c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 l\u1eb7p h\u1ed7 tr\u1ee3 truy c\u1eadp v\u00e0 c\u00e1c ph\u1ea7n t\u1eed n\u00f3 ch\u1ee9a s\u1eed d\u1ee5ng c\u00e1c ch\u1ec9 s\u1ed1 s\u1ed1 nguy\u00ean) trong Python.</li> <li> <p>C\u1ea3 <code>3 --0-- 5 == 8</code> v\u00e0 <code>--5 == 5</code> \u0111\u1ec1u \u0111\u00fang v\u1ec1 ng\u1eef ngh\u0129a v\u00e0 cho ra k\u1ebft qu\u1ea3 l\u00e0 <code>True</code>.</p> </li> <li> <p>V\u1edbi <code>a</code> l\u00e0 m\u1ed9t s\u1ed1, <code>++a</code> v\u00e0 <code>--a</code> \u0111\u1ec1u l\u00e0 c\u00e1c c\u00e2u l\u1ec7nh Python h\u1ee3p l\u1ec7 nh\u01b0ng ch\u00fang kh\u00f4ng ch\u1ea1y gi\u1ed1ng nh\u01b0 c\u00e1c c\u00e2u l\u1ec7nh t\u01b0\u01a1ng t\u1ef1 trong c\u00e1c ng\u00f4n ng\u1eef kh\u00e1c nh\u01b0 C, C++, hay Java.   <pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; a\n5\n&gt;&gt;&gt; ++a\n5\n&gt;&gt;&gt; --a\n5\n</code></pre></p> </li> </ul> <p>\ud83d\udca1 Gi\u1ea3i th\u00edch:   + Trong Python, kh\u00f4ng c\u00f3 ph\u00e9p <code>++</code>. Th\u1ef1c ra n\u00f3 ch\u1ec9 l\u00e0 hai ph\u00e9p t\u00ednh  <code>+</code>.   + <code>++a</code> \u0111\u01b0\u1ee3c ph\u00e2n t\u00edch nh\u01b0  <code>+(+a)</code> v\u00e0 \u0111\u01b0\u1ee3c d\u1ecbch ra l\u00e0 <code>a</code>. T\u01b0\u01a1ng t\u1ef1 l\u00e0 <code>--a</code>.   + B\u00e0i \u0111\u0103ng tr\u00ean StackOverflow th\u1ea3o lu\u1eadn l\u00fd do t\u1ea1i sao kh\u00f4ng c\u00f3 c\u00e1c ph\u00e9p t\u00ednh t\u0103ng v\u00e0 gi\u1ea3m trong Python.</p> <ul> <li> <p>B\u1ea1n ph\u1ea3i bi\u1ebft v\u1ec1 k\u00ed hi\u1ec7u con h\u00e0 m\u00e3 trong Python. Nh\u01b0ng b\u1ea1n c\u00f3 bao gi\u1edd nghe t\u1edbi k\u00ed hi\u1ec7u x\u00e2m l\u01b0\u1ee3c kh\u00f4ng gian?   <pre><code>&gt;&gt;&gt; a = 42\n&gt;&gt;&gt; a -=- 1\n&gt;&gt;&gt; a\n43\n</code></pre>   N\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nh\u01b0 ph\u00e9p t\u00ednh t\u0103ng, nh\u01b0 v\u1edbi m\u1ed9t v\u00ed d\u1ee5 kh\u00e1c sau \u0111\u00e2y   <pre><code>&gt;&gt;&gt; a +=+ 1\n&gt;&gt;&gt; a\n&gt;&gt;&gt; 44\n</code></pre> \ud83d\udca1 Gi\u1ea3i th\u00edch: Tr\u00f2 ch\u01a1i kh\u0103m n\u00e0y xu\u1ea5t ph\u00e1t t\u1eeb Raymond Hettinger's tweet. K\u00ed hi\u1ec7u x\u00e2m l\u01b0\u1ee3c kh\u00f4ng gian ch\u1ec9 \u0111\u01b0\u1ee3c \u0111\u1ecbnh d\u1ea1ng kh\u00e1c \u0111i l\u00e0 <code>a -= (-1)</code>. T\u01b0\u01a1ng t\u1ef1 v\u1edbi <code>a = a - (- 1)</code>. T\u01b0\u01a1ng t\u1ef1 v\u1edbi tr\u01b0\u1eddng h\u1ee3p <code>a += (+ 1)</code>.</p> </li> <li> <p>Python c\u00f3 m\u1ed9t t\u00e0i li\u1ec7u v\u1ec1 ph\u00e9p h\u00e0m \u00fd \u0111\u1ea3o ng\u01b0\u1ee3c. </p> <pre><code>&gt;&gt;&gt; False ** False == True\nTrue\n&gt;&gt;&gt; False ** True == False\nTrue\n&gt;&gt;&gt; True ** False == True\nTrue\n&gt;&gt;&gt; True ** True == True\nTrue\n</code></pre> <p>\ud83d\udca1 Gi\u1ea3i th\u00edch: N\u1ebfu b\u1ea1n thay th\u1ebf <code>False</code> v\u00e0 <code>True</code> b\u1eb1ng 0 v\u00e0 1 v\u00e0 sau \u0111\u00f3 l\u00e0m c\u00e1c ph\u00e9p to\u00e1n, b\u1ea3ng ch\u00e2n tr\u1ecb t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi ph\u00e9p \u00e1m ch\u1ec9 ng\u01b0\u1ee3c. (Ngu\u1ed3n)</p> </li> <li> <p>Do ch\u00fang ta \u0111ang b\u00e0n v\u1ec1 c\u00e1c ph\u00e9p t\u00ednh, c\u0169ng c\u00f3 ph\u00e9p <code>@</code> d\u00e0nh cho vi\u1ec7c nh\u00e2n ma tr\u1eadn (\u0111\u1eebng lo, \u0111\u00e2y l\u00e0 ph\u00e9p t\u00ednh th\u1ef1c s\u1ef1)      <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.array([2, 2, 2]) @ np.array([7, 8, 8])\n46\n</code></pre></p> <p>\ud83d\udca1 Gi\u1ea3i th\u00edch: Ph\u00e9p t\u00ednh <code>@</code> \u0111\u01b0\u1ee3c th\u00eam v\u00e0o Python 3.5 v\u1edbi s\u1ef1 ch\u00fa \u00fd d\u00e0nh cho c\u1ed9ng \u0111\u1ed3ng khoa h\u1ecdc. B\u1ea5t c\u1ee9 \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0o c\u0169ng c\u00f3 th\u1ec3 ghi \u0111\u00e8 l\u00ean ph\u01b0\u01a1ng th\u1ee9c ma thu\u1eadt (magic method)  <code>__matmul__</code> \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a h\u00e0nh vi cho ph\u00e9p t\u00ednh..</p> </li> <li> <p>T\u1eeb Python 3.8 tr\u1edf \u0111i b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00fa ph\u00e1p f-string nh\u01b0 <code>f'{some_var=}</code> \u0111\u1ec3 debugging cho d\u1ec5. V\u00ed d\u1ee5     <pre><code>&gt;&gt;&gt; some_string = \"wtfpython\"\n&gt;&gt;&gt; f'{some_string=}'\n\"some_string='wtfpython'\"\n</code></pre></p> </li> <li> <p>Python s\u1eed d\u1ee5ng 2 bytes cho l\u01b0u tr\u1eef bi\u1ebfn c\u1ee5 b\u1ed9 trong c\u00e1c h\u00e0m. V\u1ec1 m\u1eb7t l\u00fd thuy\u1ebft, \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 ch\u1ec9 c\u00f3 65536 bi\u1ebfn c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong m\u1ed9t h\u00e0m. Tuy nhi\u00ean, Python c\u00f3 m\u1ed9t gi\u1ea3i ph\u00e1p kh\u00e9o l\u00e9o, t\u00edch h\u1ee3p s\u1eb5n \u0111\u1ec3 l\u01b0u nhi\u1ec1u h\u01a1n 2^16 t\u00ean bi\u1ebfn. \u0110o\u1ea1n code ph\u00eda d\u01b0\u1edbi cho ta th\u1ea5y \u0111i\u1ec1u g\u00ec x\u1ea3y ra trong stack khi c\u00f3 nhi\u1ec1u h\u01a1n 65536 bi\u1ebfn c\u1ee5c b\u1ed9 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a (C\u1ea3nh b\u00e1o: \u0111o\u1ea1n m\u00e3 n\u00e0y in ra 2^18 d\u00f2ng v\u0103n b\u1ea3n, h\u1ea3y chu\u1ea9n b\u1ecb!):</p> <p>```py  import dis exec(\"\"\" def f():     \"\"\" + \"\"\"     \"\"\".join([\"X\" + str(x) + \"=\" + str(x) for x in range(65539)]))</p> <p>f()</p> <p>print(dis.dis(f)) ```</p> </li> <li> <p>Nhi\u1ec1u Python threads s\u1ebd kh\u00f4ng ch\u1ea1y Python code \u0111\u1ed3ng th\u1eddi. \u00f3 v\u1ebb t\u1ef1 nhi\u00ean khi sinh ra m\u1ed9t s\u1ed1 lu\u1ed3ng v\u00e0 \u0111\u1ec3 n\u00f3 ch\u1ea1y code Python c\u1ee7a b\u1ea1n \u0111\u1ed3ng th\u1eddi, nh\u01b0ng b\u1edfi v\u00ec Kho\u00e1 tr\u00ecnh th\u00f4ng d\u1ecbch to\u00e0n c\u1ee5c trong Python, t\u1ea5t c\u1ea3 nh\u1eefng g\u00ec b\u1ea1n l\u00e0m l\u00e0 l\u00e0m cho c\u00e1c lu\u1ed3ng c\u1ee7a b\u1ea1n th\u1ef1c thi tr\u00ean c\u00f9ng m\u1ed9t core theo th\u1ee9 t\u1ef1. C\u00e1c lu\u1ed3ng Python r\u1ea5t t\u1ed1t cho c\u00e1c t\u00e1c v\u1ecb li\u00ean quan t\u1edbi IO, nh\u01b0ng \u0111\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c vi\u1ec7c x\u1eed l\u00fd song song trong Python cho c\u00e1c t\u00e1c v\u1ee5 g\u1eafn v\u1edbi CPY, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng module multiprocessing </p> <pre><code># File some_file.py\nimport time\n\nprint(\"wtfpython\", end=\"_\")\ntime.sleep(3)\n</code></pre> <p>\u0110o\u1ea1n m\u00e3 tr\u00ean in ra <code>wtfpython</code> sau 3 seconds b\u1edfi v\u00ec tham s\u1ed1 <code>end</code> b\u1ed9 \u0111\u1ec7m k\u1ebft qu\u1ea3 \u0111\u01b0\u1ee3c d\u1ecdn s\u1ea1ch sau khi g\u0103p <code>\\n</code> ho\u1eb7c khi ch\u01b0\u01a1ng tr\u00ecnh k\u1ebft th\u00fac th\u1ef1c thi. B\u1ea1n c\u00f3 th\u1ec3 b\u1eaft d\u1ecdn s\u1ea1ch b\u1ed9 \u0111\u1ec7m th\u00f4ng qua vi\u1ec7c g\u1eedi v\u00e0o tham s\u1ed1 <code>flush=True</code>..</p> </li> <li> <p>C\u1eaft danh s\u00e1ch v\u1edbi c\u00e1c ch\u1ec9 s\u1ed1 n\u1eb1m ngo\u00e0i ph\u1ea1m v\u1ecb s\u1ebd kh\u00f4ng tr\u1ea3 v\u1ec1 l\u1ed7i</p> </li> <li><pre><code>&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; some_list[111:]\n[]\n</code></pre></li> <li> <p>C\u1eaft m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 l\u1eb7p kh\u00f4ng ph\u1ea3i l\u00fac n\u00e0o c\u0169ng t\u1ea1o ra m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng m\u1edbi. V\u00ed d\u1ee5,     <pre><code>&gt;&gt;&gt; some_str = \"wtfpython\"\n&gt;&gt;&gt; some_list = ['w', 't', 'f', 'p', 'y', 't', 'h', 'o', 'n']\n&gt;&gt;&gt; some_list is some_list[:] # False l\u00e0 b\u1edfi v\u00ec m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng m\u1edbi \u0111\u01b0\u1ee3c t\u1ea1o\nFalse\n&gt;&gt;&gt; some_str is some_str[:] # True l\u00e0 b\u1edfi v\u00ec c\u00e1c strings kh\u00f4ng th\u1ec3 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb, do v\u1eady kh\u00f4ng t\u1ea1o ra m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng m\u1edbi khi c\u1eaft.\nTrue\n</code></pre></p> </li> <li> <p><code>int('\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669')</code> tr\u1ea3 v\u1ec1 <code>123456789</code> trong Python 3. Trong Python, c\u00e1c k\u00ed t\u1ef1 s\u1ed1 th\u1eadp ph\u00e2n bao g\u1ed3m c\u00e1c k\u00ed t\u1ef1 s\u1ed1, v\u00e0 t\u1ea5t c\u1ea3 c\u00e1c k\u00ed t\u1ef1 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 t\u1ea1o n\u00ean c\u00f3 s\u1ed1 c\u01a1 s\u1ed1 th\u1eadp ph\u00e2n, v\u00ed d\u1ee5. U+0660, ARABIC-INDIC DIGIT ZERO. \u0110\u1eady l\u00e0  m\u1ed9t c\u00e2u chuy\u1ec7n h\u1ea5p d\u00e2n li\u00ean quan </p> </li> <li> <p>B\u1ea1n c\u00f3 th\u1ec3 ng\u0103n c\u00e1ch c\u00e1c s\u1ed1 \u0111\u01a1n v\u1edbi d\u1ea5u g\u1ea1ch ch\u00e2n (\u0111\u1ec3 \u0111\u1ecdc d\u1ec5 h\u01a1n), t\u1eeb Python 3 tr\u1edf \u0111i.</p> <pre><code>&gt;&gt;&gt; six_million = 6_000_000\n&gt;&gt;&gt; six_million\n6000000\n&gt;&gt;&gt; hex_address = 0xF00D_CAFE\n&gt;&gt;&gt; hex_address\n4027435774\n</code></pre> </li> <li> <p><code>'abc'.count('') == 4</code>. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t c\u00e1ch tri\u1ec3n khai g\u1ea7n t\u01b0\u01a1ng t\u1ef1 v\u1edbi ph\u01b0\u01a1ng th\u1ee9c <code>count</code>, v\u00ed d\u1ee5 n\u00e0y s\u1ebd l\u00e0m m\u1ecdi th\u1ee9 r\u00f5 r\u00e0ng h\u01a1n   <pre><code>def count(s, sub):\n    result = 0\n    for i in range(len(s) + 1 - len(sub)):\n        result += (s[i:i + len(sub)] == sub)\n    return result\n</code></pre>   C\u01b0 x\u1eed c\u1ee7a h\u00e0m tr\u00ean l\u00e0 do vi\u1ec7c so kh\u1edbp c\u00e1c chu\u1ed7i con (substring) r\u1ed7ng v\u1edbi c\u00e1c l\u00e1t c\u1eaft c\u00f3 \u0111\u1ed9 d\u00e0i b\u1eb1ng 0 trong string g\u1ed1c. </p> </li> </ul>"},{"location":"VI/#ong-gop","title":"\u0110\u00f3ng g\u00f3p","text":"<p>B\u1ea1n c\u00f3 th\u1ec3 \u0111\u00f3ng g\u00f3p cho wtfpython theo nh\u1eefng c\u00e1ch d\u01b0\u1edbi \u0111\u00e2y</p> <ul> <li>Cho ch\u00fang t\u00f4i bi\u1ebft nh\u1eefng v\u00ed d\u1ee5 m\u1edbi</li> <li>D\u1ecbch wtfpython sang c\u00e1c ng\u00f4n gnuwx kh\u00e1c (Xem t\u1ea1i issues labeled translation)</li> <li>Minor corrections like pointing out outdated snippets, typos, formatting errors, etc.</li> <li>S\u1eeda c\u00e1c l\u1ed7i ph\u1ee5 kh\u00e1c nh\u01b0 c\u00e1c \u0111o\u1ea1n m\u00e3 b\u1ecb l\u1ed7i th\u1eddi, c\u00e1c l\u1ed7i c\u00fa ph\u00e1p, l\u1ed7i \u0111\u1ecbnh d\u1ea1ng, v\u00e2n v\u00e2n.</li> <li>Identifying gaps (things like inadequate explanation, redundant examples, etc.)</li> <li>T\u00ecm nh\u1eefng thi\u1ebfu s\u00f3t (v\u00ed d\u1ee5 nh\u01b0 gi\u1ea3i th\u00edch ch\u01b0a c\u1eb7n k\u1ebd, c\u00e1c v\u00ed d\u1ee5 kh\u00f4ng c\u1ea7n thi\u1ebft, v\u00e2n v\u00e2n.)</li> <li>B\u1ea5t c\u1ee9 \u0111\u1ec1 xu\u1ea5t s\u00e1ng t\u1ea1o n\u00e0o c\u0169ng l\u00e0m cho wtfpython th\u00fa v\u1ecb v\u00e0 h\u1eefu d\u1ee5ng h\u01a1n</li> </ul> <p>Please see CONTRIBUTING.md for more details. Feel free to create a new issue to discuss things.</p> <p>PS: Please don't reach out with backlinking requests, no links will be added unless they're highly relevant to the project.</p>"},{"location":"VI/#loi-cam-on","title":"L\u1eddi c\u00e1m \u01a1n","text":"<p>\u00dd t\u01b0\u1edfng v\u00e0 thi\u1ebft k\u1ebf c\u1ee7a wtfpython l\u1ea5y c\u1ea3m h\u1ee9ng t\u1eeb d\u1ef1 \u00e1n tuy\u1ec7t v\u1eddi c\u1ee7a Denys Dovhan's wtfjs. C\u00f9ng v\u1edbi \u0111\u00f3 l\u00e0 s\u1ef1 h\u1ed7 tr\u1ee3 tuy\u1ec7t v\u1eddi c\u1ee7a nh\u1eefng ng\u01b0\u1eddi y\u00eau Python, gi\u00fap cho wtfpython c\u00f3 \u0111\u01b0\u1ee3c nh\u01b0 ng\u00e0y h\u00f4m nay.</p>"},{"location":"VI/#mot-vai-lien-ket-hay-khac","title":"M\u1ed9t v\u00e0i li\u00ean k\u1ebft hay kh\u00e1c!","text":"<ul> <li>https://www.youtube.com/watch?v=sH4XF6pKKmk</li> <li>https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python</li> <li>https://sopython.com/wiki/Common_Gotchas_In_Python</li> <li>https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines</li> <li>https://stackoverflow.com/questions/1011431/common-pitfalls-in-python</li> <li>https://www.python.org/doc/humor/</li> <li>https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator</li> <li>https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65</li> <li>https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;type=Issues</li> <li>WFTPython discussion threads on Hacker News and Reddit.</li> </ul>"},{"location":"VI/#license","title":"\ud83c\udf93 License","text":"<p>\u00a9 Satwik Kansal</p>"},{"location":"VI/#chia-se-cho-ban-be","title":"Chia s\u1ebb cho b\u1ea1n b\u00e8!","text":"<p>N\u1ebfu b\u1ea1n th\u00edch wtfpython, b\u1ea1n c\u00f3 th\u1ec3 chia s\u1ebb c\u00e1c li\u00ean k\u1ebft d\u01b0\u1edbi \u0111\u00e2y cho b\u1ea1n b\u00e8,</p> <p>Twitter | Linkedin | Facebook </p>"},{"location":"VI/#ban-co-can-ban-pdf-cua-wtf-hay-khong","title":"B\u1ea1n c\u00f3 c\u1ea7n b\u1ea3n pdf c\u1ee7a wtf hay kh\u00f4ng?","text":"<p>I've received a few requests for the pdf (and epub) version of wtfpython. You can add your details here to get them as soon as they are finished.</p> <p>T\u00f4i nh\u1eadn \u0111\u01b0\u1ee3c m\u1ed9t v\u00e0i y\u00eau c\u1ea7u cho phi\u00ean b\u1ea3n pdf (v\u00e0 epub) c\u1ee7a wtfpython. N\u1ebfu b\u1ea1n mu\u1ed1n, b\u1ea1n c\u00f3 th\u1ec3 th\u00eam th\u00f4ng tin chi ti\u1ebft c\u1ee7a m\u00ecnh \u1edf \u0111\u00e2y here \u0111\u1ec3 c\u00f3 phi\u00ean b\u1ea3n pdf s\u1edbm nh\u1ea5t.</p> <p>That's all folks! For upcoming content like this, you can add your email here.</p> <p>PS: On a sidenote, consider donating a dollar to plant a tree.</p>"}]}